{"from": {"secList": ["sec-conditional-operator-static-semantics-assignmenttargettype", "sec-additive-operators-static-semantics-assignmenttargettype", "sec-rawbytestonumeric", "sec-performeval", "sec-getbase", "sec-runtime-semantics-forinofheadevaluation", "sec-evaluatecall", "sec-ordinaryobjectcreate", "sec-properties-of-the-boolean-prototype-object", "sec-function-environment-records", "sec-ispropertyreference", "sec-module-environment-records", "sec-unary-operators-static-semantics-assignmenttargettype", "sec-property-attributes", "sec-numeric-types-number-tostring", "sec-keywords-and-reserved-words", "sec-relational-operators-static-semantics-assignmenttargettype", "sec-static-semantics-static-semantics-assignmenttargettype", "sec-isstrictreference", "sec-grouping-operator-static-semantics-assignmenttargettype", "sec-numerictorawbytes", "sec-createlistiteratorRecord", "sec-toprimitive", "sec-runtime-semantics-caseclauseisselected", "sec-environment-record-operations", "sec-static-semantics-template-early-errors", "sec-equality-operators-static-semantics-assignmenttargettype", "sec-getreferencedname", "sec-update-expressions-static-semantics-assignmenttargettype", "sec-numeric-types-number-multiply", "sec-validateintegertypedarray", "sec-abstract-operations-for-the-memory-model", "sec-assignment-operators-static-semantics-assignmenttargettype", "sec-bitwise-shift-operators-static-semantics-assignmenttargettype", "sec-properties-of-the-string-prototype-object", "sec-properties-of-the-number-prototype-object", "sec-InnerModuleLinking", "sec-hasprimitivebase", "sec-stringtocodepoints", "sec-utf16decodesurrogatepair", "sec-exp-operator-static-semantics-assignmenttargettype", "sec-issuperreference", "sec-samevaluenonnumeric", "sec-moduledeclarationlinking", "sec-jobs", "sec-environment-records", "sec-numeric-types-number-divide", "sec-ordinaryfunctioncreate", "sec-properties-of-the-date-prototype-object", "sec-isunresolvablereference", "sec-typedarray-objects", "sec-multiplicative-operators-static-semantics-assignmenttargettype", "sec-evaluate-property-access-with-expression-key", "sec-identifiers-static-semantics-assignmenttargettype", "sec-numeric-types-number-exponentiate", "sec-properties-of-the-symbol-prototype-object", "sec-expanded-years", "sec-runtime-semantics-arrayaccumulation", "sec-evaluate-property-access-with-identifier-key", "sec-global-environment-records", "sec-binary-bitwise-operators-static-semantics-assignmenttargettype", "sec-comma-operator-static-semantics-assignmenttargettype", "sec-numeric-types-number-remainder", "sec-newpromisereactionjob", "sec-runtime-semantics-unicodematchproperty-p", "sec-binary-logical-operators-static-semantics-assignmenttargettype", "sec-newpromiseresolvethenablejob", "sec-runtime-semantics-unicodematchpropertyvalue-p-v", "sec-keyed-collections", "sec-properties-of-the-bigint-prototype-object", "sec-semantics-static-semantics-assignmenttargettype", "sec-codepointstostring", "sec-numeric-types-number-add", "sec-codepointtoutf16codeunits", "sec-enumerableownpropertynames", "sec-listiteratornext-functions"], "secData": {"sec-conditional-operator-static-semantics-assignmenttargettype": {"num": "12.14.2", "title": "#sec-conditional-operator-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-conditional-operator-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-conditional-operator-static-semantics-assignmenttargettype\">\n      <span id=\"sec-conditional-operator-static-semantics-isvalidsimpleassignmenttarget\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-conditional-operator-static-semantics-assignmenttargettype\">#sec-conditional-operator-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n      <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"ConditionalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ConditionalExpression\">ConditionalExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"778bcb5c\"><emu-nt><a href=\"#prod-ShortCircuitExpression\">ShortCircuitExpression</a></emu-nt><emu-t>?</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-t>:</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>invalid</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-additive-operators-static-semantics-assignmenttargettype": {"num": "12.8.2", "title": "#sec-additive-operators-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-additive-operators-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-additive-operators-static-semantics-assignmenttargettype\">\n      <span id=\"sec-additive-operators-static-semantics-isvalidsimpleassignmenttarget\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-additive-operators-static-semantics-assignmenttargettype\">#sec-additive-operators-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n      <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"AdditiveExpression\">\n    <emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0e497b17\"><emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt><emu-t>+</emu-t><emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ee054414\"><emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt><emu-t>-</emu-t><emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>invalid</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-rawbytestonumeric": {"num": "24.1.2.9", "title": "#sec-rawbytestonumeric RawBytesToNumeric ( type, rawBytes, isLittleEndian )", "html": "<emu-clause id=\"sec-rawbytestonumeric\" aoid=\"RawBytesToNumeric\" oldids=\"sec-rawbytestonumber\">\n        <span id=\"sec-rawbytestonumber\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-rawbytestonumeric\">#sec-rawbytestonumeric</span> RawBytesToNumeric ( <var>type</var>, <var>rawBytes</var>, <var>isLittleEndian</var> )</h1>\n        <p>The abstract operation RawBytesToNumeric takes arguments <var>type</var> (a TypedArray element type), <var>rawBytes</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>), and <var>isLittleEndian</var> (a Boolean). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for Element Type <var>type</var>.</li><li>If <var>isLittleEndian</var> is <emu-val>false</emu-val>, reverse the order of the elements of <var>rawBytes</var>.</li><li>If <var>type</var> is <emu-const>Float32</emu-const>, then<ol><li>Let <var>value</var> be the byte elements of <var>rawBytes</var> concatenated and interpreted as a little-endian bit string encoding of an <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary32 value.</li><li>If <var>value</var> is an <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary32 NaN value, return the <emu-val>NaN</emu-val> <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref>.</li><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> that corresponds to <var>value</var>.</li></ol></li><li>If <var>type</var> is <emu-const>Float64</emu-const>, then<ol><li>Let <var>value</var> be the byte elements of <var>rawBytes</var> concatenated and interpreted as a little-endian bit string encoding of an <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary64 value.</li><li>If <var>value</var> is an <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary64 NaN value, return the <emu-val>NaN</emu-val> <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref>.</li><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> that corresponds to <var>value</var>.</li></ol></li><li>If !&#160;<emu-xref aoid=\"IsUnsignedElementType\"><a href=\"#sec-isunsignedelementtype\">IsUnsignedElementType</a></emu-xref>(<var>type</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>intValue</var> be the byte elements of <var>rawBytes</var> concatenated and interpreted as a bit string encoding of an unsigned little-endian binary number.</li></ol></li><li>Else,<ol><li>Let <var>intValue</var> be the byte elements of <var>rawBytes</var> concatenated and interpreted as a bit string encoding of a binary little-endian two's complement number of bit length <var>elementSize</var> &#215; 8.</li></ol></li><li>If !&#160;<emu-xref aoid=\"IsBigIntElementType\"><a href=\"#sec-isbigintelementtype\">IsBigIntElementType</a></emu-xref>(<var>type</var>) is <emu-val>true</emu-val>, return the BigInt value that corresponds to <var>intValue</var>.</li><li>Otherwise, return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> that corresponds to <var>intValue</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-performeval": {"num": "18.2.1.1", "title": "#sec-performeval Runtime Semantics: PerformEval ( x, callerRealm, strictCaller, direct )", "html": "<emu-clause id=\"sec-performeval\" aoid=\"PerformEval\" oldids=\"sec-performeval-rules-outside-functions,sec-performeval-rules-outside-methods,sec-performeval-rules-outside-constructors\">\n        <span id=\"sec-performeval-rules-outside-constructors\"></span><span id=\"sec-performeval-rules-outside-methods\"></span><span id=\"sec-performeval-rules-outside-functions\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-performeval\">#sec-performeval</span> Runtime Semantics: PerformEval ( <var>x</var>, <var>callerRealm</var>, <var>strictCaller</var>, <var>direct</var> )</h1>\n        <p>The abstract operation PerformEval takes arguments <var>x</var>, <var>callerRealm</var>, <var>strictCaller</var>, and <var>direct</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>direct</var> is <emu-val>false</emu-val>, then <var>strictCaller</var> is also <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is not String, return <var>x</var>.</li><li>Let <var>evalRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>callerRealm</var>, <var>evalRealm</var>).</li><li>Let <var>inFunction</var> be <emu-val>false</emu-val>.</li><li>Let <var>inMethod</var> be <emu-val>false</emu-val>.</li><li>Let <var>inDerivedConstructor</var> be <emu-val>false</emu-val>.</li><li>If <var>direct</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>thisEnvRec</var> be !&#160;<emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li>If <var>thisEnvRec</var> is a <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref>, then<ol><li>Let <var>F</var> be <var>thisEnvRec</var>.[[FunctionObject]].</li><li>Set <var>inFunction</var> to <emu-val>true</emu-val>.</li><li>Set <var>inMethod</var> to <var>thisEnvRec</var>.HasSuperBinding().</li><li>If <var>F</var>.[[ConstructorKind]] is <emu-const>derived</emu-const>, set <var>inDerivedConstructor</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Perform the following substeps in an <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> order, possibly interleaving parsing and error detection:<ol><li>Let <var>script</var> be the ECMAScript code that is the result of parsing !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>x</var>), for the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. If the parse fails, throw a <emu-val>SyntaxError</emu-val> exception. If any early errors are detected, throw a <emu-val>SyntaxError</emu-val> exception (but see also clause <emu-xref href=\"#sec-error-handling-and-language-extensions\"><a href=\"#sec-error-handling-and-language-extensions\" class=\"excluded-xref\" excluded-id=\"sec-error-handling-and-language-extensions\">#sec-error-handling-and-language-extensions</a></emu-xref>).</li><li>If <var>script</var> Contains <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> is <emu-val>false</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Let <var>body</var> be the <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> of <var>script</var>.</li><li>If <var>inFunction</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>inMethod</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>inDerivedConstructor</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>If <var>strictCaller</var> is <emu-val>true</emu-val>, let <var>strictEval</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>strictEval</var> be IsStrict of <var>script</var>.</li><li>Let <var>runningContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>NOTE: If <var>direct</var> is <emu-val>true</emu-val>, <var>runningContext</var> will be the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that performed the <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref>. If <var>direct</var> is <emu-val>false</emu-val>, <var>runningContext</var> will be the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> for the invocation of the <code>eval</code> function.</li><li>If <var>direct</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>runningContext</var>'s LexicalEnvironment).</li><li>Let <var>varEnv</var> be <var>runningContext</var>'s VariableEnvironment.</li></ol></li><li>Else,<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>evalRealm</var>.[[GlobalEnv]]).</li><li>Let <var>varEnv</var> be <var>evalRealm</var>.[[GlobalEnv]].</li></ol></li><li>If <var>strictEval</var> is <emu-val>true</emu-val>, set <var>varEnv</var> to <var>lexEnv</var>.</li><li>If <var>runningContext</var> is not already suspended, suspend <var>runningContext</var>.</li><li>Let <var>evalContext</var> be a new ECMAScript code <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set <var>evalContext</var>'s Function to <emu-val>null</emu-val>.</li><li>Set <var>evalContext</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> to <var>evalRealm</var>.</li><li>Set <var>evalContext</var>'s ScriptOrModule to <var>runningContext</var>'s ScriptOrModule.</li><li>Set <var>evalContext</var>'s VariableEnvironment to <var>varEnv</var>.</li><li>Set <var>evalContext</var>'s LexicalEnvironment to <var>lexEnv</var>.</li><li>Push <var>evalContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>evalContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"EvalDeclarationInstantiation\"><a href=\"#sec-evaldeclarationinstantiation\">EvalDeclarationInstantiation</a></emu-xref>(<var>body</var>, <var>varEnv</var>, <var>lexEnv</var>, <var>strictEval</var>).</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Set <var>result</var> to the result of evaluating <var>body</var>.</li></ol></li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const> and <var>result</var>.[[Value]] is <emu-const>empty</emu-const>, then<ol><li>Set <var>result</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></li><li><emu-xref aoid=\"Suspend\"><a href=\"#sec-suspend\">Suspend</a></emu-xref> <var>evalContext</var> and remove it from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Resume the context that is now on the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The eval code cannot instantiate variable or function bindings in the variable environment of the calling context that invoked the eval if the calling context is evaluating formal parameter initializers or if either the code of the calling context or the eval code is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>. Instead such bindings are instantiated in a new VariableEnvironment that is only accessible to the eval code. Bindings introduced by <code>let</code>, <code>const</code>, or <code>class</code> declarations are always instantiated in a new LexicalEnvironment.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-getbase": {"num": "6.2.4.1", "title": "#sec-getbase GetBase ( V )", "html": "<emu-clause id=\"sec-getbase\" aoid=\"GetBase\" oldids=\"ao-getbase\">\n        <span id=\"ao-getbase\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getbase\">#sec-getbase</span> GetBase ( <var>V</var> )</h1>\n        <p>The abstract operation GetBase takes argument <var>V</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>V</var>) is <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>.</li><li>Return the base value component of <var>V</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-forinofheadevaluation": {"num": "13.7.5.12", "title": "#sec-runtime-semantics-forinofheadevaluation Runtime Semantics: ForIn/OfHeadEvaluation ( uninitializedBoundNames, expr, iterationKind )", "html": "<emu-clause id=\"sec-runtime-semantics-forinofheadevaluation\" oldids=\"sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind\" aoid=\"ForIn/OfHeadEvaluation\">\n        <span id=\"sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-forinofheadevaluation\">#sec-runtime-semantics-forinofheadevaluation</span> Runtime Semantics: ForIn/OfHeadEvaluation ( <var>uninitializedBoundNames</var>, <var>expr</var>, <var>iterationKind</var> )</h1>\n        <p>The abstract operation ForIn/OfHeadEvaluation takes arguments <var>uninitializedBoundNames</var>, <var>expr</var>, and <var>iterationKind</var> (either <emu-const>enumerate</emu-const>, <emu-const>iterate</emu-const>, or <emu-const>async-iterate</emu-const>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>oldEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>If <var>uninitializedBoundNames</var> is not an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>uninitializedBoundNames</var> has no duplicate entries.</li><li>Let <var>newEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>For each string <var>name</var> in <var>uninitializedBoundNames</var>, do<ol><li>Perform ! <var>newEnv</var>.CreateMutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>newEnv</var>.</li></ol></li><li>Let <var>exprRef</var> be the result of evaluating <var>expr</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Let <var>exprValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>If <var>iterationKind</var> is <emu-const>enumerate</emu-const>, then<ol><li>If <var>exprValue</var> is <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, then<ol><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>break</emu-const>, [[Value]]: <emu-const>empty</emu-const>, [[Target]]: <emu-const>empty</emu-const> }.</li></ol></li><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>exprValue</var>).</li><li>Let <var>iterator</var> be ?&#160;<emu-xref aoid=\"EnumerateObjectProperties\"><a href=\"#sec-enumerate-object-properties\">EnumerateObjectProperties</a></emu-xref>(<var>obj</var>).</li><li>Let <var>nextMethod</var> be !&#160;<emu-xref aoid=\"GetV\"><a href=\"#sec-getv\">GetV</a></emu-xref>(<var>iterator</var>, <emu-val>\"next\"</emu-val>).</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Iterator]]: <var>iterator</var>, [[NextMethod]]: <var>nextMethod</var>, [[Done]]: <emu-val>false</emu-val> }.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iterationKind</var> is <emu-const>iterate</emu-const> or <emu-const>async-iterate</emu-const>.</li><li>If <var>iterationKind</var> is <emu-const>async-iterate</emu-const>, let <var>iteratorHint</var> be <emu-const>async</emu-const>.</li><li>Else, let <var>iteratorHint</var> be <emu-const>sync</emu-const>.</li><li>Return ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>exprValue</var>, <var>iteratorHint</var>).</li></ol></li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-evaluatecall": {"num": "12.3.6.2", "title": "#sec-evaluatecall Runtime Semantics: EvaluateCall ( func, ref, arguments, tailPosition )", "html": "<emu-clause id=\"sec-evaluatecall\" aoid=\"EvaluateCall\" oldids=\"sec-evaluatedirectcall\">\n        <span id=\"sec-evaluatedirectcall\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-evaluatecall\">#sec-evaluatecall</span> Runtime Semantics: EvaluateCall ( <var>func</var>, <var>ref</var>, <var>arguments</var>, <var>tailPosition</var> )</h1>\n        <p>The abstract operation EvaluateCall takes arguments <var>func</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>ref</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>arguments</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), and <var>tailPosition</var> (a Boolean). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ref</var>) is <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>, then<ol><li>If <emu-xref aoid=\"IsPropertyReference\"><a href=\"#sec-ispropertyreference\">IsPropertyReference</a></emu-xref>(<var>ref</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>thisValue</var> be <emu-xref aoid=\"GetThisValue\"><a href=\"#sec-getthisvalue\">GetThisValue</a></emu-xref>(<var>ref</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: the base of <var>ref</var> is an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>Let <var>refEnv</var> be <emu-xref aoid=\"GetBase\"><a href=\"#sec-getbase\">GetBase</a></emu-xref>(<var>ref</var>).</li><li>Let <var>thisValue</var> be <var>refEnv</var>.WithBaseObject().</li></ol></li></ol></li><li>Else,<ol><li>Let <var>thisValue</var> be <emu-val>undefined</emu-val>.</li></ol></li><li>Let <var>argList</var> be ? ArgumentListEvaluation of <var>arguments</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>func</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>func</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>tailPosition</var> is <emu-val>true</emu-val>, perform <emu-xref aoid=\"PrepareForTailCall\"><a href=\"#sec-preparefortailcall\">PrepareForTailCall</a></emu-xref>().</li><li>Let <var>result</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>func</var>, <var>thisValue</var>, <var>argList</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>tailPosition</var> is <emu-val>true</emu-val>, the above call will not return here, but instead evaluation will continue as if the following return has already occurred.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>result</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>.</li><li>Return <var>result</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-ordinaryobjectcreate": {"num": "9.1.12", "title": "#sec-ordinaryobjectcreate OrdinaryObjectCreate ( proto [ , additionalInternalSlotsList ] )", "html": "<emu-clause id=\"sec-ordinaryobjectcreate\" aoid=\"OrdinaryObjectCreate\" oldids=\"sec-objectcreate\">\n      <span id=\"sec-objectcreate\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinaryobjectcreate\">#sec-ordinaryobjectcreate</span> OrdinaryObjectCreate ( <var>proto</var> [ , <var>additionalInternalSlotsList</var> ] )</h1>\n      <p>The abstract operation OrdinaryObjectCreate takes argument <var>proto</var> (an Object or <emu-val>null</emu-val>) and optional argument <var>additionalInternalSlotsList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of names of internal slots). It is used to specify the runtime creation of new ordinary objects. <var>additionalInternalSlotsList</var> contains the names of additional internal slots that must be defined as part of the object, beyond [[Prototype]] and [[Extensible]]. If <var>additionalInternalSlotsList</var> is not provided, a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is used. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>internalSlotsList</var> be &#171; [[Prototype]], [[Extensible]] &#187;.</li><li>If <var>additionalInternalSlotsList</var> is present, append each of its elements to <var>internalSlotsList</var>.</li><li>Let <var>O</var> be !&#160;<emu-xref aoid=\"MakeBasicObject\"><a href=\"#sec-makebasicobject\">MakeBasicObject</a></emu-xref>(<var>internalSlotsList</var>).</li><li>Set <var>O</var>.[[Prototype]] to <var>proto</var>.</li><li>Return <var>O</var>.</li></ol></emu-alg>\n\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Although OrdinaryObjectCreate does little more than call <emu-xref aoid=\"MakeBasicObject\"><a href=\"#sec-makebasicobject\">MakeBasicObject</a></emu-xref>, its use communicates the intention to create an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>, and not an exotic one. Thus, within this specification, it is not called by any algorithm that subsequently modifies the internal methods of the object in ways that would make the result non-ordinary. Operations that create exotic objects invoke <emu-xref aoid=\"MakeBasicObject\"><a href=\"#sec-makebasicobject\">MakeBasicObject</a></emu-xref> directly.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-properties-of-the-boolean-prototype-object": {"num": "19.3.3", "title": "#sec-properties-of-the-boolean-prototype-object Properties of the Boolean Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-boolean-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-boolean-prototype-object\">#sec-properties-of-the-boolean-prototype-object</span> Properties of the Boolean Prototype Object</h1>\n      <p>The Boolean prototype object:</p>\n      <ul>\n        <li>is <dfn>%BooleanPrototype%</dfn>.</li>\n        <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n        <li>is itself a Boolean object; it has a [[BooleanData]] internal slot with the value <emu-val>false</emu-val>.</li>\n        <li>has a [[Prototype]] internal slot whose value is %Object.prototype%.</li>\n      </ul>\n      <p>The abstract operation <dfn id=\"thisbooleanvalue\" aoid=\"thisBooleanValue\" oldids=\"sec-thisbooleanvalue\">thisBooleanValue<span id=\"sec-thisbooleanvalue\"></span></dfn> takes argument <var>value</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Boolean, return <var>value</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Object and <var>value</var> has a [[BooleanData]] internal slot, then<ol><li>Let <var>b</var> be <var>value</var>.[[BooleanData]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>b</var>) is Boolean.</li><li>Return <var>b</var>.</li></ol></li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></emu-alg>\n\n      <div id=\"excluded-sec-boolean.prototype.constructor\"><h1><span class=\"secnum\">19.3.3.1</span>#sec-boolean.prototype.constructor Boolean.prototype.constructor</h1>...</div><div id=\"excluded-sec-boolean.prototype.tostring\"><h1><span class=\"secnum\">19.3.3.2</span>#sec-boolean.prototype.tostring Boolean.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-boolean.prototype.valueof\"><h1><span class=\"secnum\">19.3.3.3</span>#sec-boolean.prototype.valueof Boolean.prototype.valueOf ( )</h1>...</div></emu-clause>\n\n    "}, "sec-function-environment-records": {"num": "8.1.1.3", "title": "#sec-function-environment-records Function Environment Records", "html": "<emu-clause id=\"sec-function-environment-records\" oldids=\"function-environment\">\n        <span id=\"function-environment\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-environment-records\">#sec-function-environment-records</span> Function Environment Records</h1>\n        <p>A <dfn>function Environment Record</dfn> is a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> that is used to represent the top-level scope of a function and, if the function is not an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, provides a <code>this</code> binding. If a function is not an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> function and references <code>super</code>, its function Environment Record also contains the state that is used to perform <code>super</code> method invocations from within the function.</p>\n        <p>Function Environment Records have the additional state fields listed in <emu-xref href=\"#table-16\"><a href=\"#table-16\" class=\"excluded-xref\" excluded-id=\"table-16\">#table-16</a></emu-xref>.</p>\n        <emu-table id=\"table-16\" caption=\"Additional Fields of Function Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-16\">#table-16</span>: Additional Fields of Function Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              </th>\n              <th>\n                Value\n              </th>\n              <th>\n                Meaning\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[ThisValue]]\n              </td>\n              <td>\n                Any\n              </td>\n              <td>\n                This is the <emu-val>this</emu-val> value used for this invocation of the function.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ThisBindingStatus]]\n              </td>\n              <td>\n                <emu-const>lexical</emu-const> | <emu-const>initialized</emu-const> | <emu-const>uninitialized</emu-const>\n              </td>\n              <td>\n                If the value is <emu-const>lexical</emu-const>, this is an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> and does not have a local <emu-val>this</emu-val> value.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[FunctionObject]]\n              </td>\n              <td>\n                Object\n              </td>\n              <td>\n                The <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> whose invocation caused this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> to be created.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[HomeObject]]\n              </td>\n              <td>\n                Object | <emu-val>undefined</emu-val>\n              </td>\n              <td>\n                If the associated function has <code>super</code> property accesses and is not an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, [[HomeObject]] is the object that the function is bound to as a method. The default value for [[HomeObject]] is <emu-val>undefined</emu-val>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[NewTarget]]\n              </td>\n              <td>\n                Object | <emu-val>undefined</emu-val>\n              </td>\n              <td>\n                If this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> was created by the [[Construct]] internal method, [[NewTarget]] is the value of the [[Construct]] <var>newTarget</var> parameter. Otherwise, its value is <emu-val>undefined</emu-val>.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>Function Environment Records support all of the <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> methods listed in <emu-xref href=\"#table-15\"><a href=\"#table-15\" class=\"excluded-xref\" excluded-id=\"table-15\">#table-15</a></emu-xref> and share the same specifications for all of those methods except for HasThisBinding and HasSuperBinding. In addition, function Environment Records support the methods listed in <emu-xref href=\"#table-17\"><a href=\"#table-17\" class=\"excluded-xref\" excluded-id=\"table-17\">#table-17</a></emu-xref>:</p>\n        <emu-table id=\"table-17\" caption=\"Additional Methods of Function Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-17\">#table-17</span>: Additional Methods of Function Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Method\n              </th>\n              <th>\n                Purpose\n              </th>\n            </tr>\n            <tr>\n              <td>\n                BindThisValue(V)\n              </td>\n              <td>\n                Set the [[ThisValue]] and record that it has been initialized.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                GetThisBinding()\n              </td>\n              <td>\n                Return the value of this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s <code>this</code> binding. Throws a <emu-val>ReferenceError</emu-val> if the <code>this</code> binding has not been initialized.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                GetSuperBase()\n              </td>\n              <td>\n                Return the object that is the base for <code>super</code> property accesses bound in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The object is derived from this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s [[HomeObject]] field. The value <emu-val>undefined</emu-val> indicates that <code>super</code> property accesses will produce runtime errors.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>The behaviour of the additional concrete specification methods for function Environment Records is defined by the following algorithms:</p>\n\n        <div id=\"excluded-sec-bindthisvalue\"><h1><span class=\"secnum\">8.1.1.3.1</span>#sec-bindthisvalue BindThisValue ( V )</h1>...</div><div id=\"excluded-sec-function-environment-records-hasthisbinding\"><h1><span class=\"secnum\">8.1.1.3.2</span>#sec-function-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-function-environment-records-hassuperbinding\"><h1><span class=\"secnum\">8.1.1.3.3</span>#sec-function-environment-records-hassuperbinding HasSuperBinding ( )</h1>...</div><div id=\"excluded-sec-function-environment-records-getthisbinding\"><h1><span class=\"secnum\">8.1.1.3.4</span>#sec-function-environment-records-getthisbinding GetThisBinding ( )</h1>...</div><div id=\"excluded-sec-getsuperbase\"><h1><span class=\"secnum\">8.1.1.3.5</span>#sec-getsuperbase GetSuperBase ( )</h1>...</div></emu-clause>\n\n      "}, "sec-ispropertyreference": {"num": "6.2.4.5", "title": "#sec-ispropertyreference IsPropertyReference ( V )", "html": "<emu-clause id=\"sec-ispropertyreference\" aoid=\"IsPropertyReference\" oldids=\"ao-ispropertyreference\">\n        <span id=\"ao-ispropertyreference\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ispropertyreference\">#sec-ispropertyreference</span> IsPropertyReference ( <var>V</var> )</h1>\n        <p>The abstract operation IsPropertyReference takes argument <var>V</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>V</var>) is <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>.</li><li>If either the base value component of <var>V</var> is an Object or <emu-xref aoid=\"HasPrimitiveBase\"><a href=\"#sec-hasprimitivebase\">HasPrimitiveBase</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-module-environment-records": {"num": "8.1.1.5", "title": "#sec-module-environment-records Module Environment Records", "html": "<emu-clause id=\"sec-module-environment-records\" oldids=\"module-environment\">\n        <span id=\"module-environment\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-environment-records\">#sec-module-environment-records</span> Module Environment Records</h1>\n        <p>A <dfn>module Environment Record</dfn> is a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> that is used to represent the outer scope of an ECMAScript <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. In additional to normal mutable and immutable bindings, module Environment Records also provide immutable import bindings which are bindings that provide indirect access to a target binding that exists in another <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n        <p>Module Environment Records support all of the <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> methods listed in <emu-xref href=\"#table-15\"><a href=\"#table-15\" class=\"excluded-xref\" excluded-id=\"table-15\">#table-15</a></emu-xref> and share the same specifications for all of those methods except for GetBindingValue, DeleteBinding, HasThisBinding and GetThisBinding. In addition, module Environment Records support the methods listed in <emu-xref href=\"#table-20\"><a href=\"#table-20\" class=\"excluded-xref\" excluded-id=\"table-20\">#table-20</a></emu-xref>:</p>\n        <emu-table id=\"table-20\" caption=\"Additional Methods of Module Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-20\">#table-20</span>: Additional Methods of Module Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Method\n              </th>\n              <th>\n                Purpose\n              </th>\n            </tr>\n            <tr>\n              <td>\n                CreateImportBinding(N, M, N2)\n              </td>\n              <td>\n                Create an immutable indirect binding in a <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. <var>M</var> is a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, and <var>N2</var> is a binding that exists in <var>M</var>'s <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                GetThisBinding()\n              </td>\n              <td>\n                Return the value of this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s <code>this</code> binding.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>The behaviour of the additional concrete specification methods for module Environment Records are defined by the following algorithms:</p>\n\n        <div id=\"excluded-sec-module-environment-records-getbindingvalue-n-s\"><h1><span class=\"secnum\">8.1.1.5.1</span>#sec-module-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )</h1>...</div><div id=\"excluded-sec-module-environment-records-deletebinding-n\"><h1><span class=\"secnum\">8.1.1.5.2</span>#sec-module-environment-records-deletebinding-n DeleteBinding ( N )</h1>...</div><div id=\"excluded-sec-module-environment-records-hasthisbinding\"><h1><span class=\"secnum\">8.1.1.5.3</span>#sec-module-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-module-environment-records-getthisbinding\"><h1><span class=\"secnum\">8.1.1.5.4</span>#sec-module-environment-records-getthisbinding GetThisBinding ( )</h1>...</div><div id=\"excluded-sec-createimportbinding\"><h1><span class=\"secnum\">8.1.1.5.5</span>#sec-createimportbinding CreateImportBinding ( N, M, N2 )</h1>...</div></emu-clause>\n    "}, "sec-unary-operators-static-semantics-assignmenttargettype": {"num": "12.5.2", "title": "#sec-unary-operators-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-unary-operators-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-unary-operators-static-semantics-assignmenttargettype\">\n      <span id=\"sec-unary-operators-static-semantics-isvalidsimpleassignmenttarget\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-unary-operators-static-semantics-assignmenttargettype\">#sec-unary-operators-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n      <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"UnaryExpression\">\n    <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"bfdc08c3\"><emu-t>delete</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"e5d8038f\"><emu-t>void</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ab1a2cb9\"><emu-t>typeof</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3b49039a\"><emu-t>+</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"a03cca5c\"><emu-t>-</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"07d36a79\"><emu-t>~</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"b8b0af72\"><emu-t>!</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"48794e9a\"><emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>invalid</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-property-attributes": {"num": "6.1.7.1", "title": "#sec-property-attributes Property Attributes", "html": "<emu-clause id=\"sec-property-attributes\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-property-attributes\">#sec-property-attributes</span> Property Attributes</h1>\n        <p>Attributes are used in this specification to define and explain the state of Object properties. A <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> associates a key value with the attributes listed in <emu-xref href=\"#table-2\"><a href=\"#table-2\" class=\"excluded-xref\" excluded-id=\"table-2\">#table-2</a></emu-xref>.</p>\n        <emu-table id=\"table-2\" caption=\"Attributes of a Data Property\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-2\">#table-2</span>: Attributes of a Data Property</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Attribute Name\n              </th>\n              <th>\n                Value Domain\n              </th>\n              <th>\n                Description\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[Value]]\n              </td>\n              <td>\n                Any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>\n              </td>\n              <td>\n                The value retrieved by a get access of the property.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Writable]]\n              </td>\n              <td>\n                Boolean\n              </td>\n              <td>\n                If <emu-val>false</emu-val>, attempts by ECMAScript code to change the property's [[Value]] attribute using [[Set]] will not succeed.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Enumerable]]\n              </td>\n              <td>\n                Boolean\n              </td>\n              <td>\n                If <emu-val>true</emu-val>, the property will be enumerated by a for-in enumeration (see <emu-xref href=\"#sec-for-in-and-for-of-statements\"><a href=\"#sec-for-in-and-for-of-statements\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements\">#sec-for-in-and-for-of-statements</a></emu-xref>). Otherwise, the property is said to be non-enumerable.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Configurable]]\n              </td>\n              <td>\n                Boolean\n              </td>\n              <td>\n                If <emu-val>false</emu-val>, attempts to delete the property, change the property to be an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref>, or change its attributes (other than [[Value]], or changing [[Writable]] to <emu-val>false</emu-val>) will fail.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>An <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> associates a key value with the attributes listed in <emu-xref href=\"#table-3\"><a href=\"#table-3\" class=\"excluded-xref\" excluded-id=\"table-3\">#table-3</a></emu-xref>.</p>\n        <emu-table id=\"table-3\" caption=\"Attributes of an Accessor Property\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-3\">#table-3</span>: Attributes of an Accessor Property</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Attribute Name\n              </th>\n              <th>\n                Value Domain\n              </th>\n              <th>\n                Description\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[Get]]\n              </td>\n              <td>\n                Object | Undefined\n              </td>\n              <td>\n                If the value is an Object it must be a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. The function's [[Call]] internal method (<emu-xref href=\"#table-6\"><a href=\"#table-6\" class=\"excluded-xref\" excluded-id=\"table-6\">#table-6</a></emu-xref>) is called with an empty arguments list to retrieve the property value each time a get access of the property is performed.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Set]]\n              </td>\n              <td>\n                Object | Undefined\n              </td>\n              <td>\n                If the value is an Object it must be a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. The function's [[Call]] internal method (<emu-xref href=\"#table-6\"><a href=\"#table-6\" class=\"excluded-xref\" excluded-id=\"table-6\">#table-6</a></emu-xref>) is called with an arguments list containing the assigned value as its sole argument each time a set access of the property is performed. The effect of a property's [[Set]] internal method may, but is not required to, have an effect on the value returned by subsequent calls to the property's [[Get]] internal method.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Enumerable]]\n              </td>\n              <td>\n                Boolean\n              </td>\n              <td>\n                If <emu-val>true</emu-val>, the property is to be enumerated by a for-in enumeration (see <emu-xref href=\"#sec-for-in-and-for-of-statements\"><a href=\"#sec-for-in-and-for-of-statements\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements\">#sec-for-in-and-for-of-statements</a></emu-xref>). Otherwise, the property is said to be non-enumerable.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Configurable]]\n              </td>\n              <td>\n                Boolean\n              </td>\n              <td>\n                If <emu-val>false</emu-val>, attempts to delete the property, change the property to be a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref>, or change its attributes will fail.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>If the initial values of a property's attributes are not explicitly specified by this specification, the default value defined in <emu-xref href=\"#table-default-attribute-values\"><a href=\"#table-default-attribute-values\" class=\"excluded-xref\" excluded-id=\"table-default-attribute-values\">#table-default-attribute-values</a></emu-xref> is used.</p>\n        <emu-table id=\"table-default-attribute-values\" caption=\"Default Attribute Values\" oldids=\"table-4\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-default-attribute-values\">#table-default-attribute-values</span>: Default Attribute Values</figcaption>\n          <span id=\"table-4\"></span><table>\n            <tbody>\n            <tr>\n              <th>\n                Attribute Name\n              </th>\n              <th>\n                Default Value\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[Value]]\n              </td>\n              <td>\n                <emu-val>undefined</emu-val>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Get]]\n              </td>\n              <td>\n                <emu-val>undefined</emu-val>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Set]]\n              </td>\n              <td>\n                <emu-val>undefined</emu-val>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Writable]]\n              </td>\n              <td>\n                <emu-val>false</emu-val>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Enumerable]]\n              </td>\n              <td>\n                <emu-val>false</emu-val>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Configurable]]\n              </td>\n              <td>\n                <emu-val>false</emu-val>\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n\n      "}, "sec-numeric-types-number-tostring": {"num": "6.1.6.1.20", "title": "#sec-numeric-types-number-tostring Number::toString ( x )", "html": "<emu-clause id=\"sec-numeric-types-number-tostring\" aoid=\"Number::toString\" oldids=\"sec-tostring-applied-to-the-number-type\">\n          <span id=\"sec-tostring-applied-to-the-number-type\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-tostring\">#sec-numeric-types-number-tostring</span> Number::toString ( <var>x</var> )</h1>\n          <p>The abstract operation Number::toString takes argument <var>x</var> (a Number). It converts <var>x</var> to String format. It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>x</var> is <emu-val>NaN</emu-val>, return the String <emu-val>\"NaN\"</emu-val>.</li><li>If <var>x</var> is <emu-val>+0</emu-val> or <emu-val>-0</emu-val>, return the String <emu-val>\"0\"</emu-val>.</li><li>If <var>x</var> is less than zero, return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <emu-val>\"-\"</emu-val> and ! <emu-xref aoid=\"Number::toString\"><a href=\"#sec-numeric-types-number-tostring\">Number::toString</a></emu-xref>(-<var>x</var>).</li><li>If <var>x</var> is <emu-val>+&#8734;</emu-val>, return the String <emu-val>\"Infinity\"</emu-val>.</li><li id=\"step-number-tostring-intermediate-values\">Otherwise, let <var>n</var>, <var>k</var>, and <var>s</var> be integers such that <var>k</var> &#8805; 1, 10<sup><var>k</var> - 1</sup> &#8804; <var>s</var> &lt; 10<sup><var>k</var></sup>, the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>s</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>k</var>)</sup> is <var>x</var>, and <var>k</var> is as small as possible. Note that <var>k</var> is the number of digits in the decimal representation of <var>s</var>, that <var>s</var> is not divisible by 10<sub>&#8477;</sub>, and that the least significant digit of <var>s</var> is not necessarily uniquely determined by these criteria.</li><li>If <var>k</var> &#8804; <var>n</var> &#8804; 21, return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of:<ul><li>the code units of the <var>k</var> digits of the decimal representation of <var>s</var> (in order, with no leading zeroes)</li><li><var>n</var> - <var>k</var> occurrences of the code unit 0x0030 (DIGIT ZERO)</li></ul></li><li>If 0 &lt; <var>n</var> &#8804; 21, return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of:<ul><li>the code units of the most significant <var>n</var> digits of the decimal representation of <var>s</var></li><li>the code unit 0x002E (FULL STOP)</li><li>the code units of the remaining <var>k</var> - <var>n</var> digits of the decimal representation of <var>s</var></li></ul></li><li>If -6 &lt; <var>n</var> &#8804; 0, return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of:<ul><li>the code unit 0x0030 (DIGIT ZERO)</li><li>the code unit 0x002E (FULL STOP)</li><li>-<var>n</var> occurrences of the code unit 0x0030 (DIGIT ZERO)</li><li>the code units of the <var>k</var> digits of the decimal representation of <var>s</var></li></ul></li><li>Otherwise, if <var>k</var> = 1, return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of:<ul><li>the code unit of the single digit of <var>s</var></li><li>the code unit 0x0065 (LATIN SMALL LETTER E)</li><li>the code unit 0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS) according to whether <var>n</var> - 1 is positive or negative</li><li>the code units of the decimal representation of the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>n</var> - 1) (with no leading zeroes)</li></ul></li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of:<ul><li>the code units of the most significant digit of the decimal representation of <var>s</var></li><li>the code unit 0x002E (FULL STOP)</li><li>the code units of the remaining <var>k</var> - 1 digits of the decimal representation of <var>s</var></li><li>the code unit 0x0065 (LATIN SMALL LETTER E)</li><li>the code unit 0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS) according to whether <var>n</var> - 1 is positive or negative</li><li>the code units of the decimal representation of the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>n</var> - 1) (with no leading zeroes)</li></ul></li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>The following observations may be useful as guidelines for implementations, but are not part of the normative requirements of this Standard:</p>\n            <ul>\n              <li>\n                If x is any <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> other than <emu-val>-0</emu-val>, then <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(x)) is exactly the same <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> as x.\n              </li>\n              <li>\n                The least significant digit of s is not always uniquely determined by the requirements listed in step <emu-xref href=\"#step-number-tostring-intermediate-values\"><a href=\"#step-number-tostring-intermediate-values\" class=\"excluded-xref\" excluded-id=\"step-number-tostring-intermediate-values\">#step-number-tostring-intermediate-values</a></emu-xref>.\n              </li>\n            </ul>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>For implementations that provide more accurate conversions than required by the rules above, it is recommended that the following alternative version of step <emu-xref href=\"#step-number-tostring-intermediate-values\"><a href=\"#step-number-tostring-intermediate-values\" class=\"excluded-xref\" excluded-id=\"step-number-tostring-intermediate-values\">#step-number-tostring-intermediate-values</a></emu-xref> be used as a guideline:</p>\n            <emu-alg replaces-step=\"step-number-tostring-intermediate-values\"><ol start=\"5\"><li>Otherwise, let <var>n</var>, <var>k</var>, and <var>s</var> be integers such that <var>k</var> &#8805; 1, 10<sup><var>k</var> - 1</sup> &#8804; <var>s</var> &lt; 10<sup><var>k</var></sup>, the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>s</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>k</var>)</sup> is <var>x</var>, and <var>k</var> is as small as possible. If there are multiple possibilities for <var>s</var>, choose the value of <var>s</var> for which <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>s</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>k</var>)</sup> is closest in value to <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>). If there are two such possible values of <var>s</var>, choose the one that is even. Note that <var>k</var> is the number of digits in the decimal representation of <var>s</var> and that <var>s</var> is not divisible by 10<sub>&#8477;</sub>.</li></ol></emu-alg>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n            <p>Implementers of ECMAScript may find useful the paper and code written by David M. Gay for binary-to-decimal conversion of floating-point numbers:</p>\n            <p>Gay, David M. Correctly Rounded Binary-Decimal and Decimal-Binary Conversions. Numerical Analysis, Manuscript 90-10. AT&amp;T Bell Laboratories (Murray Hill, New Jersey). November 30, 1990. Available as\n              <br>\n              <a href=\"http://ampl.com/REFS/abstracts.html#rounding\">http://ampl.com/REFS/abstracts.html#rounding</a>. Associated code available as\n              <br>\n              <a href=\"http://netlib.sandia.gov/fp/dtoa.c\">http://netlib.sandia.gov/fp/dtoa.c</a> and as\n              <br>\n              <a href=\"http://netlib.sandia.gov/fp/g_fmt.c\">http://netlib.sandia.gov/fp/g_fmt.c</a> and may also be found at the various <code>netlib</code> mirror sites.</p>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-keywords-and-reserved-words": {"num": "11.6.2", "title": "#sec-keywords-and-reserved-words Keywords and Reserved Words", "html": "<emu-clause id=\"sec-keywords-and-reserved-words\" oldids=\"sec-reserved-words,sec-keywords,sec-future-reserved-words\">\n      <span id=\"sec-future-reserved-words\"></span><span id=\"sec-keywords\"></span><span id=\"sec-reserved-words\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-keywords-and-reserved-words\">#sec-keywords-and-reserved-words</span> Keywords and Reserved Words</h1>\n      <p>A <dfn>keyword</dfn> is a token that matches <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>, but also has a syntactic use; that is, it appears literally, in a <code>fixed width</code> font, in some syntactic production. The keywords of ECMAScript include <code>if</code>, <code>while</code>, <code>async</code>, <code>await</code>, and many others.</p>\n      <p>A <dfn>reserved word</dfn> is an <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> that cannot be used as an identifier. Many keywords are reserved words, but some are not, and some are reserved only in certain contexts. <code>if</code> and <code>while</code> are reserved words. <code>await</code> is reserved only inside async functions and modules. <code>async</code> is not reserved; it can be used as a variable name or statement label without restriction.</p>\n      <p>This specification uses a combination of grammatical productions and <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules to specify which names are valid identifiers and which are reserved words. All tokens in the <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt> list below, except for <code>await</code> and <code>yield</code>, are unconditionally reserved. Exceptions for <code>await</code> and <code>yield</code> are specified in <emu-xref href=\"#sec-identifiers\"><a href=\"#sec-identifiers\" class=\"excluded-xref\" excluded-id=\"sec-identifiers\">#sec-identifiers</a></emu-xref>, using parameterized syntactic productions. Lastly, several <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules restrict the set of valid identifiers. See <emu-xref href=\"#sec-identifiers-static-semantics-early-errors\"><a href=\"#sec-identifiers-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-identifiers-static-semantics-early-errors\">#sec-identifiers-static-semantics-early-errors</a></emu-xref>, <emu-xref href=\"#sec-let-and-const-declarations-static-semantics-early-errors\"><a href=\"#sec-let-and-const-declarations-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-let-and-const-declarations-static-semantics-early-errors\">#sec-let-and-const-declarations-static-semantics-early-errors</a></emu-xref>, <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-early-errors\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-early-errors\">#sec-for-in-and-for-of-statements-static-semantics-early-errors</a></emu-xref>, and <emu-xref href=\"#sec-class-definitions-static-semantics-early-errors\"><a href=\"#sec-class-definitions-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-class-definitions-static-semantics-early-errors\">#sec-class-definitions-static-semantics-early-errors</a></emu-xref>. In summary, there are five categories of identifier names:</p>\n      <ul>\n        <li>\n          <p>Those that are always allowed as identifiers, and are not keywords, such as <code>Math</code>, <code>window</code>, <code>toString</code>, and <code>_</code>;</p>\n        </li>\n        <li>\n          <p>Those that are never allowed as identifiers, namely the <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt>s listed below except <code>await</code> and <code>yield</code>;</p>\n        </li>\n        <li>\n          <p>Those that are contextually allowed as identifiers, namely <code>await</code> and <code>yield</code>;</p>\n        </li>\n        <li>\n          <p>Those that are contextually disallowed as identifiers, in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>: <code>let</code>, <code>static</code>, <code>implements</code>, <code>interface</code>, <code>package</code>, <code>private</code>, <code>protected</code>, and <code>public</code>;</p>\n        </li>\n        <li>\n          <p>Those that are always allowed as identifiers, but also appear as keywords within certain syntactic productions, at places where <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> is not allowed: <code>as</code>, <code>async</code>, <code>from</code>, <code>get</code>, <code>of</code>, <code>set</code>, and <code>target</code>.</p>\n        </li>\n      </ul>\n      <p>The term <dfn>conditional keyword</dfn>, or <dfn>contextual keyword</dfn>, is sometimes used to refer to the keywords that fall in the last three categories, and thus can be used as identifiers in some contexts and as keywords in others.</p>\n      <h2>Syntax</h2>\n      <emu-grammar type=\"definition\"><emu-production name=\"ReservedWord\" type=\"lexical\" oneof=\"\" id=\"prod-ReservedWord\">\n    <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>await</emu-t><emu-t>break</emu-t><emu-t>case</emu-t><emu-t>catch</emu-t><emu-t>class</emu-t><emu-t>const</emu-t><emu-t>continue</emu-t><emu-t>debugger</emu-t><emu-t>default</emu-t><emu-t>delete</emu-t><emu-t>do</emu-t><emu-t>else</emu-t><emu-t>enum</emu-t><emu-t>export</emu-t><emu-t>extends</emu-t><emu-t>false</emu-t><emu-t>finally</emu-t><emu-t>for</emu-t><emu-t>function</emu-t><emu-t>if</emu-t><emu-t>import</emu-t><emu-t>in</emu-t><emu-t>instanceof</emu-t><emu-t>new</emu-t><emu-t>null</emu-t><emu-t>return</emu-t><emu-t>super</emu-t><emu-t>switch</emu-t><emu-t>this</emu-t><emu-t>throw</emu-t><emu-t>true</emu-t><emu-t>try</emu-t><emu-t>typeof</emu-t><emu-t>var</emu-t><emu-t>void</emu-t><emu-t>while</emu-t><emu-t>with</emu-t><emu-t>yield</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Per <emu-xref href=\"#sec-grammar-notation\"><a href=\"#sec-grammar-notation\" class=\"excluded-xref\" excluded-id=\"sec-grammar-notation\">#sec-grammar-notation</a></emu-xref>, keywords in the grammar match literal sequences of specific <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> elements. A code point in a keyword cannot be expressed by a <code>\\</code> <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt>.</p>\n        <p>An <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> can contain <code>\\</code> <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt>s, but it is not possible to declare a variable named \"else\" by spelling it <code>els\\u{65}</code>. The <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules in <emu-xref href=\"#sec-identifiers-static-semantics-early-errors\"><a href=\"#sec-identifiers-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-identifiers-static-semantics-early-errors\">#sec-identifiers-static-semantics-early-errors</a></emu-xref> rule out identifiers with the same StringValue as a reserved word.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p><code>enum</code> is not currently used as a keyword in this specification. It is a <em>future reserved word</em>, set aside for use as a keyword in future language extensions.</p>\n        <p>Similarly, <code>implements</code>, <code>interface</code>, <code>package</code>, <code>private</code>, <code>protected</code>, and <code>public</code> are future reserved words in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>The names <code>arguments</code> and <code>eval</code> are not keywords, but they are subject to some restrictions in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>. See <emu-xref href=\"#sec-identifiers-static-semantics-early-errors\"><a href=\"#sec-identifiers-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-identifiers-static-semantics-early-errors\">#sec-identifiers-static-semantics-early-errors</a></emu-xref>, <emu-xref href=\"#sec-identifiers-static-semantics-assignmenttargettype\"><a href=\"#sec-identifiers-static-semantics-assignmenttargettype\" class=\"excluded-xref\" excluded-id=\"sec-identifiers-static-semantics-assignmenttargettype\">#sec-identifiers-static-semantics-assignmenttargettype</a></emu-xref>, <emu-xref href=\"#sec-function-definitions-static-semantics-early-errors\"><a href=\"#sec-function-definitions-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-static-semantics-early-errors\">#sec-function-definitions-static-semantics-early-errors</a></emu-xref>, <emu-xref href=\"#sec-generator-function-definitions-static-semantics-early-errors\"><a href=\"#sec-generator-function-definitions-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-generator-function-definitions-static-semantics-early-errors\">#sec-generator-function-definitions-static-semantics-early-errors</a></emu-xref>, <emu-xref href=\"#sec-async-generator-function-definitions-static-semantics-early-errors\"><a href=\"#sec-async-generator-function-definitions-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-async-generator-function-definitions-static-semantics-early-errors\">#sec-async-generator-function-definitions-static-semantics-early-errors</a></emu-xref>, and <emu-xref href=\"#sec-async-function-definitions-static-semantics-early-errors\"><a href=\"#sec-async-function-definitions-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-async-function-definitions-static-semantics-early-errors\">#sec-async-function-definitions-static-semantics-early-errors</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-relational-operators-static-semantics-assignmenttargettype": {"num": "12.10.2", "title": "#sec-relational-operators-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-relational-operators-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-relational-operators-static-semantics-assignmenttargettype\">\n      <span id=\"sec-relational-operators-static-semantics-isvalidsimpleassignmenttarget\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-relational-operators-static-semantics-assignmenttargettype\">#sec-relational-operators-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n      <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"RelationalExpression\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d216c92a\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>&lt;</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"1998981b\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>&gt;</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"29c91375\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>&lt;=</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ddc529a7\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>&gt;=</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d440bdac\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>instanceof</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"f66b493e\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>in</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>invalid</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-static-semantics-assignmenttargettype": {"num": "12.3.1.7", "title": "#sec-static-semantics-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-static-semantics-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-static-semantics-static-semantics-assignmenttargettype\">\n        <span id=\"sec-static-semantics-static-semantics-isvalidsimpleassignmenttarget\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-static-semantics-assignmenttargettype\">#sec-static-semantics-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n        <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"CallExpression\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d94d9445\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"bba9526d\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"MemberExpression\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6bbe1777\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"7eb6e3f7\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5f8b7394\"><emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return <emu-const>simple</emu-const>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"CallExpression\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ec98fef7\"><emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"949290c3\"><emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"9185f623\"><emu-nt><a href=\"#prod-ImportCall\">ImportCall</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"42e81a1c\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"adcef8e1\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"NewExpression\">\n    <emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e753fad7\"><emu-t>new</emu-t><emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"MemberExpression\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"149e7618\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"705abe84\"><emu-t>new</emu-t><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"NewTarget\">\n    <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d2de213d\"><emu-t>new</emu-t><emu-t>.</emu-t><emu-t>target</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"ImportMeta\">\n    <emu-nt><a href=\"#prod-ImportMeta\">ImportMeta</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f0c60de9\"><emu-t>import</emu-t><emu-t>.</emu-t><emu-t>meta</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"LeftHandSideExpression\">\n    <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"25b793e9\"><emu-nt><a href=\"#prod-OptionalExpression\">OptionalExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return <emu-const>invalid</emu-const>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-isstrictreference": {"num": "6.2.4.3", "title": "#sec-isstrictreference IsStrictReference ( V )", "html": "<emu-clause id=\"sec-isstrictreference\" aoid=\"IsStrictReference\" oldids=\"ao-isstrictreference\">\n        <span id=\"ao-isstrictreference\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isstrictreference\">#sec-isstrictreference</span> IsStrictReference ( <var>V</var> )</h1>\n        <p>The abstract operation IsStrictReference takes argument <var>V</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>V</var>) is <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>.</li><li>Return the strict reference flag of <var>V</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-grouping-operator-static-semantics-assignmenttargettype": {"num": "12.2.10.3", "title": "#sec-grouping-operator-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-grouping-operator-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-grouping-operator-static-semantics-assignmenttargettype\">\n        <span id=\"sec-grouping-operator-static-semantics-isvalidsimpleassignmenttarget\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-grouping-operator-static-semantics-assignmenttargettype\">#sec-grouping-operator-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n        <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"ParenthesizedExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ParenthesizedExpression\">ParenthesizedExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4ba6ef9d\"><emu-t>(</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return AssignmentTargetType of <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-numerictorawbytes": {"num": "24.1.2.11", "title": "#sec-numerictorawbytes NumericToRawBytes ( type, value, isLittleEndian )", "html": "<emu-clause id=\"sec-numerictorawbytes\" aoid=\"NumericToRawBytes\" oldids=\"sec-numbertorawbytes\">\n        <span id=\"sec-numbertorawbytes\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numerictorawbytes\">#sec-numerictorawbytes</span> NumericToRawBytes ( <var>type</var>, <var>value</var>, <var>isLittleEndian</var> )</h1>\n        <p>The abstract operation NumericToRawBytes takes arguments <var>type</var> (a TypedArray element type), <var>value</var> (a BigInt or a Number), and <var>isLittleEndian</var> (a Boolean). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>type</var> is <emu-const>Float32</emu-const>, then<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the 4 bytes that are the result of converting <var>value</var> to <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary32 format using roundTiesToEven mode. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are arranged in big endian order. Otherwise, the bytes are arranged in little endian order. If <var>value</var> is <emu-val>NaN</emu-val>, <var>rawBytes</var> may be set to any implementation chosen <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary32 format Not-a-Number encoding. An implementation must always choose the same encoding for each implementation distinguishable <emu-val>NaN</emu-val> value.</li></ol></li><li>Else if <var>type</var> is <emu-const>Float64</emu-const>, then<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the 8 bytes that are the <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary64 format encoding of <var>value</var>. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are arranged in big endian order. Otherwise, the bytes are arranged in little endian order. If <var>value</var> is <emu-val>NaN</emu-val>, <var>rawBytes</var> may be set to any implementation chosen <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary64 format Not-a-Number encoding. An implementation must always choose the same encoding for each implementation distinguishable <emu-val>NaN</emu-val> value.</li></ol></li><li>Else,<ol><li>Let <var>n</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for Element Type <var>type</var>.</li><li>Let <var>convOp</var> be the abstract operation named in the Conversion Operation column in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for Element Type <var>type</var>.</li><li>Let <var>intValue</var> be <var>convOp</var>(<var>value</var>) treated as a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref>, whether the result is a BigInt or Number.</li><li>If <var>intValue</var> &#8805; 0<sub>&#8477;</sub>, then<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the <var>n</var>-byte binary encoding of <var>intValue</var>. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are ordered in big endian order. Otherwise, the bytes are ordered in little endian order.</li></ol></li><li>Else,<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the <var>n</var>-byte binary two's complement encoding of <var>intValue</var>. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are ordered in big endian order. Otherwise, the bytes are ordered in little endian order.</li></ol></li></ol></li><li>Return <var>rawBytes</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-createlistiteratorRecord": {"num": "7.4.9", "title": "#sec-createlistiteratorRecord CreateListIteratorRecord ( list )", "html": "<emu-clause id=\"sec-createlistiteratorRecord\" oldids=\"sec-createlistiterator\" aoid=\"CreateListIteratorRecord\">\n      <span id=\"sec-createlistiterator\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createlistiteratorRecord\">#sec-createlistiteratorRecord</span> CreateListIteratorRecord ( <var>list</var> )</h1>\n      <p>The abstract operation CreateListIteratorRecord takes argument <var>list</var>. It creates an Iterator (<emu-xref href=\"#sec-iterator-interface\"><a href=\"#sec-iterator-interface\" class=\"excluded-xref\" excluded-id=\"sec-iterator-interface\">#sec-iterator-interface</a></emu-xref>) object record whose next method returns the successive elements of <var>list</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>iterator</var> be <emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-%iteratorprototype%-object\"><a href=\"#sec-%iteratorprototype%-object\">%IteratorPrototype%</a></emu-xref>, &#171; [[IteratedList]], [[ListNextIndex]] &#187;).</li><li>Set <var>iterator</var>.[[IteratedList]] to <var>list</var>.</li><li>Set <var>iterator</var>.[[ListNextIndex]] to 0.</li><li>Let <var>steps</var> be the algorithm steps defined in <emu-xref href=\"#sec-listiteratornext-functions\" title=\"\"><a href=\"#sec-listiteratornext-functions\">ListIteratorNext Functions</a></emu-xref>.</li><li>Let <var>next</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>steps</var>, &#171; &#187;).</li><li>Return <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Iterator]]: <var>iterator</var>, [[NextMethod]]: <var>next</var>, [[Done]]: <emu-val>false</emu-val> }.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The list iterator object is never directly accessible to ECMAScript code.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-listiteratornext-functions\"><h1><span class=\"secnum\">7.4.9.1</span>#sec-listiteratornext-functions ListIteratorNext Functions</h1>...</div></emu-clause>\n\n    "}, "sec-toprimitive": {"num": "7.1.1", "title": "#sec-toprimitive ToPrimitive ( input [ , PreferredType ] )", "html": "<emu-clause id=\"sec-toprimitive\" aoid=\"ToPrimitive\" oldids=\"table-9\">\n      <span id=\"table-9\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-toprimitive\">#sec-toprimitive</span> ToPrimitive ( <var>input</var> [ , <var>PreferredType</var> ] )</h1>\n      <p>The abstract operation ToPrimitive takes argument <var>input</var> and optional argument <var>PreferredType</var>. It converts its <var>input</var> argument to a non-Object type. If an object is capable of converting to more than one primitive type, it may use the optional hint <var>PreferredType</var> to favour that type. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>input</var> is an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>input</var>) is Object, then<ol><li>If <var>PreferredType</var> is not present, let <var>hint</var> be <emu-val>\"default\"</emu-val>.</li><li>Else if <var>PreferredType</var> is hint String, let <var>hint</var> be <emu-val>\"string\"</emu-val>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>PreferredType</var> is hint Number.</li><li>Let <var>hint</var> be <emu-val>\"number\"</emu-val>.</li></ol></li><li>Let <var>exoticToPrim</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>input</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toPrimitive</a></emu-xref>).</li><li>If <var>exoticToPrim</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>exoticToPrim</var>, <var>input</var>, &#171; <var>hint</var> &#187;).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is not Object, return <var>result</var>.</li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>If <var>hint</var> is <emu-val>\"default\"</emu-val>, set <var>hint</var> to <emu-val>\"number\"</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"OrdinaryToPrimitive\"><a href=\"#sec-ordinarytoprimitive\">OrdinaryToPrimitive</a></emu-xref>(<var>input</var>, <var>hint</var>).</li></ol></li><li>Return <var>input</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When ToPrimitive is called with no hint, then it generally behaves as if the hint were Number. However, objects may over-ride this behaviour by defining a <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toPrimitive</a></emu-xref> method. Of the objects defined in this specification only Date objects (see <emu-xref href=\"#sec-date.prototype-@@toprimitive\"><a href=\"#sec-date.prototype-@@toprimitive\" class=\"excluded-xref\" excluded-id=\"sec-date.prototype-@@toprimitive\">#sec-date.prototype-@@toprimitive</a></emu-xref>) and Symbol objects (see <emu-xref href=\"#sec-symbol.prototype-@@toprimitive\"><a href=\"#sec-symbol.prototype-@@toprimitive\" class=\"excluded-xref\" excluded-id=\"sec-symbol.prototype-@@toprimitive\">#sec-symbol.prototype-@@toprimitive</a></emu-xref>) over-ride the default ToPrimitive behaviour. Date objects treat no hint as if the hint were String.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-ordinarytoprimitive\"><h1><span class=\"secnum\">7.1.1.1</span>#sec-ordinarytoprimitive OrdinaryToPrimitive ( O, hint )</h1>...</div></emu-clause>\n\n    "}, "sec-runtime-semantics-caseclauseisselected": {"num": "13.12.10", "title": "#sec-runtime-semantics-caseclauseisselected Runtime Semantics: CaseClauseIsSelected ( C, input )", "html": "<emu-clause id=\"sec-runtime-semantics-caseclauseisselected\" aoid=\"CaseClauseIsSelected\" oldids=\"sec-runtime-semantics-caseselectorevaluation\">\n      <span id=\"sec-runtime-semantics-caseselectorevaluation\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-caseclauseisselected\">#sec-runtime-semantics-caseclauseisselected</span> Runtime Semantics: CaseClauseIsSelected ( <var>C</var>, <var>input</var> )</h1>\n      <p>The abstract operation CaseClauseIsSelected takes arguments <var>C</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> for <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>) and <var>input</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It determines whether <var>C</var> matches <var>input</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>C</var> is an instance of the production <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c76d0d30\"><emu-t>case</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>:</emu-t><emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>.</li><li>Let <var>exprRef</var> be the result of evaluating the <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt> of <var>C</var>.</li><li>Let <var>clauseSelector</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Return the result of performing <emu-xref aoid=\"Strict Equality Comparison\"><a href=\"#sec-strict-equality-comparison\">Strict Equality Comparison</a></emu-xref> <var>input</var> === <var>clauseSelector</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This operation does not execute <var>C</var>'s <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> (if any). The <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> algorithm uses its return value to determine which <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> to start executing.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-environment-record-operations": {"num": "8.1.2", "title": "#sec-environment-record-operations Environment Record Operations", "html": "<emu-clause id=\"sec-environment-record-operations\" oldids=\"sec-lexical-environment-operations\">\n      <span id=\"sec-lexical-environment-operations\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-environment-record-operations\">#sec-environment-record-operations</span> Environment Record Operations</h1>\n      <p>The following <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> are used in this specification to operate upon Environment Records:</p>\n\n      <div id=\"excluded-sec-getidentifierreference\"><h1><span class=\"secnum\">8.1.2.1</span>#sec-getidentifierreference GetIdentifierReference ( env, name, strict )</h1>...</div><div id=\"excluded-sec-newdeclarativeenvironment\"><h1><span class=\"secnum\">8.1.2.2</span>#sec-newdeclarativeenvironment NewDeclarativeEnvironment ( E )</h1>...</div><div id=\"excluded-sec-newobjectenvironment\"><h1><span class=\"secnum\">8.1.2.3</span>#sec-newobjectenvironment NewObjectEnvironment ( O, E )</h1>...</div><div id=\"excluded-sec-newfunctionenvironment\"><h1><span class=\"secnum\">8.1.2.4</span>#sec-newfunctionenvironment NewFunctionEnvironment ( F, newTarget )</h1>...</div><div id=\"excluded-sec-newglobalenvironment\"><h1><span class=\"secnum\">8.1.2.5</span>#sec-newglobalenvironment NewGlobalEnvironment ( G, thisValue )</h1>...</div><div id=\"excluded-sec-newmoduleenvironment\"><h1><span class=\"secnum\">8.1.2.6</span>#sec-newmoduleenvironment NewModuleEnvironment ( E )</h1>...</div></emu-clause>\n  "}, "sec-static-semantics-template-early-errors": {"num": "12.2.9.1", "title": "#sec-static-semantics-template-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-static-semantics-template-early-errors\" oldids=\"sec-primary-expression-template-literals-static-semantics-early-errors\">\n        <span id=\"sec-primary-expression-template-literals-static-semantics-early-errors\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-template-early-errors\">#sec-static-semantics-template-early-errors</span> Static Semantics: Early Errors</h1>\n        <emu-grammar><emu-production name=\"TemplateLiteral\" params=\"Yield, Await, Tagged\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await, Tagged\"><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a><emu-mods><emu-params>[Yield, Await, Tagged]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7bf3ad2b\"><emu-nt><a href=\"#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if the <sub>[Tagged]</sub> parameter was not set and <emu-nt><a href=\"#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt> Contains <emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt>.\n          </li>\n        </ul>\n\n        <emu-grammar><emu-production name=\"TemplateLiteral\" params=\"Yield, Await, Tagged\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await, Tagged\"><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a><emu-mods><emu-params>[Yield, Await, Tagged]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f1a0e47a\"><emu-nt params=\"?Yield, ?Await, ?Tagged\"><a href=\"#prod-SubstitutionTemplate\">SubstitutionTemplate</a><emu-mods><emu-params>[?Yield, ?Await, ?Tagged]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if the number of elements in the result of TemplateStrings of <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt> with argument <emu-val>false</emu-val> is greater than 2<sup>32</sup> - 1.\n          </li>\n        </ul>\n\n        <emu-grammar><emu-production name=\"SubstitutionTemplate\" params=\"Yield, Await, Tagged\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await, Tagged\"><a href=\"#prod-SubstitutionTemplate\">SubstitutionTemplate</a><emu-mods><emu-params>[Yield, Await, Tagged]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"069aff93\"><emu-nt><a href=\"#prod-TemplateHead\">TemplateHead</a></emu-nt><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await, ?Tagged\"><a href=\"#prod-TemplateSpans\">TemplateSpans</a><emu-mods><emu-params>[?Yield, ?Await, ?Tagged]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if the <sub>[Tagged]</sub> parameter was not set and <emu-nt><a href=\"#prod-TemplateHead\">TemplateHead</a></emu-nt> Contains <emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt>.\n          </li>\n        </ul>\n\n        <emu-grammar><emu-production name=\"TemplateSpans\" params=\"Yield, Await, Tagged\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await, Tagged\"><a href=\"#prod-TemplateSpans\">TemplateSpans</a><emu-mods><emu-params>[Yield, Await, Tagged]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"57fe6188\"><emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if the <sub>[Tagged]</sub> parameter was not set and <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt> Contains <emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt>.\n          </li>\n        </ul>\n\n        <emu-grammar><emu-production name=\"TemplateMiddleList\" params=\"Yield, Await, Tagged\">\n    <emu-nt params=\"Yield, Await, Tagged\"><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a><emu-mods><emu-params>[Yield, Await, Tagged]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"db7fc148\"><emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"6dd46bd2\"><emu-nt params=\"?Yield, ?Await, ?Tagged\"><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a><emu-mods><emu-params>[?Yield, ?Await, ?Tagged]</emu-params></emu-mods></emu-nt><emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if the <sub>[Tagged]</sub> parameter was not set and <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt> Contains <emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt>.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-equality-operators-static-semantics-assignmenttargettype": {"num": "12.11.2", "title": "#sec-equality-operators-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-equality-operators-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-equality-operators-static-semantics-assignmenttargettype\">\n      <span id=\"sec-equality-operators-static-semantics-isvalidsimpleassignmenttarget\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-equality-operators-static-semantics-assignmenttargettype\">#sec-equality-operators-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n      <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"EqualityExpression\">\n    <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"757a342c\"><emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-t>==</emu-t><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"70ddad59\"><emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-t>!=</emu-t><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"e0753bf6\"><emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-t>===</emu-t><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"2113edaf\"><emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-t>!==</emu-t><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>invalid</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-getreferencedname": {"num": "6.2.4.2", "title": "#sec-getreferencedname GetReferencedName ( V )", "html": "<emu-clause id=\"sec-getreferencedname\" aoid=\"GetReferencedName\" oldids=\"ao-getreferencedname\">\n        <span id=\"ao-getreferencedname\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getreferencedname\">#sec-getreferencedname</span> GetReferencedName ( <var>V</var> )</h1>\n        <p>The abstract operation GetReferencedName takes argument <var>V</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>V</var>) is <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>.</li><li>Return the referenced name component of <var>V</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-update-expressions-static-semantics-assignmenttargettype": {"num": "12.4.3", "title": "#sec-update-expressions-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-update-expressions-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-update-expressions-static-semantics-assignmenttargettype\">\n      <span id=\"sec-update-expressions-static-semantics-isvalidsimpleassignmenttarget\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-update-expressions-static-semantics-assignmenttargettype\">#sec-update-expressions-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n      <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"UpdateExpression\">\n    <emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8bf8e31b\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>++</emu-t></emu-rhs>\n    <emu-rhs a=\"8d1d2d72\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>--</emu-t></emu-rhs>\n    <emu-rhs a=\"5701b162\"><emu-t>++</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3a745559\"><emu-t>--</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>invalid</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-numeric-types-number-multiply": {"num": "6.1.6.1.4", "title": "#sec-numeric-types-number-multiply Number::multiply ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-number-multiply\" oldids=\"sec-applying-the-mul-operator\">\n          <span id=\"sec-applying-the-mul-operator\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-multiply\">#sec-numeric-types-number-multiply</span> Number::multiply ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation Number::multiply takes arguments <var>x</var> (a Number) and <var>y</var> (a Number). It performs multiplication, producing the product of <var>x</var> and <var>y</var>, as determined by the rules of <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary double-precision arithmetic:</p>\n          <ul>\n            <li>\n              If either operand is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n            </li>\n            <li>\n              The sign of the result is positive if both operands have the same sign, negative if the operands have different signs.\n            </li>\n            <li>\n              Multiplication of an infinity by a zero results in <emu-val>NaN</emu-val>.\n            </li>\n            <li>\n              Multiplication of an infinity by an infinity results in an infinity. The sign is determined by the rule already stated above.\n            </li>\n            <li>\n              Multiplication of an infinity by a finite nonzero value results in a signed infinity. The sign is determined by the rule already stated above.\n            </li>\n            <li>\n              In the remaining cases, where neither an infinity nor <emu-val>NaN</emu-val> is involved, the product is computed and rounded to the nearest representable value using <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> roundTiesToEven mode. If the magnitude is too large to represent, the result is then an infinity of appropriate sign. If the magnitude is too small to represent, the result is then a zero of appropriate sign. The ECMAScript language requires support of gradual underflow as defined by <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref>.\n            </li>\n          </ul>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>Finite-precision multiplication is commutative, but not always associative.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-validateintegertypedarray": {"num": "24.4.1.1", "title": "#sec-validateintegertypedarray ValidateIntegerTypedArray ( typedArray [ , waitable ] )", "html": "<emu-clause id=\"sec-validateintegertypedarray\" aoid=\"ValidateIntegerTypedArray\" oldids=\"sec-validatesharedintegertypedarray\">\n        <span id=\"sec-validatesharedintegertypedarray\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-validateintegertypedarray\">#sec-validateintegertypedarray</span> ValidateIntegerTypedArray ( <var>typedArray</var> [ , <var>waitable</var> ] )</h1>\n        <p>The abstract operation ValidateIntegerTypedArray takes argument <var>typedArray</var> and optional argument <var>waitable</var> (a Boolean). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>waitable</var> is not present, set <var>waitable</var> to <emu-val>false</emu-val>.</li><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>typedArray</var>).</li><li>Let <var>typeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>Let <var>type</var> be the Element Type value in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>typeName</var>.</li><li>If <var>waitable</var> is <emu-val>true</emu-val>, then<ol><li>If <var>typeName</var> is not <emu-val>\"Int32Array\"</emu-val> or <emu-val>\"BigInt64Array\"</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Else,<ol><li>If !&#160;<emu-xref aoid=\"IsUnclampedIntegerElementType\"><a href=\"#sec-isunclampedintegerelementtype\">IsUnclampedIntegerElementType</a></emu-xref>(<var>type</var>) is <emu-val>false</emu-val> and !&#160;<emu-xref aoid=\"IsBigIntElementType\"><a href=\"#sec-isbigintelementtype\">IsBigIntElementType</a></emu-xref>(<var>type</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Return <var>buffer</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-abstract-operations-for-the-memory-model": {"num": "28.5", "title": "#sec-abstract-operations-for-the-memory-model Abstract Operations for the Memory Model", "html": "<emu-clause id=\"sec-abstract-operations-for-the-memory-model\" oldids=\"sec-synchronizeeventset\">\n    <span id=\"sec-synchronizeeventset\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-abstract-operations-for-the-memory-model\">#sec-abstract-operations-for-the-memory-model</span> Abstract Operations for the Memory Model</h1>\n    <div id=\"excluded-sec-event-set\"><h1><span class=\"secnum\">28.5.1</span>#sec-event-set EventSet ( execution )</h1>...</div><div id=\"excluded-sec-sharedatablockeventset\"><h1><span class=\"secnum\">28.5.2</span>#sec-sharedatablockeventset SharedDataBlockEventSet ( execution )</h1>...</div><div id=\"excluded-sec-hosteventset\"><h1><span class=\"secnum\">28.5.3</span>#sec-hosteventset HostEventSet ( execution )</h1>...</div><div id=\"excluded-sec-composewriteeventbytes\"><h1><span class=\"secnum\">28.5.4</span>#sec-composewriteeventbytes ComposeWriteEventBytes ( execution, byteIndex, Ws )</h1>...</div><div id=\"excluded-sec-valueofreadevent\"><h1><span class=\"secnum\">28.5.5</span>#sec-valueofreadevent ValueOfReadEvent ( execution, R )</h1>...</div></emu-clause>\n\n  "}, "sec-assignment-operators-static-semantics-assignmenttargettype": {"num": "12.15.3", "title": "#sec-assignment-operators-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-assignment-operators-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-assignment-operators-static-semantics-assignmenttargettype\">\n      <span id=\"sec-assignment-operators-static-semantics-isvalidsimpleassignmenttarget\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-assignment-operators-static-semantics-assignmenttargettype\">#sec-assignment-operators-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n      <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"AssignmentExpression\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"5202c84b\"><emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"2bdf3b10\"><emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"6b79045b\"><emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"8a33cee0\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>=</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5f3a8747\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"0de56464\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>&amp;&amp;=</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"0d3d4545\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>||=</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"0db89f3e\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>??=</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>invalid</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-bitwise-shift-operators-static-semantics-assignmenttargettype": {"num": "12.9.2", "title": "#sec-bitwise-shift-operators-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-bitwise-shift-operators-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-bitwise-shift-operators-static-semantics-assignmenttargettype\">\n      <span id=\"sec-bitwise-shift-operators-static-semantics-isvalidsimpleassignmenttarget\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bitwise-shift-operators-static-semantics-assignmenttargettype\">#sec-bitwise-shift-operators-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n      <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"ShiftExpression\">\n    <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b46f532a\"><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt><emu-t>&lt;&lt;</emu-t><emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"548327f3\"><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt><emu-t>&gt;&gt;</emu-t><emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"37f16eac\"><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt><emu-t>&gt;&gt;&gt;</emu-t><emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>invalid</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-properties-of-the-string-prototype-object": {"num": "21.1.3", "title": "#sec-properties-of-the-string-prototype-object Properties of the String Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-string-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-string-prototype-object\">#sec-properties-of-the-string-prototype-object</span> Properties of the String Prototype Object</h1>\n      <p>The String prototype object:</p>\n      <ul>\n        <li>is <dfn>%StringPrototype%</dfn>.</li>\n        <li>is a <emu-xref href=\"#string-exotic-object\"><a href=\"#string-exotic-object\">String exotic object</a></emu-xref> and has the internal methods specified for such objects.</li>\n        <li>has a [[StringData]] internal slot whose value is the empty String.</li>\n        <li>has a <emu-val>\"length\"</emu-val> property whose initial value is 0 and whose attributes are { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</li>\n        <li>has a [[Prototype]] internal slot whose value is %Object.prototype%.</li>\n      </ul>\n      <p>Unless explicitly stated otherwise, the methods of the String prototype object defined below are not generic and the <emu-val>this</emu-val> value passed to them must be either a String value or an object that has a [[StringData]] internal slot that has been initialized to a String value.</p>\n      <p>The abstract operation <dfn id=\"thisstringvalue\" aoid=\"thisStringValue\" oldids=\"sec-thisstringvalue\">thisStringValue<span id=\"sec-thisstringvalue\"></span></dfn> takes argument <var>value</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is String, return <var>value</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Object and <var>value</var> has a [[StringData]] internal slot, then<ol><li>Let <var>s</var> be <var>value</var>.[[StringData]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>s</var>) is String.</li><li>Return <var>s</var>.</li></ol></li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></emu-alg>\n\n      <div id=\"excluded-sec-string.prototype.charat\"><h1><span class=\"secnum\">21.1.3.1</span>#sec-string.prototype.charat String.prototype.charAt ( pos )</h1>...</div><div id=\"excluded-sec-string.prototype.charcodeat\"><h1><span class=\"secnum\">21.1.3.2</span>#sec-string.prototype.charcodeat String.prototype.charCodeAt ( pos )</h1>...</div><div id=\"excluded-sec-string.prototype.codepointat\"><h1><span class=\"secnum\">21.1.3.3</span>#sec-string.prototype.codepointat String.prototype.codePointAt ( pos )</h1>...</div><div id=\"excluded-sec-string.prototype.concat\"><h1><span class=\"secnum\">21.1.3.4</span>#sec-string.prototype.concat String.prototype.concat ( ...args )</h1>...</div><div id=\"excluded-sec-string.prototype.constructor\"><h1><span class=\"secnum\">21.1.3.5</span>#sec-string.prototype.constructor String.prototype.constructor</h1>...</div><div id=\"excluded-sec-string.prototype.endswith\"><h1><span class=\"secnum\">21.1.3.6</span>#sec-string.prototype.endswith String.prototype.endsWith ( searchString [ , endPosition ] )</h1>...</div><div id=\"excluded-sec-string.prototype.includes\"><h1><span class=\"secnum\">21.1.3.7</span>#sec-string.prototype.includes String.prototype.includes ( searchString [ , position ] )</h1>...</div><div id=\"excluded-sec-string.prototype.indexof\"><h1><span class=\"secnum\">21.1.3.8</span>#sec-string.prototype.indexof String.prototype.indexOf ( searchString [ , position ] )</h1>...</div><div id=\"excluded-sec-string.prototype.lastindexof\"><h1><span class=\"secnum\">21.1.3.9</span>#sec-string.prototype.lastindexof String.prototype.lastIndexOf ( searchString [ , position ] )</h1>...</div><div id=\"excluded-sec-string.prototype.localecompare\"><h1><span class=\"secnum\">21.1.3.10</span>#sec-string.prototype.localecompare String.prototype.localeCompare ( that [ , reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-string.prototype.match\"><h1><span class=\"secnum\">21.1.3.11</span>#sec-string.prototype.match String.prototype.match ( regexp )</h1>...</div><div id=\"excluded-sec-string.prototype.matchall\"><h1><span class=\"secnum\">21.1.3.12</span>#sec-string.prototype.matchall String.prototype.matchAll ( regexp )</h1>...</div><div id=\"excluded-sec-string.prototype.normalize\"><h1><span class=\"secnum\">21.1.3.13</span>#sec-string.prototype.normalize String.prototype.normalize ( [ form ] )</h1>...</div><div id=\"excluded-sec-string.prototype.padend\"><h1><span class=\"secnum\">21.1.3.14</span>#sec-string.prototype.padend String.prototype.padEnd ( maxLength [ , fillString ] )</h1>...</div><div id=\"excluded-sec-string.prototype.padstart\"><h1><span class=\"secnum\">21.1.3.15</span>#sec-string.prototype.padstart String.prototype.padStart ( maxLength [ , fillString ] )</h1>...</div><div id=\"excluded-sec-string.prototype.repeat\"><h1><span class=\"secnum\">21.1.3.16</span>#sec-string.prototype.repeat String.prototype.repeat ( count )</h1>...</div><div id=\"excluded-sec-string.prototype.replace\"><h1><span class=\"secnum\">21.1.3.17</span>#sec-string.prototype.replace String.prototype.replace ( searchValue, replaceValue )</h1>...</div><div id=\"excluded-sec-string.prototype.replaceall\"><h1><span class=\"secnum\">21.1.3.18</span>#sec-string.prototype.replaceall String.prototype.replaceAll ( searchValue, replaceValue )</h1>...</div><div id=\"excluded-sec-string.prototype.search\"><h1><span class=\"secnum\">21.1.3.19</span>#sec-string.prototype.search String.prototype.search ( regexp )</h1>...</div><div id=\"excluded-sec-string.prototype.slice\"><h1><span class=\"secnum\">21.1.3.20</span>#sec-string.prototype.slice String.prototype.slice ( start, end )</h1>...</div><div id=\"excluded-sec-string.prototype.split\"><h1><span class=\"secnum\">21.1.3.21</span>#sec-string.prototype.split String.prototype.split ( separator, limit )</h1>...</div><div id=\"excluded-sec-string.prototype.startswith\"><h1><span class=\"secnum\">21.1.3.22</span>#sec-string.prototype.startswith String.prototype.startsWith ( searchString [ , position ] )</h1>...</div><div id=\"excluded-sec-string.prototype.substring\"><h1><span class=\"secnum\">21.1.3.23</span>#sec-string.prototype.substring String.prototype.substring ( start, end )</h1>...</div><div id=\"excluded-sec-string.prototype.tolocalelowercase\"><h1><span class=\"secnum\">21.1.3.24</span>#sec-string.prototype.tolocalelowercase String.prototype.toLocaleLowerCase ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-string.prototype.tolocaleuppercase\"><h1><span class=\"secnum\">21.1.3.25</span>#sec-string.prototype.tolocaleuppercase String.prototype.toLocaleUpperCase ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-string.prototype.tolowercase\"><h1><span class=\"secnum\">21.1.3.26</span>#sec-string.prototype.tolowercase String.prototype.toLowerCase ( )</h1>...</div><div id=\"excluded-sec-string.prototype.tostring\"><h1><span class=\"secnum\">21.1.3.27</span>#sec-string.prototype.tostring String.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-string.prototype.touppercase\"><h1><span class=\"secnum\">21.1.3.28</span>#sec-string.prototype.touppercase String.prototype.toUpperCase ( )</h1>...</div><div id=\"excluded-sec-string.prototype.trim\"><h1><span class=\"secnum\">21.1.3.29</span>#sec-string.prototype.trim String.prototype.trim ( )</h1>...</div><div id=\"excluded-sec-string.prototype.trimend\"><h1><span class=\"secnum\">21.1.3.30</span>#sec-string.prototype.trimend String.prototype.trimEnd ( )</h1>...</div><div id=\"excluded-sec-string.prototype.trimstart\"><h1><span class=\"secnum\">21.1.3.31</span>#sec-string.prototype.trimstart String.prototype.trimStart ( )</h1>...</div><div id=\"excluded-sec-string.prototype.valueof\"><h1><span class=\"secnum\">21.1.3.32</span>#sec-string.prototype.valueof String.prototype.valueOf ( )</h1>...</div><div id=\"excluded-sec-string.prototype-@@iterator\"><h1><span class=\"secnum\">21.1.3.33</span>#sec-string.prototype-@@iterator String.prototype [ @@iterator ] ( )</h1>...</div></emu-clause>\n\n    "}, "sec-properties-of-the-number-prototype-object": {"num": "20.1.3", "title": "#sec-properties-of-the-number-prototype-object Properties of the Number Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-number-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-number-prototype-object\">#sec-properties-of-the-number-prototype-object</span> Properties of the Number Prototype Object</h1>\n      <p>The Number prototype object:</p>\n      <ul>\n        <li>is <dfn>%NumberPrototype%</dfn>.</li>\n        <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n        <li>is itself a Number object; it has a [[NumberData]] internal slot with the value <emu-val>+0</emu-val>.</li>\n        <li>has a [[Prototype]] internal slot whose value is %Object.prototype%.</li>\n      </ul>\n      <p>Unless explicitly stated otherwise, the methods of the Number prototype object defined below are not generic and the <emu-val>this</emu-val> value passed to them must be either a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> or an object that has a [[NumberData]] internal slot that has been initialized to a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref>.</p>\n      <p>The abstract operation <dfn id=\"thisnumbervalue\" aoid=\"thisNumberValue\" oldids=\"sec-thisnumbervalue\">thisNumberValue<span id=\"sec-thisnumbervalue\"></span></dfn> takes argument <var>value</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Number, return <var>value</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Object and <var>value</var> has a [[NumberData]] internal slot, then<ol><li>Let <var>n</var> be <var>value</var>.[[NumberData]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>n</var>) is Number.</li><li>Return <var>n</var>.</li></ol></li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></emu-alg>\n      <p>The phrase &#8220;this <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref>&#8221; within the specification of a method refers to the result returned by calling the abstract operation <emu-xref href=\"#thisnumbervalue\"><a href=\"#thisnumbervalue\">thisNumberValue</a></emu-xref> with the <emu-val>this</emu-val> value of the method invocation passed as the argument.</p>\n\n      <div id=\"excluded-sec-number.prototype.constructor\"><h1><span class=\"secnum\">20.1.3.1</span>#sec-number.prototype.constructor Number.prototype.constructor</h1>...</div><div id=\"excluded-sec-number.prototype.toexponential\"><h1><span class=\"secnum\">20.1.3.2</span>#sec-number.prototype.toexponential Number.prototype.toExponential ( fractionDigits )</h1>...</div><div id=\"excluded-sec-number.prototype.tofixed\"><h1><span class=\"secnum\">20.1.3.3</span>#sec-number.prototype.tofixed Number.prototype.toFixed ( fractionDigits )</h1>...</div><div id=\"excluded-sec-number.prototype.tolocalestring\"><h1><span class=\"secnum\">20.1.3.4</span>#sec-number.prototype.tolocalestring Number.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-number.prototype.toprecision\"><h1><span class=\"secnum\">20.1.3.5</span>#sec-number.prototype.toprecision Number.prototype.toPrecision ( precision )</h1>...</div><div id=\"excluded-sec-number.prototype.tostring\"><h1><span class=\"secnum\">20.1.3.6</span>#sec-number.prototype.tostring Number.prototype.toString ( [ radix ] )</h1>...</div><div id=\"excluded-sec-number.prototype.valueof\"><h1><span class=\"secnum\">20.1.3.7</span>#sec-number.prototype.valueof Number.prototype.valueOf ( )</h1>...</div></emu-clause>\n\n    "}, "sec-InnerModuleLinking": {"num": "15.2.1.16.1.1", "title": "#sec-InnerModuleLinking InnerModuleLinking ( module, stack, index )", "html": "<emu-clause id=\"sec-InnerModuleLinking\" oldids=\"sec-innermoduleinstantiation\" aoid=\"InnerModuleLinking\">\n            <span id=\"sec-innermoduleinstantiation\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-InnerModuleLinking\">#sec-InnerModuleLinking</span> InnerModuleLinking ( <var>module</var>, <var>stack</var>, <var>index</var> )</h1>\n            <p>The abstract operation InnerModuleLinking takes arguments <var>module</var> (a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>), <var>stack</var>, and <var>index</var>. It is used by Link to perform the actual linking process for <var>module</var>, as well as recursively on all other modules in the dependency graph. The <var>stack</var> and <var>index</var> parameters, as well as a module's [[DFSIndex]] and [[DFSAncestorIndex]] fields, keep track of the depth-first search (DFS) traversal. In particular, [[DFSAncestorIndex]] is used to discover strongly connected components (SCCs), such that all modules in an SCC transition to <emu-const>linked</emu-const> together. It performs the following steps when called:</p>\n\n            <emu-alg><ol><li>If <var>module</var> is not a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li>Perform ? <var>module</var>.Link().</li><li>Return <var>index</var>.</li></ol></li><li>If <var>module</var>.[[Status]] is <emu-const>linking</emu-const>, <emu-const>linked</emu-const>, or <emu-const>evaluated</emu-const>, then<ol><li>Return <var>index</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>unlinked</emu-const>.</li><li>Set <var>module</var>.[[Status]] to <emu-const>linking</emu-const>.</li><li>Set <var>module</var>.[[DFSIndex]] to <var>index</var>.</li><li>Set <var>module</var>.[[DFSAncestorIndex]] to <var>index</var>.</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>Append <var>module</var> to <var>stack</var>.</li><li>For each String <var>required</var> that is an element of <var>module</var>.[[RequestedModules]], do<ol><li>Let <var>requiredModule</var> be ?&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>required</var>).</li><li>Set <var>index</var> to ?&#160;<emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>(<var>requiredModule</var>, <var>stack</var>, <var>index</var>).</li><li>If <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is either <emu-const>linking</emu-const>, <emu-const>linked</emu-const>, or <emu-const>evaluated</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is <emu-const>linking</emu-const> if and only if <var>requiredModule</var> is in <var>stack</var>.</li><li>If <var>requiredModule</var>.[[Status]] is <emu-const>linking</emu-const>, then<ol><li>Set <var>module</var>.[[DFSAncestorIndex]] to <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>module</var>.[[DFSAncestorIndex]], <var>requiredModule</var>.[[DFSAncestorIndex]]).</li></ol></li></ol></li></ol></li><li>Perform ? <var>module</var>.<emu-xref aoid=\"InitializeEnvironment\"><a href=\"#sec-source-text-module-record-initialize-environment\">InitializeEnvironment</a></emu-xref>().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> occurs exactly once in <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[DFSAncestorIndex]] is less than or equal to <var>module</var>.[[DFSIndex]].</li><li>If <var>module</var>.[[DFSAncestorIndex]] equals <var>module</var>.[[DFSIndex]], then<ol><li>Let <var>done</var> be <emu-val>false</emu-val>.</li><li>Repeat, while <var>done</var> is <emu-val>false</emu-val>,<ol><li>Let <var>requiredModule</var> be the last element in <var>stack</var>.</li><li>Remove the last element of <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>.</li><li>Set <var>requiredModule</var>.[[Status]] to <emu-const>linked</emu-const>.</li><li>If <var>requiredModule</var> and <var>module</var> are the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, set <var>done</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <var>index</var>.</li></ol></emu-alg>\n          </emu-clause>\n        "}, "sec-hasprimitivebase": {"num": "6.2.4.4", "title": "#sec-hasprimitivebase HasPrimitiveBase ( V )", "html": "<emu-clause id=\"sec-hasprimitivebase\" aoid=\"HasPrimitiveBase\" oldids=\"ao-hasprimitivebase\">\n        <span id=\"ao-hasprimitivebase\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hasprimitivebase\">#sec-hasprimitivebase</span> HasPrimitiveBase ( <var>V</var> )</h1>\n        <p>The abstract operation HasPrimitiveBase takes argument <var>V</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>V</var>) is <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>V</var>'s base value component) is Boolean, String, Symbol, BigInt, or Number, return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-stringtocodepoints": {"num": "10.1.5", "title": "#sec-stringtocodepoints Static Semantics: StringToCodePoints ( string )", "html": "<emu-clause id=\"sec-stringtocodepoints\" aoid=\"StringToCodePoints\" oldids=\"sec-utf16decodestring\">\n      <span id=\"sec-utf16decodestring\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-stringtocodepoints\">#sec-stringtocodepoints</span> Static Semantics: StringToCodePoints ( <var>string</var> )</h1>\n      <p>The abstract operation StringToCodePoints takes argument <var>string</var> (a String). It returns the sequence of Unicode code points that results from interpreting <var>string</var> as UTF-16 encoded Unicode text as described in <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>codePoints</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>size</var> be the length of <var>string</var>.</li><li>Let <var>position</var> be 0.</li><li>Repeat, while <var>position</var> &lt; <var>size</var>,<ol><li>Let <var>cp</var> be !&#160;<emu-xref aoid=\"CodePointAt\"><a href=\"#sec-codepointat\">CodePointAt</a></emu-xref>(<var>string</var>, <var>position</var>).</li><li>Append <var>cp</var>.[[CodePoint]] to <var>codePoints</var>.</li><li>Set <var>position</var> to <var>position</var> + <var>cp</var>.[[CodeUnitCount]].</li></ol></li><li>Return <var>codePoints</var>.</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-utf16decodesurrogatepair": {"num": "10.1.3", "title": "#sec-utf16decodesurrogatepair Static Semantics: UTF16SurrogatePairToCodePoint ( lead, trail )", "html": "<emu-clause id=\"sec-utf16decodesurrogatepair\" aoid=\"UTF16SurrogatePairToCodePoint\" oldids=\"sec-utf16decode,utf16decodesurrogatepair\">\n      <span id=\"utf16decodesurrogatepair\"></span><span id=\"sec-utf16decode\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-utf16decodesurrogatepair\">#sec-utf16decodesurrogatepair</span> Static Semantics: UTF16SurrogatePairToCodePoint ( <var>lead</var>, <var>trail</var> )</h1>\n      <p>The abstract operation UTF16SurrogatePairToCodePoint takes arguments <var>lead</var> (a code unit) and <var>trail</var> (a code unit). Two code units that form a UTF-16 <emu-xref href=\"#surrogate-pair\"><a href=\"#surrogate-pair\">surrogate pair</a></emu-xref> are converted to a code point. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lead</var> is a <emu-xref href=\"#leading-surrogate\"><a href=\"#leading-surrogate\">leading surrogate</a></emu-xref> and <var>trail</var> is a <emu-xref href=\"#trailing-surrogate\"><a href=\"#trailing-surrogate\">trailing surrogate</a></emu-xref>.</li><li>Let <var>cp</var> be (<var>lead</var> - 0xD800) &#215; 0x400 + (<var>trail</var> - 0xDC00) + 0x10000.</li><li>Return the code point <var>cp</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-exp-operator-static-semantics-assignmenttargettype": {"num": "12.6.2", "title": "#sec-exp-operator-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-exp-operator-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-exp-operator-static-semantics-assignmenttargettype\">\n      <span id=\"sec-exp-operator-static-semantics-isvalidsimpleassignmenttarget\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-exp-operator-static-semantics-assignmenttargettype\">#sec-exp-operator-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n      <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"ExponentiationExpression\">\n    <emu-nt><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d1905fcc\"><emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt><emu-t>**</emu-t><emu-nt><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>invalid</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-issuperreference": {"num": "6.2.4.7", "title": "#sec-issuperreference IsSuperReference ( V )", "html": "<emu-clause id=\"sec-issuperreference\" aoid=\"IsSuperReference\" oldids=\"ao-issuperreference\">\n        <span id=\"ao-issuperreference\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-issuperreference\">#sec-issuperreference</span> IsSuperReference ( <var>V</var> )</h1>\n        <p>The abstract operation IsSuperReference takes argument <var>V</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>V</var>) is <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>.</li><li>If <var>V</var> has a thisValue component, return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-samevaluenonnumeric": {"num": "7.2.13", "title": "#sec-samevaluenonnumeric SameValueNonNumeric ( x, y )", "html": "<emu-clause id=\"sec-samevaluenonnumeric\" aoid=\"SameValueNonNumeric\" oldids=\"sec-samevaluenonnumber\">\n      <span id=\"sec-samevaluenonnumber\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-samevaluenonnumeric\">#sec-samevaluenonnumeric</span> SameValueNonNumeric ( <var>x</var>, <var>y</var> )</h1>\n      <p>The abstract operation SameValueNonNumeric takes arguments <var>x</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>y</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and returns a completion record whose [[Type]] is <emu-const>normal</emu-const> and whose [[Value]] is a Boolean. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is not Number or BigInt.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is the same as <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Undefined, return <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Null, return <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is String, then<ol><li>If <var>x</var> and <var>y</var> are exactly the same sequence of code units (same length and same code units at corresponding indices), return <emu-val>true</emu-val>; otherwise, return <emu-val>false</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Boolean, then<ol><li>If <var>x</var> and <var>y</var> are both <emu-val>true</emu-val> or both <emu-val>false</emu-val>, return <emu-val>true</emu-val>; otherwise, return <emu-val>false</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Symbol, then<ol><li>If <var>x</var> and <var>y</var> are both the same Symbol value, return <emu-val>true</emu-val>; otherwise, return <emu-val>false</emu-val>.</li></ol></li><li>If <var>x</var> and <var>y</var> are the same Object value, return <emu-val>true</emu-val>. Otherwise, return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-moduledeclarationlinking": {"num": "15.2.1.16.1", "title": "#sec-moduledeclarationlinking Link ( ) Concrete Method", "html": "<emu-clause id=\"sec-moduledeclarationlinking\" oldids=\"sec-moduledeclarationinstantiation\">\n          <span id=\"sec-moduledeclarationinstantiation\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-moduledeclarationlinking\">#sec-moduledeclarationlinking</span> Link ( ) Concrete Method</h1>\n          <p>The Link concrete method of a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> implements the corresponding <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> abstract method.</p>\n          <p>On success, Link transitions this module's [[Status]] from <emu-const>unlinked</emu-const> to <emu-const>linked</emu-const>. On failure, an exception is thrown and this module's [[Status]] remains <emu-const>unlinked</emu-const>.</p>\n          <p>This abstract method performs the following steps (most of the work is done by the auxiliary function <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>):</p>\n\n          <emu-alg><ol><li>Let <var>module</var> be this <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is not <emu-const>linking</emu-const> or <emu-const>evaluating</emu-const>.</li><li>Let <var>stack</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>(<var>module</var>, <var>stack</var>, 0).</li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>For each <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> <var>m</var> in <var>stack</var>, do<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>m</var>.[[Status]] is <emu-const>linking</emu-const>.</li><li>Set <var>m</var>.[[Status]] to <emu-const>unlinked</emu-const>.</li><li>Set <var>m</var>.[[Environment]] to <emu-val>undefined</emu-val>.</li><li>Set <var>m</var>.[[DFSIndex]] to <emu-val>undefined</emu-val>.</li><li>Set <var>m</var>.[[DFSAncestorIndex]] to <emu-val>undefined</emu-val>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>unlinked</emu-const>.</li><li>Return <var>result</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>linked</emu-const> or <emu-const>evaluated</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>stack</var> is empty.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n          <div id=\"excluded-sec-InnerModuleLinking\"><h1><span class=\"secnum\">15.2.1.16.1.1</span>#sec-InnerModuleLinking InnerModuleLinking ( module, stack, index )</h1>...</div></emu-clause>\n\n        "}, "sec-jobs": {"num": "8.4", "title": "#sec-jobs Jobs and Host Operations to Enqueue Jobs", "html": "<emu-clause id=\"sec-jobs\" oldids=\"sec-jobs-and-job-queues,sec-enqueuejob,sec-runjobs,job-queue\">\n    <span id=\"job-queue\"></span><span id=\"sec-runjobs\"></span><span id=\"sec-enqueuejob\"></span><span id=\"sec-jobs-and-job-queues\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-jobs\">#sec-jobs</span> Jobs and Host Operations to Enqueue Jobs</h1>\n    <p>A <dfn id=\"job\">Job</dfn> is an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that initiates an ECMAScript computation when no other ECMAScript computation is currently in progress.</p>\n    <p>Jobs are scheduled for execution by ECMAScript <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> environments. This specification describes the <emu-xref href=\"#host-hook\"><a href=\"#host-hook\">host hook</a></emu-xref> <emu-xref aoid=\"HostEnqueuePromiseJob\"><a href=\"#sec-hostenqueuepromisejob\">HostEnqueuePromiseJob</a></emu-xref> to schedule one kind of job; hosts may define additional <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> which schedule jobs. Such operations accept a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> as the parameter and schedule it to be performed at some future time. Their implementations must conform to the following requirements:</p>\n\n    <ul>\n      <li>At some future point in time, when there is no <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is empty, the implementation must:\n        <ol>\n          <li>Perform any <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> preparation steps.</li>\n          <li><emu-xref aoid=\"Invoke\"><a href=\"#sec-invoke\">Invoke</a></emu-xref> the <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref>.</li>\n          <li>Perform any <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> cleanup steps, after which the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> must be empty.</li>\n        </ol>\n      </li>\n      <li>Only one <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> may be actively undergoing evaluation at any point in time.</li>\n      <li>Once evaluation of a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> starts, it must run to completion before evaluation of any other <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> starts.</li>\n      <li>The <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> must return a normal completion, implementing its own handling of errors.</li>\n    </ul>\n\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <emu-xref href=\"#host\"><a href=\"#host\">Host</a></emu-xref> environments are not required to treat Jobs uniformly with respect to scheduling. For example, web browsers and Node.js treat Promise-handling Jobs as a higher priority than other work; future features may add Jobs that are not treated at such a high priority.\n    </div></emu-note>\n\n    <p>At any particular time, <var>scriptOrModule</var> (a <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref>, a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, or <emu-val>null</emu-val>) is the <dfn id=\"job-activescriptormodule\">active script or module</dfn> if all of the following conditions are true:</p>\n    <ul>\n      <li><emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>() is <var>scriptOrModule</var>.</li>\n      <li>If <var>scriptOrModule</var> is a <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, let <var>ec</var> be the topmost <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> on the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> whose ScriptOrModule component is <var>scriptOrModule</var>. The <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> component of <var>ec</var> is <var>scriptOrModule</var>.[[Realm]].</li>\n    </ul>\n\n    <p>At any particular time, an execution is <dfn id=\"job-preparedtoevaluatecode\">prepared to evaluate ECMAScript code</dfn> if all of the following conditions are true:</p>\n    <ul>\n      <li>The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is not empty.</li>\n      <li>The <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> component of the topmost <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> on the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>.</li>\n    </ul>\n\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p><emu-xref href=\"#host\"><a href=\"#host\">Host</a></emu-xref> environments may prepare an execution to evaluate code by pushing execution contexts onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>. The specific steps are <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref>.</p>\n      <p>The specific choice of <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> is up to the <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref>. This initial <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> and <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> is only in use before any callback function is invoked. When a callback function related to a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref>, like a Promise handler, is invoked, the invocation pushes its own <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> and <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>.</p>\n    </div></emu-note>\n\n    <p>Particular kinds of Jobs have additional conformance requirements.</p>\n\n    <div id=\"excluded-sec-jobcallback-records\"><h1><span class=\"secnum\">8.4.1</span>#sec-jobcallback-records JobCallback Records</h1>...</div><div id=\"excluded-sec-hostmakejobcallback\"><h1><span class=\"secnum\">8.4.2</span>#sec-hostmakejobcallback HostMakeJobCallback ( callback )</h1>...</div><div id=\"excluded-sec-hostcalljobcallback\"><h1><span class=\"secnum\">8.4.3</span>#sec-hostcalljobcallback HostCallJobCallback ( jobCallback, V, argumentsList )</h1>...</div><div id=\"excluded-sec-hostenqueuepromisejob\"><h1><span class=\"secnum\">8.4.4</span>#sec-hostenqueuepromisejob HostEnqueuePromiseJob ( job, realm )</h1>...</div></emu-clause>\n\n  "}, "sec-environment-records": {"num": "8.1", "title": "#sec-environment-records Environment Records", "html": "<emu-clause id=\"sec-environment-records\" oldids=\"sec-lexical-environments\">\n    <span id=\"sec-lexical-environments\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-environment-records\">#sec-environment-records</span> Environment Records</h1>\n    <p><dfn>Environment Record</dfn> is a specification type used to define the association of <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt>s to specific variables and functions, based upon the lexical nesting structure of ECMAScript code. Usually an Environment Record is associated with some specific syntactic structure of ECMAScript code such as a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-BlockStatement\">BlockStatement</a></emu-nt>, or a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause of a <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt>. Each time such code is evaluated, a new Environment Record is created to record the identifier bindings that are created by that code.</p>\n    <p>Every Environment Record has an [[OuterEnv]] field, which is either <emu-val>null</emu-val> or a reference to an outer Environment Record. This is used to model the logical nesting of Environment Record values. The outer reference of an (inner) Environment Record is a reference to the Environment Record that logically surrounds the inner Environment Record. An outer Environment Record may, of course, have its own outer Environment Record. An Environment Record may serve as the outer environment for multiple inner Environment Records. For example, if a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> contains two nested <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>s then the Environment Records of each of the nested functions will have as their outer Environment Record the Environment Record of the current evaluation of the surrounding function.</p>\n    <p>Environment Records are purely specification mechanisms and need not correspond to any specific artefact of an ECMAScript implementation. It is impossible for an ECMAScript program to directly access or manipulate such values.</p>\n\n    <div id=\"excluded-sec-the-environment-record-type-hierarchy\"><h1><span class=\"secnum\">8.1.1</span>#sec-the-environment-record-type-hierarchy The Environment Record Type Hierarchy</h1>...</div><div id=\"excluded-sec-environment-record-operations\"><h1><span class=\"secnum\">8.1.2</span>#sec-environment-record-operations Environment Record Operations</h1>...</div></emu-clause>\n\n  "}, "sec-numeric-types-number-divide": {"num": "6.1.6.1.5", "title": "#sec-numeric-types-number-divide Number::divide ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-number-divide\" oldids=\"sec-applying-the-div-operator\">\n          <span id=\"sec-applying-the-div-operator\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-divide\">#sec-numeric-types-number-divide</span> Number::divide ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation Number::divide takes arguments <var>x</var> (a Number) and <var>y</var> (a Number). It performs division, producing the quotient of <var>x</var> and <var>y</var>; <var>x</var> is the dividend and <var>y</var> is the divisor. The result is determined by the specification of <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> arithmetic:</p>\n          <ul>\n            <li>\n              If either operand is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n            </li>\n            <li>\n              The sign of the result is positive if both operands have the same sign, negative if the operands have different signs.\n            </li>\n            <li>\n              Division of an infinity by an infinity results in <emu-val>NaN</emu-val>.\n            </li>\n            <li>\n              Division of an infinity by a zero results in an infinity. The sign is determined by the rule already stated above.\n            </li>\n            <li>\n              Division of an infinity by a nonzero finite value results in a signed infinity. The sign is determined by the rule already stated above.\n            </li>\n            <li>\n              Division of a finite value by an infinity results in zero. The sign is determined by the rule already stated above.\n            </li>\n            <li>\n              Division of a zero by a zero results in <emu-val>NaN</emu-val>; division of zero by any other finite value results in zero, with the sign determined by the rule already stated above.\n            </li>\n            <li>\n              Division of a nonzero finite value by a zero results in a signed infinity. The sign is determined by the rule already stated above.\n            </li>\n            <li>\n              In the remaining cases, where neither an infinity, nor a zero, nor <emu-val>NaN</emu-val> is involved, the quotient is computed and rounded to the nearest representable value using <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> roundTiesToEven mode. If the magnitude is too large to represent, the operation overflows; the result is then an infinity of appropriate sign. If the magnitude is too small to represent, the operation underflows and the result is a zero of the appropriate sign. The ECMAScript language requires support of gradual underflow as defined by <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref>.\n            </li>\n          </ul>\n        </emu-clause>\n\n        "}, "sec-ordinaryfunctioncreate": {"num": "9.2.3", "title": "#sec-ordinaryfunctioncreate OrdinaryFunctionCreate ( functionPrototype, sourceText, ParameterList, Body, thisMode, Scope )", "html": "<emu-clause id=\"sec-ordinaryfunctioncreate\" aoid=\"OrdinaryFunctionCreate\" oldids=\"sec-functionallocate,sec-functioninitialize,sec-functioncreate,sec-generatorfunctioncreate,sec-asyncgeneratorfunctioncreate,sec-async-functions-abstract-operations-async-function-create\">\n      <span id=\"sec-async-functions-abstract-operations-async-function-create\"></span><span id=\"sec-asyncgeneratorfunctioncreate\"></span><span id=\"sec-generatorfunctioncreate\"></span><span id=\"sec-functioncreate\"></span><span id=\"sec-functioninitialize\"></span><span id=\"sec-functionallocate\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinaryfunctioncreate\">#sec-ordinaryfunctioncreate</span> OrdinaryFunctionCreate ( <var>functionPrototype</var>, <var>sourceText</var>, <var>ParameterList</var>, <var>Body</var>, <var>thisMode</var>, <var>Scope</var> )</h1>\n      <p>The abstract operation OrdinaryFunctionCreate takes arguments <var>functionPrototype</var> (an Object), <var>sourceText</var> (a sequence of Unicode code points), <var>ParameterList</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>Body</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>thisMode</var> (either <emu-const>lexical-this</emu-const> or <emu-const>non-lexical-this</emu-const>), and <var>Scope</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). <var>sourceText</var> is the source text of the syntactic definition of the function to be created. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>functionPrototype</var>) is Object.</li><li>Let <var>internalSlotsList</var> be the internal slots listed in <emu-xref href=\"#table-27\"><a href=\"#table-27\" class=\"excluded-xref\" excluded-id=\"table-27\">#table-27</a></emu-xref>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>functionPrototype</var>, <var>internalSlotsList</var>).</li><li>Set <var>F</var>.[[Call]] to the definition specified in <emu-xref href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\"><a href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects-call-thisargument-argumentslist\">#sec-ecmascript-function-objects-call-thisargument-argumentslist</a></emu-xref>.</li><li>Set <var>F</var>.[[SourceText]] to <var>sourceText</var>.</li><li>Set <var>F</var>.[[FormalParameters]] to <var>ParameterList</var>.</li><li>Set <var>F</var>.[[ECMAScriptCode]] to <var>Body</var>.</li><li>If the source text matching <var>Body</var> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>Strict</var> be <emu-val>true</emu-val>; else let <var>Strict</var> be <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Strict]] to <var>Strict</var>.</li><li>If <var>thisMode</var> is <emu-const>lexical-this</emu-const>, set <var>F</var>.[[ThisMode]] to <emu-const>lexical</emu-const>.</li><li>Else if <var>Strict</var> is <emu-val>true</emu-val>, set <var>F</var>.[[ThisMode]] to <emu-const>strict</emu-const>.</li><li>Else, set <var>F</var>.[[ThisMode]] to <emu-const>global</emu-const>.</li><li>Set <var>F</var>.[[IsClassConstructor]] to <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Environment]] to <var>Scope</var>.</li><li>Set <var>F</var>.[[ScriptOrModule]] to <emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>().</li><li>Set <var>F</var>.[[Realm]] to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Set <var>F</var>.[[HomeObject]] to <emu-val>undefined</emu-val>.</li><li>Let <var>len</var> be the ExpectedArgumentCount of <var>ParameterList</var>.</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionLength\"><a href=\"#sec-setfunctionlength\">SetFunctionLength</a></emu-xref>(<var>F</var>, <var>len</var>).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-properties-of-the-date-prototype-object": {"num": "20.4.4", "title": "#sec-properties-of-the-date-prototype-object Properties of the Date Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-date-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-date-prototype-object\">#sec-properties-of-the-date-prototype-object</span> Properties of the Date Prototype Object</h1>\n      <p>The Date prototype object:</p>\n      <ul>\n        <li>is <dfn>%DatePrototype%</dfn>.</li>\n        <li>is itself an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n        <li>is not a Date instance and does not have a [[DateValue]] internal slot.</li>\n        <li>has a [[Prototype]] internal slot whose value is %Object.prototype%.</li>\n      </ul>\n      <p>Unless explicitly defined otherwise, the methods of the Date prototype object defined below are not generic and the <emu-val>this</emu-val> value passed to them must be an object that has a [[DateValue]] internal slot that has been initialized to a <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref>.</p>\n      <p>The abstract operation <dfn id=\"thistimevalue\" aoid=\"thisTimeValue\" oldids=\"sec-thistimevalue\">thisTimeValue<span id=\"sec-thistimevalue\"></span></dfn> takes argument <var>value</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Object and <var>value</var> has a [[DateValue]] internal slot, then<ol><li>Return <var>value</var>.[[DateValue]].</li></ol></li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></emu-alg>\n      <p>In following descriptions of functions that are properties of the Date prototype object, the phrase &#8220;<dfn id=\"this-Date-object\">this Date object</dfn>&#8221; refers to the object that is the <emu-val>this</emu-val> value for the invocation of the function. If the Type of the <emu-val>this</emu-val> value is not Object, a <emu-val>TypeError</emu-val> exception is thrown. The phrase &#8220;<dfn id=\"this-time-value\">this time value</dfn>&#8221; within the specification of a method refers to the result returned by calling the abstract operation <emu-xref href=\"#thistimevalue\"><a href=\"#thistimevalue\">thisTimeValue</a></emu-xref> with the <emu-val>this</emu-val> value of the method invocation passed as the argument.</p>\n\n      <div id=\"excluded-sec-date.prototype.constructor\"><h1><span class=\"secnum\">20.4.4.1</span>#sec-date.prototype.constructor Date.prototype.constructor</h1>...</div><div id=\"excluded-sec-date.prototype.getdate\"><h1><span class=\"secnum\">20.4.4.2</span>#sec-date.prototype.getdate Date.prototype.getDate ( )</h1>...</div><div id=\"excluded-sec-date.prototype.getday\"><h1><span class=\"secnum\">20.4.4.3</span>#sec-date.prototype.getday Date.prototype.getDay ( )</h1>...</div><div id=\"excluded-sec-date.prototype.getfullyear\"><h1><span class=\"secnum\">20.4.4.4</span>#sec-date.prototype.getfullyear Date.prototype.getFullYear ( )</h1>...</div><div id=\"excluded-sec-date.prototype.gethours\"><h1><span class=\"secnum\">20.4.4.5</span>#sec-date.prototype.gethours Date.prototype.getHours ( )</h1>...</div><div id=\"excluded-sec-date.prototype.getmilliseconds\"><h1><span class=\"secnum\">20.4.4.6</span>#sec-date.prototype.getmilliseconds Date.prototype.getMilliseconds ( )</h1>...</div><div id=\"excluded-sec-date.prototype.getminutes\"><h1><span class=\"secnum\">20.4.4.7</span>#sec-date.prototype.getminutes Date.prototype.getMinutes ( )</h1>...</div><div id=\"excluded-sec-date.prototype.getmonth\"><h1><span class=\"secnum\">20.4.4.8</span>#sec-date.prototype.getmonth Date.prototype.getMonth ( )</h1>...</div><div id=\"excluded-sec-date.prototype.getseconds\"><h1><span class=\"secnum\">20.4.4.9</span>#sec-date.prototype.getseconds Date.prototype.getSeconds ( )</h1>...</div><div id=\"excluded-sec-date.prototype.gettime\"><h1><span class=\"secnum\">20.4.4.10</span>#sec-date.prototype.gettime Date.prototype.getTime ( )</h1>...</div><div id=\"excluded-sec-date.prototype.gettimezoneoffset\"><h1><span class=\"secnum\">20.4.4.11</span>#sec-date.prototype.gettimezoneoffset Date.prototype.getTimezoneOffset ( )</h1>...</div><div id=\"excluded-sec-date.prototype.getutcdate\"><h1><span class=\"secnum\">20.4.4.12</span>#sec-date.prototype.getutcdate Date.prototype.getUTCDate ( )</h1>...</div><div id=\"excluded-sec-date.prototype.getutcday\"><h1><span class=\"secnum\">20.4.4.13</span>#sec-date.prototype.getutcday Date.prototype.getUTCDay ( )</h1>...</div><div id=\"excluded-sec-date.prototype.getutcfullyear\"><h1><span class=\"secnum\">20.4.4.14</span>#sec-date.prototype.getutcfullyear Date.prototype.getUTCFullYear ( )</h1>...</div><div id=\"excluded-sec-date.prototype.getutchours\"><h1><span class=\"secnum\">20.4.4.15</span>#sec-date.prototype.getutchours Date.prototype.getUTCHours ( )</h1>...</div><div id=\"excluded-sec-date.prototype.getutcmilliseconds\"><h1><span class=\"secnum\">20.4.4.16</span>#sec-date.prototype.getutcmilliseconds Date.prototype.getUTCMilliseconds ( )</h1>...</div><div id=\"excluded-sec-date.prototype.getutcminutes\"><h1><span class=\"secnum\">20.4.4.17</span>#sec-date.prototype.getutcminutes Date.prototype.getUTCMinutes ( )</h1>...</div><div id=\"excluded-sec-date.prototype.getutcmonth\"><h1><span class=\"secnum\">20.4.4.18</span>#sec-date.prototype.getutcmonth Date.prototype.getUTCMonth ( )</h1>...</div><div id=\"excluded-sec-date.prototype.getutcseconds\"><h1><span class=\"secnum\">20.4.4.19</span>#sec-date.prototype.getutcseconds Date.prototype.getUTCSeconds ( )</h1>...</div><div id=\"excluded-sec-date.prototype.setdate\"><h1><span class=\"secnum\">20.4.4.20</span>#sec-date.prototype.setdate Date.prototype.setDate ( date )</h1>...</div><div id=\"excluded-sec-date.prototype.setfullyear\"><h1><span class=\"secnum\">20.4.4.21</span>#sec-date.prototype.setfullyear Date.prototype.setFullYear ( year [ , month [ , date ] ] )</h1>...</div><div id=\"excluded-sec-date.prototype.sethours\"><h1><span class=\"secnum\">20.4.4.22</span>#sec-date.prototype.sethours Date.prototype.setHours ( hour [ , min [ , sec [ , ms ] ] ] )</h1>...</div><div id=\"excluded-sec-date.prototype.setmilliseconds\"><h1><span class=\"secnum\">20.4.4.23</span>#sec-date.prototype.setmilliseconds Date.prototype.setMilliseconds ( ms )</h1>...</div><div id=\"excluded-sec-date.prototype.setminutes\"><h1><span class=\"secnum\">20.4.4.24</span>#sec-date.prototype.setminutes Date.prototype.setMinutes ( min [ , sec [ , ms ] ] )</h1>...</div><div id=\"excluded-sec-date.prototype.setmonth\"><h1><span class=\"secnum\">20.4.4.25</span>#sec-date.prototype.setmonth Date.prototype.setMonth ( month [ , date ] )</h1>...</div><div id=\"excluded-sec-date.prototype.setseconds\"><h1><span class=\"secnum\">20.4.4.26</span>#sec-date.prototype.setseconds Date.prototype.setSeconds ( sec [ , ms ] )</h1>...</div><div id=\"excluded-sec-date.prototype.settime\"><h1><span class=\"secnum\">20.4.4.27</span>#sec-date.prototype.settime Date.prototype.setTime ( time )</h1>...</div><div id=\"excluded-sec-date.prototype.setutcdate\"><h1><span class=\"secnum\">20.4.4.28</span>#sec-date.prototype.setutcdate Date.prototype.setUTCDate ( date )</h1>...</div><div id=\"excluded-sec-date.prototype.setutcfullyear\"><h1><span class=\"secnum\">20.4.4.29</span>#sec-date.prototype.setutcfullyear Date.prototype.setUTCFullYear ( year [ , month [ , date ] ] )</h1>...</div><div id=\"excluded-sec-date.prototype.setutchours\"><h1><span class=\"secnum\">20.4.4.30</span>#sec-date.prototype.setutchours Date.prototype.setUTCHours ( hour [ , min [ , sec [ , ms ] ] ] )</h1>...</div><div id=\"excluded-sec-date.prototype.setutcmilliseconds\"><h1><span class=\"secnum\">20.4.4.31</span>#sec-date.prototype.setutcmilliseconds Date.prototype.setUTCMilliseconds ( ms )</h1>...</div><div id=\"excluded-sec-date.prototype.setutcminutes\"><h1><span class=\"secnum\">20.4.4.32</span>#sec-date.prototype.setutcminutes Date.prototype.setUTCMinutes ( min [ , sec [ , ms ] ] )</h1>...</div><div id=\"excluded-sec-date.prototype.setutcmonth\"><h1><span class=\"secnum\">20.4.4.33</span>#sec-date.prototype.setutcmonth Date.prototype.setUTCMonth ( month [ , date ] )</h1>...</div><div id=\"excluded-sec-date.prototype.setutcseconds\"><h1><span class=\"secnum\">20.4.4.34</span>#sec-date.prototype.setutcseconds Date.prototype.setUTCSeconds ( sec [ , ms ] )</h1>...</div><div id=\"excluded-sec-date.prototype.todatestring\"><h1><span class=\"secnum\">20.4.4.35</span>#sec-date.prototype.todatestring Date.prototype.toDateString ( )</h1>...</div><div id=\"excluded-sec-date.prototype.toisostring\"><h1><span class=\"secnum\">20.4.4.36</span>#sec-date.prototype.toisostring Date.prototype.toISOString ( )</h1>...</div><div id=\"excluded-sec-date.prototype.tojson\"><h1><span class=\"secnum\">20.4.4.37</span>#sec-date.prototype.tojson Date.prototype.toJSON ( key )</h1>...</div><div id=\"excluded-sec-date.prototype.tolocaledatestring\"><h1><span class=\"secnum\">20.4.4.38</span>#sec-date.prototype.tolocaledatestring Date.prototype.toLocaleDateString ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-date.prototype.tolocalestring\"><h1><span class=\"secnum\">20.4.4.39</span>#sec-date.prototype.tolocalestring Date.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-date.prototype.tolocaletimestring\"><h1><span class=\"secnum\">20.4.4.40</span>#sec-date.prototype.tolocaletimestring Date.prototype.toLocaleTimeString ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-date.prototype.tostring\"><h1><span class=\"secnum\">20.4.4.41</span>#sec-date.prototype.tostring Date.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-date.prototype.totimestring\"><h1><span class=\"secnum\">20.4.4.42</span>#sec-date.prototype.totimestring Date.prototype.toTimeString ( )</h1>...</div><div id=\"excluded-sec-date.prototype.toutcstring\"><h1><span class=\"secnum\">20.4.4.43</span>#sec-date.prototype.toutcstring Date.prototype.toUTCString ( )</h1>...</div><div id=\"excluded-sec-date.prototype.valueof\"><h1><span class=\"secnum\">20.4.4.44</span>#sec-date.prototype.valueof Date.prototype.valueOf ( )</h1>...</div><div id=\"excluded-sec-date.prototype-@@toprimitive\"><h1><span class=\"secnum\">20.4.4.45</span>#sec-date.prototype-@@toprimitive Date.prototype [ @@toPrimitive ] ( hint )</h1>...</div></emu-clause>\n\n    "}, "sec-isunresolvablereference": {"num": "6.2.4.6", "title": "#sec-isunresolvablereference IsUnresolvableReference ( V )", "html": "<emu-clause id=\"sec-isunresolvablereference\" aoid=\"IsUnresolvableReference\" oldids=\"ao-isunresolvablereference\">\n        <span id=\"ao-isunresolvablereference\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isunresolvablereference\">#sec-isunresolvablereference</span> IsUnresolvableReference ( <var>V</var> )</h1>\n        <p>The abstract operation IsUnresolvableReference takes argument <var>V</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>V</var>) is <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>.</li><li>If the base value component of <var>V</var> is <emu-val>undefined</emu-val>, return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-typedarray-objects": {"num": "22.2", "title": "#sec-typedarray-objects TypedArray Objects", "html": "<emu-clause id=\"sec-typedarray-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-typedarray-objects\">#sec-typedarray-objects</span> TypedArray Objects</h1>\n    <p><var>TypedArray</var> objects present an array-like view of an underlying binary data buffer (<emu-xref href=\"#sec-arraybuffer-objects\"><a href=\"#sec-arraybuffer-objects\" class=\"excluded-xref\" excluded-id=\"sec-arraybuffer-objects\">#sec-arraybuffer-objects</a></emu-xref>). Each element of a <var>TypedArray</var> instance has the same underlying binary scalar data type. There is a distinct <var>TypedArray</var> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>, listed in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref>, for each of the supported element types. Each <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> has a corresponding distinct prototype object.</p>\n    <emu-table id=\"table-the-typedarray-constructors\" caption=\"The TypedArray Constructors\" oldids=\"table-49\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</span>: The TypedArray Constructors</figcaption>\n      <span id=\"table-49\"></span><table>\n        <tbody>\n        <tr>\n          <th>\n            <emu-xref href=\"#constructor\"><a href=\"#constructor\">Constructor</a></emu-xref> Name and Intrinsic\n          </th>\n          <th>\n            Element Type\n          </th>\n          <th>\n            Element Size\n          </th>\n          <th>\n            Conversion Operation\n          </th>\n          <th>\n            Description\n          </th>\n        </tr>\n        <tr>\n          <td>\n            Int8Array\n            <br>\n            <dfn>%Int8Array%</dfn>\n          </td>\n          <td>\n            <emu-const>Int8</emu-const>\n          </td>\n          <td>\n            1\n          </td>\n          <td>\n            <emu-xref aoid=\"ToInt8\"><a href=\"#sec-toint8\">ToInt8</a></emu-xref>\n          </td>\n          <td>\n            8-bit two's complement signed <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            Uint8Array\n            <br>\n            <dfn>%Uint8Array%</dfn>\n          </td>\n          <td>\n            <emu-const>Uint8</emu-const>\n          </td>\n          <td>\n            1\n          </td>\n          <td>\n            <emu-xref aoid=\"ToUint8\"><a href=\"#sec-touint8\">ToUint8</a></emu-xref>\n          </td>\n          <td>\n            8-bit unsigned <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            Uint8ClampedArray\n            <br>\n            <dfn>%Uint8ClampedArray%</dfn>\n          </td>\n          <td>\n            <emu-const>Uint8C</emu-const>\n          </td>\n          <td>\n            1\n          </td>\n          <td>\n            <emu-xref aoid=\"ToUint8Clamp\"><a href=\"#sec-touint8clamp\">ToUint8Clamp</a></emu-xref>\n          </td>\n          <td>\n            8-bit unsigned <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> (clamped conversion)\n          </td>\n        </tr>\n        <tr>\n          <td>\n            Int16Array\n            <br>\n            <dfn>%Int16Array%</dfn>\n          </td>\n          <td>\n            <emu-const>Int16</emu-const>\n          </td>\n          <td>\n            2\n          </td>\n          <td>\n            <emu-xref aoid=\"ToInt16\"><a href=\"#sec-toint16\">ToInt16</a></emu-xref>\n          </td>\n          <td>\n            16-bit two's complement signed <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            Uint16Array\n            <br>\n            <dfn>%Uint16Array%</dfn>\n          </td>\n          <td>\n            <emu-const>Uint16</emu-const>\n          </td>\n          <td>\n            2\n          </td>\n          <td>\n            <emu-xref aoid=\"ToUint16\"><a href=\"#sec-touint16\">ToUint16</a></emu-xref>\n          </td>\n          <td>\n            16-bit unsigned <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            Int32Array\n            <br>\n            <dfn>%Int32Array%</dfn>\n          </td>\n          <td>\n            <emu-const>Int32</emu-const>\n          </td>\n          <td>\n            4\n          </td>\n          <td>\n            <emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>\n          </td>\n          <td>\n            32-bit two's complement signed <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            Uint32Array\n            <br>\n            <dfn>%Uint32Array%</dfn>\n          </td>\n          <td>\n            <emu-const>Uint32</emu-const>\n          </td>\n          <td>\n            4\n          </td>\n          <td>\n            <emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>\n          </td>\n          <td>\n            32-bit unsigned <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            BigInt64Array\n            <br>\n            <dfn>%BigInt64Array%</dfn>\n          </td>\n          <td>\n            <emu-const>BigInt64</emu-const>\n          </td>\n          <td>\n            8\n          </td>\n          <td>\n            <emu-xref aoid=\"ToBigInt64\"><a href=\"#sec-tobigint64\">ToBigInt64</a></emu-xref>\n          </td>\n          <td>\n            64-bit two's complement signed <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            BigUint64Array\n            <br>\n            <dfn>%BigUint64Array%</dfn>\n          </td>\n          <td>\n            <emu-const>BigUint64</emu-const>\n          </td>\n          <td>\n            8\n          </td>\n          <td>\n            <emu-xref aoid=\"ToBigUint64\"><a href=\"#sec-tobiguint64\">ToBigUint64</a></emu-xref>\n          </td>\n          <td>\n            64-bit unsigned <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            Float32Array\n            <br>\n            <dfn>%Float32Array%</dfn>\n          </td>\n          <td>\n            <emu-const>Float32</emu-const>\n          </td>\n          <td>\n            4\n          </td>\n          <td>\n          </td>\n          <td>\n            32-bit IEEE floating point\n          </td>\n        </tr>\n        <tr>\n          <td>\n            Float64Array\n            <br>\n            <dfn>%Float64Array%</dfn>\n          </td>\n          <td>\n            <emu-const>Float64</emu-const>\n          </td>\n          <td>\n            8\n          </td>\n          <td>\n          </td>\n          <td>\n            64-bit IEEE floating point\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>In the definitions below, references to <var>TypedArray</var> should be replaced with the appropriate <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> name from the above table.</p>\n\n    <div id=\"excluded-sec-%typedarray%-intrinsic-object\"><h1><span class=\"secnum\">22.2.1</span>#sec-%typedarray%-intrinsic-object The %TypedArray% Intrinsic Object</h1>...</div><div id=\"excluded-sec-properties-of-the-%typedarray%-intrinsic-object\"><h1><span class=\"secnum\">22.2.2</span>#sec-properties-of-the-%typedarray%-intrinsic-object Properties of the %TypedArray% Intrinsic Object</h1>...</div><div id=\"excluded-sec-properties-of-the-%typedarrayprototype%-object\"><h1><span class=\"secnum\">22.2.3</span>#sec-properties-of-the-%typedarrayprototype%-object Properties of the %TypedArray.prototype% Object</h1>...</div><div id=\"excluded-sec-typedarray-constructors\"><h1><span class=\"secnum\">22.2.4</span>#sec-typedarray-constructors The TypedArray Constructors</h1>...</div><div id=\"excluded-sec-properties-of-the-typedarray-constructors\"><h1><span class=\"secnum\">22.2.5</span>#sec-properties-of-the-typedarray-constructors Properties of the TypedArray Constructors</h1>...</div><div id=\"excluded-sec-properties-of-typedarray-prototype-objects\"><h1><span class=\"secnum\">22.2.6</span>#sec-properties-of-typedarray-prototype-objects Properties of the TypedArray Prototype Objects</h1>...</div><div id=\"excluded-sec-properties-of-typedarray-instances\"><h1><span class=\"secnum\">22.2.7</span>#sec-properties-of-typedarray-instances Properties of TypedArray Instances</h1>...</div></emu-clause>\n"}, "sec-multiplicative-operators-static-semantics-assignmenttargettype": {"num": "12.7.2", "title": "#sec-multiplicative-operators-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-multiplicative-operators-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-multiplicative-operators-static-semantics-assignmenttargettype\">\n      <span id=\"sec-multiplicative-operators-static-semantics-isvalidsimpleassignmenttarget\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-multiplicative-operators-static-semantics-assignmenttargettype\">#sec-multiplicative-operators-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n      <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"MultiplicativeExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"fb9fe2a0\"><emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt><emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt><emu-nt><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>invalid</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-evaluate-property-access-with-expression-key": {"num": "12.3.3", "title": "#sec-evaluate-property-access-with-expression-key Runtime Semantics: EvaluatePropertyAccessWithExpressionKey ( baseValue, expression, strict )", "html": "<emu-clause id=\"sec-evaluate-property-access-with-expression-key\" aoid=\"EvaluatePropertyAccessWithExpressionKey\" oldids=\"sec-evaluate-expression-key-property-access\">\n      <span id=\"sec-evaluate-expression-key-property-access\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-evaluate-property-access-with-expression-key\">#sec-evaluate-property-access-with-expression-key</span> Runtime Semantics: EvaluatePropertyAccessWithExpressionKey ( <var>baseValue</var>, <var>expression</var>, <var>strict</var> )</h1>\n      <p>The abstract operation EvaluatePropertyAccessWithExpressionKey takes arguments <var>baseValue</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>expression</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), and <var>strict</var> (a Boolean). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>propertyNameReference</var> be the result of evaluating <var>expression</var>.</li><li>Let <var>propertyNameValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>propertyNameReference</var>).</li><li>Let <var>bv</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<var>baseValue</var>).</li><li>Let <var>propertyKey</var> be ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>propertyNameValue</var>).</li><li>Return a value of type <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref> whose base value component is <var>bv</var>, whose referenced name component is <var>propertyKey</var>, and whose strict reference flag is <var>strict</var>.</li></ol></emu-alg>\n    </emu-clause>\n    "}, "sec-identifiers-static-semantics-assignmenttargettype": {"num": "12.1.3", "title": "#sec-identifiers-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-identifiers-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-identifiers-static-semantics-assignmenttargettype\">\n      <span id=\"sec-identifiers-static-semantics-isvalidsimpleassignmenttarget\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-identifiers-static-semantics-assignmenttargettype\">#sec-identifiers-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n      <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"IdentifierReference\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"06b6ace8\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>If this <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> is contained in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and StringValue of <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> is <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val>, return <emu-const>invalid</emu-const>.</li><li>Return <emu-const>simple</emu-const>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IdentifierReference\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>simple</emu-const>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IdentifierReference\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"857d4354\"><emu-t>await</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>simple</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-numeric-types-number-exponentiate": {"num": "6.1.6.1.3", "title": "#sec-numeric-types-number-exponentiate Number::exponentiate ( base, exponent )", "html": "<emu-clause id=\"sec-numeric-types-number-exponentiate\" oldids=\"sec-applying-the-exp-operator\">\n          <span id=\"sec-applying-the-exp-operator\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-exponentiate\">#sec-numeric-types-number-exponentiate</span> Number::exponentiate ( <var>base</var>, <var>exponent</var> )</h1>\n          <p>The abstract operation Number::exponentiate takes arguments <var>base</var> (a Number) and <var>exponent</var> (a Number). It returns an <emu-xref href=\"#implementation-approximated\"><a href=\"#implementation-approximated\">implementation-approximated</a></emu-xref> value representing the result of raising <var>base</var> to the power <var>exponent</var>, subject to the following requirements:</p>\n          <ul>\n            <li>If <var>exponent</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.</li>\n            <li>If <var>exponent</var> is <emu-val>+0</emu-val>, the result is 1, even if <var>base</var> is <emu-val>NaN</emu-val>.</li>\n            <li>If <var>exponent</var> is <emu-val>-0</emu-val>, the result is 1, even if <var>base</var> is <emu-val>NaN</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>NaN</emu-val> and <var>exponent</var> is nonzero, the result is <emu-val>NaN</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) &gt; 1 and <var>exponent</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) &gt; 1 and <var>exponent</var> is <emu-val>-&#8734;</emu-val>, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) is 1 and <var>exponent</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>NaN</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) is 1 and <var>exponent</var> is <emu-val>-&#8734;</emu-val>, the result is <emu-val>NaN</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) &lt; 1 and <var>exponent</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) &lt; 1 and <var>exponent</var> is <emu-val>-&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>+&#8734;</emu-val> and <var>exponent</var> &gt; 0, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>+&#8734;</emu-val> and <var>exponent</var> &lt; 0, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-&#8734;</emu-val> and <var>exponent</var> &gt; 0 and <var>exponent</var> is an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>-&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-&#8734;</emu-val> and <var>exponent</var> &gt; 0 and <var>exponent</var> is not an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-&#8734;</emu-val> and <var>exponent</var> &lt; 0 and <var>exponent</var> is an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>-0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-&#8734;</emu-val> and <var>exponent</var> &lt; 0 and <var>exponent</var> is not an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>+0</emu-val> and <var>exponent</var> &gt; 0, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>+0</emu-val> and <var>exponent</var> &lt; 0, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-0</emu-val> and <var>exponent</var> &gt; 0 and <var>exponent</var> is an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>-0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-0</emu-val> and <var>exponent</var> &gt; 0 and <var>exponent</var> is not an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-0</emu-val> and <var>exponent</var> &lt; 0 and <var>exponent</var> is an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>-&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-0</emu-val> and <var>exponent</var> &lt; 0 and <var>exponent</var> is not an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <var>base</var> &lt; 0 and <var>base</var> is finite and <var>exponent</var> is finite and <var>exponent</var> is not an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>NaN</emu-val>.</li>\n          </ul>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>The result of <var>base</var> <code>**</code> <var>exponent</var> when <var>base</var> is <emu-val>1</emu-val> or <emu-val>-1</emu-val> and <var>exponent</var> is <emu-val>+Infinity</emu-val> or <emu-val>-Infinity</emu-val>, or when <var>base</var> is <emu-val>1</emu-val> and <var>exponent</var> is <emu-val>NaN</emu-val>, differs from <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref>. The first edition of ECMAScript specified a result of <emu-val>NaN</emu-val> for this operation, whereas later versions of <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> specified <emu-val>1</emu-val>. The historical ECMAScript behaviour is preserved for compatibility reasons.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-properties-of-the-symbol-prototype-object": {"num": "19.4.3", "title": "#sec-properties-of-the-symbol-prototype-object Properties of the Symbol Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-symbol-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-symbol-prototype-object\">#sec-properties-of-the-symbol-prototype-object</span> Properties of the Symbol Prototype Object</h1>\n      <p>The Symbol prototype object:</p>\n      <ul>\n        <li>is <dfn>%SymbolPrototype%</dfn>.</li>\n        <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n        <li>is not a Symbol instance and does not have a [[SymbolData]] internal slot.</li>\n        <li>has a [[Prototype]] internal slot whose value is %Object.prototype%.</li>\n      </ul>\n      <p>The abstract operation <dfn id=\"thissymbolvalue\" aoid=\"thisSymbolValue\" oldids=\"sec-thissymbolvalue\">thisSymbolValue<span id=\"sec-thissymbolvalue\"></span></dfn> takes argument <var>value</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Symbol, return <var>value</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Object and <var>value</var> has a [[SymbolData]] internal slot, then<ol><li>Let <var>s</var> be <var>value</var>.[[SymbolData]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>s</var>) is Symbol.</li><li>Return <var>s</var>.</li></ol></li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></emu-alg>\n\n      <div id=\"excluded-sec-symbol.prototype.constructor\"><h1><span class=\"secnum\">19.4.3.1</span>#sec-symbol.prototype.constructor Symbol.prototype.constructor</h1>...</div><div id=\"excluded-sec-symbol.prototype.description\"><h1><span class=\"secnum\">19.4.3.2</span>#sec-symbol.prototype.description get Symbol.prototype.description</h1>...</div><div id=\"excluded-sec-symbol.prototype.tostring\"><h1><span class=\"secnum\">19.4.3.3</span>#sec-symbol.prototype.tostring Symbol.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-symbol.prototype.valueof\"><h1><span class=\"secnum\">19.4.3.4</span>#sec-symbol.prototype.valueof Symbol.prototype.valueOf ( )</h1>...</div><div id=\"excluded-sec-symbol.prototype-@@toprimitive\"><h1><span class=\"secnum\">19.4.3.5</span>#sec-symbol.prototype-@@toprimitive Symbol.prototype [ @@toPrimitive ] ( hint )</h1>...</div><div id=\"excluded-sec-symbol.prototype-@@tostringtag\"><h1><span class=\"secnum\">19.4.3.6</span>#sec-symbol.prototype-@@tostringtag Symbol.prototype [ @@toStringTag ]</h1>...</div></emu-clause>\n\n    "}, "sec-expanded-years": {"num": "20.4.1.15.1", "title": "#sec-expanded-years Expanded Years", "html": "<emu-clause id=\"sec-expanded-years\" oldids=\"sec-extended-years\">\n          <span id=\"sec-extended-years\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-expanded-years\">#sec-expanded-years</span> Expanded Years</h1>\n          <p><emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Covering</a></emu-xref> the full <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> range of approximately 273,790 years forward or backward from 01 January, 1970 (<emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\" class=\"excluded-xref\" excluded-id=\"sec-time-values-and-time-range\">#sec-time-values-and-time-range</a></emu-xref>) requires representing years before 0 or after 9999. ISO 8601 permits expansion of the year representation, but only by mutual agreement of the partners in information interchange. In the simplified ECMAScript format, such an expanded year representation shall have 6 digits and is always prefixed with a + or - sign. The year 0 is considered positive and hence prefixed with a + sign. Strings matching the <emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\">Date Time String Format</a></emu-xref> with expanded years representing instants in time outside the range of a <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> are treated as unrecognizable by <emu-xref href=\"#sec-date.parse\"><a href=\"#sec-date.parse\"><code>Date.parse</code></a></emu-xref> and cause that function to return <emu-val>NaN</emu-val> without falling back to implementation-specific behaviour or heuristics.</p>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>Examples of date-time values with expanded years:</p>\n            <figure>\n              <table class=\"lightweight-table\">\n                <tbody>\n                  <tr>\n                    <td>-271821-04-20T00:00:00Z</td>\n                    <td>271822 B.C.</td>\n                  </tr>\n                  <tr>\n                    <td>-000001-01-01T00:00:00Z</td>\n                    <td>2 B.C.</td>\n                  </tr>\n                  <tr>\n                    <td>+000000-01-01T00:00:00Z</td>\n                    <td>1 B.C.</td>\n                  </tr>\n                  <tr>\n                    <td>+000001-01-01T00:00:00Z</td>\n                    <td>1 A.D.</td>\n                  </tr>\n                  <tr>\n                    <td>+001970-01-01T00:00:00Z</td>\n                    <td>1970 A.D.</td>\n                  </tr>\n                  <tr>\n                    <td>+002009-12-15T00:00:00Z</td>\n                    <td>2009 A.D.</td>\n                  </tr>\n                  <tr>\n                    <td>+275760-09-13T00:00:00Z</td>\n                    <td>275760 A.D.</td>\n                  </tr>\n                </tbody>\n              </table>\n            </figure>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-runtime-semantics-arrayaccumulation": {"num": "12.2.5.1", "title": "#sec-runtime-semantics-arrayaccumulation Runtime Semantics: ArrayAccumulation", "html": "<emu-clause id=\"sec-runtime-semantics-arrayaccumulation\" oldids=\"sec-static-semantics-elisionwidth\">\n        <span id=\"sec-static-semantics-elisionwidth\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-arrayaccumulation\">#sec-runtime-semantics-arrayaccumulation</span> Runtime Semantics: ArrayAccumulation</h1>\n        <p>With parameters <var>array</var> and <var>nextIndex</var>.</p>\n        <emu-grammar><emu-production name=\"Elision\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"9471f753\"><emu-t>,</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>len</var> be <var>nextIndex</var> + 1.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>array</var>, <emu-val>\"length\"</emu-val>, <var>len</var>, <emu-val>true</emu-val>).</li><li>NOTE: The above Set throws if <var>len</var> exceeds 2<sup>32</sup>-1.</li><li>Return <var>len</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"Elision\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"806d0124\"><emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt><emu-t>,</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var> + 1.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d806b57a\"><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Set <var>nextIndex</var> to the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li></ol></li><li>Let <var>initResult</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>initValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>initResult</var>).</li><li>Let <var>created</var> be !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>array</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nextIndex</var>), <var>initValue</var>).</li><li>Return <var>nextIndex</var> + 1.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"141a73d1\"><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Set <var>nextIndex</var> to the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li></ol></li><li>Return the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"fd2af9b1\"><emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-t>,</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Set <var>nextIndex</var> to the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Set <var>nextIndex</var> to the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li></ol></li><li>Let <var>initResult</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>initValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>initResult</var>).</li><li>Let <var>created</var> be !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>array</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nextIndex</var>), <var>initValue</var>).</li><li>Return <var>nextIndex</var> + 1.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a579a6a\"><emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-t>,</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Set <var>nextIndex</var> to the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Set <var>nextIndex</var> to the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li></ol></li><li>Return the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SpreadElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"5bb8853e\"><emu-t>...</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>spreadRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>spreadObj</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>spreadRef</var>).</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>spreadObj</var>).</li><li>Repeat,<ol><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, return <var>nextIndex</var>.</li><li>Let <var>nextValue</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>array</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nextIndex</var>), <var>nextValue</var>).</li><li>Set <var>nextIndex</var> to <var>nextIndex</var> + 1.</li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref> is used to ensure that own properties are defined for the array even if the standard built-in Array prototype object has been modified in a manner that would preclude the creation of new own properties using [[Set]].</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-evaluate-property-access-with-identifier-key": {"num": "12.3.4", "title": "#sec-evaluate-property-access-with-identifier-key Runtime Semantics: EvaluatePropertyAccessWithIdentifierKey ( baseValue, identifierName, strict )", "html": "<emu-clause id=\"sec-evaluate-property-access-with-identifier-key\" aoid=\"EvaluatePropertyAccessWithIdentifierKey\" oldids=\"sec-evaluate-identifier-key-property-access\">\n      <span id=\"sec-evaluate-identifier-key-property-access\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-evaluate-property-access-with-identifier-key\">#sec-evaluate-property-access-with-identifier-key</span> Runtime Semantics: EvaluatePropertyAccessWithIdentifierKey ( <var>baseValue</var>, <var>identifierName</var>, <var>strict</var> )</h1>\n      <p>The abstract operation EvaluatePropertyAccessWithIdentifierKey takes arguments <var>baseValue</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>identifierName</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), and <var>strict</var> (a Boolean). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>identifierName</var> is an <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li><li>Let <var>bv</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<var>baseValue</var>).</li><li>Let <var>propertyNameString</var> be StringValue of <var>identifierName</var>.</li><li>Return a value of type <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref> whose base value component is <var>bv</var>, whose referenced name component is <var>propertyNameString</var>, and whose strict reference flag is <var>strict</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-global-environment-records": {"num": "8.1.1.4", "title": "#sec-global-environment-records Global Environment Records", "html": "<emu-clause id=\"sec-global-environment-records\" oldids=\"global-environment\">\n        <span id=\"global-environment\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records\">#sec-global-environment-records</span> Global Environment Records</h1>\n        <p>A <dfn>global Environment Record</dfn> is used to represent the outer most scope that is shared by all of the ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> elements that are processed in a common <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>. A global Environment Record provides the bindings for built-in globals (clause <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\" class=\"excluded-xref\" excluded-id=\"sec-global-object\">#sec-global-object</a></emu-xref>), properties of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>, and for all top-level declarations (<emu-xref href=\"#sec-block-static-semantics-toplevellexicallyscopeddeclarations\"><a href=\"#sec-block-static-semantics-toplevellexicallyscopeddeclarations\" class=\"excluded-xref\" excluded-id=\"sec-block-static-semantics-toplevellexicallyscopeddeclarations\">#sec-block-static-semantics-toplevellexicallyscopeddeclarations</a></emu-xref>, <emu-xref href=\"#sec-block-static-semantics-toplevelvarscopeddeclarations\"><a href=\"#sec-block-static-semantics-toplevelvarscopeddeclarations\" class=\"excluded-xref\" excluded-id=\"sec-block-static-semantics-toplevelvarscopeddeclarations\">#sec-block-static-semantics-toplevelvarscopeddeclarations</a></emu-xref>) that occur within a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>.</p>\n        <p>A global Environment Record is logically a single record but it is specified as a composite encapsulating an <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> and a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref>. The <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> has as its base object the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> of the associated <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>. This <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is the value returned by the global Environment Record's GetThisBinding concrete method. The <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> component of a global Environment Record contains the bindings for all built-in globals (clause <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\" class=\"excluded-xref\" excluded-id=\"sec-global-object\">#sec-global-object</a></emu-xref>) and all bindings introduced by a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> contained in global code. The bindings for all other ECMAScript declarations in global code are contained in the <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> component of the global Environment Record.</p>\n        <p>Properties may be created directly on a <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. Hence, the <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> component of a global Environment Record may contain both bindings created explicitly by <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> declarations and bindings created implicitly as properties of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. In order to identify which bindings were explicitly created using declarations, a global Environment Record maintains a list of the names bound using its CreateGlobalVarBinding and CreateGlobalFunctionBinding concrete methods.</p>\n        <p>Global Environment Records have the additional fields listed in <emu-xref href=\"#table-18\"><a href=\"#table-18\" class=\"excluded-xref\" excluded-id=\"table-18\">#table-18</a></emu-xref> and the additional methods listed in <emu-xref href=\"#table-19\"><a href=\"#table-19\" class=\"excluded-xref\" excluded-id=\"table-19\">#table-19</a></emu-xref>.</p>\n        <emu-table id=\"table-18\" caption=\"Additional Fields of Global Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-18\">#table-18</span>: Additional Fields of Global Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              </th>\n              <th>\n                Value\n              </th>\n              <th>\n                Meaning\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[ObjectRecord]]\n              </td>\n              <td>\n                <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">Object Environment Record</a></emu-xref>\n              </td>\n              <td>\n                Binding object is the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. It contains global built-in bindings as well as <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, and <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> bindings in global code for the associated <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[GlobalThisValue]]\n              </td>\n              <td>\n                Object\n              </td>\n              <td>\n                The value returned by <code>this</code> in global scope. Hosts may provide any ECMAScript Object value.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[DeclarativeRecord]]\n              </td>\n              <td>\n                <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">Declarative Environment Record</a></emu-xref>\n              </td>\n              <td>\n                Contains bindings for all declarations in global code for the associated <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> code except for <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, and <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> <var>bindings</var>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[VarNames]]\n              </td>\n              <td>\n                <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of String\n              </td>\n              <td>\n                The string names bound by <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, and <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> declarations in global code for the associated <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <emu-table id=\"table-19\" caption=\"Additional Methods of Global Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-19\">#table-19</span>: Additional Methods of Global Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Method\n              </th>\n              <th>\n                Purpose\n              </th>\n            </tr>\n            <tr>\n              <td>\n                GetThisBinding()\n              </td>\n              <td>\n                Return the value of this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s <code>this</code> binding.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                HasVarDeclaration (N)\n              </td>\n              <td>\n                Determines if the argument identifier has a binding in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that was created using a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                HasLexicalDeclaration (N)\n              </td>\n              <td>\n                Determines if the argument identifier has a binding in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that was created using a lexical declaration such as a <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt> or a <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                HasRestrictedGlobalProperty (N)\n              </td>\n              <td>\n                Determines if the argument is the name of a <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> property that may not be shadowed by a global lexical binding.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                CanDeclareGlobalVar (N)\n              </td>\n              <td>\n                Determines if a corresponding CreateGlobalVarBinding call would succeed if called for the same argument <var>N</var>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                CanDeclareGlobalFunction (N)\n              </td>\n              <td>\n                Determines if a corresponding CreateGlobalFunctionBinding call would succeed if called for the same argument <var>N</var>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                CreateGlobalVarBinding(N, D)\n              </td>\n              <td>\n                Used to create and initialize to <emu-val>undefined</emu-val> a global <code>var</code> binding in the [[ObjectRecord]] component of a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>. The binding will be a mutable binding. The corresponding <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> property will have attribute values appropriate for a <code>var</code>. The String value <var>N</var> is the bound name. If <var>D</var> is <emu-val>true</emu-val> the binding may be deleted. Logically equivalent to CreateMutableBinding followed by a SetMutableBinding but it allows var declarations to receive special treatment.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                CreateGlobalFunctionBinding(N, V, D)\n              </td>\n              <td>\n                Create and initialize a global <code>function</code> binding in the [[ObjectRecord]] component of a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>. The binding will be a mutable binding. The corresponding <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> property will have attribute values appropriate for a <code>function</code>. The String value <var>N</var> is the bound name. <var>V</var> is the initialization value. If the Boolean argument <var>D</var> is <emu-val>true</emu-val> the binding may be deleted. Logically equivalent to CreateMutableBinding followed by a SetMutableBinding but it allows function declarations to receive special treatment.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>The behaviour of the concrete specification methods for global Environment Records is defined by the following algorithms.</p>\n\n        <div id=\"excluded-sec-global-environment-records-hasbinding-n\"><h1><span class=\"secnum\">8.1.1.4.1</span>#sec-global-environment-records-hasbinding-n HasBinding ( N )</h1>...</div><div id=\"excluded-sec-global-environment-records-createmutablebinding-n-d\"><h1><span class=\"secnum\">8.1.1.4.2</span>#sec-global-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )</h1>...</div><div id=\"excluded-sec-global-environment-records-createimmutablebinding-n-s\"><h1><span class=\"secnum\">8.1.1.4.3</span>#sec-global-environment-records-createimmutablebinding-n-s CreateImmutableBinding ( N, S )</h1>...</div><div id=\"excluded-sec-global-environment-records-initializebinding-n-v\"><h1><span class=\"secnum\">8.1.1.4.4</span>#sec-global-environment-records-initializebinding-n-v InitializeBinding ( N, V )</h1>...</div><div id=\"excluded-sec-global-environment-records-setmutablebinding-n-v-s\"><h1><span class=\"secnum\">8.1.1.4.5</span>#sec-global-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )</h1>...</div><div id=\"excluded-sec-global-environment-records-getbindingvalue-n-s\"><h1><span class=\"secnum\">8.1.1.4.6</span>#sec-global-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )</h1>...</div><div id=\"excluded-sec-global-environment-records-deletebinding-n\"><h1><span class=\"secnum\">8.1.1.4.7</span>#sec-global-environment-records-deletebinding-n DeleteBinding ( N )</h1>...</div><div id=\"excluded-sec-global-environment-records-hasthisbinding\"><h1><span class=\"secnum\">8.1.1.4.8</span>#sec-global-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-global-environment-records-hassuperbinding\"><h1><span class=\"secnum\">8.1.1.4.9</span>#sec-global-environment-records-hassuperbinding HasSuperBinding ( )</h1>...</div><div id=\"excluded-sec-global-environment-records-withbaseobject\"><h1><span class=\"secnum\">8.1.1.4.10</span>#sec-global-environment-records-withbaseobject WithBaseObject ( )</h1>...</div><div id=\"excluded-sec-global-environment-records-getthisbinding\"><h1><span class=\"secnum\">8.1.1.4.11</span>#sec-global-environment-records-getthisbinding GetThisBinding ( )</h1>...</div><div id=\"excluded-sec-hasvardeclaration\"><h1><span class=\"secnum\">8.1.1.4.12</span>#sec-hasvardeclaration HasVarDeclaration ( N )</h1>...</div><div id=\"excluded-sec-haslexicaldeclaration\"><h1><span class=\"secnum\">8.1.1.4.13</span>#sec-haslexicaldeclaration HasLexicalDeclaration ( N )</h1>...</div><div id=\"excluded-sec-hasrestrictedglobalproperty\"><h1><span class=\"secnum\">8.1.1.4.14</span>#sec-hasrestrictedglobalproperty HasRestrictedGlobalProperty ( N )</h1>...</div><div id=\"excluded-sec-candeclareglobalvar\"><h1><span class=\"secnum\">8.1.1.4.15</span>#sec-candeclareglobalvar CanDeclareGlobalVar ( N )</h1>...</div><div id=\"excluded-sec-candeclareglobalfunction\"><h1><span class=\"secnum\">8.1.1.4.16</span>#sec-candeclareglobalfunction CanDeclareGlobalFunction ( N )</h1>...</div><div id=\"excluded-sec-createglobalvarbinding\"><h1><span class=\"secnum\">8.1.1.4.17</span>#sec-createglobalvarbinding CreateGlobalVarBinding ( N, D )</h1>...</div><div id=\"excluded-sec-createglobalfunctionbinding\"><h1><span class=\"secnum\">8.1.1.4.18</span>#sec-createglobalfunctionbinding CreateGlobalFunctionBinding ( N, V, D )</h1>...</div></emu-clause>\n\n      "}, "sec-binary-bitwise-operators-static-semantics-assignmenttargettype": {"num": "12.12.2", "title": "#sec-binary-bitwise-operators-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-binary-bitwise-operators-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-binary-bitwise-operators-static-semantics-assignmenttargettype\">\n      <span id=\"sec-binary-bitwise-operators-static-semantics-isvalidsimpleassignmenttarget\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-binary-bitwise-operators-static-semantics-assignmenttargettype\">#sec-binary-bitwise-operators-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n      <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"BitwiseANDExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BitwiseANDExpression\">BitwiseANDExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a90dedc2\"><emu-nt><a href=\"#prod-BitwiseANDExpression\">BitwiseANDExpression</a></emu-nt><emu-t>&amp;</emu-t><emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"BitwiseXORExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BitwiseXORExpression\">BitwiseXORExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b463172c\"><emu-nt><a href=\"#prod-BitwiseXORExpression\">BitwiseXORExpression</a></emu-nt><emu-t>^</emu-t><emu-nt><a href=\"#prod-BitwiseANDExpression\">BitwiseANDExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"BitwiseORExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BitwiseORExpression\">BitwiseORExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"016dfa90\"><emu-nt><a href=\"#prod-BitwiseORExpression\">BitwiseORExpression</a></emu-nt><emu-t>|</emu-t><emu-nt><a href=\"#prod-BitwiseXORExpression\">BitwiseXORExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>invalid</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-comma-operator-static-semantics-assignmenttargettype": {"num": "12.16.2", "title": "#sec-comma-operator-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-comma-operator-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-comma-operator-static-semantics-assignmenttargettype\">\n      <span id=\"sec-comma-operator-static-semantics-isvalidsimpleassignmenttarget\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-comma-operator-static-semantics-assignmenttargettype\">#sec-comma-operator-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n      <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"Expression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0b039a65\"><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>,</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>invalid</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-numeric-types-number-remainder": {"num": "6.1.6.1.6", "title": "#sec-numeric-types-number-remainder Number::remainder ( n, d )", "html": "<emu-clause id=\"sec-numeric-types-number-remainder\" oldids=\"sec-applying-the-mod-operator\">\n          <span id=\"sec-applying-the-mod-operator\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-remainder\">#sec-numeric-types-number-remainder</span> Number::remainder ( <var>n</var>, <var>d</var> )</h1>\n          <p>The abstract operation Number::remainder takes arguments <var>n</var> (a Number) and <var>d</var> (a Number). It yields the remainder of its operands from an implied division; <var>n</var> is the dividend and <var>d</var> is the divisor.</p>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>In C and C++, the remainder operator accepts only integral operands; in ECMAScript, it also accepts floating-point operands.</p>\n          </div></emu-note>\n          <p>The result of a floating-point remainder operation as computed by the <code>%</code> operator is not the same as the &#8220;remainder&#8221; operation defined by <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref>. The <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> &#8220;remainder&#8221; operation computes the remainder from a rounding division, not a truncating division, and so its behaviour is not analogous to that of the usual <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> remainder operator. Instead the ECMAScript language defines <code>%</code> on floating-point operations to behave in a manner analogous to that of the Java <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> remainder operator; this may be compared with the C library function fmod.</p>\n          <p>The result of an ECMAScript floating-point remainder operation is determined by the rules of IEEE arithmetic:</p>\n          <ul>\n            <li>\n              If either operand is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n            </li>\n            <li>\n              The sign of the result equals the sign of the dividend.\n            </li>\n            <li>\n              If the dividend is an infinity, or the divisor is a zero, or both, the result is <emu-val>NaN</emu-val>.\n            </li>\n            <li>\n              If the dividend is finite and the divisor is an infinity, the result equals the dividend.\n            </li>\n            <li>\n              If the dividend is a zero and the divisor is nonzero and finite, the result is the same as the dividend.\n            </li>\n            <li>\n              In the remaining cases, where neither an infinity, nor a zero, nor <emu-val>NaN</emu-val> is involved, the floating-point remainder <var>r</var> from a dividend <var>n</var> and a divisor <var>d</var> is defined by the mathematical relation <var>r</var> = <var>n</var> - (<var>d</var> &#215; <var>q</var>) where <var>q</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> that is negative only if <var>n</var>/<var>d</var> is negative and positive only if <var>n</var>/<var>d</var> is positive, and whose magnitude is as large as possible without exceeding the magnitude of the true mathematical quotient of <var>n</var> and <var>d</var>. <var>r</var> is computed and rounded to the nearest representable value using <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> roundTiesToEven mode.\n            </li>\n          </ul>\n        </emu-clause>\n\n        "}, "sec-newpromisereactionjob": {"num": "26.6.2.1", "title": "#sec-newpromisereactionjob NewPromiseReactionJob ( reaction, argument )", "html": "<emu-clause id=\"sec-newpromisereactionjob\" aoid=\"NewPromiseReactionJob\" oldids=\"sec-promisereactionjob\">\n        <span id=\"sec-promisereactionjob\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newpromisereactionjob\">#sec-newpromisereactionjob</span> NewPromiseReactionJob ( <var>reaction</var>, <var>argument</var> )</h1>\n        <p>The abstract operation NewPromiseReactionJob takes arguments <var>reaction</var> and <var>argument</var>. It returns a new <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> that applies the appropriate handler to the incoming value, and uses the handler's return value to resolve or reject the derived promise associated with that handler. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>job</var> be a new <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>reaction</var> and <var>argument</var> and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>reaction</var> is a PromiseReaction <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>.</li><li>Let <var>promiseCapability</var> be <var>reaction</var>.[[Capability]].</li><li>Let <var>type</var> be <var>reaction</var>.[[Type]].</li><li>Let <var>handler</var> be <var>reaction</var>.[[Handler]].</li><li>If <var>handler</var> is <emu-const>empty</emu-const>, then<ol><li>If <var>type</var> is <emu-const>Fulfill</emu-const>, let <var>handlerResult</var> be <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>argument</var>).</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>type</var> is <emu-const>Reject</emu-const>.</li><li>Let <var>handlerResult</var> be <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(<var>argument</var>).</li></ol></li></ol></li><li>Else, let <var>handlerResult</var> be <emu-xref aoid=\"HostCallJobCallback\"><a href=\"#sec-hostcalljobcallback\">HostCallJobCallback</a></emu-xref>(<var>handler</var>, <emu-val>undefined</emu-val>, &#171; <var>argument</var> &#187;).</li><li>If <var>promiseCapability</var> is <emu-val>undefined</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>handlerResult</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>promiseCapability</var> is a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>.</li><li>If <var>handlerResult</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>handlerResult</var>.[[Value]] &#187;).</li></ol></li><li>Else,<ol><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>handlerResult</var>.[[Value]] &#187;).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>status</var>).</li></ol></li><li>Let <var>handlerRealm</var> be <emu-val>null</emu-val>.</li><li>If <var>reaction</var>.[[Handler]] is not <emu-const>empty</emu-const>, then<ol><li>Let <var>getHandlerRealmResult</var> be <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref>(<var>reaction</var>.[[Handler]].[[Callback]]).</li><li>If <var>getHandlerRealmResult</var> is a normal completion, then set <var>handlerRealm</var> to <var>getHandlerRealmResult</var>.[[Value]].</li><li>Else, set <var>handlerRealm</var> to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>NOTE: <var>handlerRealm</var> is never <emu-val>null</emu-val> unless the handler is <emu-val>undefined</emu-val>. When the handler is a revoked Proxy and no ECMAScript code runs, <var>handlerRealm</var> is used to create error objects.</li></ol></li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Job]]: <var>job</var>, [[Realm]]: <var>handlerRealm</var> }.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-unicodematchproperty-p": {"num": "21.2.2.8.3", "title": "#sec-runtime-semantics-unicodematchproperty-p Runtime Semantics: UnicodeMatchProperty ( p )", "html": "<emu-clause id=\"sec-runtime-semantics-unicodematchproperty-p\" aoid=\"UnicodeMatchProperty\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-unicodematchproperty-p\">#sec-runtime-semantics-unicodematchproperty-p</span> Runtime Semantics: UnicodeMatchProperty ( <var>p</var> )</h1>\n          <p>The abstract operation UnicodeMatchProperty takes argument <var>p</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points). It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>p</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points that is identical to a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points that is a Unicode <emu-not-ref>property name</emu-not-ref> or property alias listed in the &#8220;<emu-not-ref>Property name</emu-not-ref> and aliases&#8221; column of <emu-xref href=\"#table-nonbinary-unicode-properties\"><a href=\"#table-nonbinary-unicode-properties\" class=\"excluded-xref\" excluded-id=\"table-nonbinary-unicode-properties\">#table-nonbinary-unicode-properties</a></emu-xref> or <emu-xref href=\"#table-binary-unicode-properties\"><a href=\"#table-binary-unicode-properties\" class=\"excluded-xref\" excluded-id=\"table-binary-unicode-properties\">#table-binary-unicode-properties</a></emu-xref>.</li><li>Let <var>c</var> be the canonical <emu-not-ref>property name</emu-not-ref> of <var>p</var> as given in the &#8220;Canonical <emu-not-ref>property name</emu-not-ref>&#8221; column of the corresponding row.</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points of <var>c</var>.</li></ol></emu-alg>\n          <p>Implementations must support the Unicode property names and aliases listed in <emu-xref href=\"#table-nonbinary-unicode-properties\"><a href=\"#table-nonbinary-unicode-properties\" class=\"excluded-xref\" excluded-id=\"table-nonbinary-unicode-properties\">#table-nonbinary-unicode-properties</a></emu-xref> and <emu-xref href=\"#table-binary-unicode-properties\"><a href=\"#table-binary-unicode-properties\" class=\"excluded-xref\" excluded-id=\"table-binary-unicode-properties\">#table-binary-unicode-properties</a></emu-xref>. To ensure interoperability, implementations must not support any other property names or aliases.</p>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>For example, <code>Script_Extensions</code> (<emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref>) and <code>scx</code> (property alias) are valid, but <code>script_extensions</code> or <code>Scx</code> aren't.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>The listed properties form a superset of what <a href=\"https://unicode.org/reports/tr18/#RL1.2\">UTS18 RL1.2</a> requires.</p>\n          </div></emu-note>\n          <emu-import href=\"table-nonbinary-unicode-properties.html\"><emu-table id=\"table-nonbinary-unicode-properties\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-nonbinary-unicode-properties\">#table-nonbinary-unicode-properties</span>: Non-binary Unicode property aliases and their canonical property names</figcaption>\n  \n  <table class=\"real-table unicode-property-table\">\n    <thead>\n      <tr>\n        <th><emu-xref href=\"#property-name\"><a href=\"#property-name\">Property name</a></emu-xref> and aliases</th>\n        <th>Canonical <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref></th>\n      </tr>\n    </thead>\n    <tbody><tr>\n      <td><code>General_Category</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr18/#General_Category_Property\"><code>General_Category</code></a></td>\n    </tr>\n    <tr>\n      <td><code>gc</code></td>\n    </tr>\n    <tr>\n      <td><code>Script</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr24/#Script\"><code>Script</code></a></td>\n    </tr>\n    <tr>\n      <td><code>sc</code></td>\n    </tr>\n    <tr>\n      <td><code>Script_Extensions</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr24/#Script_Extensions\"><code>Script_Extensions</code></a></td>\n    </tr>\n    <tr>\n      <td><code>scx</code></td>\n    </tr>\n  </tbody></table>\n</figure></emu-table>\n</emu-import>\n          <emu-import href=\"table-binary-unicode-properties.html\"><emu-table id=\"table-binary-unicode-properties\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-binary-unicode-properties\">#table-binary-unicode-properties</span>: Binary Unicode property aliases and their canonical property names</figcaption>\n  \n  <table class=\"real-table unicode-property-table\">\n    <thead>\n      <tr>\n        <th><emu-xref href=\"#property-name\"><a href=\"#property-name\">Property name</a></emu-xref> and aliases</th>\n        <th>Canonical <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref></th>\n      </tr>\n    </thead>\n    <tbody><tr>\n      <td><code>ASCII</code></td>\n      <td><a href=\"https://unicode.org/reports/tr18/#General_Category_Property\"><code>ASCII</code></a></td>\n    </tr>\n    <tr>\n      <td><code>ASCII_Hex_Digit</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#ASCII_Hex_Digit\"><code>ASCII_Hex_Digit</code></a></td>\n    </tr>\n    <tr>\n      <td><code>AHex</code></td>\n    </tr>\n    <tr>\n      <td><code>Alphabetic</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Alphabetic\"><code>Alphabetic</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Alpha</code></td>\n    </tr>\n    <tr>\n      <td><code>Any</code></td>\n      <td><a href=\"https://unicode.org/reports/tr18/#General_Category_Property\"><code>Any</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Assigned</code></td>\n      <td><a href=\"https://unicode.org/reports/tr18/#General_Category_Property\"><code>Assigned</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Bidi_Control</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Bidi_Control\"><code>Bidi_Control</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Bidi_C</code></td>\n    </tr>\n    <tr>\n      <td><code>Bidi_Mirrored</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Bidi_Mirrored\"><code>Bidi_Mirrored</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Bidi_M</code></td>\n    </tr>\n    <tr>\n      <td><code>Case_Ignorable</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Case_Ignorable\"><code>Case_Ignorable</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CI</code></td>\n    </tr>\n    <tr>\n      <td><code>Cased</code></td>\n      <td><a href=\"https://unicode.org/reports/tr44/#Cased\"><code>Cased</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_Casefolded</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWCF\"><code>Changes_When_Casefolded</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWCF</code></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_Casemapped</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWCM\"><code>Changes_When_Casemapped</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWCM</code></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_Lowercased</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWL\"><code>Changes_When_Lowercased</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWL</code></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_NFKC_Casefolded</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWKCF\"><code>Changes_When_NFKC_Casefolded</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWKCF</code></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_Titlecased</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWT\"><code>Changes_When_Titlecased</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWT</code></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_Uppercased</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWU\"><code>Changes_When_Uppercased</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWU</code></td>\n    </tr>\n    <tr>\n      <td><code>Dash</code></td>\n      <td><a href=\"https://unicode.org/reports/tr44/#Dash\"><code>Dash</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Default_Ignorable_Code_Point</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Default_Ignorable_Code_Point\"><code>Default_Ignorable_Code_Point</code></a></td>\n    </tr>\n    <tr>\n      <td><code>DI</code></td>\n    </tr>\n    <tr>\n      <td><code>Deprecated</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Deprecated\"><code>Deprecated</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Dep</code></td>\n    </tr>\n    <tr>\n      <td><code>Diacritic</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Diacritic\"><code>Diacritic</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Dia</code></td>\n    </tr>\n    <tr>\n      <td><code>Emoji</code></td>\n      <td><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Emoji</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Emoji_Component</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Emoji_Component</code></a></td>\n    </tr>\n    <tr>\n      <td><code>EComp</code></td>\n    </tr>\n    <tr>\n      <td><code>Emoji_Modifier</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Emoji_Modifier</code></a></td>\n    </tr>\n    <tr>\n      <td><code>EMod</code></td>\n    </tr>\n    <tr>\n      <td><code>Emoji_Modifier_Base</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Emoji_Modifier_Base</code></a></td>\n    </tr>\n    <tr>\n      <td><code>EBase</code></td>\n    </tr>\n    <tr>\n      <td><code>Emoji_Presentation</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Emoji_Presentation</code></a></td>\n    </tr>\n    <tr>\n      <td><code>EPres</code></td>\n    </tr>\n    <tr>\n      <td><code>Extended_Pictographic</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Extended_Pictographic</code></a></td>\n    </tr>\n    <tr>\n      <td><code>ExtPict</code></td>\n    </tr>\n    <tr>\n      <td><code>Extender</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Extender\"><code>Extender</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Ext</code></td>\n    </tr>\n    <tr>\n      <td><code>Grapheme_Base</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Grapheme_Base\"><code>Grapheme_Base</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Gr_Base</code></td>\n    </tr>\n    <tr>\n      <td><code>Grapheme_Extend</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Grapheme_Extend\"><code>Grapheme_Extend</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Gr_Ext</code></td>\n    </tr>\n    <tr>\n      <td><code>Hex_Digit</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Hex_Digit\"><code>Hex_Digit</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Hex</code></td>\n    </tr>\n    <tr>\n      <td><code>IDS_Binary_Operator</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#IDS_Binary_Operator\"><code>IDS_Binary_Operator</code></a></td>\n    </tr>\n    <tr>\n      <td><code>IDSB</code></td>\n    </tr>\n    <tr>\n      <td><code>IDS_Trinary_Operator</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#IDS_Trinary_Operator\"><code>IDS_Trinary_Operator</code></a></td>\n    </tr>\n    <tr>\n      <td><code>IDST</code></td>\n    </tr>\n    <tr>\n      <td><code>ID_Continue</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#ID_Continue\"><code>ID_Continue</code></a></td>\n    </tr>\n    <tr>\n      <td><code>IDC</code></td>\n    </tr>\n    <tr>\n      <td><code>ID_Start</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#ID_Start\"><code>ID_Start</code></a></td>\n    </tr>\n    <tr>\n      <td><code>IDS</code></td>\n    </tr>\n    <tr>\n      <td><code>Ideographic</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Ideographic\"><code>Ideographic</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Ideo</code></td>\n    </tr>\n    <tr>\n      <td><code>Join_Control</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Join_Control\"><code>Join_Control</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Join_C</code></td>\n    </tr>\n    <tr>\n      <td><code>Logical_Order_Exception</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Logical_Order_Exception\"><code>Logical_Order_Exception</code></a></td>\n    </tr>\n    <tr>\n      <td><code>LOE</code></td>\n    </tr>\n    <tr>\n      <td><code>Lowercase</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Lowercase\"><code>Lowercase</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Lower</code></td>\n    </tr>\n    <tr>\n      <td><code>Math</code></td>\n      <td><a href=\"https://unicode.org/reports/tr44/#Math\"><code>Math</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Noncharacter_Code_Point</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Noncharacter_Code_Point\"><code>Noncharacter_Code_Point</code></a></td>\n    </tr>\n    <tr>\n      <td><code>NChar</code></td>\n    </tr>\n    <tr>\n      <td><code>Pattern_Syntax</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Pattern_Syntax\"><code>Pattern_Syntax</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Pat_Syn</code></td>\n    </tr>\n    <tr>\n      <td><code>Pattern_White_Space</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Pattern_White_Space\"><code>Pattern_White_Space</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Pat_WS</code></td>\n    </tr>\n    <tr>\n      <td><code>Quotation_Mark</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Quotation_Mark\"><code>Quotation_Mark</code></a></td>\n    </tr>\n    <tr>\n      <td><code>QMark</code></td>\n    </tr>\n    <tr>\n      <td><code>Radical</code></td>\n      <td><a href=\"https://unicode.org/reports/tr44/#Radical\"><code>Radical</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Regional_Indicator</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Regional_Indicator\"><code>Regional_Indicator</code></a></td>\n    </tr>\n    <tr>\n      <td><code>RI</code></td>\n    </tr>\n    <tr>\n      <td><code>Sentence_Terminal</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#STerm\"><code>Sentence_Terminal</code></a></td>\n    </tr>\n    <tr>\n      <td><code>STerm</code></td>\n    </tr>\n    <tr>\n      <td><code>Soft_Dotted</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Soft_Dotted\"><code>Soft_Dotted</code></a></td>\n    </tr>\n    <tr>\n      <td><code>SD</code></td>\n    </tr>\n    <tr>\n      <td><code>Terminal_Punctuation</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Terminal_Punctuation\"><code>Terminal_Punctuation</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Term</code></td>\n    </tr>\n    <tr>\n      <td><code>Unified_Ideograph</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Unified_Ideograph\"><code>Unified_Ideograph</code></a></td>\n    </tr>\n    <tr>\n      <td><code>UIdeo</code></td>\n    </tr>\n    <tr>\n      <td><code>Uppercase</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Uppercase\"><code>Uppercase</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Upper</code></td>\n    </tr>\n    <tr>\n      <td><code>Variation_Selector</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Variation_Selector\"><code>Variation_Selector</code></a></td>\n    </tr>\n    <tr>\n      <td><code>VS</code></td>\n    </tr>\n    <tr>\n      <td><code>White_Space</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#White_Space\"><code>White_Space</code></a></td>\n    </tr>\n    <tr>\n      <td><code>space</code></td>\n    </tr>\n    <tr>\n      <td><code>XID_Continue</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#XID_Continue\"><code>XID_Continue</code></a></td>\n    </tr>\n    <tr>\n      <td><code>XIDC</code></td>\n    </tr>\n    <tr>\n      <td><code>XID_Start</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#XID_Start\"><code>XID_Start</code></a></td>\n    </tr>\n    <tr>\n      <td><code>XIDS</code></td>\n    </tr>\n  </tbody></table>\n</figure></emu-table>\n</emu-import>\n        </emu-clause>\n        "}, "sec-binary-logical-operators-static-semantics-assignmenttargettype": {"num": "12.13.2", "title": "#sec-binary-logical-operators-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-binary-logical-operators-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-binary-logical-operators-static-semantics-assignmenttargettype\">\n      <span id=\"sec-binary-logical-operators-static-semantics-isvalidsimpleassignmenttarget\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-binary-logical-operators-static-semantics-assignmenttargettype\">#sec-binary-logical-operators-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n      <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"LogicalANDExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LogicalANDExpression\">LogicalANDExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2186e2aa\"><emu-nt><a href=\"#prod-LogicalANDExpression\">LogicalANDExpression</a></emu-nt><emu-t>&amp;&amp;</emu-t><emu-nt><a href=\"#prod-BitwiseORExpression\">BitwiseORExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"LogicalORExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LogicalORExpression\">LogicalORExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b6453dd9\"><emu-nt><a href=\"#prod-LogicalORExpression\">LogicalORExpression</a></emu-nt><emu-t>||</emu-t><emu-nt><a href=\"#prod-LogicalANDExpression\">LogicalANDExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"CoalesceExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CoalesceExpression\">CoalesceExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ddea0818\"><emu-nt><a href=\"#prod-CoalesceExpressionHead\">CoalesceExpressionHead</a></emu-nt><emu-t>??</emu-t><emu-nt><a href=\"#prod-BitwiseORExpression\">BitwiseORExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>invalid</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-newpromiseresolvethenablejob": {"num": "26.6.2.2", "title": "#sec-newpromiseresolvethenablejob NewPromiseResolveThenableJob ( promiseToResolve, thenable, then )", "html": "<emu-clause id=\"sec-newpromiseresolvethenablejob\" aoid=\"NewPromiseResolveThenableJob\" oldids=\"sec-promiseresolvethenablejob\">\n        <span id=\"sec-promiseresolvethenablejob\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newpromiseresolvethenablejob\">#sec-newpromiseresolvethenablejob</span> NewPromiseResolveThenableJob ( <var>promiseToResolve</var>, <var>thenable</var>, <var>then</var> )</h1>\n        <p>The abstract operation NewPromiseResolveThenableJob takes arguments <var>promiseToResolve</var>, <var>thenable</var>, and <var>then</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>job</var> be a new <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>promiseToResolve</var>, <var>thenable</var>, and <var>then</var> and performs the following steps when called:<ol><li>Let <var>resolvingFunctions</var> be <emu-xref aoid=\"CreateResolvingFunctions\"><a href=\"#sec-createresolvingfunctions\">CreateResolvingFunctions</a></emu-xref>(<var>promiseToResolve</var>).</li><li>Let <var>thenCallResult</var> be <emu-xref aoid=\"HostCallJobCallback\"><a href=\"#sec-hostcalljobcallback\">HostCallJobCallback</a></emu-xref>(<var>then</var>, <var>thenable</var>, &#171; <var>resolvingFunctions</var>.[[Resolve]], <var>resolvingFunctions</var>.[[Reject]] &#187;).</li><li>If <var>thenCallResult</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>resolvingFunctions</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>thenCallResult</var>.[[Value]] &#187;).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>status</var>).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>thenCallResult</var>).</li></ol></li><li>Let <var>getThenRealmResult</var> be <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref>(<var>then</var>.[[Callback]]).</li><li>If <var>getThenRealmResult</var> is a normal completion, then let <var>thenRealm</var> be <var>getThenRealmResult</var>.[[Value]].</li><li>Else, let <var>thenRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>NOTE: <var>thenRealm</var> is never <emu-val>null</emu-val>. When <var>then</var>.[[Callback]] is a revoked Proxy and no code runs, <var>thenRealm</var> is used to create error objects.</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Job]]: <var>job</var>, [[Realm]]: <var>thenRealm</var> }.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> uses the supplied thenable and its <code>then</code> method to resolve the given promise. This process must take place as a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> to ensure that the evaluation of the <code>then</code> method occurs after evaluation of any surrounding code has completed.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-runtime-semantics-unicodematchpropertyvalue-p-v": {"num": "21.2.2.8.4", "title": "#sec-runtime-semantics-unicodematchpropertyvalue-p-v Runtime Semantics: UnicodeMatchPropertyValue ( p, v )", "html": "<emu-clause id=\"sec-runtime-semantics-unicodematchpropertyvalue-p-v\" aoid=\"UnicodeMatchPropertyValue\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-unicodematchpropertyvalue-p-v\">#sec-runtime-semantics-unicodematchpropertyvalue-p-v</span> Runtime Semantics: UnicodeMatchPropertyValue ( <var>p</var>, <var>v</var> )</h1>\n          <p>The abstract operation UnicodeMatchPropertyValue takes arguments <var>p</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points) and <var>v</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points). It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>p</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points that is identical to a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points that is a canonical, unaliased Unicode <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> listed in the &#8220;Canonical <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref>&#8221; column of <emu-xref href=\"#table-nonbinary-unicode-properties\"><a href=\"#table-nonbinary-unicode-properties\" class=\"excluded-xref\" excluded-id=\"table-nonbinary-unicode-properties\">#table-nonbinary-unicode-properties</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>v</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points that is identical to a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points that is a property value or property value alias for Unicode property <var>p</var> listed in the &#8220;Property value and aliases&#8221; column of <emu-xref href=\"#table-unicode-general-category-values\"><a href=\"#table-unicode-general-category-values\" class=\"excluded-xref\" excluded-id=\"table-unicode-general-category-values\">#table-unicode-general-category-values</a></emu-xref> or <emu-xref href=\"#table-unicode-script-values\"><a href=\"#table-unicode-script-values\" class=\"excluded-xref\" excluded-id=\"table-unicode-script-values\">#table-unicode-script-values</a></emu-xref>.</li><li>Let <var>value</var> be the canonical property value of <var>v</var> as given in the &#8220;Canonical property value&#8221; column of the corresponding row.</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points of <var>value</var>.</li></ol></emu-alg>\n          <p>Implementations must support the Unicode property value names and aliases listed in <emu-xref href=\"#table-unicode-general-category-values\"><a href=\"#table-unicode-general-category-values\" class=\"excluded-xref\" excluded-id=\"table-unicode-general-category-values\">#table-unicode-general-category-values</a></emu-xref> and <emu-xref href=\"#table-unicode-script-values\"><a href=\"#table-unicode-script-values\" class=\"excluded-xref\" excluded-id=\"table-unicode-script-values\">#table-unicode-script-values</a></emu-xref>. To ensure interoperability, implementations must not support any other property value names or aliases.</p>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>For example, <code>Xpeo</code> and <code>Old_Persian</code> are valid <code>Script_Extensions</code> values, but <code>xpeo</code> and <code>Old Persian</code> aren't.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>This algorithm differs from <a href=\"https://unicode.org/reports/tr44/#Matching_Symbolic\">the matching rules for symbolic values listed in UAX44</a>: case, <emu-xref href=\"#sec-white-space\"><a href=\"#sec-white-space\">white space</a></emu-xref>, U+002D (HYPHEN-MINUS), and U+005F (LOW LINE) are not ignored, and the <code>Is</code> prefix is not supported.</p>\n          </div></emu-note>\n          <emu-import href=\"table-unicode-general-category-values.html\"><emu-table id=\"table-unicode-general-category-values\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-unicode-general-category-values\">#table-unicode-general-category-values</span>: Value aliases and canonical values for the Unicode property <a href=\"https://unicode.org/reports/tr18/#General_Category_Property\"><code>General_Category</code></a></figcaption>\n  \n  <table class=\"real-table unicode-property-table\">\n    <thead>\n      <tr>\n        <th>Property value and aliases</th>\n        <th>Canonical property value</th>\n      </tr>\n    </thead>\n    <tbody><tr>\n      <td><code>Cased_Letter</code></td>\n      <td rowspan=\"2\"><code>Cased_Letter</code></td>\n    </tr>\n    <tr>\n      <td><code>LC</code></td>\n    </tr>\n    <tr>\n      <td><code>Close_Punctuation</code></td>\n      <td rowspan=\"2\"><code>Close_Punctuation</code></td>\n    </tr>\n    <tr>\n      <td><code>Pe</code></td>\n    </tr>\n    <tr>\n      <td><code>Connector_Punctuation</code></td>\n      <td rowspan=\"2\"><code>Connector_Punctuation</code></td>\n    </tr>\n    <tr>\n      <td><code>Pc</code></td>\n    </tr>\n    <tr>\n      <td><code>Control</code></td>\n      <td rowspan=\"3\"><code>Control</code></td>\n    </tr>\n    <tr>\n      <td><code>Cc</code></td>\n    </tr>\n    <tr>\n      <td><code>cntrl</code></td>\n    </tr>\n    <tr>\n      <td><code>Currency_Symbol</code></td>\n      <td rowspan=\"2\"><code>Currency_Symbol</code></td>\n    </tr>\n    <tr>\n      <td><code>Sc</code></td>\n    </tr>\n    <tr>\n      <td><code>Dash_Punctuation</code></td>\n      <td rowspan=\"2\"><code>Dash_Punctuation</code></td>\n    </tr>\n    <tr>\n      <td><code>Pd</code></td>\n    </tr>\n    <tr>\n      <td><code>Decimal_Number</code></td>\n      <td rowspan=\"3\"><code>Decimal_Number</code></td>\n    </tr>\n    <tr>\n      <td><code>Nd</code></td>\n    </tr>\n    <tr>\n      <td><code>digit</code></td>\n    </tr>\n    <tr>\n      <td><code>Enclosing_Mark</code></td>\n      <td rowspan=\"2\"><code>Enclosing_Mark</code></td>\n    </tr>\n    <tr>\n      <td><code>Me</code></td>\n    </tr>\n    <tr>\n      <td><code>Final_Punctuation</code></td>\n      <td rowspan=\"2\"><code>Final_Punctuation</code></td>\n    </tr>\n    <tr>\n      <td><code>Pf</code></td>\n    </tr>\n    <tr>\n      <td><code>Format</code></td>\n      <td rowspan=\"2\"><code>Format</code></td>\n    </tr>\n    <tr>\n      <td><code>Cf</code></td>\n    </tr>\n    <tr>\n      <td><code>Initial_Punctuation</code></td>\n      <td rowspan=\"2\"><code>Initial_Punctuation</code></td>\n    </tr>\n    <tr>\n      <td><code>Pi</code></td>\n    </tr>\n    <tr>\n      <td><code>Letter</code></td>\n      <td rowspan=\"2\"><code>Letter</code></td>\n    </tr>\n    <tr>\n      <td><code>L</code></td>\n    </tr>\n    <tr>\n      <td><code>Letter_Number</code></td>\n      <td rowspan=\"2\"><code>Letter_Number</code></td>\n    </tr>\n    <tr>\n      <td><code>Nl</code></td>\n    </tr>\n    <tr>\n      <td><code>Line_Separator</code></td>\n      <td rowspan=\"2\"><code>Line_Separator</code></td>\n    </tr>\n    <tr>\n      <td><code>Zl</code></td>\n    </tr>\n    <tr>\n      <td><code>Lowercase_Letter</code></td>\n      <td rowspan=\"2\"><code>Lowercase_Letter</code></td>\n    </tr>\n    <tr>\n      <td><code>Ll</code></td>\n    </tr>\n    <tr>\n      <td><code>Mark</code></td>\n      <td rowspan=\"3\"><code>Mark</code></td>\n    </tr>\n    <tr>\n      <td><code>M</code></td>\n    </tr>\n    <tr>\n      <td><code>Combining_Mark</code></td>\n    </tr>\n    <tr>\n      <td><code>Math_Symbol</code></td>\n      <td rowspan=\"2\"><code>Math_Symbol</code></td>\n    </tr>\n    <tr>\n      <td><code>Sm</code></td>\n    </tr>\n    <tr>\n      <td><code>Modifier_Letter</code></td>\n      <td rowspan=\"2\"><code>Modifier_Letter</code></td>\n    </tr>\n    <tr>\n      <td><code>Lm</code></td>\n    </tr>\n    <tr>\n      <td><code>Modifier_Symbol</code></td>\n      <td rowspan=\"2\"><code>Modifier_Symbol</code></td>\n    </tr>\n    <tr>\n      <td><code>Sk</code></td>\n    </tr>\n    <tr>\n      <td><code>Nonspacing_Mark</code></td>\n      <td rowspan=\"2\"><code>Nonspacing_Mark</code></td>\n    </tr>\n    <tr>\n      <td><code>Mn</code></td>\n    </tr>\n    <tr>\n      <td><code>Number</code></td>\n      <td rowspan=\"2\"><code>Number</code></td>\n    </tr>\n    <tr>\n      <td><code>N</code></td>\n    </tr>\n    <tr>\n      <td><code>Open_Punctuation</code></td>\n      <td rowspan=\"2\"><code>Open_Punctuation</code></td>\n    </tr>\n    <tr>\n      <td><code>Ps</code></td>\n    </tr>\n    <tr>\n      <td><code>Other</code></td>\n      <td rowspan=\"2\"><code>Other</code></td>\n    </tr>\n    <tr>\n      <td><code>C</code></td>\n    </tr>\n    <tr>\n      <td><code>Other_Letter</code></td>\n      <td rowspan=\"2\"><code>Other_Letter</code></td>\n    </tr>\n    <tr>\n      <td><code>Lo</code></td>\n    </tr>\n    <tr>\n      <td><code>Other_Number</code></td>\n      <td rowspan=\"2\"><code>Other_Number</code></td>\n    </tr>\n    <tr>\n      <td><code>No</code></td>\n    </tr>\n    <tr>\n      <td><code>Other_Punctuation</code></td>\n      <td rowspan=\"2\"><code>Other_Punctuation</code></td>\n    </tr>\n    <tr>\n      <td><code>Po</code></td>\n    </tr>\n    <tr>\n      <td><code>Other_Symbol</code></td>\n      <td rowspan=\"2\"><code>Other_Symbol</code></td>\n    </tr>\n    <tr>\n      <td><code>So</code></td>\n    </tr>\n    <tr>\n      <td><code>Paragraph_Separator</code></td>\n      <td rowspan=\"2\"><code>Paragraph_Separator</code></td>\n    </tr>\n    <tr>\n      <td><code>Zp</code></td>\n    </tr>\n    <tr>\n      <td><code>Private_Use</code></td>\n      <td rowspan=\"2\"><code>Private_Use</code></td>\n    </tr>\n    <tr>\n      <td><code>Co</code></td>\n    </tr>\n    <tr>\n      <td><code>Punctuation</code></td>\n      <td rowspan=\"3\"><code>Punctuation</code></td>\n    </tr>\n    <tr>\n      <td><code>P</code></td>\n    </tr>\n    <tr>\n      <td><code>punct</code></td>\n    </tr>\n    <tr>\n      <td><code>Separator</code></td>\n      <td rowspan=\"2\"><code>Separator</code></td>\n    </tr>\n    <tr>\n      <td><code>Z</code></td>\n    </tr>\n    <tr>\n      <td><code>Space_Separator</code></td>\n      <td rowspan=\"2\"><code>Space_Separator</code></td>\n    </tr>\n    <tr>\n      <td><code>Zs</code></td>\n    </tr>\n    <tr>\n      <td><code>Spacing_Mark</code></td>\n      <td rowspan=\"2\"><code>Spacing_Mark</code></td>\n    </tr>\n    <tr>\n      <td><code>Mc</code></td>\n    </tr>\n    <tr>\n      <td><code>Surrogate</code></td>\n      <td rowspan=\"2\"><code>Surrogate</code></td>\n    </tr>\n    <tr>\n      <td><code>Cs</code></td>\n    </tr>\n    <tr>\n      <td><code>Symbol</code></td>\n      <td rowspan=\"2\"><code>Symbol</code></td>\n    </tr>\n    <tr>\n      <td><code>S</code></td>\n    </tr>\n    <tr>\n      <td><code>Titlecase_Letter</code></td>\n      <td rowspan=\"2\"><code>Titlecase_Letter</code></td>\n    </tr>\n    <tr>\n      <td><code>Lt</code></td>\n    </tr>\n    <tr>\n      <td><code>Unassigned</code></td>\n      <td rowspan=\"2\"><code>Unassigned</code></td>\n    </tr>\n    <tr>\n      <td><code>Cn</code></td>\n    </tr>\n    <tr>\n      <td><code>Uppercase_Letter</code></td>\n      <td rowspan=\"2\"><code>Uppercase_Letter</code></td>\n    </tr>\n    <tr>\n      <td><code>Lu</code></td>\n    </tr>\n  </tbody></table>\n</figure></emu-table>\n</emu-import>\n          <emu-import href=\"table-unicode-script-values.html\"><emu-table id=\"table-unicode-script-values\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-unicode-script-values\">#table-unicode-script-values</span>: Value aliases and canonical values for the Unicode properties <a href=\"https://unicode.org/reports/tr24/#Script\"><code>Script</code></a> and <a href=\"https://unicode.org/reports/tr24/#Script_Extensions\"><code>Script_Extensions</code></a></figcaption>\n  \n  <table class=\"real-table unicode-property-table\">\n    <thead>\n      <tr>\n        <th>Property value and aliases</th>\n        <th>Canonical property value</th>\n      </tr>\n    </thead>\n    <tbody><tr>\n      <td><code>Adlam</code></td>\n      <td rowspan=\"2\"><code>Adlam</code></td>\n    </tr>\n    <tr>\n      <td><code>Adlm</code></td>\n    </tr>\n    <tr>\n      <td><code>Ahom</code></td>\n      <td><code>Ahom</code></td>\n    </tr>\n    <tr>\n      <td><code>Anatolian_Hieroglyphs</code></td>\n      <td rowspan=\"2\"><code>Anatolian_Hieroglyphs</code></td>\n    </tr>\n    <tr>\n      <td><code>Hluw</code></td>\n    </tr>\n    <tr>\n      <td><code>Arabic</code></td>\n      <td rowspan=\"2\"><code>Arabic</code></td>\n    </tr>\n    <tr>\n      <td><code>Arab</code></td>\n    </tr>\n    <tr>\n      <td><code>Armenian</code></td>\n      <td rowspan=\"2\"><code>Armenian</code></td>\n    </tr>\n    <tr>\n      <td><code>Armn</code></td>\n    </tr>\n    <tr>\n      <td><code>Avestan</code></td>\n      <td rowspan=\"2\"><code>Avestan</code></td>\n    </tr>\n    <tr>\n      <td><code>Avst</code></td>\n    </tr>\n    <tr>\n      <td><code>Balinese</code></td>\n      <td rowspan=\"2\"><code>Balinese</code></td>\n    </tr>\n    <tr>\n      <td><code>Bali</code></td>\n    </tr>\n    <tr>\n      <td><code>Bamum</code></td>\n      <td rowspan=\"2\"><code>Bamum</code></td>\n    </tr>\n    <tr>\n      <td><code>Bamu</code></td>\n    </tr>\n    <tr>\n      <td><code>Bassa_Vah</code></td>\n      <td rowspan=\"2\"><code>Bassa_Vah</code></td>\n    </tr>\n    <tr>\n      <td><code>Bass</code></td>\n    </tr>\n    <tr>\n      <td><code>Batak</code></td>\n      <td rowspan=\"2\"><code>Batak</code></td>\n    </tr>\n    <tr>\n      <td><code>Batk</code></td>\n    </tr>\n    <tr>\n      <td><code>Bengali</code></td>\n      <td rowspan=\"2\"><code>Bengali</code></td>\n    </tr>\n    <tr>\n      <td><code>Beng</code></td>\n    </tr>\n    <tr>\n      <td><code>Bhaiksuki</code></td>\n      <td rowspan=\"2\"><code>Bhaiksuki</code></td>\n    </tr>\n    <tr>\n      <td><code>Bhks</code></td>\n    </tr>\n    <tr>\n      <td><code>Bopomofo</code></td>\n      <td rowspan=\"2\"><code>Bopomofo</code></td>\n    </tr>\n    <tr>\n      <td><code>Bopo</code></td>\n    </tr>\n    <tr>\n      <td><code>Brahmi</code></td>\n      <td rowspan=\"2\"><code>Brahmi</code></td>\n    </tr>\n    <tr>\n      <td><code>Brah</code></td>\n    </tr>\n    <tr>\n      <td><code>Braille</code></td>\n      <td rowspan=\"2\"><code>Braille</code></td>\n    </tr>\n    <tr>\n      <td><code>Brai</code></td>\n    </tr>\n    <tr>\n      <td><code>Buginese</code></td>\n      <td rowspan=\"2\"><code>Buginese</code></td>\n    </tr>\n    <tr>\n      <td><code>Bugi</code></td>\n    </tr>\n    <tr>\n      <td><code>Buhid</code></td>\n      <td rowspan=\"2\"><code>Buhid</code></td>\n    </tr>\n    <tr>\n      <td><code>Buhd</code></td>\n    </tr>\n    <tr>\n      <td><code>Canadian_Aboriginal</code></td>\n      <td rowspan=\"2\"><code>Canadian_Aboriginal</code></td>\n    </tr>\n    <tr>\n      <td><code>Cans</code></td>\n    </tr>\n    <tr>\n      <td><code>Carian</code></td>\n      <td rowspan=\"2\"><code>Carian</code></td>\n    </tr>\n    <tr>\n      <td><code>Cari</code></td>\n    </tr>\n    <tr>\n      <td><code>Caucasian_Albanian</code></td>\n      <td rowspan=\"2\"><code>Caucasian_Albanian</code></td>\n    </tr>\n    <tr>\n      <td><code>Aghb</code></td>\n    </tr>\n    <tr>\n      <td><code>Chakma</code></td>\n      <td rowspan=\"2\"><code>Chakma</code></td>\n    </tr>\n    <tr>\n      <td><code>Cakm</code></td>\n    </tr>\n    <tr>\n      <td><code>Cham</code></td>\n      <td><code>Cham</code></td>\n    </tr>\n    <tr>\n      <td><code>Chorasmian</code></td>\n      <td rowspan=\"2\"><code>Chorasmian</code></td>\n    </tr>\n    <tr>\n      <td><code>Chrs</code></td>\n    </tr>\n    <tr>\n      <td><code>Cherokee</code></td>\n      <td rowspan=\"2\"><code>Cherokee</code></td>\n    </tr>\n    <tr>\n      <td><code>Cher</code></td>\n    </tr>\n    <tr>\n      <td><code>Common</code></td>\n      <td rowspan=\"2\"><code>Common</code></td>\n    </tr>\n    <tr>\n      <td><code>Zyyy</code></td>\n    </tr>\n    <tr>\n      <td><code>Coptic</code></td>\n      <td rowspan=\"3\"><code>Coptic</code></td>\n    </tr>\n    <tr>\n      <td><code>Copt</code></td>\n    </tr>\n    <tr>\n      <td><code>Qaac</code></td>\n    </tr>\n    <tr>\n      <td><code>Cuneiform</code></td>\n      <td rowspan=\"2\"><code>Cuneiform</code></td>\n    </tr>\n    <tr>\n      <td><code>Xsux</code></td>\n    </tr>\n    <tr>\n      <td><code>Cypriot</code></td>\n      <td rowspan=\"2\"><code>Cypriot</code></td>\n    </tr>\n    <tr>\n      <td><code>Cprt</code></td>\n    </tr>\n    <tr>\n      <td><code>Cyrillic</code></td>\n      <td rowspan=\"2\"><code>Cyrillic</code></td>\n    </tr>\n    <tr>\n      <td><code>Cyrl</code></td>\n    </tr>\n    <tr>\n      <td><code>Deseret</code></td>\n      <td rowspan=\"2\"><code>Deseret</code></td>\n    </tr>\n    <tr>\n      <td><code>Dsrt</code></td>\n    </tr>\n    <tr>\n      <td><code>Devanagari</code></td>\n      <td rowspan=\"2\"><code>Devanagari</code></td>\n    </tr>\n    <tr>\n      <td><code>Deva</code></td>\n    </tr>\n    <tr>\n      <td><code>Dives_Akuru</code></td>\n      <td rowspan=\"2\"><code>Dives_Akuru</code></td>\n    </tr>\n    <tr>\n      <td><code>Diak</code></td>\n    </tr>\n    <tr>\n      <td><code>Dogra</code></td>\n      <td rowspan=\"2\"><code>Dogra</code></td>\n    </tr>\n    <tr>\n      <td><code>Dogr</code></td>\n    </tr>\n    <tr>\n      <td><code>Duployan</code></td>\n      <td rowspan=\"2\"><code>Duployan</code></td>\n    </tr>\n    <tr>\n      <td><code>Dupl</code></td>\n    </tr>\n    <tr>\n      <td><code>Egyptian_Hieroglyphs</code></td>\n      <td rowspan=\"2\"><code>Egyptian_Hieroglyphs</code></td>\n    </tr>\n    <tr>\n      <td><code>Egyp</code></td>\n    </tr>\n    <tr>\n      <td><code>Elbasan</code></td>\n      <td rowspan=\"2\"><code>Elbasan</code></td>\n    </tr>\n    <tr>\n      <td><code>Elba</code></td>\n    </tr>\n    <tr>\n      <td><code>Elymaic</code></td>\n      <td rowspan=\"2\"><code>Elymaic</code></td>\n    </tr>\n    <tr>\n      <td><code>Elym</code></td>\n    </tr>\n    <tr>\n      <td><code>Ethiopic</code></td>\n      <td rowspan=\"2\"><code>Ethiopic</code></td>\n    </tr>\n    <tr>\n      <td><code>Ethi</code></td>\n    </tr>\n    <tr>\n      <td><code>Georgian</code></td>\n      <td rowspan=\"2\"><code>Georgian</code></td>\n    </tr>\n    <tr>\n      <td><code>Geor</code></td>\n    </tr>\n    <tr>\n      <td><code>Glagolitic</code></td>\n      <td rowspan=\"2\"><code>Glagolitic</code></td>\n    </tr>\n    <tr>\n      <td><code>Glag</code></td>\n    </tr>\n    <tr>\n      <td><code>Gothic</code></td>\n      <td rowspan=\"2\"><code>Gothic</code></td>\n    </tr>\n    <tr>\n      <td><code>Goth</code></td>\n    </tr>\n    <tr>\n      <td><code>Grantha</code></td>\n      <td rowspan=\"2\"><code>Grantha</code></td>\n    </tr>\n    <tr>\n      <td><code>Gran</code></td>\n    </tr>\n    <tr>\n      <td><code>Greek</code></td>\n      <td rowspan=\"2\"><code>Greek</code></td>\n    </tr>\n    <tr>\n      <td><code>Grek</code></td>\n    </tr>\n    <tr>\n      <td><code>Gujarati</code></td>\n      <td rowspan=\"2\"><code>Gujarati</code></td>\n    </tr>\n    <tr>\n      <td><code>Gujr</code></td>\n    </tr>\n    <tr>\n      <td><code>Gunjala_Gondi</code></td>\n      <td rowspan=\"2\"><code>Gunjala_Gondi</code></td>\n    </tr>\n    <tr>\n      <td><code>Gong</code></td>\n    </tr>\n    <tr>\n      <td><code>Gurmukhi</code></td>\n      <td rowspan=\"2\"><code>Gurmukhi</code></td>\n    </tr>\n    <tr>\n      <td><code>Guru</code></td>\n    </tr>\n    <tr>\n      <td><code>Han</code></td>\n      <td rowspan=\"2\"><code>Han</code></td>\n    </tr>\n    <tr>\n      <td><code>Hani</code></td>\n    </tr>\n    <tr>\n      <td><code>Hangul</code></td>\n      <td rowspan=\"2\"><code>Hangul</code></td>\n    </tr>\n    <tr>\n      <td><code>Hang</code></td>\n    </tr>\n    <tr>\n      <td><code>Hanifi_Rohingya</code></td>\n      <td rowspan=\"2\"><code>Hanifi_Rohingya</code></td>\n    </tr>\n    <tr>\n      <td><code>Rohg</code></td>\n    </tr>\n    <tr>\n      <td><code>Hanunoo</code></td>\n      <td rowspan=\"2\"><code>Hanunoo</code></td>\n    </tr>\n    <tr>\n      <td><code>Hano</code></td>\n    </tr>\n    <tr>\n      <td><code>Hatran</code></td>\n      <td rowspan=\"2\"><code>Hatran</code></td>\n    </tr>\n    <tr>\n      <td><code>Hatr</code></td>\n    </tr>\n    <tr>\n      <td><code>Hebrew</code></td>\n      <td rowspan=\"2\"><code>Hebrew</code></td>\n    </tr>\n    <tr>\n      <td><code>Hebr</code></td>\n    </tr>\n    <tr>\n      <td><code>Hiragana</code></td>\n      <td rowspan=\"2\"><code>Hiragana</code></td>\n    </tr>\n    <tr>\n      <td><code>Hira</code></td>\n    </tr>\n    <tr>\n      <td><code>Imperial_Aramaic</code></td>\n      <td rowspan=\"2\"><code>Imperial_Aramaic</code></td>\n    </tr>\n    <tr>\n      <td><code>Armi</code></td>\n    </tr>\n    <tr>\n      <td><code>Inherited</code></td>\n      <td rowspan=\"3\"><code>Inherited</code></td>\n    </tr>\n    <tr>\n      <td><code>Zinh</code></td>\n    </tr>\n    <tr>\n      <td><code>Qaai</code></td>\n    </tr>\n    <tr>\n      <td><code>Inscriptional_Pahlavi</code></td>\n      <td rowspan=\"2\"><code>Inscriptional_Pahlavi</code></td>\n    </tr>\n    <tr>\n      <td><code>Phli</code></td>\n    </tr>\n    <tr>\n      <td><code>Inscriptional_Parthian</code></td>\n      <td rowspan=\"2\"><code>Inscriptional_Parthian</code></td>\n    </tr>\n    <tr>\n      <td><code>Prti</code></td>\n    </tr>\n    <tr>\n      <td><code>Javanese</code></td>\n      <td rowspan=\"2\"><code>Javanese</code></td>\n    </tr>\n    <tr>\n      <td><code>Java</code></td>\n    </tr>\n    <tr>\n      <td><code>Kaithi</code></td>\n      <td rowspan=\"2\"><code>Kaithi</code></td>\n    </tr>\n    <tr>\n      <td><code>Kthi</code></td>\n    </tr>\n    <tr>\n      <td><code>Kannada</code></td>\n      <td rowspan=\"2\"><code>Kannada</code></td>\n    </tr>\n    <tr>\n      <td><code>Knda</code></td>\n    </tr>\n    <tr>\n      <td><code>Katakana</code></td>\n      <td rowspan=\"2\"><code>Katakana</code></td>\n    </tr>\n    <tr>\n      <td><code>Kana</code></td>\n    </tr>\n    <tr>\n      <td><code>Kayah_Li</code></td>\n      <td rowspan=\"2\"><code>Kayah_Li</code></td>\n    </tr>\n    <tr>\n      <td><code>Kali</code></td>\n    </tr>\n    <tr>\n      <td><code>Kharoshthi</code></td>\n      <td rowspan=\"2\"><code>Kharoshthi</code></td>\n    </tr>\n    <tr>\n      <td><code>Khar</code></td>\n    </tr>\n    <tr>\n      <td><code>Khitan_Small_Script</code></td>\n      <td rowspan=\"2\"><code>Khitan_Small_Script</code></td>\n    </tr>\n    <tr>\n      <td><code>Kits</code></td>\n    </tr>\n    <tr>\n      <td><code>Khmer</code></td>\n      <td rowspan=\"2\"><code>Khmer</code></td>\n    </tr>\n    <tr>\n      <td><code>Khmr</code></td>\n    </tr>\n    <tr>\n      <td><code>Khojki</code></td>\n      <td rowspan=\"2\"><code>Khojki</code></td>\n    </tr>\n    <tr>\n      <td><code>Khoj</code></td>\n    </tr>\n    <tr>\n      <td><code>Khudawadi</code></td>\n      <td rowspan=\"2\"><code>Khudawadi</code></td>\n    </tr>\n    <tr>\n      <td><code>Sind</code></td>\n    </tr>\n    <tr>\n      <td><code>Lao</code></td>\n      <td rowspan=\"2\"><code>Lao</code></td>\n    </tr>\n    <tr>\n      <td><code>Laoo</code></td>\n    </tr>\n    <tr>\n      <td><code>Latin</code></td>\n      <td rowspan=\"2\"><code>Latin</code></td>\n    </tr>\n    <tr>\n      <td><code>Latn</code></td>\n    </tr>\n    <tr>\n      <td><code>Lepcha</code></td>\n      <td rowspan=\"2\"><code>Lepcha</code></td>\n    </tr>\n    <tr>\n      <td><code>Lepc</code></td>\n    </tr>\n    <tr>\n      <td><code>Limbu</code></td>\n      <td rowspan=\"2\"><code>Limbu</code></td>\n    </tr>\n    <tr>\n      <td><code>Limb</code></td>\n    </tr>\n    <tr>\n      <td><code>Linear_A</code></td>\n      <td rowspan=\"2\"><code>Linear_A</code></td>\n    </tr>\n    <tr>\n      <td><code>Lina</code></td>\n    </tr>\n    <tr>\n      <td><code>Linear_B</code></td>\n      <td rowspan=\"2\"><code>Linear_B</code></td>\n    </tr>\n    <tr>\n      <td><code>Linb</code></td>\n    </tr>\n    <tr>\n      <td><code>Lisu</code></td>\n      <td><code>Lisu</code></td>\n    </tr>\n    <tr>\n      <td><code>Lycian</code></td>\n      <td rowspan=\"2\"><code>Lycian</code></td>\n    </tr>\n    <tr>\n      <td><code>Lyci</code></td>\n    </tr>\n    <tr>\n      <td><code>Lydian</code></td>\n      <td rowspan=\"2\"><code>Lydian</code></td>\n    </tr>\n    <tr>\n      <td><code>Lydi</code></td>\n    </tr>\n    <tr>\n      <td><code>Mahajani</code></td>\n      <td rowspan=\"2\"><code>Mahajani</code></td>\n    </tr>\n    <tr>\n      <td><code>Mahj</code></td>\n    </tr>\n    <tr>\n      <td><code>Makasar</code></td>\n      <td rowspan=\"2\"><code>Makasar</code></td>\n    </tr>\n    <tr>\n      <td><code>Maka</code></td>\n    </tr>\n    <tr>\n      <td><code>Malayalam</code></td>\n      <td rowspan=\"2\"><code>Malayalam</code></td>\n    </tr>\n    <tr>\n      <td><code>Mlym</code></td>\n    </tr>\n    <tr>\n      <td><code>Mandaic</code></td>\n      <td rowspan=\"2\"><code>Mandaic</code></td>\n    </tr>\n    <tr>\n      <td><code>Mand</code></td>\n    </tr>\n    <tr>\n      <td><code>Manichaean</code></td>\n      <td rowspan=\"2\"><code>Manichaean</code></td>\n    </tr>\n    <tr>\n      <td><code>Mani</code></td>\n    </tr>\n    <tr>\n      <td><code>Marchen</code></td>\n      <td rowspan=\"2\"><code>Marchen</code></td>\n    </tr>\n    <tr>\n      <td><code>Marc</code></td>\n    </tr>\n    <tr>\n      <td><code>Medefaidrin</code></td>\n      <td rowspan=\"2\"><code>Medefaidrin</code></td>\n    </tr>\n    <tr>\n      <td><code>Medf</code></td>\n    </tr>\n    <tr>\n      <td><code>Masaram_Gondi</code></td>\n      <td rowspan=\"2\"><code>Masaram_Gondi</code></td>\n    </tr>\n    <tr>\n      <td><code>Gonm</code></td>\n    </tr>\n    <tr>\n      <td><code>Meetei_Mayek</code></td>\n      <td rowspan=\"2\"><code>Meetei_Mayek</code></td>\n    </tr>\n    <tr>\n      <td><code>Mtei</code></td>\n    </tr>\n    <tr>\n      <td><code>Mende_Kikakui</code></td>\n      <td rowspan=\"2\"><code>Mende_Kikakui</code></td>\n    </tr>\n    <tr>\n      <td><code>Mend</code></td>\n    </tr>\n    <tr>\n      <td><code>Meroitic_Cursive</code></td>\n      <td rowspan=\"2\"><code>Meroitic_Cursive</code></td>\n    </tr>\n    <tr>\n      <td><code>Merc</code></td>\n    </tr>\n    <tr>\n      <td><code>Meroitic_Hieroglyphs</code></td>\n      <td rowspan=\"2\"><code>Meroitic_Hieroglyphs</code></td>\n    </tr>\n    <tr>\n      <td><code>Mero</code></td>\n    </tr>\n    <tr>\n      <td><code>Miao</code></td>\n      <td rowspan=\"2\"><code>Miao</code></td>\n    </tr>\n    <tr>\n      <td><code>Plrd</code></td>\n    </tr>\n    <tr>\n      <td><code>Modi</code></td>\n      <td><code>Modi</code></td>\n    </tr>\n    <tr>\n      <td><code>Mongolian</code></td>\n      <td rowspan=\"2\"><code>Mongolian</code></td>\n    </tr>\n    <tr>\n      <td><code>Mong</code></td>\n    </tr>\n    <tr>\n      <td><code>Mro</code></td>\n      <td rowspan=\"2\"><code>Mro</code></td>\n    </tr>\n    <tr>\n      <td><code>Mroo</code></td>\n    </tr>\n    <tr>\n      <td><code>Multani</code></td>\n      <td rowspan=\"2\"><code>Multani</code></td>\n    </tr>\n    <tr>\n      <td><code>Mult</code></td>\n    </tr>\n    <tr>\n      <td><code>Myanmar</code></td>\n      <td rowspan=\"2\"><code>Myanmar</code></td>\n    </tr>\n    <tr>\n      <td><code>Mymr</code></td>\n    </tr>\n    <tr>\n      <td><code>Nabataean</code></td>\n      <td rowspan=\"2\"><code>Nabataean</code></td>\n    </tr>\n    <tr>\n      <td><code>Nbat</code></td>\n    </tr>\n    <tr>\n      <td><code>Nandinagari</code></td>\n      <td rowspan=\"2\"><code>Nandinagari</code></td>\n    </tr>\n    <tr>\n      <td><code>Nand</code></td>\n    </tr>\n    <tr>\n      <td><code>New_Tai_Lue</code></td>\n      <td rowspan=\"2\"><code>New_Tai_Lue</code></td>\n    </tr>\n    <tr>\n      <td><code>Talu</code></td>\n    </tr>\n    <tr>\n      <td><code>Newa</code></td>\n      <td><code>Newa</code></td>\n    </tr>\n    <tr>\n      <td><code>Nko</code></td>\n      <td rowspan=\"2\"><code>Nko</code></td>\n    </tr>\n    <tr>\n      <td><code>Nkoo</code></td>\n    </tr>\n    <tr>\n      <td><code>Nushu</code></td>\n      <td rowspan=\"2\"><code>Nushu</code></td>\n    </tr>\n    <tr>\n      <td><code>Nshu</code></td>\n    </tr>\n    <tr>\n      <td><code>Nyiakeng_Puachue_Hmong</code></td>\n      <td rowspan=\"2\"><code>Nyiakeng_Puachue_Hmong</code></td>\n    </tr>\n    <tr>\n      <td><code>Hmnp</code></td>\n    </tr>\n    <tr>\n      <td><code>Ogham</code></td>\n      <td rowspan=\"2\"><code>Ogham</code></td>\n    </tr>\n    <tr>\n      <td><code>Ogam</code></td>\n    </tr>\n    <tr>\n      <td><code>Ol_Chiki</code></td>\n      <td rowspan=\"2\"><code>Ol_Chiki</code></td>\n    </tr>\n    <tr>\n      <td><code>Olck</code></td>\n    </tr>\n    <tr>\n      <td><code>Old_Hungarian</code></td>\n      <td rowspan=\"2\"><code>Old_Hungarian</code></td>\n    </tr>\n    <tr>\n      <td><code>Hung</code></td>\n    </tr>\n    <tr>\n      <td><code>Old_Italic</code></td>\n      <td rowspan=\"2\"><code>Old_Italic</code></td>\n    </tr>\n    <tr>\n      <td><code>Ital</code></td>\n    </tr>\n    <tr>\n      <td><code>Old_North_Arabian</code></td>\n      <td rowspan=\"2\"><code>Old_North_Arabian</code></td>\n    </tr>\n    <tr>\n      <td><code>Narb</code></td>\n    </tr>\n    <tr>\n      <td><code>Old_Permic</code></td>\n      <td rowspan=\"2\"><code>Old_Permic</code></td>\n    </tr>\n    <tr>\n      <td><code>Perm</code></td>\n    </tr>\n    <tr>\n      <td><code>Old_Persian</code></td>\n      <td rowspan=\"2\"><code>Old_Persian</code></td>\n    </tr>\n    <tr>\n      <td><code>Xpeo</code></td>\n    </tr>\n    <tr>\n      <td><code>Old_Sogdian</code></td>\n      <td rowspan=\"2\"><code>Old_Sogdian</code></td>\n    </tr>\n    <tr>\n      <td><code>Sogo</code></td>\n    </tr>\n    <tr>\n      <td><code>Old_South_Arabian</code></td>\n      <td rowspan=\"2\"><code>Old_South_Arabian</code></td>\n    </tr>\n    <tr>\n      <td><code>Sarb</code></td>\n    </tr>\n    <tr>\n      <td><code>Old_Turkic</code></td>\n      <td rowspan=\"2\"><code>Old_Turkic</code></td>\n    </tr>\n    <tr>\n      <td><code>Orkh</code></td>\n    </tr>\n    <tr>\n      <td><code>Oriya</code></td>\n      <td rowspan=\"2\"><code>Oriya</code></td>\n    </tr>\n    <tr>\n      <td><code>Orya</code></td>\n    </tr>\n    <tr>\n      <td><code>Osage</code></td>\n      <td rowspan=\"2\"><code>Osage</code></td>\n    </tr>\n    <tr>\n      <td><code>Osge</code></td>\n    </tr>\n    <tr>\n      <td><code>Osmanya</code></td>\n      <td rowspan=\"2\"><code>Osmanya</code></td>\n    </tr>\n    <tr>\n      <td><code>Osma</code></td>\n    </tr>\n    <tr>\n      <td><code>Pahawh_Hmong</code></td>\n      <td rowspan=\"2\"><code>Pahawh_Hmong</code></td>\n    </tr>\n    <tr>\n      <td><code>Hmng</code></td>\n    </tr>\n    <tr>\n      <td><code>Palmyrene</code></td>\n      <td rowspan=\"2\"><code>Palmyrene</code></td>\n    </tr>\n    <tr>\n      <td><code>Palm</code></td>\n    </tr>\n    <tr>\n      <td><code>Pau_Cin_Hau</code></td>\n      <td rowspan=\"2\"><code>Pau_Cin_Hau</code></td>\n    </tr>\n    <tr>\n      <td><code>Pauc</code></td>\n    </tr>\n    <tr>\n      <td><code>Phags_Pa</code></td>\n      <td rowspan=\"2\"><code>Phags_Pa</code></td>\n    </tr>\n    <tr>\n      <td><code>Phag</code></td>\n    </tr>\n    <tr>\n      <td><code>Phoenician</code></td>\n      <td rowspan=\"2\"><code>Phoenician</code></td>\n    </tr>\n    <tr>\n      <td><code>Phnx</code></td>\n    </tr>\n    <tr>\n      <td><code>Psalter_Pahlavi</code></td>\n      <td rowspan=\"2\"><code>Psalter_Pahlavi</code></td>\n    </tr>\n    <tr>\n      <td><code>Phlp</code></td>\n    </tr>\n    <tr>\n      <td><code>Rejang</code></td>\n      <td rowspan=\"2\"><code>Rejang</code></td>\n    </tr>\n    <tr>\n      <td><code>Rjng</code></td>\n    </tr>\n    <tr>\n      <td><code>Runic</code></td>\n      <td rowspan=\"2\"><code>Runic</code></td>\n    </tr>\n    <tr>\n      <td><code>Runr</code></td>\n    </tr>\n    <tr>\n      <td><code>Samaritan</code></td>\n      <td rowspan=\"2\"><code>Samaritan</code></td>\n    </tr>\n    <tr>\n      <td><code>Samr</code></td>\n    </tr>\n    <tr>\n      <td><code>Saurashtra</code></td>\n      <td rowspan=\"2\"><code>Saurashtra</code></td>\n    </tr>\n    <tr>\n      <td><code>Saur</code></td>\n    </tr>\n    <tr>\n      <td><code>Sharada</code></td>\n      <td rowspan=\"2\"><code>Sharada</code></td>\n    </tr>\n    <tr>\n      <td><code>Shrd</code></td>\n    </tr>\n    <tr>\n      <td><code>Shavian</code></td>\n      <td rowspan=\"2\"><code>Shavian</code></td>\n    </tr>\n    <tr>\n      <td><code>Shaw</code></td>\n    </tr>\n    <tr>\n      <td><code>Siddham</code></td>\n      <td rowspan=\"2\"><code>Siddham</code></td>\n    </tr>\n    <tr>\n      <td><code>Sidd</code></td>\n    </tr>\n    <tr>\n      <td><code>SignWriting</code></td>\n      <td rowspan=\"2\"><code>SignWriting</code></td>\n    </tr>\n    <tr>\n      <td><code>Sgnw</code></td>\n    </tr>\n    <tr>\n      <td><code>Sinhala</code></td>\n      <td rowspan=\"2\"><code>Sinhala</code></td>\n    </tr>\n    <tr>\n      <td><code>Sinh</code></td>\n    </tr>\n    <tr>\n      <td><code>Sogdian</code></td>\n      <td rowspan=\"2\"><code>Sogdian</code></td>\n    </tr>\n    <tr>\n      <td><code>Sogd</code></td>\n    </tr>\n    <tr>\n      <td><code>Sora_Sompeng</code></td>\n      <td rowspan=\"2\"><code>Sora_Sompeng</code></td>\n    </tr>\n    <tr>\n      <td><code>Sora</code></td>\n    </tr>\n    <tr>\n      <td><code>Soyombo</code></td>\n      <td rowspan=\"2\"><code>Soyombo</code></td>\n    </tr>\n    <tr>\n      <td><code>Soyo</code></td>\n    </tr>\n    <tr>\n      <td><code>Sundanese</code></td>\n      <td rowspan=\"2\"><code>Sundanese</code></td>\n    </tr>\n    <tr>\n      <td><code>Sund</code></td>\n    </tr>\n    <tr>\n      <td><code>Syloti_Nagri</code></td>\n      <td rowspan=\"2\"><code>Syloti_Nagri</code></td>\n    </tr>\n    <tr>\n      <td><code>Sylo</code></td>\n    </tr>\n    <tr>\n      <td><code>Syriac</code></td>\n      <td rowspan=\"2\"><code>Syriac</code></td>\n    </tr>\n    <tr>\n      <td><code>Syrc</code></td>\n    </tr>\n    <tr>\n      <td><code>Tagalog</code></td>\n      <td rowspan=\"2\"><code>Tagalog</code></td>\n    </tr>\n    <tr>\n      <td><code>Tglg</code></td>\n    </tr>\n    <tr>\n      <td><code>Tagbanwa</code></td>\n      <td rowspan=\"2\"><code>Tagbanwa</code></td>\n    </tr>\n    <tr>\n      <td><code>Tagb</code></td>\n    </tr>\n    <tr>\n      <td><code>Tai_Le</code></td>\n      <td rowspan=\"2\"><code>Tai_Le</code></td>\n    </tr>\n    <tr>\n      <td><code>Tale</code></td>\n    </tr>\n    <tr>\n      <td><code>Tai_Tham</code></td>\n      <td rowspan=\"2\"><code>Tai_Tham</code></td>\n    </tr>\n    <tr>\n      <td><code>Lana</code></td>\n    </tr>\n    <tr>\n      <td><code>Tai_Viet</code></td>\n      <td rowspan=\"2\"><code>Tai_Viet</code></td>\n    </tr>\n    <tr>\n      <td><code>Tavt</code></td>\n    </tr>\n    <tr>\n      <td><code>Takri</code></td>\n      <td rowspan=\"2\"><code>Takri</code></td>\n    </tr>\n    <tr>\n      <td><code>Takr</code></td>\n    </tr>\n    <tr>\n      <td><code>Tamil</code></td>\n      <td rowspan=\"2\"><code>Tamil</code></td>\n    </tr>\n    <tr>\n      <td><code>Taml</code></td>\n    </tr>\n    <tr>\n      <td><code>Tangut</code></td>\n      <td rowspan=\"2\"><code>Tangut</code></td>\n    </tr>\n    <tr>\n      <td><code>Tang</code></td>\n    </tr>\n    <tr>\n      <td><code>Telugu</code></td>\n      <td rowspan=\"2\"><code>Telugu</code></td>\n    </tr>\n    <tr>\n      <td><code>Telu</code></td>\n    </tr>\n    <tr>\n      <td><code>Thaana</code></td>\n      <td rowspan=\"2\"><code>Thaana</code></td>\n    </tr>\n    <tr>\n      <td><code>Thaa</code></td>\n    </tr>\n    <tr>\n      <td><code>Thai</code></td>\n      <td><code>Thai</code></td>\n    </tr>\n    <tr>\n      <td><code>Tibetan</code></td>\n      <td rowspan=\"2\"><code>Tibetan</code></td>\n    </tr>\n    <tr>\n      <td><code>Tibt</code></td>\n    </tr>\n    <tr>\n      <td><code>Tifinagh</code></td>\n      <td rowspan=\"2\"><code>Tifinagh</code></td>\n    </tr>\n    <tr>\n      <td><code>Tfng</code></td>\n    </tr>\n    <tr>\n      <td><code>Tirhuta</code></td>\n      <td rowspan=\"2\"><code>Tirhuta</code></td>\n    </tr>\n    <tr>\n      <td><code>Tirh</code></td>\n    </tr>\n    <tr>\n      <td><code>Ugaritic</code></td>\n      <td rowspan=\"2\"><code>Ugaritic</code></td>\n    </tr>\n    <tr>\n      <td><code>Ugar</code></td>\n    </tr>\n    <tr>\n      <td><code>Vai</code></td>\n      <td rowspan=\"2\"><code>Vai</code></td>\n    </tr>\n    <tr>\n      <td><code>Vaii</code></td>\n    </tr>\n    <tr>\n      <td><code>Wancho</code></td>\n      <td rowspan=\"2\"><code>Wancho</code></td>\n    </tr>\n    <tr>\n      <td><code>Wcho</code></td>\n    </tr>\n    <tr>\n      <td><code>Warang_Citi</code></td>\n      <td rowspan=\"2\"><code>Warang_Citi</code></td>\n    </tr>\n    <tr>\n      <td><code>Wara</code></td>\n    </tr>\n    <tr>\n      <td><code>Yezidi</code></td>\n      <td rowspan=\"2\"><code>Yezidi</code></td>\n    </tr>\n    <tr>\n      <td><code>Yezi</code></td>\n    </tr>\n    <tr>\n      <td><code>Yi</code></td>\n      <td rowspan=\"2\"><code>Yi</code></td>\n    </tr>\n    <tr>\n      <td><code>Yiii</code></td>\n    </tr>\n    <tr>\n      <td><code>Zanabazar_Square</code></td>\n      <td rowspan=\"2\"><code>Zanabazar_Square</code></td>\n    </tr>\n    <tr>\n      <td><code>Zanb</code></td>\n    </tr>\n  </tbody></table>\n</figure></emu-table>\n</emu-import>\n        </emu-clause>\n      "}, "sec-keyed-collections": {"num": "23", "title": "#sec-keyed-collections Keyed Collections", "html": "<emu-clause id=\"sec-keyed-collections\" oldids=\"sec-keyed-collection\">\n  <span id=\"sec-keyed-collection\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-keyed-collections\">#sec-keyed-collections</span> Keyed Collections</h1>\n\n  <div id=\"excluded-sec-map-objects\"><h1><span class=\"secnum\">23.1</span>#sec-map-objects Map Objects</h1>...</div><div id=\"excluded-sec-set-objects\"><h1><span class=\"secnum\">23.2</span>#sec-set-objects Set Objects</h1>...</div><div id=\"excluded-sec-weakmap-objects\"><h1><span class=\"secnum\">23.3</span>#sec-weakmap-objects WeakMap Objects</h1>...</div><div id=\"excluded-sec-weakset-objects\"><h1><span class=\"secnum\">23.4</span>#sec-weakset-objects WeakSet Objects</h1>...</div></emu-clause>\n\n"}, "sec-properties-of-the-bigint-prototype-object": {"num": "20.2.3", "title": "#sec-properties-of-the-bigint-prototype-object Properties of the BigInt Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-bigint-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-bigint-prototype-object\">#sec-properties-of-the-bigint-prototype-object</span> Properties of the BigInt Prototype Object</h1>\n      <p>The BigInt prototype object:</p>\n      <ul>\n        <li>is <dfn>%BigInt.prototype%</dfn>.</li>\n        <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n        <li>is not a BigInt object; it does not have a [[BigIntData]] internal slot.</li>\n        <li>has a [[Prototype]] internal slot whose value is %Object.prototype%.</li>\n      </ul>\n      <p>The abstract operation <dfn id=\"thisbigintvalue\" aoid=\"thisBigIntValue\" oldids=\"sec-thisbigintvalue\">thisBigIntValue<span id=\"sec-thisbigintvalue\"></span></dfn> takes argument <var>value</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is BigInt, return <var>value</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Object and <var>value</var> has a [[BigIntData]] internal slot, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>.[[BigIntData]]) is BigInt.</li><li>Return <var>value</var>.[[BigIntData]].</li></ol></li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></emu-alg>\n      <p>The phrase &#8220;this BigInt value&#8221; within the specification of a method refers to the result returned by calling the abstract operation <emu-xref href=\"#thisbigintvalue\"><a href=\"#thisbigintvalue\">thisBigIntValue</a></emu-xref> with the <emu-val>this</emu-val> value of the method invocation passed as the argument.</p>\n\n      <div id=\"excluded-sec-bigint.prototype.constructor\"><h1><span class=\"secnum\">20.2.3.1</span>#sec-bigint.prototype.constructor BigInt.prototype.constructor</h1>...</div><div id=\"excluded-sec-bigint.prototype.tolocalestring\"><h1><span class=\"secnum\">20.2.3.2</span>#sec-bigint.prototype.tolocalestring BigInt.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-bigint.prototype.tostring\"><h1><span class=\"secnum\">20.2.3.3</span>#sec-bigint.prototype.tostring BigInt.prototype.toString ( [ radix ] )</h1>...</div><div id=\"excluded-sec-bigint.prototype.valueof\"><h1><span class=\"secnum\">20.2.3.4</span>#sec-bigint.prototype.valueof BigInt.prototype.valueOf ( )</h1>...</div><div id=\"excluded-sec-bigint.prototype-@@tostringtag\"><h1><span class=\"secnum\">20.2.3.5</span>#sec-bigint.prototype-@@tostringtag BigInt.prototype [ @@toStringTag ]</h1>...</div></emu-clause>\n  "}, "sec-semantics-static-semantics-assignmenttargettype": {"num": "12.2.1.5", "title": "#sec-semantics-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-semantics-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-semantics-static-semantics-assignmenttargettype\">\n        <span id=\"sec-semantics-static-semantics-isvalidsimpleassignmenttarget\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-semantics-static-semantics-assignmenttargettype\">#sec-semantics-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n        <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"PrimaryExpression\">\n    <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8cee0c59\"><emu-t>this</emu-t></emu-rhs>\n    <emu-rhs a=\"92e97e03\"><emu-nt><a href=\"#prod-Literal\">Literal</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"1bf32393\"><emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"cd178913\"><emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"242eeccd\"><emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d8ce6db1\"><emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"abb7f7f4\"><emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ad589bb4\"><emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3403ed46\"><emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"31b672e8\"><emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d9922ce8\"><emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return <emu-const>invalid</emu-const>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PrimaryExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"cab6f5d7\"><emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>expr</var> be CoveredParenthesizedExpression of <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>.</li><li>Return AssignmentTargetType of <var>expr</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-codepointstostring": {"num": "10.1.2", "title": "#sec-codepointstostring Static Semantics: CodePointsToString ( text )", "html": "<emu-clause id=\"sec-codepointstostring\" aoid=\"CodePointsToString\" oldids=\"sec-utf16encode\">\n      <span id=\"sec-utf16encode\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-codepointstostring\">#sec-codepointstostring</span> Static Semantics: CodePointsToString ( <var>text</var> )</h1>\n      <p>The abstract operation CodePointsToString takes argument <var>text</var> (a sequence of Unicode code points). It converts <var>text</var> into a String value, as described in <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>result</var> be the empty String.</li><li>For each code point <var>cp</var> in <var>text</var>, do<ol><li>Set <var>result</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>result</var> and !&#160;<emu-xref aoid=\"CodePointToUTF16CodeUnits\"><a href=\"#sec-codepointtoutf16codeunits\">CodePointToUTF16CodeUnits</a></emu-xref>(<var>cp</var>).</li></ol></li><li>Return <var>result</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-numeric-types-number-add": {"num": "6.1.6.1.7", "title": "#sec-numeric-types-number-add Number::add ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-number-add\" oldids=\"sec-applying-the-additive-operators-to-numbers\">\n          <span id=\"sec-applying-the-additive-operators-to-numbers\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-add\">#sec-numeric-types-number-add</span> Number::add ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation Number::add takes arguments <var>x</var> (a Number) and <var>y</var> (a Number). It performs addition, producing the sum of <var>x</var> and <var>y</var> as determined using the rules of <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary double-precision arithmetic:</p>\n          <ul>\n            <li>\n              If either operand is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n            </li>\n            <li>\n              The sum of two infinities of opposite sign is <emu-val>NaN</emu-val>.\n            </li>\n            <li>\n              The sum of two infinities of the same sign is the infinity of that sign.\n            </li>\n            <li>\n              The sum of an infinity and a finite value is equal to the infinite operand.\n            </li>\n            <li>\n              The sum of two negative zeroes is <emu-val>-0</emu-val>. The sum of two positive zeroes, or of two zeroes of opposite sign, is <emu-val>+0</emu-val>.\n            </li>\n            <li>\n              The sum of a zero and a nonzero finite value is equal to the nonzero operand.\n            </li>\n            <li>\n              The sum of two nonzero finite values of the same magnitude and opposite sign is <emu-val>+0</emu-val>.\n            </li>\n            <li>\n              In the remaining cases, where neither an infinity, nor a zero, nor <emu-val>NaN</emu-val> is involved, and the operands have the same sign or have different magnitudes, the sum is computed and rounded to the nearest representable value using <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> roundTiesToEven mode. If the magnitude is too large to represent, the operation overflows and the result is then an infinity of appropriate sign. The ECMAScript language requires support of gradual underflow as defined by <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref>.\n            </li>\n          </ul>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>Finite-precision addition is commutative, but not always associative.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-codepointtoutf16codeunits": {"num": "10.1.1", "title": "#sec-codepointtoutf16codeunits Static Semantics: CodePointToUTF16CodeUnits ( cp )", "html": "<emu-clause id=\"sec-codepointtoutf16codeunits\" aoid=\"CodePointToUTF16CodeUnits\" oldids=\"sec-utf16encoding\">\n      <span id=\"sec-utf16encoding\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-codepointtoutf16codeunits\">#sec-codepointtoutf16codeunits</span> Static Semantics: CodePointToUTF16CodeUnits ( <var>cp</var> )</h1>\n      <p>The abstract operation CodePointToUTF16CodeUnits takes argument <var>cp</var> (a numeric code point value). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: 0 &#8804; <var>cp</var> &#8804; 0x10FFFF.</li><li>If <var>cp</var> &#8804; 0xFFFF, return <var>cp</var>.</li><li>Let <var>cu1</var> be <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>((<var>cp</var> - 0x10000) / 0x400) + 0xD800.</li><li>Let <var>cu2</var> be ((<var>cp</var> - 0x10000) <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 0x400) + 0xDC00.</li><li>Return the code unit sequence consisting of <var>cu1</var> followed by <var>cu2</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-enumerableownpropertynames": {"num": "7.3.23", "title": "#sec-enumerableownpropertynames EnumerableOwnPropertyNames ( O, kind )", "html": "<emu-clause id=\"sec-enumerableownpropertynames\" aoid=\"EnumerableOwnPropertyNames\" oldids=\"sec-enumerableownproperties\">\n      <span id=\"sec-enumerableownproperties\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-enumerableownpropertynames\">#sec-enumerableownpropertynames</span> EnumerableOwnPropertyNames ( <var>O</var>, <var>kind</var> )</h1>\n      <p>The abstract operation EnumerableOwnPropertyNames takes arguments <var>O</var> (an Object) and <var>kind</var> (one of <emu-const>key</emu-const>, <emu-const>value</emu-const>, or <emu-const>key+value</emu-const>). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Let <var>ownKeys</var> be ? <var>O</var>.[[OwnPropertyKeys]]().</li><li>Let <var>properties</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>key</var> of <var>ownKeys</var> in <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is String, then<ol><li>Let <var>desc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>key</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val> and <var>desc</var>.[[Enumerable]] is <emu-val>true</emu-val>, then<ol><li>If <var>kind</var> is <emu-const>key</emu-const>, append <var>key</var> to <var>properties</var>.</li><li>Else,<ol><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>key</var>).</li><li>If <var>kind</var> is <emu-const>value</emu-const>, append <var>value</var> to <var>properties</var>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const>.</li><li>Let <var>entry</var> be !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>key</var>, <var>value</var> &#187;).</li><li>Append <var>entry</var> to <var>properties</var>.</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>Return <var>properties</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-listiteratornext-functions": {"num": "7.4.9.1", "title": "#sec-listiteratornext-functions ListIteratorNext Functions", "html": "<emu-clause id=\"sec-listiteratornext-functions\" oldids=\"sec-listiterator-next\">\n        <span id=\"sec-listiterator-next\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-listiteratornext-functions\">#sec-listiteratornext-functions</span> ListIteratorNext Functions</h1>\n        <p>A ListIteratorNext function is an anonymous built-in function. When called with no arguments, it performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> has an [[IteratedList]] internal slot.</li><li>Let <var>list</var> be <var>O</var>.[[IteratedList]].</li><li>Let <var>index</var> be <var>O</var>.[[ListNextIndex]].</li><li>Let <var>len</var> be the number of elements of <var>list</var>.</li><li>If <var>index</var> &#8805; <var>len</var>, then<ol><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li></ol></li><li>Set <var>O</var>.[[ListNextIndex]] to <var>index</var> + 1.</li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>list</var>[<var>index</var>], <emu-val>false</emu-val>).</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of a ListIteratorNext function is 0.</p>\n      </emu-clause>\n    "}}, "figData": {"table-1": "Table 1", "table-2": "Table 3", "table-3": "Table 4", "table-default-attribute-values": "Table 5", "table-6": "Table 7", "table-15": "Table 16", "table-16": "Table 17", "table-17": "Table 18", "table-18": "Table 19", "table-19": "Table 20", "table-20": "Table 21", "table-27": "Table 28", "table-nonbinary-unicode-properties": "Table 56", "table-binary-unicode-properties": "Table 57", "table-unicode-general-category-values": "Table 58", "table-unicode-script-values": "Table 59", "table-the-typedarray-constructors": "Table 62"}}, "to": {"secList": ["sec-conditional-operator-static-semantics-assignmenttargettype", "sec-additive-operators-static-semantics-assignmenttargettype", "sec-rawbytestonumeric", "sec-performeval", "sec-getbase", "sec-runtime-semantics-forinofheadevaluation", "sec-evaluatecall", "sec-ordinaryobjectcreate", "sec-properties-of-the-boolean-prototype-object", "sec-function-environment-records", "sec-ispropertyreference", "sec-module-environment-records", "sec-unary-operators-static-semantics-assignmenttargettype", "sec-property-attributes", "sec-numeric-types-number-tostring", "sec-keywords-and-reserved-words", "sec-relational-operators-static-semantics-assignmenttargettype", "sec-static-semantics-static-semantics-assignmenttargettype", "sec-isstrictreference", "sec-grouping-operator-static-semantics-assignmenttargettype", "sec-numerictorawbytes", "sec-createlistiteratorRecord", "sec-toprimitive", "sec-runtime-semantics-caseclauseisselected", "sec-environment-record-operations", "sec-static-semantics-template-early-errors", "sec-equality-operators-static-semantics-assignmenttargettype", "sec-getreferencedname", "sec-update-expressions-static-semantics-assignmenttargettype", "sec-numeric-types-number-multiply", "sec-validateintegertypedarray", "sec-abstract-operations-for-the-memory-model", "sec-assignment-operators-static-semantics-assignmenttargettype", "sec-bitwise-shift-operators-static-semantics-assignmenttargettype", "sec-properties-of-the-string-prototype-object", "sec-properties-of-the-number-prototype-object", "sec-InnerModuleLinking", "sec-hasprimitivebase", "sec-stringtocodepoints", "sec-utf16decodesurrogatepair", "sec-exp-operator-static-semantics-assignmenttargettype", "sec-issuperreference", "sec-samevaluenonnumeric", "sec-moduledeclarationlinking", "sec-jobs", "sec-environment-records", "sec-numeric-types-number-divide", "sec-ordinaryfunctioncreate", "sec-properties-of-the-date-prototype-object", "sec-isunresolvablereference", "sec-typedarray-objects", "sec-multiplicative-operators-static-semantics-assignmenttargettype", "sec-evaluate-property-access-with-expression-key", "sec-identifiers-static-semantics-assignmenttargettype", "sec-numeric-types-number-exponentiate", "sec-properties-of-the-symbol-prototype-object", "sec-expanded-years", "sec-runtime-semantics-arrayaccumulation", "sec-evaluate-property-access-with-identifier-key", "sec-global-environment-records", "sec-binary-bitwise-operators-static-semantics-assignmenttargettype", "sec-comma-operator-static-semantics-assignmenttargettype", "sec-numeric-types-number-remainder", "sec-newpromisereactionjob", "sec-runtime-semantics-unicodematchproperty-p", "sec-binary-logical-operators-static-semantics-assignmenttargettype", "sec-newpromiseresolvethenablejob", "sec-runtime-semantics-unicodematchpropertyvalue-p-v", "sec-keyed-collections", "sec-properties-of-the-bigint-prototype-object", "sec-semantics-static-semantics-assignmenttargettype", "sec-codepointstostring", "sec-numeric-types-number-add", "sec-codepointtoutf16codeunits", "sec-enumerableownpropertynames", "sec-listiteratornext-functions"], "secData": {"sec-conditional-operator-static-semantics-assignmenttargettype": {"num": "12.14.2", "title": "#sec-conditional-operator-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-conditional-operator-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-conditional-operator-static-semantics-assignmenttargettype\"><span id=\"sec-conditional-operator-static-semantics-isvalidsimpleassignmenttarget\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-conditional-operator-static-semantics-assignmenttargettype\">#sec-conditional-operator-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n      <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"ConditionalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ConditionalExpression\">ConditionalExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"778bcb5c\"><emu-nt><a href=\"#prod-ShortCircuitExpression\">ShortCircuitExpression</a></emu-nt><emu-t>?</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-t>:</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>invalid</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-additive-operators-static-semantics-assignmenttargettype": {"num": "12.8.2", "title": "#sec-additive-operators-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-additive-operators-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-additive-operators-static-semantics-assignmenttargettype\"><span id=\"sec-additive-operators-static-semantics-isvalidsimpleassignmenttarget\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-additive-operators-static-semantics-assignmenttargettype\">#sec-additive-operators-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n      <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"AdditiveExpression\">\n    <emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0e497b17\"><emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt><emu-t>+</emu-t><emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ee054414\"><emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt><emu-t>-</emu-t><emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>invalid</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-rawbytestonumeric": {"num": "24.1.2.9", "title": "#sec-rawbytestonumeric RawBytesToNumeric ( type, rawBytes, isLittleEndian )", "html": "<emu-clause id=\"sec-rawbytestonumeric\" aoid=\"RawBytesToNumeric\" oldids=\"sec-rawbytestonumber\"><span id=\"sec-rawbytestonumber\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-rawbytestonumeric\">#sec-rawbytestonumeric</span> RawBytesToNumeric ( <var>type</var>, <var>rawBytes</var>, <var>isLittleEndian</var> )</h1>\n        <p>The abstract operation RawBytesToNumeric takes arguments <var>type</var> (a TypedArray element type), <var>rawBytes</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>), and <var>isLittleEndian</var> (a Boolean). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for Element Type <var>type</var>.</li><li>If <var>isLittleEndian</var> is <emu-val>false</emu-val>, reverse the order of the elements of <var>rawBytes</var>.</li><li>If <var>type</var> is <emu-const>Float32</emu-const>, then<ol><li>Let <var>value</var> be the byte elements of <var>rawBytes</var> concatenated and interpreted as a little-endian bit string encoding of an <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary32 value.</li><li>If <var>value</var> is an <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary32 NaN value, return the <emu-val>NaN</emu-val> <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref>.</li><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> that corresponds to <var>value</var>.</li></ol></li><li>If <var>type</var> is <emu-const>Float64</emu-const>, then<ol><li>Let <var>value</var> be the byte elements of <var>rawBytes</var> concatenated and interpreted as a little-endian bit string encoding of an <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary64 value.</li><li>If <var>value</var> is an <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary64 NaN value, return the <emu-val>NaN</emu-val> <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref>.</li><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> that corresponds to <var>value</var>.</li></ol></li><li>If !&#160;<emu-xref aoid=\"IsUnsignedElementType\"><a href=\"#sec-isunsignedelementtype\">IsUnsignedElementType</a></emu-xref>(<var>type</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>intValue</var> be the byte elements of <var>rawBytes</var> concatenated and interpreted as a bit string encoding of an unsigned little-endian binary number.</li></ol></li><li>Else,<ol><li>Let <var>intValue</var> be the byte elements of <var>rawBytes</var> concatenated and interpreted as a bit string encoding of a binary little-endian two's complement number of bit length <var>elementSize</var> &#215; 8.</li></ol></li><li>If !&#160;<emu-xref aoid=\"IsBigIntElementType\"><a href=\"#sec-isbigintelementtype\">IsBigIntElementType</a></emu-xref>(<var>type</var>) is <emu-val>true</emu-val>, return the BigInt value that corresponds to <var>intValue</var>.</li><li>Otherwise, return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> that corresponds to <var>intValue</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-performeval": {"num": "18.2.1.1", "title": "#sec-performeval Runtime Semantics: PerformEval ( x, callerRealm, strictCaller, direct )", "html": "<emu-clause id=\"sec-performeval\" aoid=\"PerformEval\" oldids=\"sec-performeval-rules-outside-functions,sec-performeval-rules-outside-methods,sec-performeval-rules-outside-constructors\"><span id=\"sec-performeval-rules-outside-constructors\"></span><span id=\"sec-performeval-rules-outside-methods\"></span><span id=\"sec-performeval-rules-outside-functions\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-performeval\">#sec-performeval</span> Runtime Semantics: PerformEval ( <var>x</var>, <var>callerRealm</var>, <var>strictCaller</var>, <var>direct</var> )</h1>\n        <p>The abstract operation PerformEval takes arguments <var>x</var>, <var>callerRealm</var>, <var>strictCaller</var>, and <var>direct</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>direct</var> is <emu-val>false</emu-val>, then <var>strictCaller</var> is also <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is not String, return <var>x</var>.</li><li>Let <var>evalRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>callerRealm</var>, <var>evalRealm</var>).</li><li>Let <var>inFunction</var> be <emu-val>false</emu-val>.</li><li>Let <var>inMethod</var> be <emu-val>false</emu-val>.</li><li>Let <var>inDerivedConstructor</var> be <emu-val>false</emu-val>.</li><li>If <var>direct</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>thisEnvRec</var> be !&#160;<emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li>If <var>thisEnvRec</var> is a <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref>, then<ol><li>Let <var>F</var> be <var>thisEnvRec</var>.[[FunctionObject]].</li><li>Set <var>inFunction</var> to <emu-val>true</emu-val>.</li><li>Set <var>inMethod</var> to <var>thisEnvRec</var>.HasSuperBinding().</li><li>If <var>F</var>.[[ConstructorKind]] is <emu-const>derived</emu-const>, set <var>inDerivedConstructor</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Perform the following substeps in an <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> order, possibly interleaving parsing and error detection:<ol><li>Let <var>script</var> be the ECMAScript code that is the result of parsing !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>x</var>), for the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. If the parse fails, throw a <emu-val>SyntaxError</emu-val> exception. If any early errors are detected, throw a <emu-val>SyntaxError</emu-val> exception (but see also clause <emu-xref href=\"#sec-error-handling-and-language-extensions\"><a href=\"#sec-error-handling-and-language-extensions\" class=\"excluded-xref\" excluded-id=\"sec-error-handling-and-language-extensions\">#sec-error-handling-and-language-extensions</a></emu-xref>).</li><li>If <var>script</var> Contains <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> is <emu-val>false</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Let <var>body</var> be the <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> of <var>script</var>.</li><li>If <var>inFunction</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>inMethod</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>inDerivedConstructor</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>If <var>strictCaller</var> is <emu-val>true</emu-val>, let <var>strictEval</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>strictEval</var> be IsStrict of <var>script</var>.</li><li>Let <var>runningContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>NOTE: If <var>direct</var> is <emu-val>true</emu-val>, <var>runningContext</var> will be the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that performed the <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref>. If <var>direct</var> is <emu-val>false</emu-val>, <var>runningContext</var> will be the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> for the invocation of the <code>eval</code> function.</li><li>If <var>direct</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>runningContext</var>'s LexicalEnvironment).</li><li>Let <var>varEnv</var> be <var>runningContext</var>'s VariableEnvironment.</li></ol></li><li>Else,<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>evalRealm</var>.[[GlobalEnv]]).</li><li>Let <var>varEnv</var> be <var>evalRealm</var>.[[GlobalEnv]].</li></ol></li><li>If <var>strictEval</var> is <emu-val>true</emu-val>, set <var>varEnv</var> to <var>lexEnv</var>.</li><li>If <var>runningContext</var> is not already suspended, suspend <var>runningContext</var>.</li><li>Let <var>evalContext</var> be a new ECMAScript code <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set <var>evalContext</var>'s Function to <emu-val>null</emu-val>.</li><li>Set <var>evalContext</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> to <var>evalRealm</var>.</li><li>Set <var>evalContext</var>'s ScriptOrModule to <var>runningContext</var>'s ScriptOrModule.</li><li>Set <var>evalContext</var>'s VariableEnvironment to <var>varEnv</var>.</li><li>Set <var>evalContext</var>'s LexicalEnvironment to <var>lexEnv</var>.</li><li>Push <var>evalContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>evalContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"EvalDeclarationInstantiation\"><a href=\"#sec-evaldeclarationinstantiation\">EvalDeclarationInstantiation</a></emu-xref>(<var>body</var>, <var>varEnv</var>, <var>lexEnv</var>, <var>strictEval</var>).</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Set <var>result</var> to the result of evaluating <var>body</var>.</li></ol></li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const> and <var>result</var>.[[Value]] is <emu-const>empty</emu-const>, then<ol><li>Set <var>result</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></li><li><emu-xref aoid=\"Suspend\"><a href=\"#sec-suspend\">Suspend</a></emu-xref> <var>evalContext</var> and remove it from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Resume the context that is now on the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The eval code cannot instantiate variable or function bindings in the variable environment of the calling context that invoked the eval if the calling context is evaluating formal parameter initializers or if either the code of the calling context or the eval code is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>. Instead such bindings are instantiated in a new VariableEnvironment that is only accessible to the eval code. Bindings introduced by <code>let</code>, <code>const</code>, or <code>class</code> declarations are always instantiated in a new LexicalEnvironment.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-getbase": {"num": "6.2.4.1", "title": "#sec-getbase GetBase ( V )", "html": "<emu-clause id=\"sec-getbase\" aoid=\"GetBase\" oldids=\"ao-getbase\"><span id=\"ao-getbase\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getbase\">#sec-getbase</span> GetBase ( <var>V</var> )</h1>\n        <p>The abstract operation GetBase takes argument <var>V</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>V</var>) is <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>.</li><li>Return the base value component of <var>V</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-forinofheadevaluation": {"num": "13.7.5.12", "title": "#sec-runtime-semantics-forinofheadevaluation Runtime Semantics: ForIn/OfHeadEvaluation ( uninitializedBoundNames, expr, iterationKind )", "html": "<emu-clause id=\"sec-runtime-semantics-forinofheadevaluation\" oldids=\"sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind\" aoid=\"ForIn/OfHeadEvaluation\"><span id=\"sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-forinofheadevaluation\">#sec-runtime-semantics-forinofheadevaluation</span> Runtime Semantics: ForIn/OfHeadEvaluation ( <var>uninitializedBoundNames</var>, <var>expr</var>, <var>iterationKind</var> )</h1>\n        <p>The abstract operation ForIn/OfHeadEvaluation takes arguments <var>uninitializedBoundNames</var>, <var>expr</var>, and <var>iterationKind</var> (either <emu-const>enumerate</emu-const>, <emu-const>iterate</emu-const>, or <emu-const>async-iterate</emu-const>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>oldEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>If <var>uninitializedBoundNames</var> is not an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>uninitializedBoundNames</var> has no duplicate entries.</li><li>Let <var>newEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>For each string <var>name</var> in <var>uninitializedBoundNames</var>, do<ol><li>Perform ! <var>newEnv</var>.CreateMutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>newEnv</var>.</li></ol></li><li>Let <var>exprRef</var> be the result of evaluating <var>expr</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Let <var>exprValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>If <var>iterationKind</var> is <emu-const>enumerate</emu-const>, then<ol><li>If <var>exprValue</var> is <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, then<ol><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>break</emu-const>, [[Value]]: <emu-const>empty</emu-const>, [[Target]]: <emu-const>empty</emu-const> }.</li></ol></li><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>exprValue</var>).</li><li>Let <var>iterator</var> be ?&#160;<emu-xref aoid=\"EnumerateObjectProperties\"><a href=\"#sec-enumerate-object-properties\">EnumerateObjectProperties</a></emu-xref>(<var>obj</var>).</li><li>Let <var>nextMethod</var> be !&#160;<emu-xref aoid=\"GetV\"><a href=\"#sec-getv\">GetV</a></emu-xref>(<var>iterator</var>, <emu-val>\"next\"</emu-val>).</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Iterator]]: <var>iterator</var>, [[NextMethod]]: <var>nextMethod</var>, [[Done]]: <emu-val>false</emu-val> }.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iterationKind</var> is <emu-const>iterate</emu-const> or <emu-const>async-iterate</emu-const>.</li><li>If <var>iterationKind</var> is <emu-const>async-iterate</emu-const>, let <var>iteratorHint</var> be <emu-const>async</emu-const>.</li><li>Else, let <var>iteratorHint</var> be <emu-const>sync</emu-const>.</li><li>Return ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>exprValue</var>, <var>iteratorHint</var>).</li></ol></li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-evaluatecall": {"num": "12.3.6.2", "title": "#sec-evaluatecall Runtime Semantics: EvaluateCall ( func, ref, arguments, tailPosition )", "html": "<emu-clause id=\"sec-evaluatecall\" aoid=\"EvaluateCall\" oldids=\"sec-evaluatedirectcall\"><span id=\"sec-evaluatedirectcall\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-evaluatecall\">#sec-evaluatecall</span> Runtime Semantics: EvaluateCall ( <var>func</var>, <var>ref</var>, <var>arguments</var>, <var>tailPosition</var> )</h1>\n        <p>The abstract operation EvaluateCall takes arguments <var>func</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>ref</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>arguments</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), and <var>tailPosition</var> (a Boolean). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ref</var>) is <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>, then<ol><li>If <emu-xref aoid=\"IsPropertyReference\"><a href=\"#sec-ispropertyreference\">IsPropertyReference</a></emu-xref>(<var>ref</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>thisValue</var> be <emu-xref aoid=\"GetThisValue\"><a href=\"#sec-getthisvalue\">GetThisValue</a></emu-xref>(<var>ref</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: the base of <var>ref</var> is an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>Let <var>refEnv</var> be <emu-xref aoid=\"GetBase\"><a href=\"#sec-getbase\">GetBase</a></emu-xref>(<var>ref</var>).</li><li>Let <var>thisValue</var> be <var>refEnv</var>.WithBaseObject().</li></ol></li></ol></li><li>Else,<ol><li>Let <var>thisValue</var> be <emu-val>undefined</emu-val>.</li></ol></li><li>Let <var>argList</var> be ? ArgumentListEvaluation of <var>arguments</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>func</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>func</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>tailPosition</var> is <emu-val>true</emu-val>, perform <emu-xref aoid=\"PrepareForTailCall\"><a href=\"#sec-preparefortailcall\">PrepareForTailCall</a></emu-xref>().</li><li>Let <var>result</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>func</var>, <var>thisValue</var>, <var>argList</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>tailPosition</var> is <emu-val>true</emu-val>, the above call will not return here, but instead evaluation will continue as if the following return has already occurred.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>result</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>.</li><li>Return <var>result</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-ordinaryobjectcreate": {"num": "9.1.12", "title": "#sec-ordinaryobjectcreate OrdinaryObjectCreate ( proto [ , additionalInternalSlotsList ] )", "html": "<emu-clause id=\"sec-ordinaryobjectcreate\" aoid=\"OrdinaryObjectCreate\" oldids=\"sec-objectcreate\"><span id=\"sec-objectcreate\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinaryobjectcreate\">#sec-ordinaryobjectcreate</span> OrdinaryObjectCreate ( <var>proto</var> [ , <var>additionalInternalSlotsList</var> ] )</h1>\n      <p>The abstract operation OrdinaryObjectCreate takes argument <var>proto</var> (an Object or <emu-val>null</emu-val>) and optional argument <var>additionalInternalSlotsList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of names of internal slots). It is used to specify the runtime creation of new ordinary objects. <var>additionalInternalSlotsList</var> contains the names of additional internal slots that must be defined as part of the object, beyond [[Prototype]] and [[Extensible]]. If <var>additionalInternalSlotsList</var> is not provided, a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is used. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>internalSlotsList</var> be &#171; [[Prototype]], [[Extensible]] &#187;.</li><li>If <var>additionalInternalSlotsList</var> is present, append each of its elements to <var>internalSlotsList</var>.</li><li>Let <var>O</var> be !&#160;<emu-xref aoid=\"MakeBasicObject\"><a href=\"#sec-makebasicobject\">MakeBasicObject</a></emu-xref>(<var>internalSlotsList</var>).</li><li>Set <var>O</var>.[[Prototype]] to <var>proto</var>.</li><li>Return <var>O</var>.</li></ol></emu-alg>\n\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Although OrdinaryObjectCreate does little more than call <emu-xref aoid=\"MakeBasicObject\"><a href=\"#sec-makebasicobject\">MakeBasicObject</a></emu-xref>, its use communicates the intention to create an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>, and not an exotic one. Thus, within this specification, it is not called by any algorithm that subsequently modifies the internal methods of the object in ways that would make the result non-ordinary. Operations that create exotic objects invoke <emu-xref aoid=\"MakeBasicObject\"><a href=\"#sec-makebasicobject\">MakeBasicObject</a></emu-xref> directly.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-properties-of-the-boolean-prototype-object": {"num": "19.3.3", "title": "#sec-properties-of-the-boolean-prototype-object Properties of the Boolean Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-boolean-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-boolean-prototype-object\">#sec-properties-of-the-boolean-prototype-object</span> Properties of the Boolean Prototype Object</h1>\n      <p>The Boolean prototype object:</p>\n      <ul>\n        <li>is <dfn>%BooleanPrototype%</dfn>.</li>\n        <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n        <li>is itself a Boolean object; it has a [[BooleanData]] internal slot with the value <emu-val>false</emu-val>.</li>\n        <li>has a [[Prototype]] internal slot whose value is %Object.prototype%.</li>\n      </ul>\n      <p>The abstract operation <dfn id=\"thisbooleanvalue\" aoid=\"thisBooleanValue\" oldids=\"sec-thisbooleanvalue\"><span id=\"sec-thisbooleanvalue\"></span>thisBooleanValue</dfn> takes argument <var>value</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Boolean, return <var>value</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Object and <var>value</var> has a [[BooleanData]] internal slot, then<ol><li>Let <var>b</var> be <var>value</var>.[[BooleanData]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>b</var>) is Boolean.</li><li>Return <var>b</var>.</li></ol></li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></emu-alg>\n\n      <div id=\"excluded-sec-boolean.prototype.constructor\"><h1><span class=\"secnum\">19.3.3.1</span>#sec-boolean.prototype.constructor Boolean.prototype.constructor</h1>...</div><div id=\"excluded-sec-boolean.prototype.tostring\"><h1><span class=\"secnum\">19.3.3.2</span>#sec-boolean.prototype.tostring Boolean.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-boolean.prototype.valueof\"><h1><span class=\"secnum\">19.3.3.3</span>#sec-boolean.prototype.valueof Boolean.prototype.valueOf ( )</h1>...</div></emu-clause>\n\n    "}, "sec-function-environment-records": {"num": "8.1.1.3", "title": "#sec-function-environment-records Function Environment Records", "html": "<emu-clause id=\"sec-function-environment-records\" oldids=\"function-environment\"><span id=\"function-environment\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-environment-records\">#sec-function-environment-records</span> Function Environment Records</h1>\n        <p>A <dfn>function Environment Record</dfn> is a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> that is used to represent the top-level scope of a function and, if the function is not an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, provides a <code>this</code> binding. If a function is not an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> function and references <code>super</code>, its function Environment Record also contains the state that is used to perform <code>super</code> method invocations from within the function.</p>\n        <p>Function Environment Records have the additional state fields listed in <emu-xref href=\"#table-16\"><a href=\"#table-16\" class=\"excluded-xref\" excluded-id=\"table-16\">#table-16</a></emu-xref>.</p>\n        <emu-table id=\"table-16\" caption=\"Additional Fields of Function Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-16\">#table-16</span>: Additional Fields of Function Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              </th>\n              <th>\n                Value\n              </th>\n              <th>\n                Meaning\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[ThisValue]]\n              </td>\n              <td>\n                Any\n              </td>\n              <td>\n                This is the <emu-val>this</emu-val> value used for this invocation of the function.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ThisBindingStatus]]\n              </td>\n              <td>\n                <emu-const>lexical</emu-const> | <emu-const>initialized</emu-const> | <emu-const>uninitialized</emu-const>\n              </td>\n              <td>\n                If the value is <emu-const>lexical</emu-const>, this is an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> and does not have a local <emu-val>this</emu-val> value.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[FunctionObject]]\n              </td>\n              <td>\n                Object\n              </td>\n              <td>\n                The <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> whose invocation caused this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> to be created.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[HomeObject]]\n              </td>\n              <td>\n                Object | <emu-val>undefined</emu-val>\n              </td>\n              <td>\n                If the associated function has <code>super</code> property accesses and is not an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, [[HomeObject]] is the object that the function is bound to as a method. The default value for [[HomeObject]] is <emu-val>undefined</emu-val>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[NewTarget]]\n              </td>\n              <td>\n                Object | <emu-val>undefined</emu-val>\n              </td>\n              <td>\n                If this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> was created by the [[Construct]] internal method, [[NewTarget]] is the value of the [[Construct]] <var>newTarget</var> parameter. Otherwise, its value is <emu-val>undefined</emu-val>.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>Function Environment Records support all of the <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> methods listed in <emu-xref href=\"#table-15\"><a href=\"#table-15\" class=\"excluded-xref\" excluded-id=\"table-15\">#table-15</a></emu-xref> and share the same specifications for all of those methods except for HasThisBinding and HasSuperBinding. In addition, function Environment Records support the methods listed in <emu-xref href=\"#table-17\"><a href=\"#table-17\" class=\"excluded-xref\" excluded-id=\"table-17\">#table-17</a></emu-xref>:</p>\n        <emu-table id=\"table-17\" caption=\"Additional Methods of Function Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-17\">#table-17</span>: Additional Methods of Function Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Method\n              </th>\n              <th>\n                Purpose\n              </th>\n            </tr>\n            <tr>\n              <td>\n                BindThisValue(V)\n              </td>\n              <td>\n                Set the [[ThisValue]] and record that it has been initialized.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                GetThisBinding()\n              </td>\n              <td>\n                Return the value of this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s <code>this</code> binding. Throws a <emu-val>ReferenceError</emu-val> if the <code>this</code> binding has not been initialized.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                GetSuperBase()\n              </td>\n              <td>\n                Return the object that is the base for <code>super</code> property accesses bound in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The object is derived from this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s [[HomeObject]] field. The value <emu-val>undefined</emu-val> indicates that <code>super</code> property accesses will produce runtime errors.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>The behaviour of the additional concrete specification methods for function Environment Records is defined by the following algorithms:</p>\n\n        <div id=\"excluded-sec-bindthisvalue\"><h1><span class=\"secnum\">8.1.1.3.1</span>#sec-bindthisvalue BindThisValue ( V )</h1>...</div><div id=\"excluded-sec-function-environment-records-hasthisbinding\"><h1><span class=\"secnum\">8.1.1.3.2</span>#sec-function-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-function-environment-records-hassuperbinding\"><h1><span class=\"secnum\">8.1.1.3.3</span>#sec-function-environment-records-hassuperbinding HasSuperBinding ( )</h1>...</div><div id=\"excluded-sec-function-environment-records-getthisbinding\"><h1><span class=\"secnum\">8.1.1.3.4</span>#sec-function-environment-records-getthisbinding GetThisBinding ( )</h1>...</div><div id=\"excluded-sec-getsuperbase\"><h1><span class=\"secnum\">8.1.1.3.5</span>#sec-getsuperbase GetSuperBase ( )</h1>...</div></emu-clause>\n\n      "}, "sec-ispropertyreference": {"num": "6.2.4.5", "title": "#sec-ispropertyreference IsPropertyReference ( V )", "html": "<emu-clause id=\"sec-ispropertyreference\" aoid=\"IsPropertyReference\" oldids=\"ao-ispropertyreference\"><span id=\"ao-ispropertyreference\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ispropertyreference\">#sec-ispropertyreference</span> IsPropertyReference ( <var>V</var> )</h1>\n        <p>The abstract operation IsPropertyReference takes argument <var>V</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>V</var>) is <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>.</li><li>If either the base value component of <var>V</var> is an Object or <emu-xref aoid=\"HasPrimitiveBase\"><a href=\"#sec-hasprimitivebase\">HasPrimitiveBase</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-module-environment-records": {"num": "8.1.1.5", "title": "#sec-module-environment-records Module Environment Records", "html": "<emu-clause id=\"sec-module-environment-records\" oldids=\"module-environment\"><span id=\"module-environment\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-environment-records\">#sec-module-environment-records</span> Module Environment Records</h1>\n        <p>A <dfn>module Environment Record</dfn> is a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> that is used to represent the outer scope of an ECMAScript <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. In additional to normal mutable and immutable bindings, module Environment Records also provide immutable import bindings which are bindings that provide indirect access to a target binding that exists in another <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</p>\n        <p>Module Environment Records support all of the <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> methods listed in <emu-xref href=\"#table-15\"><a href=\"#table-15\" class=\"excluded-xref\" excluded-id=\"table-15\">#table-15</a></emu-xref> and share the same specifications for all of those methods except for GetBindingValue, DeleteBinding, HasThisBinding and GetThisBinding. In addition, module Environment Records support the methods listed in <emu-xref href=\"#table-20\"><a href=\"#table-20\" class=\"excluded-xref\" excluded-id=\"table-20\">#table-20</a></emu-xref>:</p>\n        <emu-table id=\"table-20\" caption=\"Additional Methods of Module Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-20\">#table-20</span>: Additional Methods of Module Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Method\n              </th>\n              <th>\n                Purpose\n              </th>\n            </tr>\n            <tr>\n              <td>\n                CreateImportBinding(N, M, N2)\n              </td>\n              <td>\n                Create an immutable indirect binding in a <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. <var>M</var> is a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, and <var>N2</var> is a binding that exists in <var>M</var>'s <emu-xref href=\"#sec-module-environment-records\"><a href=\"#sec-module-environment-records\">module Environment Record</a></emu-xref>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                GetThisBinding()\n              </td>\n              <td>\n                Return the value of this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s <code>this</code> binding.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>The behaviour of the additional concrete specification methods for module Environment Records are defined by the following algorithms:</p>\n\n        <div id=\"excluded-sec-module-environment-records-getbindingvalue-n-s\"><h1><span class=\"secnum\">8.1.1.5.1</span>#sec-module-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )</h1>...</div><div id=\"excluded-sec-module-environment-records-deletebinding-n\"><h1><span class=\"secnum\">8.1.1.5.2</span>#sec-module-environment-records-deletebinding-n DeleteBinding ( N )</h1>...</div><div id=\"excluded-sec-module-environment-records-hasthisbinding\"><h1><span class=\"secnum\">8.1.1.5.3</span>#sec-module-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-module-environment-records-getthisbinding\"><h1><span class=\"secnum\">8.1.1.5.4</span>#sec-module-environment-records-getthisbinding GetThisBinding ( )</h1>...</div><div id=\"excluded-sec-createimportbinding\"><h1><span class=\"secnum\">8.1.1.5.5</span>#sec-createimportbinding CreateImportBinding ( N, M, N2 )</h1>...</div></emu-clause>\n    "}, "sec-unary-operators-static-semantics-assignmenttargettype": {"num": "12.5.2", "title": "#sec-unary-operators-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-unary-operators-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-unary-operators-static-semantics-assignmenttargettype\"><span id=\"sec-unary-operators-static-semantics-isvalidsimpleassignmenttarget\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-unary-operators-static-semantics-assignmenttargettype\">#sec-unary-operators-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n      <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"UnaryExpression\">\n    <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"bfdc08c3\"><emu-t>delete</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"e5d8038f\"><emu-t>void</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ab1a2cb9\"><emu-t>typeof</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3b49039a\"><emu-t>+</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"a03cca5c\"><emu-t>-</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"07d36a79\"><emu-t>~</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"b8b0af72\"><emu-t>!</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"48794e9a\"><emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>invalid</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-property-attributes": {"num": "6.1.7.1", "title": "#sec-property-attributes Property Attributes", "html": "<emu-clause id=\"sec-property-attributes\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-property-attributes\">#sec-property-attributes</span> Property Attributes</h1>\n        <p>Attributes are used in this specification to define and explain the state of Object properties. A <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> associates a key value with the attributes listed in <emu-xref href=\"#table-2\"><a href=\"#table-2\" class=\"excluded-xref\" excluded-id=\"table-2\">#table-2</a></emu-xref>.</p>\n        <emu-table id=\"table-2\" caption=\"Attributes of a Data Property\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-2\">#table-2</span>: Attributes of a Data Property</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Attribute Name\n              </th>\n              <th>\n                Value Domain\n              </th>\n              <th>\n                Description\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[Value]]\n              </td>\n              <td>\n                Any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language type</a></emu-xref>\n              </td>\n              <td>\n                The value retrieved by a get access of the property.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Writable]]\n              </td>\n              <td>\n                Boolean\n              </td>\n              <td>\n                If <emu-val>false</emu-val>, attempts by ECMAScript code to change the property's [[Value]] attribute using [[Set]] will not succeed.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Enumerable]]\n              </td>\n              <td>\n                Boolean\n              </td>\n              <td>\n                If <emu-val>true</emu-val>, the property will be enumerated by a for-in enumeration (see <emu-xref href=\"#sec-for-in-and-for-of-statements\"><a href=\"#sec-for-in-and-for-of-statements\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements\">#sec-for-in-and-for-of-statements</a></emu-xref>). Otherwise, the property is said to be non-enumerable.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Configurable]]\n              </td>\n              <td>\n                Boolean\n              </td>\n              <td>\n                If <emu-val>false</emu-val>, attempts to delete the property, change the property to be an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref>, or change its attributes (other than [[Value]], or changing [[Writable]] to <emu-val>false</emu-val>) will fail.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>An <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> associates a key value with the attributes listed in <emu-xref href=\"#table-3\"><a href=\"#table-3\" class=\"excluded-xref\" excluded-id=\"table-3\">#table-3</a></emu-xref>.</p>\n        <emu-table id=\"table-3\" caption=\"Attributes of an Accessor Property\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-3\">#table-3</span>: Attributes of an Accessor Property</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Attribute Name\n              </th>\n              <th>\n                Value Domain\n              </th>\n              <th>\n                Description\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[Get]]\n              </td>\n              <td>\n                Object | Undefined\n              </td>\n              <td>\n                If the value is an Object it must be a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. The function's [[Call]] internal method (<emu-xref href=\"#table-6\"><a href=\"#table-6\" class=\"excluded-xref\" excluded-id=\"table-6\">#table-6</a></emu-xref>) is called with an empty arguments list to retrieve the property value each time a get access of the property is performed.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Set]]\n              </td>\n              <td>\n                Object | Undefined\n              </td>\n              <td>\n                If the value is an Object it must be a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. The function's [[Call]] internal method (<emu-xref href=\"#table-6\"><a href=\"#table-6\" class=\"excluded-xref\" excluded-id=\"table-6\">#table-6</a></emu-xref>) is called with an arguments list containing the assigned value as its sole argument each time a set access of the property is performed. The effect of a property's [[Set]] internal method may, but is not required to, have an effect on the value returned by subsequent calls to the property's [[Get]] internal method.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Enumerable]]\n              </td>\n              <td>\n                Boolean\n              </td>\n              <td>\n                If <emu-val>true</emu-val>, the property is to be enumerated by a for-in enumeration (see <emu-xref href=\"#sec-for-in-and-for-of-statements\"><a href=\"#sec-for-in-and-for-of-statements\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements\">#sec-for-in-and-for-of-statements</a></emu-xref>). Otherwise, the property is said to be non-enumerable.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Configurable]]\n              </td>\n              <td>\n                Boolean\n              </td>\n              <td>\n                If <emu-val>false</emu-val>, attempts to delete the property, change the property to be a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref>, or change its attributes will fail.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>If the initial values of a property's attributes are not explicitly specified by this specification, the default value defined in <emu-xref href=\"#table-default-attribute-values\"><a href=\"#table-default-attribute-values\" class=\"excluded-xref\" excluded-id=\"table-default-attribute-values\">#table-default-attribute-values</a></emu-xref> is used.</p>\n        <emu-table id=\"table-default-attribute-values\" caption=\"Default Attribute Values\" oldids=\"table-4\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-default-attribute-values\">#table-default-attribute-values</span>: Default Attribute Values</figcaption><span id=\"table-4\"></span>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Attribute Name\n              </th>\n              <th>\n                Default Value\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[Value]]\n              </td>\n              <td>\n                <emu-val>undefined</emu-val>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Get]]\n              </td>\n              <td>\n                <emu-val>undefined</emu-val>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Set]]\n              </td>\n              <td>\n                <emu-val>undefined</emu-val>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Writable]]\n              </td>\n              <td>\n                <emu-val>false</emu-val>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Enumerable]]\n              </td>\n              <td>\n                <emu-val>false</emu-val>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Configurable]]\n              </td>\n              <td>\n                <emu-val>false</emu-val>\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n\n      "}, "sec-numeric-types-number-tostring": {"num": "6.1.6.1.20", "title": "#sec-numeric-types-number-tostring Number::toString ( x )", "html": "<emu-clause id=\"sec-numeric-types-number-tostring\" aoid=\"Number::toString\" oldids=\"sec-tostring-applied-to-the-number-type\"><span id=\"sec-tostring-applied-to-the-number-type\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-tostring\">#sec-numeric-types-number-tostring</span> Number::toString ( <var>x</var> )</h1>\n          <p>The abstract operation Number::toString takes argument <var>x</var> (a Number). It converts <var>x</var> to String format. It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>x</var> is <emu-val>NaN</emu-val>, return the String <emu-val>\"NaN\"</emu-val>.</li><li>If <var>x</var> is <emu-val>+0</emu-val> or <emu-val>-0</emu-val>, return the String <emu-val>\"0\"</emu-val>.</li><li>If <var>x</var> is less than zero, return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <emu-val>\"-\"</emu-val> and ! <emu-xref aoid=\"Number::toString\"><a href=\"#sec-numeric-types-number-tostring\">Number::toString</a></emu-xref>(-<var>x</var>).</li><li>If <var>x</var> is <emu-val>+&#8734;</emu-val>, return the String <emu-val>\"Infinity\"</emu-val>.</li><li id=\"step-number-tostring-intermediate-values\">Otherwise, let <var>n</var>, <var>k</var>, and <var>s</var> be integers such that <var>k</var> &#8805; 1, 10<sup><var>k</var> - 1</sup> &#8804; <var>s</var> &lt; 10<sup><var>k</var></sup>, the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>s</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>k</var>)</sup> is <var>x</var>, and <var>k</var> is as small as possible. Note that <var>k</var> is the number of digits in the decimal representation of <var>s</var>, that <var>s</var> is not divisible by 10<sub>&#8477;</sub>, and that the least significant digit of <var>s</var> is not necessarily uniquely determined by these criteria.</li><li>If <var>k</var> &#8804; <var>n</var> &#8804; 21, return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of:<ul><li>the code units of the <var>k</var> digits of the decimal representation of <var>s</var> (in order, with no leading zeroes)</li><li><var>n</var> - <var>k</var> occurrences of the code unit 0x0030 (DIGIT ZERO)</li></ul></li><li>If 0 &lt; <var>n</var> &#8804; 21, return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of:<ul><li>the code units of the most significant <var>n</var> digits of the decimal representation of <var>s</var></li><li>the code unit 0x002E (FULL STOP)</li><li>the code units of the remaining <var>k</var> - <var>n</var> digits of the decimal representation of <var>s</var></li></ul></li><li>If -6 &lt; <var>n</var> &#8804; 0, return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of:<ul><li>the code unit 0x0030 (DIGIT ZERO)</li><li>the code unit 0x002E (FULL STOP)</li><li>-<var>n</var> occurrences of the code unit 0x0030 (DIGIT ZERO)</li><li>the code units of the <var>k</var> digits of the decimal representation of <var>s</var></li></ul></li><li>Otherwise, if <var>k</var> = 1, return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of:<ul><li>the code unit of the single digit of <var>s</var></li><li>the code unit 0x0065 (LATIN SMALL LETTER E)</li><li>the code unit 0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS) according to whether <var>n</var> - 1 is positive or negative</li><li>the code units of the decimal representation of the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>n</var> - 1) (with no leading zeroes)</li></ul></li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of:<ul><li>the code units of the most significant digit of the decimal representation of <var>s</var></li><li>the code unit 0x002E (FULL STOP)</li><li>the code units of the remaining <var>k</var> - 1 digits of the decimal representation of <var>s</var></li><li>the code unit 0x0065 (LATIN SMALL LETTER E)</li><li>the code unit 0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS) according to whether <var>n</var> - 1 is positive or negative</li><li>the code units of the decimal representation of the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>n</var> - 1) (with no leading zeroes)</li></ul></li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>The following observations may be useful as guidelines for implementations, but are not part of the normative requirements of this Standard:</p>\n            <ul>\n              <li>\n                If x is any <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> other than <emu-val>-0</emu-val>, then <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(x)) is exactly the same <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> as x.\n              </li>\n              <li>\n                The least significant digit of s is not always uniquely determined by the requirements listed in step <emu-xref href=\"#step-number-tostring-intermediate-values\"><a href=\"#step-number-tostring-intermediate-values\" class=\"excluded-xref\" excluded-id=\"step-number-tostring-intermediate-values\">#step-number-tostring-intermediate-values</a></emu-xref>.\n              </li>\n            </ul>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>For implementations that provide more accurate conversions than required by the rules above, it is recommended that the following alternative version of step <emu-xref href=\"#step-number-tostring-intermediate-values\"><a href=\"#step-number-tostring-intermediate-values\" class=\"excluded-xref\" excluded-id=\"step-number-tostring-intermediate-values\">#step-number-tostring-intermediate-values</a></emu-xref> be used as a guideline:</p>\n            <emu-alg replaces-step=\"step-number-tostring-intermediate-values\"><ol start=\"5\"><li>Otherwise, let <var>n</var>, <var>k</var>, and <var>s</var> be integers such that <var>k</var> &#8805; 1, 10<sup><var>k</var> - 1</sup> &#8804; <var>s</var> &lt; 10<sup><var>k</var></sup>, the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>s</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>k</var>)</sup> is <var>x</var>, and <var>k</var> is as small as possible. If there are multiple possibilities for <var>s</var>, choose the value of <var>s</var> for which <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>s</var>) &#215; 10<sub>&#8477;</sub><sup><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) - <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>k</var>)</sup> is closest in value to <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>). If there are two such possible values of <var>s</var>, choose the one that is even. Note that <var>k</var> is the number of digits in the decimal representation of <var>s</var> and that <var>s</var> is not divisible by 10<sub>&#8477;</sub>.</li></ol></emu-alg>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n            <p>Implementers of ECMAScript may find useful the paper and code written by David M. Gay for binary-to-decimal conversion of floating-point numbers:</p>\n            <p>Gay, David M. Correctly Rounded Binary-Decimal and Decimal-Binary Conversions. Numerical Analysis, Manuscript 90-10. AT&amp;T Bell Laboratories (Murray Hill, New Jersey). November 30, 1990. Available as\n              <br>\n              <a href=\"http://ampl.com/REFS/abstracts.html#rounding\">http://ampl.com/REFS/abstracts.html#rounding</a>. Associated code available as\n              <br>\n              <a href=\"http://netlib.sandia.gov/fp/dtoa.c\">http://netlib.sandia.gov/fp/dtoa.c</a> and as\n              <br>\n              <a href=\"http://netlib.sandia.gov/fp/g_fmt.c\">http://netlib.sandia.gov/fp/g_fmt.c</a> and may also be found at the various <code>netlib</code> mirror sites.</p>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-keywords-and-reserved-words": {"num": "11.6.2", "title": "#sec-keywords-and-reserved-words Keywords and Reserved Words", "html": "<emu-clause id=\"sec-keywords-and-reserved-words\" oldids=\"sec-reserved-words,sec-keywords,sec-future-reserved-words\"><span id=\"sec-future-reserved-words\"></span><span id=\"sec-keywords\"></span><span id=\"sec-reserved-words\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-keywords-and-reserved-words\">#sec-keywords-and-reserved-words</span> Keywords and Reserved Words</h1>\n      <p>A <dfn>keyword</dfn> is a token that matches <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>, but also has a syntactic use; that is, it appears literally, in a <code>fixed width</code> font, in some syntactic production. The keywords of ECMAScript include <code>if</code>, <code>while</code>, <code>async</code>, <code>await</code>, and many others.</p>\n      <p>A <dfn>reserved word</dfn> is an <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> that cannot be used as an identifier. Many keywords are reserved words, but some are not, and some are reserved only in certain contexts. <code>if</code> and <code>while</code> are reserved words. <code>await</code> is reserved only inside async functions and modules. <code>async</code> is not reserved; it can be used as a variable name or statement label without restriction.</p>\n      <p>This specification uses a combination of grammatical productions and <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules to specify which names are valid identifiers and which are reserved words. All tokens in the <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt> list below, except for <code>await</code> and <code>yield</code>, are unconditionally reserved. Exceptions for <code>await</code> and <code>yield</code> are specified in <emu-xref href=\"#sec-identifiers\"><a href=\"#sec-identifiers\" class=\"excluded-xref\" excluded-id=\"sec-identifiers\">#sec-identifiers</a></emu-xref>, using parameterized syntactic productions. Lastly, several <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules restrict the set of valid identifiers. See <emu-xref href=\"#sec-identifiers-static-semantics-early-errors\"><a href=\"#sec-identifiers-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-identifiers-static-semantics-early-errors\">#sec-identifiers-static-semantics-early-errors</a></emu-xref>, <emu-xref href=\"#sec-let-and-const-declarations-static-semantics-early-errors\"><a href=\"#sec-let-and-const-declarations-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-let-and-const-declarations-static-semantics-early-errors\">#sec-let-and-const-declarations-static-semantics-early-errors</a></emu-xref>, <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-early-errors\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-early-errors\">#sec-for-in-and-for-of-statements-static-semantics-early-errors</a></emu-xref>, and <emu-xref href=\"#sec-class-definitions-static-semantics-early-errors\"><a href=\"#sec-class-definitions-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-class-definitions-static-semantics-early-errors\">#sec-class-definitions-static-semantics-early-errors</a></emu-xref>. In summary, there are five categories of identifier names:</p>\n      <ul>\n        <li>\n          <p>Those that are always allowed as identifiers, and are not keywords, such as <code>Math</code>, <code>window</code>, <code>toString</code>, and <code>_</code>;</p>\n        </li>\n        <li>\n          <p>Those that are never allowed as identifiers, namely the <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt>s listed below except <code>await</code> and <code>yield</code>;</p>\n        </li>\n        <li>\n          <p>Those that are contextually allowed as identifiers, namely <code>await</code> and <code>yield</code>;</p>\n        </li>\n        <li>\n          <p>Those that are contextually disallowed as identifiers, in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>: <code>let</code>, <code>static</code>, <code>implements</code>, <code>interface</code>, <code>package</code>, <code>private</code>, <code>protected</code>, and <code>public</code>;</p>\n        </li>\n        <li>\n          <p>Those that are always allowed as identifiers, but also appear as keywords within certain syntactic productions, at places where <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> is not allowed: <code>as</code>, <code>async</code>, <code>from</code>, <code>get</code>, <code>of</code>, <code>set</code>, and <code>target</code>.</p>\n        </li>\n      </ul>\n      <p>The term <dfn>conditional keyword</dfn>, or <dfn>contextual keyword</dfn>, is sometimes used to refer to the keywords that fall in the last three categories, and thus can be used as identifiers in some contexts and as keywords in others.</p>\n      <h2>Syntax</h2>\n      <emu-grammar type=\"definition\"><emu-production name=\"ReservedWord\" type=\"lexical\" oneof=\"\" id=\"prod-ReservedWord\">\n    <emu-nt><a href=\"#prod-ReservedWord\">ReservedWord</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>await</emu-t><emu-t>break</emu-t><emu-t>case</emu-t><emu-t>catch</emu-t><emu-t>class</emu-t><emu-t>const</emu-t><emu-t>continue</emu-t><emu-t>debugger</emu-t><emu-t>default</emu-t><emu-t>delete</emu-t><emu-t>do</emu-t><emu-t>else</emu-t><emu-t>enum</emu-t><emu-t>export</emu-t><emu-t>extends</emu-t><emu-t>false</emu-t><emu-t>finally</emu-t><emu-t>for</emu-t><emu-t>function</emu-t><emu-t>if</emu-t><emu-t>import</emu-t><emu-t>in</emu-t><emu-t>instanceof</emu-t><emu-t>new</emu-t><emu-t>null</emu-t><emu-t>return</emu-t><emu-t>super</emu-t><emu-t>switch</emu-t><emu-t>this</emu-t><emu-t>throw</emu-t><emu-t>true</emu-t><emu-t>try</emu-t><emu-t>typeof</emu-t><emu-t>var</emu-t><emu-t>void</emu-t><emu-t>while</emu-t><emu-t>with</emu-t><emu-t>yield</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Per <emu-xref href=\"#sec-grammar-notation\"><a href=\"#sec-grammar-notation\" class=\"excluded-xref\" excluded-id=\"sec-grammar-notation\">#sec-grammar-notation</a></emu-xref>, keywords in the grammar match literal sequences of specific <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> elements. A code point in a keyword cannot be expressed by a <code>\\</code> <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt>.</p>\n        <p>An <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> can contain <code>\\</code> <emu-nt><a href=\"#prod-UnicodeEscapeSequence\">UnicodeEscapeSequence</a></emu-nt>s, but it is not possible to declare a variable named \"else\" by spelling it <code>els\\u{65}</code>. The <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules in <emu-xref href=\"#sec-identifiers-static-semantics-early-errors\"><a href=\"#sec-identifiers-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-identifiers-static-semantics-early-errors\">#sec-identifiers-static-semantics-early-errors</a></emu-xref> rule out identifiers with the same StringValue as a reserved word.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p><code>enum</code> is not currently used as a keyword in this specification. It is a <em>future reserved word</em>, set aside for use as a keyword in future language extensions.</p>\n        <p>Similarly, <code>implements</code>, <code>interface</code>, <code>package</code>, <code>private</code>, <code>protected</code>, and <code>public</code> are future reserved words in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>The names <code>arguments</code> and <code>eval</code> are not keywords, but they are subject to some restrictions in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>. See <emu-xref href=\"#sec-identifiers-static-semantics-early-errors\"><a href=\"#sec-identifiers-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-identifiers-static-semantics-early-errors\">#sec-identifiers-static-semantics-early-errors</a></emu-xref>, <emu-xref href=\"#sec-identifiers-static-semantics-assignmenttargettype\"><a href=\"#sec-identifiers-static-semantics-assignmenttargettype\" class=\"excluded-xref\" excluded-id=\"sec-identifiers-static-semantics-assignmenttargettype\">#sec-identifiers-static-semantics-assignmenttargettype</a></emu-xref>, <emu-xref href=\"#sec-function-definitions-static-semantics-early-errors\"><a href=\"#sec-function-definitions-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-function-definitions-static-semantics-early-errors\">#sec-function-definitions-static-semantics-early-errors</a></emu-xref>, <emu-xref href=\"#sec-generator-function-definitions-static-semantics-early-errors\"><a href=\"#sec-generator-function-definitions-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-generator-function-definitions-static-semantics-early-errors\">#sec-generator-function-definitions-static-semantics-early-errors</a></emu-xref>, <emu-xref href=\"#sec-async-generator-function-definitions-static-semantics-early-errors\"><a href=\"#sec-async-generator-function-definitions-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-async-generator-function-definitions-static-semantics-early-errors\">#sec-async-generator-function-definitions-static-semantics-early-errors</a></emu-xref>, and <emu-xref href=\"#sec-async-function-definitions-static-semantics-early-errors\"><a href=\"#sec-async-function-definitions-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-async-function-definitions-static-semantics-early-errors\">#sec-async-function-definitions-static-semantics-early-errors</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-relational-operators-static-semantics-assignmenttargettype": {"num": "12.10.2", "title": "#sec-relational-operators-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-relational-operators-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-relational-operators-static-semantics-assignmenttargettype\"><span id=\"sec-relational-operators-static-semantics-isvalidsimpleassignmenttarget\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-relational-operators-static-semantics-assignmenttargettype\">#sec-relational-operators-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n      <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"RelationalExpression\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d216c92a\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>&lt;</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"1998981b\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>&gt;</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"29c91375\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>&lt;=</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ddc529a7\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>&gt;=</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d440bdac\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>instanceof</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"f66b493e\"><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt><emu-t>in</emu-t><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>invalid</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-static-semantics-assignmenttargettype": {"num": "12.3.1.7", "title": "#sec-static-semantics-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-static-semantics-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-static-semantics-static-semantics-assignmenttargettype\"><span id=\"sec-static-semantics-static-semantics-isvalidsimpleassignmenttarget\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-static-semantics-assignmenttargettype\">#sec-static-semantics-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n        <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"CallExpression\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d94d9445\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"bba9526d\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"MemberExpression\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6bbe1777\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>\n    <emu-rhs a=\"7eb6e3f7\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5f8b7394\"><emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return <emu-const>simple</emu-const>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"CallExpression\">\n    <emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ec98fef7\"><emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"949290c3\"><emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"9185f623\"><emu-nt><a href=\"#prod-ImportCall\">ImportCall</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"42e81a1c\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"adcef8e1\"><emu-nt><a href=\"#prod-CallExpression\">CallExpression</a></emu-nt><emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"NewExpression\">\n    <emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e753fad7\"><emu-t>new</emu-t><emu-nt><a href=\"#prod-NewExpression\">NewExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"MemberExpression\">\n    <emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"149e7618\"><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"705abe84\"><emu-t>new</emu-t><emu-nt><a href=\"#prod-MemberExpression\">MemberExpression</a></emu-nt><emu-nt><a href=\"#prod-Arguments\">Arguments</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"NewTarget\">\n    <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d2de213d\"><emu-t>new</emu-t><emu-t>.</emu-t><emu-t>target</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"ImportMeta\">\n    <emu-nt><a href=\"#prod-ImportMeta\">ImportMeta</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f0c60de9\"><emu-t>import</emu-t><emu-t>.</emu-t><emu-t>meta</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"LeftHandSideExpression\">\n    <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"25b793e9\"><emu-nt><a href=\"#prod-OptionalExpression\">OptionalExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return <emu-const>invalid</emu-const>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-isstrictreference": {"num": "6.2.4.3", "title": "#sec-isstrictreference IsStrictReference ( V )", "html": "<emu-clause id=\"sec-isstrictreference\" aoid=\"IsStrictReference\" oldids=\"ao-isstrictreference\"><span id=\"ao-isstrictreference\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isstrictreference\">#sec-isstrictreference</span> IsStrictReference ( <var>V</var> )</h1>\n        <p>The abstract operation IsStrictReference takes argument <var>V</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>V</var>) is <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>.</li><li>Return the strict reference flag of <var>V</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-grouping-operator-static-semantics-assignmenttargettype": {"num": "12.2.10.3", "title": "#sec-grouping-operator-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-grouping-operator-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-grouping-operator-static-semantics-assignmenttargettype\"><span id=\"sec-grouping-operator-static-semantics-isvalidsimpleassignmenttarget\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-grouping-operator-static-semantics-assignmenttargettype\">#sec-grouping-operator-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n        <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"ParenthesizedExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ParenthesizedExpression\">ParenthesizedExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4ba6ef9d\"><emu-t>(</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>)</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return AssignmentTargetType of <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-numerictorawbytes": {"num": "24.1.2.11", "title": "#sec-numerictorawbytes NumericToRawBytes ( type, value, isLittleEndian )", "html": "<emu-clause id=\"sec-numerictorawbytes\" aoid=\"NumericToRawBytes\" oldids=\"sec-numbertorawbytes\"><span id=\"sec-numbertorawbytes\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numerictorawbytes\">#sec-numerictorawbytes</span> NumericToRawBytes ( <var>type</var>, <var>value</var>, <var>isLittleEndian</var> )</h1>\n        <p>The abstract operation NumericToRawBytes takes arguments <var>type</var> (a TypedArray element type), <var>value</var> (a BigInt or a Number), and <var>isLittleEndian</var> (a Boolean). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>type</var> is <emu-const>Float32</emu-const>, then<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the 4 bytes that are the result of converting <var>value</var> to <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary32 format using roundTiesToEven mode. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are arranged in big endian order. Otherwise, the bytes are arranged in little endian order. If <var>value</var> is <emu-val>NaN</emu-val>, <var>rawBytes</var> may be set to any implementation chosen <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary32 format Not-a-Number encoding. An implementation must always choose the same encoding for each implementation distinguishable <emu-val>NaN</emu-val> value.</li></ol></li><li>Else if <var>type</var> is <emu-const>Float64</emu-const>, then<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the 8 bytes that are the <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary64 format encoding of <var>value</var>. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are arranged in big endian order. Otherwise, the bytes are arranged in little endian order. If <var>value</var> is <emu-val>NaN</emu-val>, <var>rawBytes</var> may be set to any implementation chosen <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary64 format Not-a-Number encoding. An implementation must always choose the same encoding for each implementation distinguishable <emu-val>NaN</emu-val> value.</li></ol></li><li>Else,<ol><li>Let <var>n</var> be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for Element Type <var>type</var>.</li><li>Let <var>convOp</var> be the abstract operation named in the Conversion Operation column in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for Element Type <var>type</var>.</li><li>Let <var>intValue</var> be <var>convOp</var>(<var>value</var>) treated as a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref>, whether the result is a BigInt or Number.</li><li>If <var>intValue</var> &#8805; 0<sub>&#8477;</sub>, then<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the <var>n</var>-byte binary encoding of <var>intValue</var>. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are ordered in big endian order. Otherwise, the bytes are ordered in little endian order.</li></ol></li><li>Else,<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the <var>n</var>-byte binary two's complement encoding of <var>intValue</var>. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are ordered in big endian order. Otherwise, the bytes are ordered in little endian order.</li></ol></li></ol></li><li>Return <var>rawBytes</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-createlistiteratorRecord": {"num": "7.4.9", "title": "#sec-createlistiteratorRecord CreateListIteratorRecord ( list )", "html": "<emu-clause id=\"sec-createlistiteratorRecord\" oldids=\"sec-createlistiterator\" aoid=\"CreateListIteratorRecord\"><span id=\"sec-createlistiterator\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createlistiteratorRecord\">#sec-createlistiteratorRecord</span> CreateListIteratorRecord ( <var>list</var> )</h1>\n      <p>The abstract operation CreateListIteratorRecord takes argument <var>list</var>. It creates an Iterator (<emu-xref href=\"#sec-iterator-interface\"><a href=\"#sec-iterator-interface\" class=\"excluded-xref\" excluded-id=\"sec-iterator-interface\">#sec-iterator-interface</a></emu-xref>) object record whose next method returns the successive elements of <var>list</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>iterator</var> be <emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-%iteratorprototype%-object\"><a href=\"#sec-%iteratorprototype%-object\">%IteratorPrototype%</a></emu-xref>, &#171; [[IteratedList]], [[ListNextIndex]] &#187;).</li><li>Set <var>iterator</var>.[[IteratedList]] to <var>list</var>.</li><li>Set <var>iterator</var>.[[ListNextIndex]] to 0.</li><li>Let <var>steps</var> be the algorithm steps defined in <emu-xref href=\"#sec-listiteratornext-functions\" title=\"\"><a href=\"#sec-listiteratornext-functions\">ListIteratorNext Functions</a></emu-xref>.</li><li>Let <var>next</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>steps</var>, &#171; &#187;).</li><li>Return <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Iterator]]: <var>iterator</var>, [[NextMethod]]: <var>next</var>, [[Done]]: <emu-val>false</emu-val> }.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The list iterator object is never directly accessible to ECMAScript code.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-listiteratornext-functions\"><h1><span class=\"secnum\">7.4.9.1</span>#sec-listiteratornext-functions ListIteratorNext Functions</h1>...</div></emu-clause>\n\n    "}, "sec-toprimitive": {"num": "7.1.1", "title": "#sec-toprimitive ToPrimitive ( input [ , PreferredType ] )", "html": "<emu-clause id=\"sec-toprimitive\" aoid=\"ToPrimitive\" oldids=\"table-9\"><span id=\"table-9\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-toprimitive\">#sec-toprimitive</span> ToPrimitive ( <var>input</var> [ , <var>PreferredType</var> ] )</h1>\n      <p>The abstract operation ToPrimitive takes argument <var>input</var> and optional argument <var>PreferredType</var>. It converts its <var>input</var> argument to a non-Object type. If an object is capable of converting to more than one primitive type, it may use the optional hint <var>PreferredType</var> to favour that type. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>input</var> is an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>input</var>) is Object, then<ol><li>If <var>PreferredType</var> is not present, let <var>hint</var> be <emu-val>\"default\"</emu-val>.</li><li>Else if <var>PreferredType</var> is hint String, let <var>hint</var> be <emu-val>\"string\"</emu-val>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>PreferredType</var> is hint Number.</li><li>Let <var>hint</var> be <emu-val>\"number\"</emu-val>.</li></ol></li><li>Let <var>exoticToPrim</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>input</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toPrimitive</a></emu-xref>).</li><li>If <var>exoticToPrim</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>exoticToPrim</var>, <var>input</var>, &#171; <var>hint</var> &#187;).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is not Object, return <var>result</var>.</li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>If <var>hint</var> is <emu-val>\"default\"</emu-val>, set <var>hint</var> to <emu-val>\"number\"</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"OrdinaryToPrimitive\"><a href=\"#sec-ordinarytoprimitive\">OrdinaryToPrimitive</a></emu-xref>(<var>input</var>, <var>hint</var>).</li></ol></li><li>Return <var>input</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When ToPrimitive is called with no hint, then it generally behaves as if the hint were Number. However, objects may over-ride this behaviour by defining a <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toPrimitive</a></emu-xref> method. Of the objects defined in this specification only Date objects (see <emu-xref href=\"#sec-date.prototype-@@toprimitive\"><a href=\"#sec-date.prototype-@@toprimitive\" class=\"excluded-xref\" excluded-id=\"sec-date.prototype-@@toprimitive\">#sec-date.prototype-@@toprimitive</a></emu-xref>) and Symbol objects (see <emu-xref href=\"#sec-symbol.prototype-@@toprimitive\"><a href=\"#sec-symbol.prototype-@@toprimitive\" class=\"excluded-xref\" excluded-id=\"sec-symbol.prototype-@@toprimitive\">#sec-symbol.prototype-@@toprimitive</a></emu-xref>) over-ride the default ToPrimitive behaviour. Date objects treat no hint as if the hint were String.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-ordinarytoprimitive\"><h1><span class=\"secnum\">7.1.1.1</span>#sec-ordinarytoprimitive OrdinaryToPrimitive ( O, hint )</h1>...</div></emu-clause>\n\n    "}, "sec-runtime-semantics-caseclauseisselected": {"num": "13.12.10", "title": "#sec-runtime-semantics-caseclauseisselected Runtime Semantics: CaseClauseIsSelected ( C, input )", "html": "<emu-clause id=\"sec-runtime-semantics-caseclauseisselected\" aoid=\"CaseClauseIsSelected\" oldids=\"sec-runtime-semantics-caseselectorevaluation\"><span id=\"sec-runtime-semantics-caseselectorevaluation\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-caseclauseisselected\">#sec-runtime-semantics-caseclauseisselected</span> Runtime Semantics: CaseClauseIsSelected ( <var>C</var>, <var>input</var> )</h1>\n      <p>The abstract operation CaseClauseIsSelected takes arguments <var>C</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> for <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>) and <var>input</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It determines whether <var>C</var> matches <var>input</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>C</var> is an instance of the production <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c76d0d30\"><emu-t>case</emu-t><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>:</emu-t><emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>.</li><li>Let <var>exprRef</var> be the result of evaluating the <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt> of <var>C</var>.</li><li>Let <var>clauseSelector</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Return the result of performing <emu-xref aoid=\"Strict Equality Comparison\"><a href=\"#sec-strict-equality-comparison\">Strict Equality Comparison</a></emu-xref> <var>input</var> === <var>clauseSelector</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This operation does not execute <var>C</var>'s <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> (if any). The <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> algorithm uses its return value to determine which <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> to start executing.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-environment-record-operations": {"num": "8.1.2", "title": "#sec-environment-record-operations Environment Record Operations", "html": "<emu-clause id=\"sec-environment-record-operations\" oldids=\"sec-lexical-environment-operations\"><span id=\"sec-lexical-environment-operations\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-environment-record-operations\">#sec-environment-record-operations</span> Environment Record Operations</h1>\n      <p>The following <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> are used in this specification to operate upon Environment Records:</p>\n\n      <div id=\"excluded-sec-getidentifierreference\"><h1><span class=\"secnum\">8.1.2.1</span>#sec-getidentifierreference GetIdentifierReference ( env, name, strict )</h1>...</div><div id=\"excluded-sec-newdeclarativeenvironment\"><h1><span class=\"secnum\">8.1.2.2</span>#sec-newdeclarativeenvironment NewDeclarativeEnvironment ( E )</h1>...</div><div id=\"excluded-sec-newobjectenvironment\"><h1><span class=\"secnum\">8.1.2.3</span>#sec-newobjectenvironment NewObjectEnvironment ( O, E )</h1>...</div><div id=\"excluded-sec-newfunctionenvironment\"><h1><span class=\"secnum\">8.1.2.4</span>#sec-newfunctionenvironment NewFunctionEnvironment ( F, newTarget )</h1>...</div><div id=\"excluded-sec-newglobalenvironment\"><h1><span class=\"secnum\">8.1.2.5</span>#sec-newglobalenvironment NewGlobalEnvironment ( G, thisValue )</h1>...</div><div id=\"excluded-sec-newmoduleenvironment\"><h1><span class=\"secnum\">8.1.2.6</span>#sec-newmoduleenvironment NewModuleEnvironment ( E )</h1>...</div></emu-clause>\n  "}, "sec-static-semantics-template-early-errors": {"num": "12.2.9.1", "title": "#sec-static-semantics-template-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-static-semantics-template-early-errors\" oldids=\"sec-primary-expression-template-literals-static-semantics-early-errors\"><span id=\"sec-primary-expression-template-literals-static-semantics-early-errors\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-template-early-errors\">#sec-static-semantics-template-early-errors</span> Static Semantics: Early Errors</h1>\n        <emu-grammar><emu-production name=\"TemplateLiteral\" params=\"Yield, Await, Tagged\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await, Tagged\"><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a><emu-mods><emu-params>[Yield, Await, Tagged]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7bf3ad2b\"><emu-nt><a href=\"#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if the <sub>[Tagged]</sub> parameter was not set and <emu-nt><a href=\"#prod-NoSubstitutionTemplate\">NoSubstitutionTemplate</a></emu-nt> Contains <emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt>.\n          </li>\n        </ul>\n\n        <emu-grammar><emu-production name=\"TemplateLiteral\" params=\"Yield, Await, Tagged\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await, Tagged\"><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a><emu-mods><emu-params>[Yield, Await, Tagged]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f1a0e47a\"><emu-nt params=\"?Yield, ?Await, ?Tagged\"><a href=\"#prod-SubstitutionTemplate\">SubstitutionTemplate</a><emu-mods><emu-params>[?Yield, ?Await, ?Tagged]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if the number of elements in the result of TemplateStrings of <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt> with argument <emu-val>false</emu-val> is greater than 2<sup>32</sup> - 1.\n          </li>\n        </ul>\n\n        <emu-grammar><emu-production name=\"SubstitutionTemplate\" params=\"Yield, Await, Tagged\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await, Tagged\"><a href=\"#prod-SubstitutionTemplate\">SubstitutionTemplate</a><emu-mods><emu-params>[Yield, Await, Tagged]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"069aff93\"><emu-nt><a href=\"#prod-TemplateHead\">TemplateHead</a></emu-nt><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-nt params=\"?Yield, ?Await, ?Tagged\"><a href=\"#prod-TemplateSpans\">TemplateSpans</a><emu-mods><emu-params>[?Yield, ?Await, ?Tagged]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if the <sub>[Tagged]</sub> parameter was not set and <emu-nt><a href=\"#prod-TemplateHead\">TemplateHead</a></emu-nt> Contains <emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt>.\n          </li>\n        </ul>\n\n        <emu-grammar><emu-production name=\"TemplateSpans\" params=\"Yield, Await, Tagged\" collapsed=\"\">\n    <emu-nt params=\"Yield, Await, Tagged\"><a href=\"#prod-TemplateSpans\">TemplateSpans</a><emu-mods><emu-params>[Yield, Await, Tagged]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"57fe6188\"><emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if the <sub>[Tagged]</sub> parameter was not set and <emu-nt><a href=\"#prod-TemplateTail\">TemplateTail</a></emu-nt> Contains <emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt>.\n          </li>\n        </ul>\n\n        <emu-grammar><emu-production name=\"TemplateMiddleList\" params=\"Yield, Await, Tagged\">\n    <emu-nt params=\"Yield, Await, Tagged\"><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a><emu-mods><emu-params>[Yield, Await, Tagged]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"db7fc148\"><emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"6dd46bd2\"><emu-nt params=\"?Yield, ?Await, ?Tagged\"><a href=\"#prod-TemplateMiddleList\">TemplateMiddleList</a><emu-mods><emu-params>[?Yield, ?Await, ?Tagged]</emu-params></emu-mods></emu-nt><emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if the <sub>[Tagged]</sub> parameter was not set and <emu-nt><a href=\"#prod-TemplateMiddle\">TemplateMiddle</a></emu-nt> Contains <emu-nt><a href=\"#prod-NotEscapeSequence\">NotEscapeSequence</a></emu-nt>.\n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-equality-operators-static-semantics-assignmenttargettype": {"num": "12.11.2", "title": "#sec-equality-operators-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-equality-operators-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-equality-operators-static-semantics-assignmenttargettype\"><span id=\"sec-equality-operators-static-semantics-isvalidsimpleassignmenttarget\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-equality-operators-static-semantics-assignmenttargettype\">#sec-equality-operators-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n      <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"EqualityExpression\">\n    <emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"757a342c\"><emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-t>==</emu-t><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"70ddad59\"><emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-t>!=</emu-t><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"e0753bf6\"><emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-t>===</emu-t><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"2113edaf\"><emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt><emu-t>!==</emu-t><emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>invalid</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-getreferencedname": {"num": "6.2.4.2", "title": "#sec-getreferencedname GetReferencedName ( V )", "html": "<emu-clause id=\"sec-getreferencedname\" aoid=\"GetReferencedName\" oldids=\"ao-getreferencedname\"><span id=\"ao-getreferencedname\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getreferencedname\">#sec-getreferencedname</span> GetReferencedName ( <var>V</var> )</h1>\n        <p>The abstract operation GetReferencedName takes argument <var>V</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>V</var>) is <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>.</li><li>Return the referenced name component of <var>V</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-update-expressions-static-semantics-assignmenttargettype": {"num": "12.4.3", "title": "#sec-update-expressions-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-update-expressions-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-update-expressions-static-semantics-assignmenttargettype\"><span id=\"sec-update-expressions-static-semantics-isvalidsimpleassignmenttarget\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-update-expressions-static-semantics-assignmenttargettype\">#sec-update-expressions-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n      <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"UpdateExpression\">\n    <emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8bf8e31b\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>++</emu-t></emu-rhs>\n    <emu-rhs a=\"8d1d2d72\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>--</emu-t></emu-rhs>\n    <emu-rhs a=\"5701b162\"><emu-t>++</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3a745559\"><emu-t>--</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>invalid</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-numeric-types-number-multiply": {"num": "6.1.6.1.4", "title": "#sec-numeric-types-number-multiply Number::multiply ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-number-multiply\" oldids=\"sec-applying-the-mul-operator\"><span id=\"sec-applying-the-mul-operator\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-multiply\">#sec-numeric-types-number-multiply</span> Number::multiply ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation Number::multiply takes arguments <var>x</var> (a Number) and <var>y</var> (a Number). It performs multiplication, producing the product of <var>x</var> and <var>y</var>, as determined by the rules of <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary double-precision arithmetic:</p>\n          <ul>\n            <li>\n              If either operand is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n            </li>\n            <li>\n              The sign of the result is positive if both operands have the same sign, negative if the operands have different signs.\n            </li>\n            <li>\n              Multiplication of an infinity by a zero results in <emu-val>NaN</emu-val>.\n            </li>\n            <li>\n              Multiplication of an infinity by an infinity results in an infinity. The sign is determined by the rule already stated above.\n            </li>\n            <li>\n              Multiplication of an infinity by a finite nonzero value results in a signed infinity. The sign is determined by the rule already stated above.\n            </li>\n            <li>\n              In the remaining cases, where neither an infinity nor <emu-val>NaN</emu-val> is involved, the product is computed and rounded to the nearest representable value using <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> roundTiesToEven mode. If the magnitude is too large to represent, the result is then an infinity of appropriate sign. If the magnitude is too small to represent, the result is then a zero of appropriate sign. The ECMAScript language requires support of gradual underflow as defined by <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref>.\n            </li>\n          </ul>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>Finite-precision multiplication is commutative, but not always associative.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-validateintegertypedarray": {"num": "24.4.1.1", "title": "#sec-validateintegertypedarray ValidateIntegerTypedArray ( typedArray [ , waitable ] )", "html": "<emu-clause id=\"sec-validateintegertypedarray\" aoid=\"ValidateIntegerTypedArray\" oldids=\"sec-validatesharedintegertypedarray\"><span id=\"sec-validatesharedintegertypedarray\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-validateintegertypedarray\">#sec-validateintegertypedarray</span> ValidateIntegerTypedArray ( <var>typedArray</var> [ , <var>waitable</var> ] )</h1>\n        <p>The abstract operation ValidateIntegerTypedArray takes argument <var>typedArray</var> and optional argument <var>waitable</var> (a Boolean). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>waitable</var> is not present, set <var>waitable</var> to <emu-val>false</emu-val>.</li><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>typedArray</var>).</li><li>Let <var>typeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>Let <var>type</var> be the Element Type value in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for <var>typeName</var>.</li><li>If <var>waitable</var> is <emu-val>true</emu-val>, then<ol><li>If <var>typeName</var> is not <emu-val>\"Int32Array\"</emu-val> or <emu-val>\"BigInt64Array\"</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Else,<ol><li>If !&#160;<emu-xref aoid=\"IsUnclampedIntegerElementType\"><a href=\"#sec-isunclampedintegerelementtype\">IsUnclampedIntegerElementType</a></emu-xref>(<var>type</var>) is <emu-val>false</emu-val> and !&#160;<emu-xref aoid=\"IsBigIntElementType\"><a href=\"#sec-isbigintelementtype\">IsBigIntElementType</a></emu-xref>(<var>type</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Return <var>buffer</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-abstract-operations-for-the-memory-model": {"num": "28.5", "title": "#sec-abstract-operations-for-the-memory-model Abstract Operations for the Memory Model", "html": "<emu-clause id=\"sec-abstract-operations-for-the-memory-model\" oldids=\"sec-synchronizeeventset\"><span id=\"sec-synchronizeeventset\"></span>\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-abstract-operations-for-the-memory-model\">#sec-abstract-operations-for-the-memory-model</span> Abstract Operations for the Memory Model</h1>\n    <div id=\"excluded-sec-event-set\"><h1><span class=\"secnum\">28.5.1</span>#sec-event-set EventSet ( execution )</h1>...</div><div id=\"excluded-sec-sharedatablockeventset\"><h1><span class=\"secnum\">28.5.2</span>#sec-sharedatablockeventset SharedDataBlockEventSet ( execution )</h1>...</div><div id=\"excluded-sec-hosteventset\"><h1><span class=\"secnum\">28.5.3</span>#sec-hosteventset HostEventSet ( execution )</h1>...</div><div id=\"excluded-sec-composewriteeventbytes\"><h1><span class=\"secnum\">28.5.4</span>#sec-composewriteeventbytes ComposeWriteEventBytes ( execution, byteIndex, Ws )</h1>...</div><div id=\"excluded-sec-valueofreadevent\"><h1><span class=\"secnum\">28.5.5</span>#sec-valueofreadevent ValueOfReadEvent ( execution, R )</h1>...</div></emu-clause>\n\n  "}, "sec-assignment-operators-static-semantics-assignmenttargettype": {"num": "12.15.3", "title": "#sec-assignment-operators-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-assignment-operators-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-assignment-operators-static-semantics-assignmenttargettype\"><span id=\"sec-assignment-operators-static-semantics-isvalidsimpleassignmenttarget\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-assignment-operators-static-semantics-assignmenttargettype\">#sec-assignment-operators-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n      <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"AssignmentExpression\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"5202c84b\"><emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"2bdf3b10\"><emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"6b79045b\"><emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"8a33cee0\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>=</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5f3a8747\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"0de56464\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>&amp;&amp;=</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"0d3d4545\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>||=</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"0db89f3e\"><emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt><emu-t>??=</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>invalid</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-bitwise-shift-operators-static-semantics-assignmenttargettype": {"num": "12.9.2", "title": "#sec-bitwise-shift-operators-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-bitwise-shift-operators-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-bitwise-shift-operators-static-semantics-assignmenttargettype\"><span id=\"sec-bitwise-shift-operators-static-semantics-isvalidsimpleassignmenttarget\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bitwise-shift-operators-static-semantics-assignmenttargettype\">#sec-bitwise-shift-operators-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n      <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"ShiftExpression\">\n    <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b46f532a\"><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt><emu-t>&lt;&lt;</emu-t><emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"548327f3\"><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt><emu-t>&gt;&gt;</emu-t><emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"37f16eac\"><emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt><emu-t>&gt;&gt;&gt;</emu-t><emu-nt><a href=\"#prod-AdditiveExpression\">AdditiveExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>invalid</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-properties-of-the-string-prototype-object": {"num": "21.1.3", "title": "#sec-properties-of-the-string-prototype-object Properties of the String Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-string-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-string-prototype-object\">#sec-properties-of-the-string-prototype-object</span> Properties of the String Prototype Object</h1>\n      <p>The String prototype object:</p>\n      <ul>\n        <li>is <dfn>%StringPrototype%</dfn>.</li>\n        <li>is a <emu-xref href=\"#string-exotic-object\"><a href=\"#string-exotic-object\">String exotic object</a></emu-xref> and has the internal methods specified for such objects.</li>\n        <li>has a [[StringData]] internal slot whose value is the empty String.</li>\n        <li>has a <emu-val>\"length\"</emu-val> property whose initial value is 0 and whose attributes are { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</li>\n        <li>has a [[Prototype]] internal slot whose value is %Object.prototype%.</li>\n      </ul>\n      <p>Unless explicitly stated otherwise, the methods of the String prototype object defined below are not generic and the <emu-val>this</emu-val> value passed to them must be either a String value or an object that has a [[StringData]] internal slot that has been initialized to a String value.</p>\n      <p>The abstract operation <dfn id=\"thisstringvalue\" aoid=\"thisStringValue\" oldids=\"sec-thisstringvalue\"><span id=\"sec-thisstringvalue\"></span>thisStringValue</dfn> takes argument <var>value</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is String, return <var>value</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Object and <var>value</var> has a [[StringData]] internal slot, then<ol><li>Let <var>s</var> be <var>value</var>.[[StringData]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>s</var>) is String.</li><li>Return <var>s</var>.</li></ol></li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></emu-alg>\n\n      <div id=\"excluded-sec-string.prototype.charat\"><h1><span class=\"secnum\">21.1.3.1</span>#sec-string.prototype.charat String.prototype.charAt ( pos )</h1>...</div><div id=\"excluded-sec-string.prototype.charcodeat\"><h1><span class=\"secnum\">21.1.3.2</span>#sec-string.prototype.charcodeat String.prototype.charCodeAt ( pos )</h1>...</div><div id=\"excluded-sec-string.prototype.codepointat\"><h1><span class=\"secnum\">21.1.3.3</span>#sec-string.prototype.codepointat String.prototype.codePointAt ( pos )</h1>...</div><div id=\"excluded-sec-string.prototype.concat\"><h1><span class=\"secnum\">21.1.3.4</span>#sec-string.prototype.concat String.prototype.concat ( ...args )</h1>...</div><div id=\"excluded-sec-string.prototype.constructor\"><h1><span class=\"secnum\">21.1.3.5</span>#sec-string.prototype.constructor String.prototype.constructor</h1>...</div><div id=\"excluded-sec-string.prototype.endswith\"><h1><span class=\"secnum\">21.1.3.6</span>#sec-string.prototype.endswith String.prototype.endsWith ( searchString [ , endPosition ] )</h1>...</div><div id=\"excluded-sec-string.prototype.includes\"><h1><span class=\"secnum\">21.1.3.7</span>#sec-string.prototype.includes String.prototype.includes ( searchString [ , position ] )</h1>...</div><div id=\"excluded-sec-string.prototype.indexof\"><h1><span class=\"secnum\">21.1.3.8</span>#sec-string.prototype.indexof String.prototype.indexOf ( searchString [ , position ] )</h1>...</div><div id=\"excluded-sec-string.prototype.lastindexof\"><h1><span class=\"secnum\">21.1.3.9</span>#sec-string.prototype.lastindexof String.prototype.lastIndexOf ( searchString [ , position ] )</h1>...</div><div id=\"excluded-sec-string.prototype.localecompare\"><h1><span class=\"secnum\">21.1.3.10</span>#sec-string.prototype.localecompare String.prototype.localeCompare ( that [ , reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-string.prototype.match\"><h1><span class=\"secnum\">21.1.3.11</span>#sec-string.prototype.match String.prototype.match ( regexp )</h1>...</div><div id=\"excluded-sec-string.prototype.matchall\"><h1><span class=\"secnum\">21.1.3.12</span>#sec-string.prototype.matchall String.prototype.matchAll ( regexp )</h1>...</div><div id=\"excluded-sec-string.prototype.normalize\"><h1><span class=\"secnum\">21.1.3.13</span>#sec-string.prototype.normalize String.prototype.normalize ( [ form ] )</h1>...</div><div id=\"excluded-sec-string.prototype.padend\"><h1><span class=\"secnum\">21.1.3.14</span>#sec-string.prototype.padend String.prototype.padEnd ( maxLength [ , fillString ] )</h1>...</div><div id=\"excluded-sec-string.prototype.padstart\"><h1><span class=\"secnum\">21.1.3.15</span>#sec-string.prototype.padstart String.prototype.padStart ( maxLength [ , fillString ] )</h1>...</div><div id=\"excluded-sec-string.prototype.repeat\"><h1><span class=\"secnum\">21.1.3.16</span>#sec-string.prototype.repeat String.prototype.repeat ( count )</h1>...</div><div id=\"excluded-sec-string.prototype.replace\"><h1><span class=\"secnum\">21.1.3.17</span>#sec-string.prototype.replace String.prototype.replace ( searchValue, replaceValue )</h1>...</div><div id=\"excluded-sec-string.prototype.replaceall\"><h1><span class=\"secnum\">21.1.3.18</span>#sec-string.prototype.replaceall String.prototype.replaceAll ( searchValue, replaceValue )</h1>...</div><div id=\"excluded-sec-string.prototype.search\"><h1><span class=\"secnum\">21.1.3.19</span>#sec-string.prototype.search String.prototype.search ( regexp )</h1>...</div><div id=\"excluded-sec-string.prototype.slice\"><h1><span class=\"secnum\">21.1.3.20</span>#sec-string.prototype.slice String.prototype.slice ( start, end )</h1>...</div><div id=\"excluded-sec-string.prototype.split\"><h1><span class=\"secnum\">21.1.3.21</span>#sec-string.prototype.split String.prototype.split ( separator, limit )</h1>...</div><div id=\"excluded-sec-string.prototype.startswith\"><h1><span class=\"secnum\">21.1.3.22</span>#sec-string.prototype.startswith String.prototype.startsWith ( searchString [ , position ] )</h1>...</div><div id=\"excluded-sec-string.prototype.substring\"><h1><span class=\"secnum\">21.1.3.23</span>#sec-string.prototype.substring String.prototype.substring ( start, end )</h1>...</div><div id=\"excluded-sec-string.prototype.tolocalelowercase\"><h1><span class=\"secnum\">21.1.3.24</span>#sec-string.prototype.tolocalelowercase String.prototype.toLocaleLowerCase ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-string.prototype.tolocaleuppercase\"><h1><span class=\"secnum\">21.1.3.25</span>#sec-string.prototype.tolocaleuppercase String.prototype.toLocaleUpperCase ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-string.prototype.tolowercase\"><h1><span class=\"secnum\">21.1.3.26</span>#sec-string.prototype.tolowercase String.prototype.toLowerCase ( )</h1>...</div><div id=\"excluded-sec-string.prototype.tostring\"><h1><span class=\"secnum\">21.1.3.27</span>#sec-string.prototype.tostring String.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-string.prototype.touppercase\"><h1><span class=\"secnum\">21.1.3.28</span>#sec-string.prototype.touppercase String.prototype.toUpperCase ( )</h1>...</div><div id=\"excluded-sec-string.prototype.trim\"><h1><span class=\"secnum\">21.1.3.29</span>#sec-string.prototype.trim String.prototype.trim ( )</h1>...</div><div id=\"excluded-sec-string.prototype.trimend\"><h1><span class=\"secnum\">21.1.3.30</span>#sec-string.prototype.trimend String.prototype.trimEnd ( )</h1>...</div><div id=\"excluded-sec-string.prototype.trimstart\"><h1><span class=\"secnum\">21.1.3.31</span>#sec-string.prototype.trimstart String.prototype.trimStart ( )</h1>...</div><div id=\"excluded-sec-string.prototype.valueof\"><h1><span class=\"secnum\">21.1.3.32</span>#sec-string.prototype.valueof String.prototype.valueOf ( )</h1>...</div><div id=\"excluded-sec-string.prototype-@@iterator\"><h1><span class=\"secnum\">21.1.3.33</span>#sec-string.prototype-@@iterator String.prototype [ @@iterator ] ( )</h1>...</div></emu-clause>\n\n    "}, "sec-properties-of-the-number-prototype-object": {"num": "20.1.3", "title": "#sec-properties-of-the-number-prototype-object Properties of the Number Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-number-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-number-prototype-object\">#sec-properties-of-the-number-prototype-object</span> Properties of the Number Prototype Object</h1>\n      <p>The Number prototype object:</p>\n      <ul>\n        <li>is <dfn>%NumberPrototype%</dfn>.</li>\n        <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n        <li>is itself a Number object; it has a [[NumberData]] internal slot with the value <emu-val>+0</emu-val>.</li>\n        <li>has a [[Prototype]] internal slot whose value is %Object.prototype%.</li>\n      </ul>\n      <p>Unless explicitly stated otherwise, the methods of the Number prototype object defined below are not generic and the <emu-val>this</emu-val> value passed to them must be either a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> or an object that has a [[NumberData]] internal slot that has been initialized to a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref>.</p>\n      <p>The abstract operation <dfn id=\"thisnumbervalue\" aoid=\"thisNumberValue\" oldids=\"sec-thisnumbervalue\"><span id=\"sec-thisnumbervalue\"></span>thisNumberValue</dfn> takes argument <var>value</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Number, return <var>value</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Object and <var>value</var> has a [[NumberData]] internal slot, then<ol><li>Let <var>n</var> be <var>value</var>.[[NumberData]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>n</var>) is Number.</li><li>Return <var>n</var>.</li></ol></li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></emu-alg>\n      <p>The phrase &#8220;this <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref>&#8221; within the specification of a method refers to the result returned by calling the abstract operation <emu-xref href=\"#thisnumbervalue\"><a href=\"#thisnumbervalue\">thisNumberValue</a></emu-xref> with the <emu-val>this</emu-val> value of the method invocation passed as the argument.</p>\n\n      <div id=\"excluded-sec-number.prototype.constructor\"><h1><span class=\"secnum\">20.1.3.1</span>#sec-number.prototype.constructor Number.prototype.constructor</h1>...</div><div id=\"excluded-sec-number.prototype.toexponential\"><h1><span class=\"secnum\">20.1.3.2</span>#sec-number.prototype.toexponential Number.prototype.toExponential ( fractionDigits )</h1>...</div><div id=\"excluded-sec-number.prototype.tofixed\"><h1><span class=\"secnum\">20.1.3.3</span>#sec-number.prototype.tofixed Number.prototype.toFixed ( fractionDigits )</h1>...</div><div id=\"excluded-sec-number.prototype.tolocalestring\"><h1><span class=\"secnum\">20.1.3.4</span>#sec-number.prototype.tolocalestring Number.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-number.prototype.toprecision\"><h1><span class=\"secnum\">20.1.3.5</span>#sec-number.prototype.toprecision Number.prototype.toPrecision ( precision )</h1>...</div><div id=\"excluded-sec-number.prototype.tostring\"><h1><span class=\"secnum\">20.1.3.6</span>#sec-number.prototype.tostring Number.prototype.toString ( [ radix ] )</h1>...</div><div id=\"excluded-sec-number.prototype.valueof\"><h1><span class=\"secnum\">20.1.3.7</span>#sec-number.prototype.valueof Number.prototype.valueOf ( )</h1>...</div></emu-clause>\n\n    "}, "sec-InnerModuleLinking": {"num": "15.2.1.16.1.1", "title": "#sec-InnerModuleLinking InnerModuleLinking ( module, stack, index )", "html": "<emu-clause id=\"sec-InnerModuleLinking\" oldids=\"sec-innermoduleinstantiation\" aoid=\"InnerModuleLinking\"><span id=\"sec-innermoduleinstantiation\"></span>\n            <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-InnerModuleLinking\">#sec-InnerModuleLinking</span> InnerModuleLinking ( <var>module</var>, <var>stack</var>, <var>index</var> )</h1>\n            <p>The abstract operation InnerModuleLinking takes arguments <var>module</var> (a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>), <var>stack</var>, and <var>index</var>. It is used by Link to perform the actual linking process for <var>module</var>, as well as recursively on all other modules in the dependency graph. The <var>stack</var> and <var>index</var> parameters, as well as a module's [[DFSIndex]] and [[DFSAncestorIndex]] fields, keep track of the depth-first search (DFS) traversal. In particular, [[DFSAncestorIndex]] is used to discover strongly connected components (SCCs), such that all modules in an SCC transition to <emu-const>linked</emu-const> together. It performs the following steps when called:</p>\n\n            <emu-alg><ol><li>If <var>module</var> is not a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li>Perform ? <var>module</var>.Link().</li><li>Return <var>index</var>.</li></ol></li><li>If <var>module</var>.[[Status]] is <emu-const>linking</emu-const>, <emu-const>linked</emu-const>, or <emu-const>evaluated</emu-const>, then<ol><li>Return <var>index</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>unlinked</emu-const>.</li><li>Set <var>module</var>.[[Status]] to <emu-const>linking</emu-const>.</li><li>Set <var>module</var>.[[DFSIndex]] to <var>index</var>.</li><li>Set <var>module</var>.[[DFSAncestorIndex]] to <var>index</var>.</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>Append <var>module</var> to <var>stack</var>.</li><li>For each String <var>required</var> that is an element of <var>module</var>.[[RequestedModules]], do<ol><li>Let <var>requiredModule</var> be ?&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>required</var>).</li><li>Set <var>index</var> to ?&#160;<emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>(<var>requiredModule</var>, <var>stack</var>, <var>index</var>).</li><li>If <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is either <emu-const>linking</emu-const>, <emu-const>linked</emu-const>, or <emu-const>evaluated</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is <emu-const>linking</emu-const> if and only if <var>requiredModule</var> is in <var>stack</var>.</li><li>If <var>requiredModule</var>.[[Status]] is <emu-const>linking</emu-const>, then<ol><li>Set <var>module</var>.[[DFSAncestorIndex]] to <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>module</var>.[[DFSAncestorIndex]], <var>requiredModule</var>.[[DFSAncestorIndex]]).</li></ol></li></ol></li></ol></li><li>Perform ? <var>module</var>.<emu-xref aoid=\"InitializeEnvironment\"><a href=\"#sec-source-text-module-record-initialize-environment\">InitializeEnvironment</a></emu-xref>().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> occurs exactly once in <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[DFSAncestorIndex]] is less than or equal to <var>module</var>.[[DFSIndex]].</li><li>If <var>module</var>.[[DFSAncestorIndex]] equals <var>module</var>.[[DFSIndex]], then<ol><li>Let <var>done</var> be <emu-val>false</emu-val>.</li><li>Repeat, while <var>done</var> is <emu-val>false</emu-val>,<ol><li>Let <var>requiredModule</var> be the last element in <var>stack</var>.</li><li>Remove the last element of <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>.</li><li>Set <var>requiredModule</var>.[[Status]] to <emu-const>linked</emu-const>.</li><li>If <var>requiredModule</var> and <var>module</var> are the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, set <var>done</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <var>index</var>.</li></ol></emu-alg>\n          </emu-clause>\n        "}, "sec-hasprimitivebase": {"num": "6.2.4.4", "title": "#sec-hasprimitivebase HasPrimitiveBase ( V )", "html": "<emu-clause id=\"sec-hasprimitivebase\" aoid=\"HasPrimitiveBase\" oldids=\"ao-hasprimitivebase\"><span id=\"ao-hasprimitivebase\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-hasprimitivebase\">#sec-hasprimitivebase</span> HasPrimitiveBase ( <var>V</var> )</h1>\n        <p>The abstract operation HasPrimitiveBase takes argument <var>V</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>V</var>) is <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>V</var>'s base value component) is Boolean, String, Symbol, BigInt, or Number, return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-stringtocodepoints": {"num": "10.1.5", "title": "#sec-stringtocodepoints Static Semantics: StringToCodePoints ( string )", "html": "<emu-clause id=\"sec-stringtocodepoints\" aoid=\"StringToCodePoints\" oldids=\"sec-utf16decodestring\"><span id=\"sec-utf16decodestring\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-stringtocodepoints\">#sec-stringtocodepoints</span> Static Semantics: StringToCodePoints ( <var>string</var> )</h1>\n      <p>The abstract operation StringToCodePoints takes argument <var>string</var> (a String). It returns the sequence of Unicode code points that results from interpreting <var>string</var> as UTF-16 encoded Unicode text as described in <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>codePoints</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>size</var> be the length of <var>string</var>.</li><li>Let <var>position</var> be 0.</li><li>Repeat, while <var>position</var> &lt; <var>size</var>,<ol><li>Let <var>cp</var> be !&#160;<emu-xref aoid=\"CodePointAt\"><a href=\"#sec-codepointat\">CodePointAt</a></emu-xref>(<var>string</var>, <var>position</var>).</li><li>Append <var>cp</var>.[[CodePoint]] to <var>codePoints</var>.</li><li>Set <var>position</var> to <var>position</var> + <var>cp</var>.[[CodeUnitCount]].</li></ol></li><li>Return <var>codePoints</var>.</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-utf16decodesurrogatepair": {"num": "10.1.3", "title": "#sec-utf16decodesurrogatepair Static Semantics: UTF16SurrogatePairToCodePoint ( lead, trail )", "html": "<emu-clause id=\"sec-utf16decodesurrogatepair\" aoid=\"UTF16SurrogatePairToCodePoint\" oldids=\"sec-utf16decode,utf16decodesurrogatepair\"><span id=\"utf16decodesurrogatepair\"></span><span id=\"sec-utf16decode\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-utf16decodesurrogatepair\">#sec-utf16decodesurrogatepair</span> Static Semantics: UTF16SurrogatePairToCodePoint ( <var>lead</var>, <var>trail</var> )</h1>\n      <p>The abstract operation UTF16SurrogatePairToCodePoint takes arguments <var>lead</var> (a code unit) and <var>trail</var> (a code unit). Two code units that form a UTF-16 <emu-xref href=\"#surrogate-pair\"><a href=\"#surrogate-pair\">surrogate pair</a></emu-xref> are converted to a code point. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lead</var> is a <emu-xref href=\"#leading-surrogate\"><a href=\"#leading-surrogate\">leading surrogate</a></emu-xref> and <var>trail</var> is a <emu-xref href=\"#trailing-surrogate\"><a href=\"#trailing-surrogate\">trailing surrogate</a></emu-xref>.</li><li>Let <var>cp</var> be (<var>lead</var> - 0xD800) &#215; 0x400 + (<var>trail</var> - 0xDC00) + 0x10000.</li><li>Return the code point <var>cp</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-exp-operator-static-semantics-assignmenttargettype": {"num": "12.6.2", "title": "#sec-exp-operator-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-exp-operator-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-exp-operator-static-semantics-assignmenttargettype\"><span id=\"sec-exp-operator-static-semantics-isvalidsimpleassignmenttarget\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-exp-operator-static-semantics-assignmenttargettype\">#sec-exp-operator-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n      <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"ExponentiationExpression\">\n    <emu-nt><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d1905fcc\"><emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt><emu-t>**</emu-t><emu-nt><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>invalid</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-issuperreference": {"num": "6.2.4.7", "title": "#sec-issuperreference IsSuperReference ( V )", "html": "<emu-clause id=\"sec-issuperreference\" aoid=\"IsSuperReference\" oldids=\"ao-issuperreference\"><span id=\"ao-issuperreference\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-issuperreference\">#sec-issuperreference</span> IsSuperReference ( <var>V</var> )</h1>\n        <p>The abstract operation IsSuperReference takes argument <var>V</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>V</var>) is <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>.</li><li>If <var>V</var> has a thisValue component, return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-samevaluenonnumeric": {"num": "7.2.13", "title": "#sec-samevaluenonnumeric SameValueNonNumeric ( x, y )", "html": "<emu-clause id=\"sec-samevaluenonnumeric\" aoid=\"SameValueNonNumeric\" oldids=\"sec-samevaluenonnumber\"><span id=\"sec-samevaluenonnumber\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-samevaluenonnumeric\">#sec-samevaluenonnumeric</span> SameValueNonNumeric ( <var>x</var>, <var>y</var> )</h1>\n      <p>The abstract operation SameValueNonNumeric takes arguments <var>x</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>y</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and returns a completion record whose [[Type]] is <emu-const>normal</emu-const> and whose [[Value]] is a Boolean. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is not Number or BigInt.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is the same as <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Undefined, return <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Null, return <emu-val>true</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is String, then<ol><li>If <var>x</var> and <var>y</var> are exactly the same sequence of code units (same length and same code units at corresponding indices), return <emu-val>true</emu-val>; otherwise, return <emu-val>false</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Boolean, then<ol><li>If <var>x</var> and <var>y</var> are both <emu-val>true</emu-val> or both <emu-val>false</emu-val>, return <emu-val>true</emu-val>; otherwise, return <emu-val>false</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is Symbol, then<ol><li>If <var>x</var> and <var>y</var> are both the same Symbol value, return <emu-val>true</emu-val>; otherwise, return <emu-val>false</emu-val>.</li></ol></li><li>If <var>x</var> and <var>y</var> are the same Object value, return <emu-val>true</emu-val>. Otherwise, return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-moduledeclarationlinking": {"num": "15.2.1.16.1", "title": "#sec-moduledeclarationlinking Link ( ) Concrete Method", "html": "<emu-clause id=\"sec-moduledeclarationlinking\" oldids=\"sec-moduledeclarationinstantiation\"><span id=\"sec-moduledeclarationinstantiation\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-moduledeclarationlinking\">#sec-moduledeclarationlinking</span> Link ( ) Concrete Method</h1>\n          <p>The Link concrete method of a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> implements the corresponding <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> abstract method.</p>\n          <p>On success, Link transitions this module's [[Status]] from <emu-const>unlinked</emu-const> to <emu-const>linked</emu-const>. On failure, an exception is thrown and this module's [[Status]] remains <emu-const>unlinked</emu-const>.</p>\n          <p>This abstract method performs the following steps (most of the work is done by the auxiliary function <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>):</p>\n\n          <emu-alg><ol><li>Let <var>module</var> be this <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is not <emu-const>linking</emu-const> or <emu-const>evaluating</emu-const>.</li><li>Let <var>stack</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>(<var>module</var>, <var>stack</var>, 0).</li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>For each <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> <var>m</var> in <var>stack</var>, do<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>m</var>.[[Status]] is <emu-const>linking</emu-const>.</li><li>Set <var>m</var>.[[Status]] to <emu-const>unlinked</emu-const>.</li><li>Set <var>m</var>.[[Environment]] to <emu-val>undefined</emu-val>.</li><li>Set <var>m</var>.[[DFSIndex]] to <emu-val>undefined</emu-val>.</li><li>Set <var>m</var>.[[DFSAncestorIndex]] to <emu-val>undefined</emu-val>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>unlinked</emu-const>.</li><li>Return <var>result</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>linked</emu-const> or <emu-const>evaluated</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>stack</var> is empty.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n          <div id=\"excluded-sec-InnerModuleLinking\"><h1><span class=\"secnum\">15.2.1.16.1.1</span>#sec-InnerModuleLinking InnerModuleLinking ( module, stack, index )</h1>...</div></emu-clause>\n\n        "}, "sec-jobs": {"num": "8.4", "title": "#sec-jobs Jobs and Host Operations to Enqueue Jobs", "html": "<emu-clause id=\"sec-jobs\" oldids=\"sec-jobs-and-job-queues,sec-enqueuejob,sec-runjobs,job-queue\"><span id=\"job-queue\"></span><span id=\"sec-runjobs\"></span><span id=\"sec-enqueuejob\"></span><span id=\"sec-jobs-and-job-queues\"></span>\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-jobs\">#sec-jobs</span> Jobs and Host Operations to Enqueue Jobs</h1>\n    <p>A <dfn id=\"job\">Job</dfn> is an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that initiates an ECMAScript computation when no other ECMAScript computation is currently in progress.</p>\n    <p>Jobs are scheduled for execution by ECMAScript <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> environments. This specification describes the <emu-xref href=\"#host-hook\"><a href=\"#host-hook\">host hook</a></emu-xref> <emu-xref aoid=\"HostEnqueuePromiseJob\"><a href=\"#sec-hostenqueuepromisejob\">HostEnqueuePromiseJob</a></emu-xref> to schedule one kind of job; hosts may define additional <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> which schedule jobs. Such operations accept a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> as the parameter and schedule it to be performed at some future time. Their implementations must conform to the following requirements:</p>\n\n    <ul>\n      <li>At some future point in time, when there is no <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> and the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is empty, the implementation must:\n        <ol>\n          <li>Perform any <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> preparation steps.</li>\n          <li><emu-xref aoid=\"Invoke\"><a href=\"#sec-invoke\">Invoke</a></emu-xref> the <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref>.</li>\n          <li>Perform any <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> cleanup steps, after which the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> must be empty.</li>\n        </ol>\n      </li>\n      <li>Only one <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> may be actively undergoing evaluation at any point in time.</li>\n      <li>Once evaluation of a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> starts, it must run to completion before evaluation of any other <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> starts.</li>\n      <li>The <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> must return a normal completion, implementing its own handling of errors.</li>\n    </ul>\n\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <emu-xref href=\"#host\"><a href=\"#host\">Host</a></emu-xref> environments are not required to treat Jobs uniformly with respect to scheduling. For example, web browsers and Node.js treat Promise-handling Jobs as a higher priority than other work; future features may add Jobs that are not treated at such a high priority.\n    </div></emu-note>\n\n    <p>At any particular time, <var>scriptOrModule</var> (a <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref>, a <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, or <emu-val>null</emu-val>) is the <dfn id=\"job-activescriptormodule\">active script or module</dfn> if all of the following conditions are true:</p>\n    <ul>\n      <li><emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>() is <var>scriptOrModule</var>.</li>\n      <li>If <var>scriptOrModule</var> is a <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, let <var>ec</var> be the topmost <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> on the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> whose ScriptOrModule component is <var>scriptOrModule</var>. The <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> component of <var>ec</var> is <var>scriptOrModule</var>.[[Realm]].</li>\n    </ul>\n\n    <p>At any particular time, an execution is <dfn id=\"job-preparedtoevaluatecode\">prepared to evaluate ECMAScript code</dfn> if all of the following conditions are true:</p>\n    <ul>\n      <li>The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is not empty.</li>\n      <li>The <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> component of the topmost <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> on the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> is a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>.</li>\n    </ul>\n\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p><emu-xref href=\"#host\"><a href=\"#host\">Host</a></emu-xref> environments may prepare an execution to evaluate code by pushing execution contexts onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>. The specific steps are <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref>.</p>\n      <p>The specific choice of <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> is up to the <emu-xref href=\"#host-environment\"><a href=\"#host-environment\">host environment</a></emu-xref>. This initial <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> and <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> is only in use before any callback function is invoked. When a callback function related to a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref>, like a Promise handler, is invoked, the invocation pushes its own <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> and <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>.</p>\n    </div></emu-note>\n\n    <p>Particular kinds of Jobs have additional conformance requirements.</p>\n\n    <div id=\"excluded-sec-jobcallback-records\"><h1><span class=\"secnum\">8.4.1</span>#sec-jobcallback-records JobCallback Records</h1>...</div><div id=\"excluded-sec-hostmakejobcallback\"><h1><span class=\"secnum\">8.4.2</span>#sec-hostmakejobcallback HostMakeJobCallback ( callback )</h1>...</div><div id=\"excluded-sec-hostcalljobcallback\"><h1><span class=\"secnum\">8.4.3</span>#sec-hostcalljobcallback HostCallJobCallback ( jobCallback, V, argumentsList )</h1>...</div><div id=\"excluded-sec-hostenqueuepromisejob\"><h1><span class=\"secnum\">8.4.4</span>#sec-hostenqueuepromisejob HostEnqueuePromiseJob ( job, realm )</h1>...</div></emu-clause>\n\n  "}, "sec-environment-records": {"num": "8.1", "title": "#sec-environment-records Environment Records", "html": "<emu-clause id=\"sec-environment-records\" oldids=\"sec-lexical-environments\"><span id=\"sec-lexical-environments\"></span>\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-environment-records\">#sec-environment-records</span> Environment Records</h1>\n    <p><dfn>Environment Record</dfn> is a specification type used to define the association of <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt>s to specific variables and functions, based upon the lexical nesting structure of ECMAScript code. Usually an Environment Record is associated with some specific syntactic structure of ECMAScript code such as a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href=\"#prod-BlockStatement\">BlockStatement</a></emu-nt>, or a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause of a <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt>. Each time such code is evaluated, a new Environment Record is created to record the identifier bindings that are created by that code.</p>\n    <p>Every Environment Record has an [[OuterEnv]] field, which is either <emu-val>null</emu-val> or a reference to an outer Environment Record. This is used to model the logical nesting of Environment Record values. The outer reference of an (inner) Environment Record is a reference to the Environment Record that logically surrounds the inner Environment Record. An outer Environment Record may, of course, have its own outer Environment Record. An Environment Record may serve as the outer environment for multiple inner Environment Records. For example, if a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> contains two nested <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>s then the Environment Records of each of the nested functions will have as their outer Environment Record the Environment Record of the current evaluation of the surrounding function.</p>\n    <p>Environment Records are purely specification mechanisms and need not correspond to any specific artefact of an ECMAScript implementation. It is impossible for an ECMAScript program to directly access or manipulate such values.</p>\n\n    <div id=\"excluded-sec-the-environment-record-type-hierarchy\"><h1><span class=\"secnum\">8.1.1</span>#sec-the-environment-record-type-hierarchy The Environment Record Type Hierarchy</h1>...</div><div id=\"excluded-sec-environment-record-operations\"><h1><span class=\"secnum\">8.1.2</span>#sec-environment-record-operations Environment Record Operations</h1>...</div></emu-clause>\n\n  "}, "sec-numeric-types-number-divide": {"num": "6.1.6.1.5", "title": "#sec-numeric-types-number-divide Number::divide ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-number-divide\" oldids=\"sec-applying-the-div-operator\"><span id=\"sec-applying-the-div-operator\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-divide\">#sec-numeric-types-number-divide</span> Number::divide ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation Number::divide takes arguments <var>x</var> (a Number) and <var>y</var> (a Number). It performs division, producing the quotient of <var>x</var> and <var>y</var>; <var>x</var> is the dividend and <var>y</var> is the divisor. The result is determined by the specification of <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> arithmetic:</p>\n          <ul>\n            <li>\n              If either operand is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n            </li>\n            <li>\n              The sign of the result is positive if both operands have the same sign, negative if the operands have different signs.\n            </li>\n            <li>\n              Division of an infinity by an infinity results in <emu-val>NaN</emu-val>.\n            </li>\n            <li>\n              Division of an infinity by a zero results in an infinity. The sign is determined by the rule already stated above.\n            </li>\n            <li>\n              Division of an infinity by a nonzero finite value results in a signed infinity. The sign is determined by the rule already stated above.\n            </li>\n            <li>\n              Division of a finite value by an infinity results in zero. The sign is determined by the rule already stated above.\n            </li>\n            <li>\n              Division of a zero by a zero results in <emu-val>NaN</emu-val>; division of zero by any other finite value results in zero, with the sign determined by the rule already stated above.\n            </li>\n            <li>\n              Division of a nonzero finite value by a zero results in a signed infinity. The sign is determined by the rule already stated above.\n            </li>\n            <li>\n              In the remaining cases, where neither an infinity, nor a zero, nor <emu-val>NaN</emu-val> is involved, the quotient is computed and rounded to the nearest representable value using <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> roundTiesToEven mode. If the magnitude is too large to represent, the operation overflows; the result is then an infinity of appropriate sign. If the magnitude is too small to represent, the operation underflows and the result is a zero of the appropriate sign. The ECMAScript language requires support of gradual underflow as defined by <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref>.\n            </li>\n          </ul>\n        </emu-clause>\n\n        "}, "sec-ordinaryfunctioncreate": {"num": "9.2.3", "title": "#sec-ordinaryfunctioncreate OrdinaryFunctionCreate ( functionPrototype, sourceText, ParameterList, Body, thisMode, Scope )", "html": "<emu-clause id=\"sec-ordinaryfunctioncreate\" aoid=\"OrdinaryFunctionCreate\" oldids=\"sec-functionallocate,sec-functioninitialize,sec-functioncreate,sec-generatorfunctioncreate,sec-asyncgeneratorfunctioncreate,sec-async-functions-abstract-operations-async-function-create\"><span id=\"sec-async-functions-abstract-operations-async-function-create\"></span><span id=\"sec-asyncgeneratorfunctioncreate\"></span><span id=\"sec-generatorfunctioncreate\"></span><span id=\"sec-functioncreate\"></span><span id=\"sec-functioninitialize\"></span><span id=\"sec-functionallocate\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinaryfunctioncreate\">#sec-ordinaryfunctioncreate</span> OrdinaryFunctionCreate ( <var>functionPrototype</var>, <var>sourceText</var>, <var>ParameterList</var>, <var>Body</var>, <var>thisMode</var>, <var>Scope</var> )</h1>\n      <p>The abstract operation OrdinaryFunctionCreate takes arguments <var>functionPrototype</var> (an Object), <var>sourceText</var> (a sequence of Unicode code points), <var>ParameterList</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>Body</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>thisMode</var> (either <emu-const>lexical-this</emu-const> or <emu-const>non-lexical-this</emu-const>), and <var>Scope</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). <var>sourceText</var> is the source text of the syntactic definition of the function to be created. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>functionPrototype</var>) is Object.</li><li>Let <var>internalSlotsList</var> be the internal slots listed in <emu-xref href=\"#table-27\"><a href=\"#table-27\" class=\"excluded-xref\" excluded-id=\"table-27\">#table-27</a></emu-xref>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>functionPrototype</var>, <var>internalSlotsList</var>).</li><li>Set <var>F</var>.[[Call]] to the definition specified in <emu-xref href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\"><a href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects-call-thisargument-argumentslist\">#sec-ecmascript-function-objects-call-thisargument-argumentslist</a></emu-xref>.</li><li>Set <var>F</var>.[[SourceText]] to <var>sourceText</var>.</li><li>Set <var>F</var>.[[FormalParameters]] to <var>ParameterList</var>.</li><li>Set <var>F</var>.[[ECMAScriptCode]] to <var>Body</var>.</li><li>If the source text matching <var>Body</var> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>Strict</var> be <emu-val>true</emu-val>; else let <var>Strict</var> be <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Strict]] to <var>Strict</var>.</li><li>If <var>thisMode</var> is <emu-const>lexical-this</emu-const>, set <var>F</var>.[[ThisMode]] to <emu-const>lexical</emu-const>.</li><li>Else if <var>Strict</var> is <emu-val>true</emu-val>, set <var>F</var>.[[ThisMode]] to <emu-const>strict</emu-const>.</li><li>Else, set <var>F</var>.[[ThisMode]] to <emu-const>global</emu-const>.</li><li>Set <var>F</var>.[[IsClassConstructor]] to <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Environment]] to <var>Scope</var>.</li><li>Set <var>F</var>.[[ScriptOrModule]] to <emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>().</li><li>Set <var>F</var>.[[Realm]] to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Set <var>F</var>.[[HomeObject]] to <emu-val>undefined</emu-val>.</li><li>Let <var>len</var> be the ExpectedArgumentCount of <var>ParameterList</var>.</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionLength\"><a href=\"#sec-setfunctionlength\">SetFunctionLength</a></emu-xref>(<var>F</var>, <var>len</var>).</li><li>Return <var>F</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-properties-of-the-date-prototype-object": {"num": "20.4.4", "title": "#sec-properties-of-the-date-prototype-object Properties of the Date Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-date-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-date-prototype-object\">#sec-properties-of-the-date-prototype-object</span> Properties of the Date Prototype Object</h1>\n      <p>The Date prototype object:</p>\n      <ul>\n        <li>is <dfn>%DatePrototype%</dfn>.</li>\n        <li>is itself an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n        <li>is not a Date instance and does not have a [[DateValue]] internal slot.</li>\n        <li>has a [[Prototype]] internal slot whose value is %Object.prototype%.</li>\n      </ul>\n      <p>Unless explicitly defined otherwise, the methods of the Date prototype object defined below are not generic and the <emu-val>this</emu-val> value passed to them must be an object that has a [[DateValue]] internal slot that has been initialized to a <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref>.</p>\n      <p>The abstract operation <dfn id=\"thistimevalue\" aoid=\"thisTimeValue\" oldids=\"sec-thistimevalue\"><span id=\"sec-thistimevalue\"></span>thisTimeValue</dfn> takes argument <var>value</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Object and <var>value</var> has a [[DateValue]] internal slot, then<ol><li>Return <var>value</var>.[[DateValue]].</li></ol></li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></emu-alg>\n      <p>In following descriptions of functions that are properties of the Date prototype object, the phrase &#8220;<dfn id=\"this-Date-object\">this Date object</dfn>&#8221; refers to the object that is the <emu-val>this</emu-val> value for the invocation of the function. If the Type of the <emu-val>this</emu-val> value is not Object, a <emu-val>TypeError</emu-val> exception is thrown. The phrase &#8220;<dfn id=\"this-time-value\">this time value</dfn>&#8221; within the specification of a method refers to the result returned by calling the abstract operation <emu-xref href=\"#thistimevalue\"><a href=\"#thistimevalue\">thisTimeValue</a></emu-xref> with the <emu-val>this</emu-val> value of the method invocation passed as the argument.</p>\n\n      <div id=\"excluded-sec-date.prototype.constructor\"><h1><span class=\"secnum\">20.4.4.1</span>#sec-date.prototype.constructor Date.prototype.constructor</h1>...</div><div id=\"excluded-sec-date.prototype.getdate\"><h1><span class=\"secnum\">20.4.4.2</span>#sec-date.prototype.getdate Date.prototype.getDate ( )</h1>...</div><div id=\"excluded-sec-date.prototype.getday\"><h1><span class=\"secnum\">20.4.4.3</span>#sec-date.prototype.getday Date.prototype.getDay ( )</h1>...</div><div id=\"excluded-sec-date.prototype.getfullyear\"><h1><span class=\"secnum\">20.4.4.4</span>#sec-date.prototype.getfullyear Date.prototype.getFullYear ( )</h1>...</div><div id=\"excluded-sec-date.prototype.gethours\"><h1><span class=\"secnum\">20.4.4.5</span>#sec-date.prototype.gethours Date.prototype.getHours ( )</h1>...</div><div id=\"excluded-sec-date.prototype.getmilliseconds\"><h1><span class=\"secnum\">20.4.4.6</span>#sec-date.prototype.getmilliseconds Date.prototype.getMilliseconds ( )</h1>...</div><div id=\"excluded-sec-date.prototype.getminutes\"><h1><span class=\"secnum\">20.4.4.7</span>#sec-date.prototype.getminutes Date.prototype.getMinutes ( )</h1>...</div><div id=\"excluded-sec-date.prototype.getmonth\"><h1><span class=\"secnum\">20.4.4.8</span>#sec-date.prototype.getmonth Date.prototype.getMonth ( )</h1>...</div><div id=\"excluded-sec-date.prototype.getseconds\"><h1><span class=\"secnum\">20.4.4.9</span>#sec-date.prototype.getseconds Date.prototype.getSeconds ( )</h1>...</div><div id=\"excluded-sec-date.prototype.gettime\"><h1><span class=\"secnum\">20.4.4.10</span>#sec-date.prototype.gettime Date.prototype.getTime ( )</h1>...</div><div id=\"excluded-sec-date.prototype.gettimezoneoffset\"><h1><span class=\"secnum\">20.4.4.11</span>#sec-date.prototype.gettimezoneoffset Date.prototype.getTimezoneOffset ( )</h1>...</div><div id=\"excluded-sec-date.prototype.getutcdate\"><h1><span class=\"secnum\">20.4.4.12</span>#sec-date.prototype.getutcdate Date.prototype.getUTCDate ( )</h1>...</div><div id=\"excluded-sec-date.prototype.getutcday\"><h1><span class=\"secnum\">20.4.4.13</span>#sec-date.prototype.getutcday Date.prototype.getUTCDay ( )</h1>...</div><div id=\"excluded-sec-date.prototype.getutcfullyear\"><h1><span class=\"secnum\">20.4.4.14</span>#sec-date.prototype.getutcfullyear Date.prototype.getUTCFullYear ( )</h1>...</div><div id=\"excluded-sec-date.prototype.getutchours\"><h1><span class=\"secnum\">20.4.4.15</span>#sec-date.prototype.getutchours Date.prototype.getUTCHours ( )</h1>...</div><div id=\"excluded-sec-date.prototype.getutcmilliseconds\"><h1><span class=\"secnum\">20.4.4.16</span>#sec-date.prototype.getutcmilliseconds Date.prototype.getUTCMilliseconds ( )</h1>...</div><div id=\"excluded-sec-date.prototype.getutcminutes\"><h1><span class=\"secnum\">20.4.4.17</span>#sec-date.prototype.getutcminutes Date.prototype.getUTCMinutes ( )</h1>...</div><div id=\"excluded-sec-date.prototype.getutcmonth\"><h1><span class=\"secnum\">20.4.4.18</span>#sec-date.prototype.getutcmonth Date.prototype.getUTCMonth ( )</h1>...</div><div id=\"excluded-sec-date.prototype.getutcseconds\"><h1><span class=\"secnum\">20.4.4.19</span>#sec-date.prototype.getutcseconds Date.prototype.getUTCSeconds ( )</h1>...</div><div id=\"excluded-sec-date.prototype.setdate\"><h1><span class=\"secnum\">20.4.4.20</span>#sec-date.prototype.setdate Date.prototype.setDate ( date )</h1>...</div><div id=\"excluded-sec-date.prototype.setfullyear\"><h1><span class=\"secnum\">20.4.4.21</span>#sec-date.prototype.setfullyear Date.prototype.setFullYear ( year [ , month [ , date ] ] )</h1>...</div><div id=\"excluded-sec-date.prototype.sethours\"><h1><span class=\"secnum\">20.4.4.22</span>#sec-date.prototype.sethours Date.prototype.setHours ( hour [ , min [ , sec [ , ms ] ] ] )</h1>...</div><div id=\"excluded-sec-date.prototype.setmilliseconds\"><h1><span class=\"secnum\">20.4.4.23</span>#sec-date.prototype.setmilliseconds Date.prototype.setMilliseconds ( ms )</h1>...</div><div id=\"excluded-sec-date.prototype.setminutes\"><h1><span class=\"secnum\">20.4.4.24</span>#sec-date.prototype.setminutes Date.prototype.setMinutes ( min [ , sec [ , ms ] ] )</h1>...</div><div id=\"excluded-sec-date.prototype.setmonth\"><h1><span class=\"secnum\">20.4.4.25</span>#sec-date.prototype.setmonth Date.prototype.setMonth ( month [ , date ] )</h1>...</div><div id=\"excluded-sec-date.prototype.setseconds\"><h1><span class=\"secnum\">20.4.4.26</span>#sec-date.prototype.setseconds Date.prototype.setSeconds ( sec [ , ms ] )</h1>...</div><div id=\"excluded-sec-date.prototype.settime\"><h1><span class=\"secnum\">20.4.4.27</span>#sec-date.prototype.settime Date.prototype.setTime ( time )</h1>...</div><div id=\"excluded-sec-date.prototype.setutcdate\"><h1><span class=\"secnum\">20.4.4.28</span>#sec-date.prototype.setutcdate Date.prototype.setUTCDate ( date )</h1>...</div><div id=\"excluded-sec-date.prototype.setutcfullyear\"><h1><span class=\"secnum\">20.4.4.29</span>#sec-date.prototype.setutcfullyear Date.prototype.setUTCFullYear ( year [ , month [ , date ] ] )</h1>...</div><div id=\"excluded-sec-date.prototype.setutchours\"><h1><span class=\"secnum\">20.4.4.30</span>#sec-date.prototype.setutchours Date.prototype.setUTCHours ( hour [ , min [ , sec [ , ms ] ] ] )</h1>...</div><div id=\"excluded-sec-date.prototype.setutcmilliseconds\"><h1><span class=\"secnum\">20.4.4.31</span>#sec-date.prototype.setutcmilliseconds Date.prototype.setUTCMilliseconds ( ms )</h1>...</div><div id=\"excluded-sec-date.prototype.setutcminutes\"><h1><span class=\"secnum\">20.4.4.32</span>#sec-date.prototype.setutcminutes Date.prototype.setUTCMinutes ( min [ , sec [ , ms ] ] )</h1>...</div><div id=\"excluded-sec-date.prototype.setutcmonth\"><h1><span class=\"secnum\">20.4.4.33</span>#sec-date.prototype.setutcmonth Date.prototype.setUTCMonth ( month [ , date ] )</h1>...</div><div id=\"excluded-sec-date.prototype.setutcseconds\"><h1><span class=\"secnum\">20.4.4.34</span>#sec-date.prototype.setutcseconds Date.prototype.setUTCSeconds ( sec [ , ms ] )</h1>...</div><div id=\"excluded-sec-date.prototype.todatestring\"><h1><span class=\"secnum\">20.4.4.35</span>#sec-date.prototype.todatestring Date.prototype.toDateString ( )</h1>...</div><div id=\"excluded-sec-date.prototype.toisostring\"><h1><span class=\"secnum\">20.4.4.36</span>#sec-date.prototype.toisostring Date.prototype.toISOString ( )</h1>...</div><div id=\"excluded-sec-date.prototype.tojson\"><h1><span class=\"secnum\">20.4.4.37</span>#sec-date.prototype.tojson Date.prototype.toJSON ( key )</h1>...</div><div id=\"excluded-sec-date.prototype.tolocaledatestring\"><h1><span class=\"secnum\">20.4.4.38</span>#sec-date.prototype.tolocaledatestring Date.prototype.toLocaleDateString ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-date.prototype.tolocalestring\"><h1><span class=\"secnum\">20.4.4.39</span>#sec-date.prototype.tolocalestring Date.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-date.prototype.tolocaletimestring\"><h1><span class=\"secnum\">20.4.4.40</span>#sec-date.prototype.tolocaletimestring Date.prototype.toLocaleTimeString ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-date.prototype.tostring\"><h1><span class=\"secnum\">20.4.4.41</span>#sec-date.prototype.tostring Date.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-date.prototype.totimestring\"><h1><span class=\"secnum\">20.4.4.42</span>#sec-date.prototype.totimestring Date.prototype.toTimeString ( )</h1>...</div><div id=\"excluded-sec-date.prototype.toutcstring\"><h1><span class=\"secnum\">20.4.4.43</span>#sec-date.prototype.toutcstring Date.prototype.toUTCString ( )</h1>...</div><div id=\"excluded-sec-date.prototype.valueof\"><h1><span class=\"secnum\">20.4.4.44</span>#sec-date.prototype.valueof Date.prototype.valueOf ( )</h1>...</div><div id=\"excluded-sec-date.prototype-@@toprimitive\"><h1><span class=\"secnum\">20.4.4.45</span>#sec-date.prototype-@@toprimitive Date.prototype [ @@toPrimitive ] ( hint )</h1>...</div></emu-clause>\n\n    "}, "sec-isunresolvablereference": {"num": "6.2.4.6", "title": "#sec-isunresolvablereference IsUnresolvableReference ( V )", "html": "<emu-clause id=\"sec-isunresolvablereference\" aoid=\"IsUnresolvableReference\" oldids=\"ao-isunresolvablereference\"><span id=\"ao-isunresolvablereference\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isunresolvablereference\">#sec-isunresolvablereference</span> IsUnresolvableReference ( <var>V</var> )</h1>\n        <p>The abstract operation IsUnresolvableReference takes argument <var>V</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>V</var>) is <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref>.</li><li>If the base value component of <var>V</var> is <emu-val>undefined</emu-val>, return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-typedarray-objects": {"num": "22.2", "title": "#sec-typedarray-objects TypedArray Objects", "html": "<emu-clause id=\"sec-typedarray-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-typedarray-objects\">#sec-typedarray-objects</span> TypedArray Objects</h1>\n    <p><var>TypedArray</var> objects present an array-like view of an underlying binary data buffer (<emu-xref href=\"#sec-arraybuffer-objects\"><a href=\"#sec-arraybuffer-objects\" class=\"excluded-xref\" excluded-id=\"sec-arraybuffer-objects\">#sec-arraybuffer-objects</a></emu-xref>). Each element of a <var>TypedArray</var> instance has the same underlying binary scalar data type. There is a distinct <var>TypedArray</var> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>, listed in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref>, for each of the supported element types. Each <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> has a corresponding distinct prototype object.</p>\n    <emu-table id=\"table-the-typedarray-constructors\" caption=\"The TypedArray Constructors\" oldids=\"table-49\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</span>: The TypedArray Constructors</figcaption><span id=\"table-49\"></span>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            <emu-xref href=\"#constructor\"><a href=\"#constructor\">Constructor</a></emu-xref> Name and Intrinsic\n          </th>\n          <th>\n            Element Type\n          </th>\n          <th>\n            Element Size\n          </th>\n          <th>\n            Conversion Operation\n          </th>\n          <th>\n            Description\n          </th>\n        </tr>\n        <tr>\n          <td>\n            Int8Array\n            <br>\n            <dfn>%Int8Array%</dfn>\n          </td>\n          <td>\n            <emu-const>Int8</emu-const>\n          </td>\n          <td>\n            1\n          </td>\n          <td>\n            <emu-xref aoid=\"ToInt8\"><a href=\"#sec-toint8\">ToInt8</a></emu-xref>\n          </td>\n          <td>\n            8-bit two's complement signed <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            Uint8Array\n            <br>\n            <dfn>%Uint8Array%</dfn>\n          </td>\n          <td>\n            <emu-const>Uint8</emu-const>\n          </td>\n          <td>\n            1\n          </td>\n          <td>\n            <emu-xref aoid=\"ToUint8\"><a href=\"#sec-touint8\">ToUint8</a></emu-xref>\n          </td>\n          <td>\n            8-bit unsigned <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            Uint8ClampedArray\n            <br>\n            <dfn>%Uint8ClampedArray%</dfn>\n          </td>\n          <td>\n            <emu-const>Uint8C</emu-const>\n          </td>\n          <td>\n            1\n          </td>\n          <td>\n            <emu-xref aoid=\"ToUint8Clamp\"><a href=\"#sec-touint8clamp\">ToUint8Clamp</a></emu-xref>\n          </td>\n          <td>\n            8-bit unsigned <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> (clamped conversion)\n          </td>\n        </tr>\n        <tr>\n          <td>\n            Int16Array\n            <br>\n            <dfn>%Int16Array%</dfn>\n          </td>\n          <td>\n            <emu-const>Int16</emu-const>\n          </td>\n          <td>\n            2\n          </td>\n          <td>\n            <emu-xref aoid=\"ToInt16\"><a href=\"#sec-toint16\">ToInt16</a></emu-xref>\n          </td>\n          <td>\n            16-bit two's complement signed <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            Uint16Array\n            <br>\n            <dfn>%Uint16Array%</dfn>\n          </td>\n          <td>\n            <emu-const>Uint16</emu-const>\n          </td>\n          <td>\n            2\n          </td>\n          <td>\n            <emu-xref aoid=\"ToUint16\"><a href=\"#sec-touint16\">ToUint16</a></emu-xref>\n          </td>\n          <td>\n            16-bit unsigned <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            Int32Array\n            <br>\n            <dfn>%Int32Array%</dfn>\n          </td>\n          <td>\n            <emu-const>Int32</emu-const>\n          </td>\n          <td>\n            4\n          </td>\n          <td>\n            <emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>\n          </td>\n          <td>\n            32-bit two's complement signed <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            Uint32Array\n            <br>\n            <dfn>%Uint32Array%</dfn>\n          </td>\n          <td>\n            <emu-const>Uint32</emu-const>\n          </td>\n          <td>\n            4\n          </td>\n          <td>\n            <emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>\n          </td>\n          <td>\n            32-bit unsigned <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            BigInt64Array\n            <br>\n            <dfn>%BigInt64Array%</dfn>\n          </td>\n          <td>\n            <emu-const>BigInt64</emu-const>\n          </td>\n          <td>\n            8\n          </td>\n          <td>\n            <emu-xref aoid=\"ToBigInt64\"><a href=\"#sec-tobigint64\">ToBigInt64</a></emu-xref>\n          </td>\n          <td>\n            64-bit two's complement signed <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            BigUint64Array\n            <br>\n            <dfn>%BigUint64Array%</dfn>\n          </td>\n          <td>\n            <emu-const>BigUint64</emu-const>\n          </td>\n          <td>\n            8\n          </td>\n          <td>\n            <emu-xref aoid=\"ToBigUint64\"><a href=\"#sec-tobiguint64\">ToBigUint64</a></emu-xref>\n          </td>\n          <td>\n            64-bit unsigned <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            Float32Array\n            <br>\n            <dfn>%Float32Array%</dfn>\n          </td>\n          <td>\n            <emu-const>Float32</emu-const>\n          </td>\n          <td>\n            4\n          </td>\n          <td>\n          </td>\n          <td>\n            32-bit IEEE floating point\n          </td>\n        </tr>\n        <tr>\n          <td>\n            Float64Array\n            <br>\n            <dfn>%Float64Array%</dfn>\n          </td>\n          <td>\n            <emu-const>Float64</emu-const>\n          </td>\n          <td>\n            8\n          </td>\n          <td>\n          </td>\n          <td>\n            64-bit IEEE floating point\n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>In the definitions below, references to <var>TypedArray</var> should be replaced with the appropriate <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> name from the above table.</p>\n\n    <div id=\"excluded-sec-%typedarray%-intrinsic-object\"><h1><span class=\"secnum\">22.2.1</span>#sec-%typedarray%-intrinsic-object The %TypedArray% Intrinsic Object</h1>...</div><div id=\"excluded-sec-properties-of-the-%typedarray%-intrinsic-object\"><h1><span class=\"secnum\">22.2.2</span>#sec-properties-of-the-%typedarray%-intrinsic-object Properties of the %TypedArray% Intrinsic Object</h1>...</div><div id=\"excluded-sec-properties-of-the-%typedarrayprototype%-object\"><h1><span class=\"secnum\">22.2.3</span>#sec-properties-of-the-%typedarrayprototype%-object Properties of the %TypedArray.prototype% Object</h1>...</div><div id=\"excluded-sec-typedarray-constructors\"><h1><span class=\"secnum\">22.2.4</span>#sec-typedarray-constructors The TypedArray Constructors</h1>...</div><div id=\"excluded-sec-properties-of-the-typedarray-constructors\"><h1><span class=\"secnum\">22.2.5</span>#sec-properties-of-the-typedarray-constructors Properties of the TypedArray Constructors</h1>...</div><div id=\"excluded-sec-properties-of-typedarray-prototype-objects\"><h1><span class=\"secnum\">22.2.6</span>#sec-properties-of-typedarray-prototype-objects Properties of the TypedArray Prototype Objects</h1>...</div><div id=\"excluded-sec-properties-of-typedarray-instances\"><h1><span class=\"secnum\">22.2.7</span>#sec-properties-of-typedarray-instances Properties of TypedArray Instances</h1>...</div></emu-clause>\n"}, "sec-multiplicative-operators-static-semantics-assignmenttargettype": {"num": "12.7.2", "title": "#sec-multiplicative-operators-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-multiplicative-operators-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-multiplicative-operators-static-semantics-assignmenttargettype\"><span id=\"sec-multiplicative-operators-static-semantics-isvalidsimpleassignmenttarget\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-multiplicative-operators-static-semantics-assignmenttargettype\">#sec-multiplicative-operators-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n      <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"MultiplicativeExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"fb9fe2a0\"><emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt><emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt><emu-nt><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>invalid</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-evaluate-property-access-with-expression-key": {"num": "12.3.3", "title": "#sec-evaluate-property-access-with-expression-key Runtime Semantics: EvaluatePropertyAccessWithExpressionKey ( baseValue, expression, strict )", "html": "<emu-clause id=\"sec-evaluate-property-access-with-expression-key\" aoid=\"EvaluatePropertyAccessWithExpressionKey\" oldids=\"sec-evaluate-expression-key-property-access\"><span id=\"sec-evaluate-expression-key-property-access\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-evaluate-property-access-with-expression-key\">#sec-evaluate-property-access-with-expression-key</span> Runtime Semantics: EvaluatePropertyAccessWithExpressionKey ( <var>baseValue</var>, <var>expression</var>, <var>strict</var> )</h1>\n      <p>The abstract operation EvaluatePropertyAccessWithExpressionKey takes arguments <var>baseValue</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>expression</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), and <var>strict</var> (a Boolean). It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>propertyNameReference</var> be the result of evaluating <var>expression</var>.</li><li>Let <var>propertyNameValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>propertyNameReference</var>).</li><li>Let <var>bv</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<var>baseValue</var>).</li><li>Let <var>propertyKey</var> be ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>propertyNameValue</var>).</li><li>Return a value of type <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref> whose base value component is <var>bv</var>, whose referenced name component is <var>propertyKey</var>, and whose strict reference flag is <var>strict</var>.</li></ol></emu-alg>\n    </emu-clause>\n    "}, "sec-identifiers-static-semantics-assignmenttargettype": {"num": "12.1.3", "title": "#sec-identifiers-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-identifiers-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-identifiers-static-semantics-assignmenttargettype\"><span id=\"sec-identifiers-static-semantics-isvalidsimpleassignmenttarget\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-identifiers-static-semantics-assignmenttargettype\">#sec-identifiers-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n      <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"IdentifierReference\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"06b6ace8\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>If this <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt> is contained in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> and StringValue of <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> is <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val>, return <emu-const>invalid</emu-const>.</li><li>Return <emu-const>simple</emu-const>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IdentifierReference\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>simple</emu-const>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IdentifierReference\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"857d4354\"><emu-t>await</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>simple</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-numeric-types-number-exponentiate": {"num": "6.1.6.1.3", "title": "#sec-numeric-types-number-exponentiate Number::exponentiate ( base, exponent )", "html": "<emu-clause id=\"sec-numeric-types-number-exponentiate\" oldids=\"sec-applying-the-exp-operator\"><span id=\"sec-applying-the-exp-operator\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-exponentiate\">#sec-numeric-types-number-exponentiate</span> Number::exponentiate ( <var>base</var>, <var>exponent</var> )</h1>\n          <p>The abstract operation Number::exponentiate takes arguments <var>base</var> (a Number) and <var>exponent</var> (a Number). It returns an <emu-xref href=\"#implementation-approximated\"><a href=\"#implementation-approximated\">implementation-approximated</a></emu-xref> value representing the result of raising <var>base</var> to the power <var>exponent</var>, subject to the following requirements:</p>\n          <ul>\n            <li>If <var>exponent</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.</li>\n            <li>If <var>exponent</var> is <emu-val>+0</emu-val>, the result is 1, even if <var>base</var> is <emu-val>NaN</emu-val>.</li>\n            <li>If <var>exponent</var> is <emu-val>-0</emu-val>, the result is 1, even if <var>base</var> is <emu-val>NaN</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>NaN</emu-val> and <var>exponent</var> is nonzero, the result is <emu-val>NaN</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) &gt; 1 and <var>exponent</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) &gt; 1 and <var>exponent</var> is <emu-val>-&#8734;</emu-val>, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) is 1 and <var>exponent</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>NaN</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) is 1 and <var>exponent</var> is <emu-val>-&#8734;</emu-val>, the result is <emu-val>NaN</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) &lt; 1 and <var>exponent</var> is <emu-val>+&#8734;</emu-val>, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>base</var>) &lt; 1 and <var>exponent</var> is <emu-val>-&#8734;</emu-val>, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>+&#8734;</emu-val> and <var>exponent</var> &gt; 0, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>+&#8734;</emu-val> and <var>exponent</var> &lt; 0, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-&#8734;</emu-val> and <var>exponent</var> &gt; 0 and <var>exponent</var> is an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>-&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-&#8734;</emu-val> and <var>exponent</var> &gt; 0 and <var>exponent</var> is not an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-&#8734;</emu-val> and <var>exponent</var> &lt; 0 and <var>exponent</var> is an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>-0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-&#8734;</emu-val> and <var>exponent</var> &lt; 0 and <var>exponent</var> is not an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>+0</emu-val> and <var>exponent</var> &gt; 0, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>+0</emu-val> and <var>exponent</var> &lt; 0, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-0</emu-val> and <var>exponent</var> &gt; 0 and <var>exponent</var> is an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>-0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-0</emu-val> and <var>exponent</var> &gt; 0 and <var>exponent</var> is not an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>+0</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-0</emu-val> and <var>exponent</var> &lt; 0 and <var>exponent</var> is an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>-&#8734;</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>-0</emu-val> and <var>exponent</var> &lt; 0 and <var>exponent</var> is not an odd <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>+&#8734;</emu-val>.</li>\n            <li>If <var>base</var> &lt; 0 and <var>base</var> is finite and <var>exponent</var> is finite and <var>exponent</var> is not an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, the result is <emu-val>NaN</emu-val>.</li>\n          </ul>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>The result of <var>base</var> <code>**</code> <var>exponent</var> when <var>base</var> is <emu-val>1</emu-val> or <emu-val>-1</emu-val> and <var>exponent</var> is <emu-val>+Infinity</emu-val> or <emu-val>-Infinity</emu-val>, or when <var>base</var> is <emu-val>1</emu-val> and <var>exponent</var> is <emu-val>NaN</emu-val>, differs from <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref>. The first edition of ECMAScript specified a result of <emu-val>NaN</emu-val> for this operation, whereas later versions of <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> specified <emu-val>1</emu-val>. The historical ECMAScript behaviour is preserved for compatibility reasons.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-properties-of-the-symbol-prototype-object": {"num": "19.4.3", "title": "#sec-properties-of-the-symbol-prototype-object Properties of the Symbol Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-symbol-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-symbol-prototype-object\">#sec-properties-of-the-symbol-prototype-object</span> Properties of the Symbol Prototype Object</h1>\n      <p>The Symbol prototype object:</p>\n      <ul>\n        <li>is <dfn>%SymbolPrototype%</dfn>.</li>\n        <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n        <li>is not a Symbol instance and does not have a [[SymbolData]] internal slot.</li>\n        <li>has a [[Prototype]] internal slot whose value is %Object.prototype%.</li>\n      </ul>\n      <p>The abstract operation <dfn id=\"thissymbolvalue\" aoid=\"thisSymbolValue\" oldids=\"sec-thissymbolvalue\"><span id=\"sec-thissymbolvalue\"></span>thisSymbolValue</dfn> takes argument <var>value</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Symbol, return <var>value</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Object and <var>value</var> has a [[SymbolData]] internal slot, then<ol><li>Let <var>s</var> be <var>value</var>.[[SymbolData]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>s</var>) is Symbol.</li><li>Return <var>s</var>.</li></ol></li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></emu-alg>\n\n      <div id=\"excluded-sec-symbol.prototype.constructor\"><h1><span class=\"secnum\">19.4.3.1</span>#sec-symbol.prototype.constructor Symbol.prototype.constructor</h1>...</div><div id=\"excluded-sec-symbol.prototype.description\"><h1><span class=\"secnum\">19.4.3.2</span>#sec-symbol.prototype.description get Symbol.prototype.description</h1>...</div><div id=\"excluded-sec-symbol.prototype.tostring\"><h1><span class=\"secnum\">19.4.3.3</span>#sec-symbol.prototype.tostring Symbol.prototype.toString ( )</h1>...</div><div id=\"excluded-sec-symbol.prototype.valueof\"><h1><span class=\"secnum\">19.4.3.4</span>#sec-symbol.prototype.valueof Symbol.prototype.valueOf ( )</h1>...</div><div id=\"excluded-sec-symbol.prototype-@@toprimitive\"><h1><span class=\"secnum\">19.4.3.5</span>#sec-symbol.prototype-@@toprimitive Symbol.prototype [ @@toPrimitive ] ( hint )</h1>...</div><div id=\"excluded-sec-symbol.prototype-@@tostringtag\"><h1><span class=\"secnum\">19.4.3.6</span>#sec-symbol.prototype-@@tostringtag Symbol.prototype [ @@toStringTag ]</h1>...</div></emu-clause>\n\n    "}, "sec-expanded-years": {"num": "20.4.1.15.1", "title": "#sec-expanded-years Expanded Years", "html": "<emu-clause id=\"sec-expanded-years\" oldids=\"sec-extended-years\"><span id=\"sec-extended-years\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-expanded-years\">#sec-expanded-years</span> Expanded Years</h1>\n          <p><emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Covering</a></emu-xref> the full <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> range of approximately 273,790 years forward or backward from 01 January, 1970 (<emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\" class=\"excluded-xref\" excluded-id=\"sec-time-values-and-time-range\">#sec-time-values-and-time-range</a></emu-xref>) requires representing years before 0 or after 9999. ISO 8601 permits expansion of the year representation, but only by mutual agreement of the partners in information interchange. In the simplified ECMAScript format, such an expanded year representation shall have 6 digits and is always prefixed with a + or - sign. The year 0 is considered positive and hence prefixed with a + sign. Strings matching the <emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\">Date Time String Format</a></emu-xref> with expanded years representing instants in time outside the range of a <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> are treated as unrecognizable by <emu-xref href=\"#sec-date.parse\"><a href=\"#sec-date.parse\"><code>Date.parse</code></a></emu-xref> and cause that function to return <emu-val>NaN</emu-val> without falling back to implementation-specific behaviour or heuristics.</p>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>Examples of date-time values with expanded years:</p>\n            <figure>\n              <table class=\"lightweight-table\">\n                <tbody>\n                  <tr>\n                    <td>-271821-04-20T00:00:00Z</td>\n                    <td>271822 B.C.</td>\n                  </tr>\n                  <tr>\n                    <td>-000001-01-01T00:00:00Z</td>\n                    <td>2 B.C.</td>\n                  </tr>\n                  <tr>\n                    <td>+000000-01-01T00:00:00Z</td>\n                    <td>1 B.C.</td>\n                  </tr>\n                  <tr>\n                    <td>+000001-01-01T00:00:00Z</td>\n                    <td>1 A.D.</td>\n                  </tr>\n                  <tr>\n                    <td>+001970-01-01T00:00:00Z</td>\n                    <td>1970 A.D.</td>\n                  </tr>\n                  <tr>\n                    <td>+002009-12-15T00:00:00Z</td>\n                    <td>2009 A.D.</td>\n                  </tr>\n                  <tr>\n                    <td>+275760-09-13T00:00:00Z</td>\n                    <td>275760 A.D.</td>\n                  </tr>\n                </tbody>\n              </table>\n            </figure>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-runtime-semantics-arrayaccumulation": {"num": "12.2.5.1", "title": "#sec-runtime-semantics-arrayaccumulation Runtime Semantics: ArrayAccumulation", "html": "<emu-clause id=\"sec-runtime-semantics-arrayaccumulation\" oldids=\"sec-static-semantics-elisionwidth\"><span id=\"sec-static-semantics-elisionwidth\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-arrayaccumulation\">#sec-runtime-semantics-arrayaccumulation</span> Runtime Semantics: ArrayAccumulation</h1>\n        <p>With parameters <var>array</var> and <var>nextIndex</var>.</p>\n        <emu-grammar><emu-production name=\"Elision\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"9471f753\"><emu-t>,</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>len</var> be <var>nextIndex</var> + 1.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>array</var>, <emu-val>\"length\"</emu-val>, <var>len</var>, <emu-val>true</emu-val>).</li><li>NOTE: The above Set throws if <var>len</var> exceeds 2<sup>32</sup>-1.</li><li>Return <var>len</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"Elision\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"806d0124\"><emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt><emu-t>,</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var> + 1.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d806b57a\"><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Set <var>nextIndex</var> to the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li></ol></li><li>Let <var>initResult</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>initValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>initResult</var>).</li><li>Let <var>created</var> be !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>array</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nextIndex</var>), <var>initValue</var>).</li><li>Return <var>nextIndex</var> + 1.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"141a73d1\"><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Set <var>nextIndex</var> to the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li></ol></li><li>Return the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"fd2af9b1\"><emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-t>,</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Set <var>nextIndex</var> to the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Set <var>nextIndex</var> to the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li></ol></li><li>Let <var>initResult</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>initValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>initResult</var>).</li><li>Let <var>created</var> be !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>array</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nextIndex</var>), <var>initValue</var>).</li><li>Return <var>nextIndex</var> + 1.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ElementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a579a6a\"><emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt><emu-t>,</emu-t><emu-nt optional=\"\"><a href=\"#prod-Elision\">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Set <var>nextIndex</var> to the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-ElementList\">ElementList</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li><li>If <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> is present, then<ol><li>Set <var>nextIndex</var> to the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-Elision\">Elision</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>nextIndex</var>).</li></ol></li><li>Return the result of performing ArrayAccumulation for <emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"SpreadElement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SpreadElement\">SpreadElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"5bb8853e\"><emu-t>...</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>spreadRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>spreadObj</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>spreadRef</var>).</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>spreadObj</var>).</li><li>Repeat,<ol><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, return <var>nextIndex</var>.</li><li>Let <var>nextValue</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>array</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nextIndex</var>), <var>nextValue</var>).</li><li>Set <var>nextIndex</var> to <var>nextIndex</var> + 1.</li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref> is used to ensure that own properties are defined for the array even if the standard built-in Array prototype object has been modified in a manner that would preclude the creation of new own properties using [[Set]].</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-evaluate-property-access-with-identifier-key": {"num": "12.3.4", "title": "#sec-evaluate-property-access-with-identifier-key Runtime Semantics: EvaluatePropertyAccessWithIdentifierKey ( baseValue, identifierName, strict )", "html": "<emu-clause id=\"sec-evaluate-property-access-with-identifier-key\" aoid=\"EvaluatePropertyAccessWithIdentifierKey\" oldids=\"sec-evaluate-identifier-key-property-access\"><span id=\"sec-evaluate-identifier-key-property-access\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-evaluate-property-access-with-identifier-key\">#sec-evaluate-property-access-with-identifier-key</span> Runtime Semantics: EvaluatePropertyAccessWithIdentifierKey ( <var>baseValue</var>, <var>identifierName</var>, <var>strict</var> )</h1>\n      <p>The abstract operation EvaluatePropertyAccessWithIdentifierKey takes arguments <var>baseValue</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>identifierName</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), and <var>strict</var> (a Boolean). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>identifierName</var> is an <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li><li>Let <var>bv</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<var>baseValue</var>).</li><li>Let <var>propertyNameString</var> be StringValue of <var>identifierName</var>.</li><li>Return a value of type <emu-xref href=\"#sec-reference-specification-type\"><a href=\"#sec-reference-specification-type\">Reference</a></emu-xref> whose base value component is <var>bv</var>, whose referenced name component is <var>propertyNameString</var>, and whose strict reference flag is <var>strict</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-global-environment-records": {"num": "8.1.1.4", "title": "#sec-global-environment-records Global Environment Records", "html": "<emu-clause id=\"sec-global-environment-records\" oldids=\"global-environment\"><span id=\"global-environment\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-global-environment-records\">#sec-global-environment-records</span> Global Environment Records</h1>\n        <p>A <dfn>global Environment Record</dfn> is used to represent the outer most scope that is shared by all of the ECMAScript <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> elements that are processed in a common <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>. A global Environment Record provides the bindings for built-in globals (clause <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\" class=\"excluded-xref\" excluded-id=\"sec-global-object\">#sec-global-object</a></emu-xref>), properties of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>, and for all top-level declarations (<emu-xref href=\"#sec-block-static-semantics-toplevellexicallyscopeddeclarations\"><a href=\"#sec-block-static-semantics-toplevellexicallyscopeddeclarations\" class=\"excluded-xref\" excluded-id=\"sec-block-static-semantics-toplevellexicallyscopeddeclarations\">#sec-block-static-semantics-toplevellexicallyscopeddeclarations</a></emu-xref>, <emu-xref href=\"#sec-block-static-semantics-toplevelvarscopeddeclarations\"><a href=\"#sec-block-static-semantics-toplevelvarscopeddeclarations\" class=\"excluded-xref\" excluded-id=\"sec-block-static-semantics-toplevelvarscopeddeclarations\">#sec-block-static-semantics-toplevelvarscopeddeclarations</a></emu-xref>) that occur within a <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>.</p>\n        <p>A global Environment Record is logically a single record but it is specified as a composite encapsulating an <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> and a <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref>. The <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> has as its base object the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> of the associated <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>. This <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> is the value returned by the global Environment Record's GetThisBinding concrete method. The <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> component of a global Environment Record contains the bindings for all built-in globals (clause <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\" class=\"excluded-xref\" excluded-id=\"sec-global-object\">#sec-global-object</a></emu-xref>) and all bindings introduced by a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt> contained in global code. The bindings for all other ECMAScript declarations in global code are contained in the <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">declarative Environment Record</a></emu-xref> component of the global Environment Record.</p>\n        <p>Properties may be created directly on a <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. Hence, the <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> component of a global Environment Record may contain both bindings created explicitly by <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> declarations and bindings created implicitly as properties of the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. In order to identify which bindings were explicitly created using declarations, a global Environment Record maintains a list of the names bound using its CreateGlobalVarBinding and CreateGlobalFunctionBinding concrete methods.</p>\n        <p>Global Environment Records have the additional fields listed in <emu-xref href=\"#table-18\"><a href=\"#table-18\" class=\"excluded-xref\" excluded-id=\"table-18\">#table-18</a></emu-xref> and the additional methods listed in <emu-xref href=\"#table-19\"><a href=\"#table-19\" class=\"excluded-xref\" excluded-id=\"table-19\">#table-19</a></emu-xref>.</p>\n        <emu-table id=\"table-18\" caption=\"Additional Fields of Global Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-18\">#table-18</span>: Additional Fields of Global Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              </th>\n              <th>\n                Value\n              </th>\n              <th>\n                Meaning\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[ObjectRecord]]\n              </td>\n              <td>\n                <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">Object Environment Record</a></emu-xref>\n              </td>\n              <td>\n                Binding object is the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>. It contains global built-in bindings as well as <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, and <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> bindings in global code for the associated <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[GlobalThisValue]]\n              </td>\n              <td>\n                Object\n              </td>\n              <td>\n                The value returned by <code>this</code> in global scope. Hosts may provide any ECMAScript Object value.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[DeclarativeRecord]]\n              </td>\n              <td>\n                <emu-xref href=\"#sec-declarative-environment-records\"><a href=\"#sec-declarative-environment-records\">Declarative Environment Record</a></emu-xref>\n              </td>\n              <td>\n                Contains bindings for all declarations in global code for the associated <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> code except for <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, and <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> <var>bindings</var>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[VarNames]]\n              </td>\n              <td>\n                <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of String\n              </td>\n              <td>\n                The string names bound by <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, and <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> declarations in global code for the associated <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref>.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <emu-table id=\"table-19\" caption=\"Additional Methods of Global Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-19\">#table-19</span>: Additional Methods of Global Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Method\n              </th>\n              <th>\n                Purpose\n              </th>\n            </tr>\n            <tr>\n              <td>\n                GetThisBinding()\n              </td>\n              <td>\n                Return the value of this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s <code>this</code> binding.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                HasVarDeclaration (N)\n              </td>\n              <td>\n                Determines if the argument identifier has a binding in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that was created using a <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                HasLexicalDeclaration (N)\n              </td>\n              <td>\n                Determines if the argument identifier has a binding in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that was created using a lexical declaration such as a <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt> or a <emu-nt><a href=\"#prod-ClassDeclaration\">ClassDeclaration</a></emu-nt>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                HasRestrictedGlobalProperty (N)\n              </td>\n              <td>\n                Determines if the argument is the name of a <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> property that may not be shadowed by a global lexical binding.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                CanDeclareGlobalVar (N)\n              </td>\n              <td>\n                Determines if a corresponding CreateGlobalVarBinding call would succeed if called for the same argument <var>N</var>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                CanDeclareGlobalFunction (N)\n              </td>\n              <td>\n                Determines if a corresponding CreateGlobalFunctionBinding call would succeed if called for the same argument <var>N</var>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                CreateGlobalVarBinding(N, D)\n              </td>\n              <td>\n                Used to create and initialize to <emu-val>undefined</emu-val> a global <code>var</code> binding in the [[ObjectRecord]] component of a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>. The binding will be a mutable binding. The corresponding <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> property will have attribute values appropriate for a <code>var</code>. The String value <var>N</var> is the bound name. If <var>D</var> is <emu-val>true</emu-val> the binding may be deleted. Logically equivalent to CreateMutableBinding followed by a SetMutableBinding but it allows var declarations to receive special treatment.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                CreateGlobalFunctionBinding(N, V, D)\n              </td>\n              <td>\n                Create and initialize a global <code>function</code> binding in the [[ObjectRecord]] component of a <emu-xref href=\"#sec-global-environment-records\"><a href=\"#sec-global-environment-records\">global Environment Record</a></emu-xref>. The binding will be a mutable binding. The corresponding <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> property will have attribute values appropriate for a <code>function</code>. The String value <var>N</var> is the bound name. <var>V</var> is the initialization value. If the Boolean argument <var>D</var> is <emu-val>true</emu-val> the binding may be deleted. Logically equivalent to CreateMutableBinding followed by a SetMutableBinding but it allows function declarations to receive special treatment.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>The behaviour of the concrete specification methods for global Environment Records is defined by the following algorithms.</p>\n\n        <div id=\"excluded-sec-global-environment-records-hasbinding-n\"><h1><span class=\"secnum\">8.1.1.4.1</span>#sec-global-environment-records-hasbinding-n HasBinding ( N )</h1>...</div><div id=\"excluded-sec-global-environment-records-createmutablebinding-n-d\"><h1><span class=\"secnum\">8.1.1.4.2</span>#sec-global-environment-records-createmutablebinding-n-d CreateMutableBinding ( N, D )</h1>...</div><div id=\"excluded-sec-global-environment-records-createimmutablebinding-n-s\"><h1><span class=\"secnum\">8.1.1.4.3</span>#sec-global-environment-records-createimmutablebinding-n-s CreateImmutableBinding ( N, S )</h1>...</div><div id=\"excluded-sec-global-environment-records-initializebinding-n-v\"><h1><span class=\"secnum\">8.1.1.4.4</span>#sec-global-environment-records-initializebinding-n-v InitializeBinding ( N, V )</h1>...</div><div id=\"excluded-sec-global-environment-records-setmutablebinding-n-v-s\"><h1><span class=\"secnum\">8.1.1.4.5</span>#sec-global-environment-records-setmutablebinding-n-v-s SetMutableBinding ( N, V, S )</h1>...</div><div id=\"excluded-sec-global-environment-records-getbindingvalue-n-s\"><h1><span class=\"secnum\">8.1.1.4.6</span>#sec-global-environment-records-getbindingvalue-n-s GetBindingValue ( N, S )</h1>...</div><div id=\"excluded-sec-global-environment-records-deletebinding-n\"><h1><span class=\"secnum\">8.1.1.4.7</span>#sec-global-environment-records-deletebinding-n DeleteBinding ( N )</h1>...</div><div id=\"excluded-sec-global-environment-records-hasthisbinding\"><h1><span class=\"secnum\">8.1.1.4.8</span>#sec-global-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-global-environment-records-hassuperbinding\"><h1><span class=\"secnum\">8.1.1.4.9</span>#sec-global-environment-records-hassuperbinding HasSuperBinding ( )</h1>...</div><div id=\"excluded-sec-global-environment-records-withbaseobject\"><h1><span class=\"secnum\">8.1.1.4.10</span>#sec-global-environment-records-withbaseobject WithBaseObject ( )</h1>...</div><div id=\"excluded-sec-global-environment-records-getthisbinding\"><h1><span class=\"secnum\">8.1.1.4.11</span>#sec-global-environment-records-getthisbinding GetThisBinding ( )</h1>...</div><div id=\"excluded-sec-hasvardeclaration\"><h1><span class=\"secnum\">8.1.1.4.12</span>#sec-hasvardeclaration HasVarDeclaration ( N )</h1>...</div><div id=\"excluded-sec-haslexicaldeclaration\"><h1><span class=\"secnum\">8.1.1.4.13</span>#sec-haslexicaldeclaration HasLexicalDeclaration ( N )</h1>...</div><div id=\"excluded-sec-hasrestrictedglobalproperty\"><h1><span class=\"secnum\">8.1.1.4.14</span>#sec-hasrestrictedglobalproperty HasRestrictedGlobalProperty ( N )</h1>...</div><div id=\"excluded-sec-candeclareglobalvar\"><h1><span class=\"secnum\">8.1.1.4.15</span>#sec-candeclareglobalvar CanDeclareGlobalVar ( N )</h1>...</div><div id=\"excluded-sec-candeclareglobalfunction\"><h1><span class=\"secnum\">8.1.1.4.16</span>#sec-candeclareglobalfunction CanDeclareGlobalFunction ( N )</h1>...</div><div id=\"excluded-sec-createglobalvarbinding\"><h1><span class=\"secnum\">8.1.1.4.17</span>#sec-createglobalvarbinding CreateGlobalVarBinding ( N, D )</h1>...</div><div id=\"excluded-sec-createglobalfunctionbinding\"><h1><span class=\"secnum\">8.1.1.4.18</span>#sec-createglobalfunctionbinding CreateGlobalFunctionBinding ( N, V, D )</h1>...</div></emu-clause>\n\n      "}, "sec-binary-bitwise-operators-static-semantics-assignmenttargettype": {"num": "12.12.2", "title": "#sec-binary-bitwise-operators-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-binary-bitwise-operators-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-binary-bitwise-operators-static-semantics-assignmenttargettype\"><span id=\"sec-binary-bitwise-operators-static-semantics-isvalidsimpleassignmenttarget\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-binary-bitwise-operators-static-semantics-assignmenttargettype\">#sec-binary-bitwise-operators-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n      <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"BitwiseANDExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BitwiseANDExpression\">BitwiseANDExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"a90dedc2\"><emu-nt><a href=\"#prod-BitwiseANDExpression\">BitwiseANDExpression</a></emu-nt><emu-t>&amp;</emu-t><emu-nt><a href=\"#prod-EqualityExpression\">EqualityExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"BitwiseXORExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BitwiseXORExpression\">BitwiseXORExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b463172c\"><emu-nt><a href=\"#prod-BitwiseXORExpression\">BitwiseXORExpression</a></emu-nt><emu-t>^</emu-t><emu-nt><a href=\"#prod-BitwiseANDExpression\">BitwiseANDExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"BitwiseORExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BitwiseORExpression\">BitwiseORExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"016dfa90\"><emu-nt><a href=\"#prod-BitwiseORExpression\">BitwiseORExpression</a></emu-nt><emu-t>|</emu-t><emu-nt><a href=\"#prod-BitwiseXORExpression\">BitwiseXORExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>invalid</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-comma-operator-static-semantics-assignmenttargettype": {"num": "12.16.2", "title": "#sec-comma-operator-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-comma-operator-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-comma-operator-static-semantics-assignmenttargettype\"><span id=\"sec-comma-operator-static-semantics-isvalidsimpleassignmenttarget\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-comma-operator-static-semantics-assignmenttargettype\">#sec-comma-operator-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n      <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"Expression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0b039a65\"><emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt><emu-t>,</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>invalid</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-numeric-types-number-remainder": {"num": "6.1.6.1.6", "title": "#sec-numeric-types-number-remainder Number::remainder ( n, d )", "html": "<emu-clause id=\"sec-numeric-types-number-remainder\" oldids=\"sec-applying-the-mod-operator\"><span id=\"sec-applying-the-mod-operator\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-remainder\">#sec-numeric-types-number-remainder</span> Number::remainder ( <var>n</var>, <var>d</var> )</h1>\n          <p>The abstract operation Number::remainder takes arguments <var>n</var> (a Number) and <var>d</var> (a Number). It yields the remainder of its operands from an implied division; <var>n</var> is the dividend and <var>d</var> is the divisor.</p>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>In C and C++, the remainder operator accepts only integral operands; in ECMAScript, it also accepts floating-point operands.</p>\n          </div></emu-note>\n          <p>The result of a floating-point remainder operation as computed by the <code>%</code> operator is not the same as the &#8220;remainder&#8221; operation defined by <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref>. The <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> &#8220;remainder&#8221; operation computes the remainder from a rounding division, not a truncating division, and so its behaviour is not analogous to that of the usual <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> remainder operator. Instead the ECMAScript language defines <code>%</code> on floating-point operations to behave in a manner analogous to that of the Java <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> remainder operator; this may be compared with the C library function fmod.</p>\n          <p>The result of an ECMAScript floating-point remainder operation is determined by the rules of IEEE arithmetic:</p>\n          <ul>\n            <li>\n              If either operand is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n            </li>\n            <li>\n              The sign of the result equals the sign of the dividend.\n            </li>\n            <li>\n              If the dividend is an infinity, or the divisor is a zero, or both, the result is <emu-val>NaN</emu-val>.\n            </li>\n            <li>\n              If the dividend is finite and the divisor is an infinity, the result equals the dividend.\n            </li>\n            <li>\n              If the dividend is a zero and the divisor is nonzero and finite, the result is the same as the dividend.\n            </li>\n            <li>\n              In the remaining cases, where neither an infinity, nor a zero, nor <emu-val>NaN</emu-val> is involved, the floating-point remainder <var>r</var> from a dividend <var>n</var> and a divisor <var>d</var> is defined by the mathematical relation <var>r</var> = <var>n</var> - (<var>d</var> &#215; <var>q</var>) where <var>q</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> that is negative only if <var>n</var>/<var>d</var> is negative and positive only if <var>n</var>/<var>d</var> is positive, and whose magnitude is as large as possible without exceeding the magnitude of the true mathematical quotient of <var>n</var> and <var>d</var>. <var>r</var> is computed and rounded to the nearest representable value using <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> roundTiesToEven mode.\n            </li>\n          </ul>\n        </emu-clause>\n\n        "}, "sec-newpromisereactionjob": {"num": "26.6.2.1", "title": "#sec-newpromisereactionjob NewPromiseReactionJob ( reaction, argument )", "html": "<emu-clause id=\"sec-newpromisereactionjob\" aoid=\"NewPromiseReactionJob\" oldids=\"sec-promisereactionjob\"><span id=\"sec-promisereactionjob\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newpromisereactionjob\">#sec-newpromisereactionjob</span> NewPromiseReactionJob ( <var>reaction</var>, <var>argument</var> )</h1>\n        <p>The abstract operation NewPromiseReactionJob takes arguments <var>reaction</var> and <var>argument</var>. It returns a new <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> that applies the appropriate handler to the incoming value, and uses the handler's return value to resolve or reject the derived promise associated with that handler. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>job</var> be a new <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>reaction</var> and <var>argument</var> and performs the following steps when called:<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>reaction</var> is a PromiseReaction <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>.</li><li>Let <var>promiseCapability</var> be <var>reaction</var>.[[Capability]].</li><li>Let <var>type</var> be <var>reaction</var>.[[Type]].</li><li>Let <var>handler</var> be <var>reaction</var>.[[Handler]].</li><li>If <var>handler</var> is <emu-const>empty</emu-const>, then<ol><li>If <var>type</var> is <emu-const>Fulfill</emu-const>, let <var>handlerResult</var> be <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>argument</var>).</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>type</var> is <emu-const>Reject</emu-const>.</li><li>Let <var>handlerResult</var> be <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(<var>argument</var>).</li></ol></li></ol></li><li>Else, let <var>handlerResult</var> be <emu-xref aoid=\"HostCallJobCallback\"><a href=\"#sec-hostcalljobcallback\">HostCallJobCallback</a></emu-xref>(<var>handler</var>, <emu-val>undefined</emu-val>, &#171; <var>argument</var> &#187;).</li><li>If <var>promiseCapability</var> is <emu-val>undefined</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>handlerResult</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>promiseCapability</var> is a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref>.</li><li>If <var>handlerResult</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>handlerResult</var>.[[Value]] &#187;).</li></ol></li><li>Else,<ol><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>handlerResult</var>.[[Value]] &#187;).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>status</var>).</li></ol></li><li>Let <var>handlerRealm</var> be <emu-val>null</emu-val>.</li><li>If <var>reaction</var>.[[Handler]] is not <emu-const>empty</emu-const>, then<ol><li>Let <var>getHandlerRealmResult</var> be <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref>(<var>reaction</var>.[[Handler]].[[Callback]]).</li><li>If <var>getHandlerRealmResult</var> is a normal completion, then set <var>handlerRealm</var> to <var>getHandlerRealmResult</var>.[[Value]].</li><li>Else, set <var>handlerRealm</var> to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>NOTE: <var>handlerRealm</var> is never <emu-val>null</emu-val> unless the handler is <emu-val>undefined</emu-val>. When the handler is a revoked Proxy and no ECMAScript code runs, <var>handlerRealm</var> is used to create error objects.</li></ol></li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Job]]: <var>job</var>, [[Realm]]: <var>handlerRealm</var> }.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-unicodematchproperty-p": {"num": "21.2.2.8.3", "title": "#sec-runtime-semantics-unicodematchproperty-p Runtime Semantics: UnicodeMatchProperty ( p )", "html": "<emu-clause id=\"sec-runtime-semantics-unicodematchproperty-p\" aoid=\"UnicodeMatchProperty\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-unicodematchproperty-p\">#sec-runtime-semantics-unicodematchproperty-p</span> Runtime Semantics: UnicodeMatchProperty ( <var>p</var> )</h1>\n          <p>The abstract operation UnicodeMatchProperty takes argument <var>p</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points). It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>p</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points that is identical to a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points that is a Unicode <emu-not-ref>property name</emu-not-ref> or property alias listed in the &#8220;<emu-not-ref>Property name</emu-not-ref> and aliases&#8221; column of <emu-xref href=\"#table-nonbinary-unicode-properties\"><a href=\"#table-nonbinary-unicode-properties\" class=\"excluded-xref\" excluded-id=\"table-nonbinary-unicode-properties\">#table-nonbinary-unicode-properties</a></emu-xref> or <emu-xref href=\"#table-binary-unicode-properties\"><a href=\"#table-binary-unicode-properties\" class=\"excluded-xref\" excluded-id=\"table-binary-unicode-properties\">#table-binary-unicode-properties</a></emu-xref>.</li><li>Let <var>c</var> be the canonical <emu-not-ref>property name</emu-not-ref> of <var>p</var> as given in the &#8220;Canonical <emu-not-ref>property name</emu-not-ref>&#8221; column of the corresponding row.</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points of <var>c</var>.</li></ol></emu-alg>\n          <p>Implementations must support the Unicode property names and aliases listed in <emu-xref href=\"#table-nonbinary-unicode-properties\"><a href=\"#table-nonbinary-unicode-properties\" class=\"excluded-xref\" excluded-id=\"table-nonbinary-unicode-properties\">#table-nonbinary-unicode-properties</a></emu-xref> and <emu-xref href=\"#table-binary-unicode-properties\"><a href=\"#table-binary-unicode-properties\" class=\"excluded-xref\" excluded-id=\"table-binary-unicode-properties\">#table-binary-unicode-properties</a></emu-xref>. To ensure interoperability, implementations must not support any other property names or aliases.</p>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>For example, <code>Script_Extensions</code> (<emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref>) and <code>scx</code> (property alias) are valid, but <code>script_extensions</code> or <code>Scx</code> aren't.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>The listed properties form a superset of what <a href=\"https://unicode.org/reports/tr18/#RL1.2\">UTS18 RL1.2</a> requires.</p>\n          </div></emu-note>\n          <emu-import href=\"table-nonbinary-unicode-properties.html\"><emu-table id=\"table-nonbinary-unicode-properties\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-nonbinary-unicode-properties\">#table-nonbinary-unicode-properties</span>: Non-binary Unicode property aliases and their canonical property names</figcaption>\n  \n  <table class=\"real-table unicode-property-table\">\n    <thead>\n      <tr>\n        <th><emu-xref href=\"#property-name\"><a href=\"#property-name\">Property name</a></emu-xref> and aliases</th>\n        <th>Canonical <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref></th>\n      </tr>\n    </thead>\n    <tbody><tr>\n      <td><code>General_Category</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr18/#General_Category_Property\"><code>General_Category</code></a></td>\n    </tr>\n    <tr>\n      <td><code>gc</code></td>\n    </tr>\n    <tr>\n      <td><code>Script</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr24/#Script\"><code>Script</code></a></td>\n    </tr>\n    <tr>\n      <td><code>sc</code></td>\n    </tr>\n    <tr>\n      <td><code>Script_Extensions</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr24/#Script_Extensions\"><code>Script_Extensions</code></a></td>\n    </tr>\n    <tr>\n      <td><code>scx</code></td>\n    </tr>\n  </tbody></table>\n</figure></emu-table></emu-import>\n          <emu-import href=\"table-binary-unicode-properties.html\"><emu-table id=\"table-binary-unicode-properties\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-binary-unicode-properties\">#table-binary-unicode-properties</span>: Binary Unicode property aliases and their canonical property names</figcaption>\n  \n  <table class=\"real-table unicode-property-table\">\n    <thead>\n      <tr>\n        <th><emu-xref href=\"#property-name\"><a href=\"#property-name\">Property name</a></emu-xref> and aliases</th>\n        <th>Canonical <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref></th>\n      </tr>\n    </thead>\n    <tbody><tr>\n      <td><code>ASCII</code></td>\n      <td><a href=\"https://unicode.org/reports/tr18/#General_Category_Property\"><code>ASCII</code></a></td>\n    </tr>\n    <tr>\n      <td><code>ASCII_Hex_Digit</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#ASCII_Hex_Digit\"><code>ASCII_Hex_Digit</code></a></td>\n    </tr>\n    <tr>\n      <td><code>AHex</code></td>\n    </tr>\n    <tr>\n      <td><code>Alphabetic</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Alphabetic\"><code>Alphabetic</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Alpha</code></td>\n    </tr>\n    <tr>\n      <td><code>Any</code></td>\n      <td><a href=\"https://unicode.org/reports/tr18/#General_Category_Property\"><code>Any</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Assigned</code></td>\n      <td><a href=\"https://unicode.org/reports/tr18/#General_Category_Property\"><code>Assigned</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Bidi_Control</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Bidi_Control\"><code>Bidi_Control</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Bidi_C</code></td>\n    </tr>\n    <tr>\n      <td><code>Bidi_Mirrored</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Bidi_Mirrored\"><code>Bidi_Mirrored</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Bidi_M</code></td>\n    </tr>\n    <tr>\n      <td><code>Case_Ignorable</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Case_Ignorable\"><code>Case_Ignorable</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CI</code></td>\n    </tr>\n    <tr>\n      <td><code>Cased</code></td>\n      <td><a href=\"https://unicode.org/reports/tr44/#Cased\"><code>Cased</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_Casefolded</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWCF\"><code>Changes_When_Casefolded</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWCF</code></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_Casemapped</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWCM\"><code>Changes_When_Casemapped</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWCM</code></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_Lowercased</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWL\"><code>Changes_When_Lowercased</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWL</code></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_NFKC_Casefolded</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWKCF\"><code>Changes_When_NFKC_Casefolded</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWKCF</code></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_Titlecased</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWT\"><code>Changes_When_Titlecased</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWT</code></td>\n    </tr>\n    <tr>\n      <td><code>Changes_When_Uppercased</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#CWU\"><code>Changes_When_Uppercased</code></a></td>\n    </tr>\n    <tr>\n      <td><code>CWU</code></td>\n    </tr>\n    <tr>\n      <td><code>Dash</code></td>\n      <td><a href=\"https://unicode.org/reports/tr44/#Dash\"><code>Dash</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Default_Ignorable_Code_Point</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Default_Ignorable_Code_Point\"><code>Default_Ignorable_Code_Point</code></a></td>\n    </tr>\n    <tr>\n      <td><code>DI</code></td>\n    </tr>\n    <tr>\n      <td><code>Deprecated</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Deprecated\"><code>Deprecated</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Dep</code></td>\n    </tr>\n    <tr>\n      <td><code>Diacritic</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Diacritic\"><code>Diacritic</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Dia</code></td>\n    </tr>\n    <tr>\n      <td><code>Emoji</code></td>\n      <td><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Emoji</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Emoji_Component</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Emoji_Component</code></a></td>\n    </tr>\n    <tr>\n      <td><code>EComp</code></td>\n    </tr>\n    <tr>\n      <td><code>Emoji_Modifier</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Emoji_Modifier</code></a></td>\n    </tr>\n    <tr>\n      <td><code>EMod</code></td>\n    </tr>\n    <tr>\n      <td><code>Emoji_Modifier_Base</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Emoji_Modifier_Base</code></a></td>\n    </tr>\n    <tr>\n      <td><code>EBase</code></td>\n    </tr>\n    <tr>\n      <td><code>Emoji_Presentation</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Emoji_Presentation</code></a></td>\n    </tr>\n    <tr>\n      <td><code>EPres</code></td>\n    </tr>\n    <tr>\n      <td><code>Extended_Pictographic</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr51/#Emoji_Properties\"><code>Extended_Pictographic</code></a></td>\n    </tr>\n    <tr>\n      <td><code>ExtPict</code></td>\n    </tr>\n    <tr>\n      <td><code>Extender</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Extender\"><code>Extender</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Ext</code></td>\n    </tr>\n    <tr>\n      <td><code>Grapheme_Base</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Grapheme_Base\"><code>Grapheme_Base</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Gr_Base</code></td>\n    </tr>\n    <tr>\n      <td><code>Grapheme_Extend</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Grapheme_Extend\"><code>Grapheme_Extend</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Gr_Ext</code></td>\n    </tr>\n    <tr>\n      <td><code>Hex_Digit</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Hex_Digit\"><code>Hex_Digit</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Hex</code></td>\n    </tr>\n    <tr>\n      <td><code>IDS_Binary_Operator</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#IDS_Binary_Operator\"><code>IDS_Binary_Operator</code></a></td>\n    </tr>\n    <tr>\n      <td><code>IDSB</code></td>\n    </tr>\n    <tr>\n      <td><code>IDS_Trinary_Operator</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#IDS_Trinary_Operator\"><code>IDS_Trinary_Operator</code></a></td>\n    </tr>\n    <tr>\n      <td><code>IDST</code></td>\n    </tr>\n    <tr>\n      <td><code>ID_Continue</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#ID_Continue\"><code>ID_Continue</code></a></td>\n    </tr>\n    <tr>\n      <td><code>IDC</code></td>\n    </tr>\n    <tr>\n      <td><code>ID_Start</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#ID_Start\"><code>ID_Start</code></a></td>\n    </tr>\n    <tr>\n      <td><code>IDS</code></td>\n    </tr>\n    <tr>\n      <td><code>Ideographic</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Ideographic\"><code>Ideographic</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Ideo</code></td>\n    </tr>\n    <tr>\n      <td><code>Join_Control</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Join_Control\"><code>Join_Control</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Join_C</code></td>\n    </tr>\n    <tr>\n      <td><code>Logical_Order_Exception</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Logical_Order_Exception\"><code>Logical_Order_Exception</code></a></td>\n    </tr>\n    <tr>\n      <td><code>LOE</code></td>\n    </tr>\n    <tr>\n      <td><code>Lowercase</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Lowercase\"><code>Lowercase</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Lower</code></td>\n    </tr>\n    <tr>\n      <td><code>Math</code></td>\n      <td><a href=\"https://unicode.org/reports/tr44/#Math\"><code>Math</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Noncharacter_Code_Point</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Noncharacter_Code_Point\"><code>Noncharacter_Code_Point</code></a></td>\n    </tr>\n    <tr>\n      <td><code>NChar</code></td>\n    </tr>\n    <tr>\n      <td><code>Pattern_Syntax</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Pattern_Syntax\"><code>Pattern_Syntax</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Pat_Syn</code></td>\n    </tr>\n    <tr>\n      <td><code>Pattern_White_Space</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Pattern_White_Space\"><code>Pattern_White_Space</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Pat_WS</code></td>\n    </tr>\n    <tr>\n      <td><code>Quotation_Mark</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Quotation_Mark\"><code>Quotation_Mark</code></a></td>\n    </tr>\n    <tr>\n      <td><code>QMark</code></td>\n    </tr>\n    <tr>\n      <td><code>Radical</code></td>\n      <td><a href=\"https://unicode.org/reports/tr44/#Radical\"><code>Radical</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Regional_Indicator</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Regional_Indicator\"><code>Regional_Indicator</code></a></td>\n    </tr>\n    <tr>\n      <td><code>RI</code></td>\n    </tr>\n    <tr>\n      <td><code>Sentence_Terminal</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#STerm\"><code>Sentence_Terminal</code></a></td>\n    </tr>\n    <tr>\n      <td><code>STerm</code></td>\n    </tr>\n    <tr>\n      <td><code>Soft_Dotted</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Soft_Dotted\"><code>Soft_Dotted</code></a></td>\n    </tr>\n    <tr>\n      <td><code>SD</code></td>\n    </tr>\n    <tr>\n      <td><code>Terminal_Punctuation</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Terminal_Punctuation\"><code>Terminal_Punctuation</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Term</code></td>\n    </tr>\n    <tr>\n      <td><code>Unified_Ideograph</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Unified_Ideograph\"><code>Unified_Ideograph</code></a></td>\n    </tr>\n    <tr>\n      <td><code>UIdeo</code></td>\n    </tr>\n    <tr>\n      <td><code>Uppercase</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Uppercase\"><code>Uppercase</code></a></td>\n    </tr>\n    <tr>\n      <td><code>Upper</code></td>\n    </tr>\n    <tr>\n      <td><code>Variation_Selector</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#Variation_Selector\"><code>Variation_Selector</code></a></td>\n    </tr>\n    <tr>\n      <td><code>VS</code></td>\n    </tr>\n    <tr>\n      <td><code>White_Space</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#White_Space\"><code>White_Space</code></a></td>\n    </tr>\n    <tr>\n      <td><code>space</code></td>\n    </tr>\n    <tr>\n      <td><code>XID_Continue</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#XID_Continue\"><code>XID_Continue</code></a></td>\n    </tr>\n    <tr>\n      <td><code>XIDC</code></td>\n    </tr>\n    <tr>\n      <td><code>XID_Start</code></td>\n      <td rowspan=\"2\"><a href=\"https://unicode.org/reports/tr44/#XID_Start\"><code>XID_Start</code></a></td>\n    </tr>\n    <tr>\n      <td><code>XIDS</code></td>\n    </tr>\n  </tbody></table>\n</figure></emu-table></emu-import>\n        </emu-clause>\n        "}, "sec-binary-logical-operators-static-semantics-assignmenttargettype": {"num": "12.13.2", "title": "#sec-binary-logical-operators-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-binary-logical-operators-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-binary-logical-operators-static-semantics-assignmenttargettype\"><span id=\"sec-binary-logical-operators-static-semantics-isvalidsimpleassignmenttarget\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-binary-logical-operators-static-semantics-assignmenttargettype\">#sec-binary-logical-operators-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n      <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"LogicalANDExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LogicalANDExpression\">LogicalANDExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2186e2aa\"><emu-nt><a href=\"#prod-LogicalANDExpression\">LogicalANDExpression</a></emu-nt><emu-t>&amp;&amp;</emu-t><emu-nt><a href=\"#prod-BitwiseORExpression\">BitwiseORExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"LogicalORExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LogicalORExpression\">LogicalORExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b6453dd9\"><emu-nt><a href=\"#prod-LogicalORExpression\">LogicalORExpression</a></emu-nt><emu-t>||</emu-t><emu-nt><a href=\"#prod-LogicalANDExpression\">LogicalANDExpression</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"CoalesceExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CoalesceExpression\">CoalesceExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ddea0818\"><emu-nt><a href=\"#prod-CoalesceExpressionHead\">CoalesceExpressionHead</a></emu-nt><emu-t>??</emu-t><emu-nt><a href=\"#prod-BitwiseORExpression\">BitwiseORExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-const>invalid</emu-const>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-newpromiseresolvethenablejob": {"num": "26.6.2.2", "title": "#sec-newpromiseresolvethenablejob NewPromiseResolveThenableJob ( promiseToResolve, thenable, then )", "html": "<emu-clause id=\"sec-newpromiseresolvethenablejob\" aoid=\"NewPromiseResolveThenableJob\" oldids=\"sec-promiseresolvethenablejob\"><span id=\"sec-promiseresolvethenablejob\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newpromiseresolvethenablejob\">#sec-newpromiseresolvethenablejob</span> NewPromiseResolveThenableJob ( <var>promiseToResolve</var>, <var>thenable</var>, <var>then</var> )</h1>\n        <p>The abstract operation NewPromiseResolveThenableJob takes arguments <var>promiseToResolve</var>, <var>thenable</var>, and <var>then</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>job</var> be a new <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with no parameters that captures <var>promiseToResolve</var>, <var>thenable</var>, and <var>then</var> and performs the following steps when called:<ol><li>Let <var>resolvingFunctions</var> be <emu-xref aoid=\"CreateResolvingFunctions\"><a href=\"#sec-createresolvingfunctions\">CreateResolvingFunctions</a></emu-xref>(<var>promiseToResolve</var>).</li><li>Let <var>thenCallResult</var> be <emu-xref aoid=\"HostCallJobCallback\"><a href=\"#sec-hostcalljobcallback\">HostCallJobCallback</a></emu-xref>(<var>then</var>, <var>thenable</var>, &#171; <var>resolvingFunctions</var>.[[Resolve]], <var>resolvingFunctions</var>.[[Reject]] &#187;).</li><li>If <var>thenCallResult</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>resolvingFunctions</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>thenCallResult</var>.[[Value]] &#187;).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>status</var>).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>thenCallResult</var>).</li></ol></li><li>Let <var>getThenRealmResult</var> be <emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref>(<var>then</var>.[[Callback]]).</li><li>If <var>getThenRealmResult</var> is a normal completion, then let <var>thenRealm</var> be <var>getThenRealmResult</var>.[[Value]].</li><li>Else, let <var>thenRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>NOTE: <var>thenRealm</var> is never <emu-val>null</emu-val>. When <var>then</var>.[[Callback]] is a revoked Proxy and no code runs, <var>thenRealm</var> is used to create error objects.</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Job]]: <var>job</var>, [[Realm]]: <var>thenRealm</var> }.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> uses the supplied thenable and its <code>then</code> method to resolve the given promise. This process must take place as a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> to ensure that the evaluation of the <code>then</code> method occurs after evaluation of any surrounding code has completed.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-runtime-semantics-unicodematchpropertyvalue-p-v": {"num": "21.2.2.8.4", "title": "#sec-runtime-semantics-unicodematchpropertyvalue-p-v Runtime Semantics: UnicodeMatchPropertyValue ( p, v )", "html": "<emu-clause id=\"sec-runtime-semantics-unicodematchpropertyvalue-p-v\" aoid=\"UnicodeMatchPropertyValue\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-unicodematchpropertyvalue-p-v\">#sec-runtime-semantics-unicodematchpropertyvalue-p-v</span> Runtime Semantics: UnicodeMatchPropertyValue ( <var>p</var>, <var>v</var> )</h1>\n          <p>The abstract operation UnicodeMatchPropertyValue takes arguments <var>p</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points) and <var>v</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points). It performs the following steps when called:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>p</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points that is identical to a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points that is a canonical, unaliased Unicode <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> listed in the &#8220;Canonical <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref>&#8221; column of <emu-xref href=\"#table-nonbinary-unicode-properties\"><a href=\"#table-nonbinary-unicode-properties\" class=\"excluded-xref\" excluded-id=\"table-nonbinary-unicode-properties\">#table-nonbinary-unicode-properties</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>v</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points that is identical to a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points that is a property value or property value alias for Unicode property <var>p</var> listed in the &#8220;Property value and aliases&#8221; column of <emu-xref href=\"#table-unicode-general-category-values\"><a href=\"#table-unicode-general-category-values\" class=\"excluded-xref\" excluded-id=\"table-unicode-general-category-values\">#table-unicode-general-category-values</a></emu-xref> or <emu-xref href=\"#table-unicode-script-values\"><a href=\"#table-unicode-script-values\" class=\"excluded-xref\" excluded-id=\"table-unicode-script-values\">#table-unicode-script-values</a></emu-xref>.</li><li>Let <var>value</var> be the canonical property value of <var>v</var> as given in the &#8220;Canonical property value&#8221; column of the corresponding row.</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points of <var>value</var>.</li></ol></emu-alg>\n          <p>Implementations must support the Unicode property value names and aliases listed in <emu-xref href=\"#table-unicode-general-category-values\"><a href=\"#table-unicode-general-category-values\" class=\"excluded-xref\" excluded-id=\"table-unicode-general-category-values\">#table-unicode-general-category-values</a></emu-xref> and <emu-xref href=\"#table-unicode-script-values\"><a href=\"#table-unicode-script-values\" class=\"excluded-xref\" excluded-id=\"table-unicode-script-values\">#table-unicode-script-values</a></emu-xref>. To ensure interoperability, implementations must not support any other property value names or aliases.</p>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>For example, <code>Xpeo</code> and <code>Old_Persian</code> are valid <code>Script_Extensions</code> values, but <code>xpeo</code> and <code>Old Persian</code> aren't.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>This algorithm differs from <a href=\"https://unicode.org/reports/tr44/#Matching_Symbolic\">the matching rules for symbolic values listed in UAX44</a>: case, <emu-xref href=\"#sec-white-space\"><a href=\"#sec-white-space\">white space</a></emu-xref>, U+002D (HYPHEN-MINUS), and U+005F (LOW LINE) are not ignored, and the <code>Is</code> prefix is not supported.</p>\n          </div></emu-note>\n          <emu-import href=\"table-unicode-general-category-values.html\"><emu-table id=\"table-unicode-general-category-values\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-unicode-general-category-values\">#table-unicode-general-category-values</span>: Value aliases and canonical values for the Unicode property <a href=\"https://unicode.org/reports/tr18/#General_Category_Property\"><code>General_Category</code></a></figcaption>\n  \n  <table class=\"real-table unicode-property-table\">\n    <thead>\n      <tr>\n        <th>Property value and aliases</th>\n        <th>Canonical property value</th>\n      </tr>\n    </thead>\n    <tbody><tr>\n      <td><code>Cased_Letter</code></td>\n      <td rowspan=\"2\"><code>Cased_Letter</code></td>\n    </tr>\n    <tr>\n      <td><code>LC</code></td>\n    </tr>\n    <tr>\n      <td><code>Close_Punctuation</code></td>\n      <td rowspan=\"2\"><code>Close_Punctuation</code></td>\n    </tr>\n    <tr>\n      <td><code>Pe</code></td>\n    </tr>\n    <tr>\n      <td><code>Connector_Punctuation</code></td>\n      <td rowspan=\"2\"><code>Connector_Punctuation</code></td>\n    </tr>\n    <tr>\n      <td><code>Pc</code></td>\n    </tr>\n    <tr>\n      <td><code>Control</code></td>\n      <td rowspan=\"3\"><code>Control</code></td>\n    </tr>\n    <tr>\n      <td><code>Cc</code></td>\n    </tr>\n    <tr>\n      <td><code>cntrl</code></td>\n    </tr>\n    <tr>\n      <td><code>Currency_Symbol</code></td>\n      <td rowspan=\"2\"><code>Currency_Symbol</code></td>\n    </tr>\n    <tr>\n      <td><code>Sc</code></td>\n    </tr>\n    <tr>\n      <td><code>Dash_Punctuation</code></td>\n      <td rowspan=\"2\"><code>Dash_Punctuation</code></td>\n    </tr>\n    <tr>\n      <td><code>Pd</code></td>\n    </tr>\n    <tr>\n      <td><code>Decimal_Number</code></td>\n      <td rowspan=\"3\"><code>Decimal_Number</code></td>\n    </tr>\n    <tr>\n      <td><code>Nd</code></td>\n    </tr>\n    <tr>\n      <td><code>digit</code></td>\n    </tr>\n    <tr>\n      <td><code>Enclosing_Mark</code></td>\n      <td rowspan=\"2\"><code>Enclosing_Mark</code></td>\n    </tr>\n    <tr>\n      <td><code>Me</code></td>\n    </tr>\n    <tr>\n      <td><code>Final_Punctuation</code></td>\n      <td rowspan=\"2\"><code>Final_Punctuation</code></td>\n    </tr>\n    <tr>\n      <td><code>Pf</code></td>\n    </tr>\n    <tr>\n      <td><code>Format</code></td>\n      <td rowspan=\"2\"><code>Format</code></td>\n    </tr>\n    <tr>\n      <td><code>Cf</code></td>\n    </tr>\n    <tr>\n      <td><code>Initial_Punctuation</code></td>\n      <td rowspan=\"2\"><code>Initial_Punctuation</code></td>\n    </tr>\n    <tr>\n      <td><code>Pi</code></td>\n    </tr>\n    <tr>\n      <td><code>Letter</code></td>\n      <td rowspan=\"2\"><code>Letter</code></td>\n    </tr>\n    <tr>\n      <td><code>L</code></td>\n    </tr>\n    <tr>\n      <td><code>Letter_Number</code></td>\n      <td rowspan=\"2\"><code>Letter_Number</code></td>\n    </tr>\n    <tr>\n      <td><code>Nl</code></td>\n    </tr>\n    <tr>\n      <td><code>Line_Separator</code></td>\n      <td rowspan=\"2\"><code>Line_Separator</code></td>\n    </tr>\n    <tr>\n      <td><code>Zl</code></td>\n    </tr>\n    <tr>\n      <td><code>Lowercase_Letter</code></td>\n      <td rowspan=\"2\"><code>Lowercase_Letter</code></td>\n    </tr>\n    <tr>\n      <td><code>Ll</code></td>\n    </tr>\n    <tr>\n      <td><code>Mark</code></td>\n      <td rowspan=\"3\"><code>Mark</code></td>\n    </tr>\n    <tr>\n      <td><code>M</code></td>\n    </tr>\n    <tr>\n      <td><code>Combining_Mark</code></td>\n    </tr>\n    <tr>\n      <td><code>Math_Symbol</code></td>\n      <td rowspan=\"2\"><code>Math_Symbol</code></td>\n    </tr>\n    <tr>\n      <td><code>Sm</code></td>\n    </tr>\n    <tr>\n      <td><code>Modifier_Letter</code></td>\n      <td rowspan=\"2\"><code>Modifier_Letter</code></td>\n    </tr>\n    <tr>\n      <td><code>Lm</code></td>\n    </tr>\n    <tr>\n      <td><code>Modifier_Symbol</code></td>\n      <td rowspan=\"2\"><code>Modifier_Symbol</code></td>\n    </tr>\n    <tr>\n      <td><code>Sk</code></td>\n    </tr>\n    <tr>\n      <td><code>Nonspacing_Mark</code></td>\n      <td rowspan=\"2\"><code>Nonspacing_Mark</code></td>\n    </tr>\n    <tr>\n      <td><code>Mn</code></td>\n    </tr>\n    <tr>\n      <td><code>Number</code></td>\n      <td rowspan=\"2\"><code>Number</code></td>\n    </tr>\n    <tr>\n      <td><code>N</code></td>\n    </tr>\n    <tr>\n      <td><code>Open_Punctuation</code></td>\n      <td rowspan=\"2\"><code>Open_Punctuation</code></td>\n    </tr>\n    <tr>\n      <td><code>Ps</code></td>\n    </tr>\n    <tr>\n      <td><code>Other</code></td>\n      <td rowspan=\"2\"><code>Other</code></td>\n    </tr>\n    <tr>\n      <td><code>C</code></td>\n    </tr>\n    <tr>\n      <td><code>Other_Letter</code></td>\n      <td rowspan=\"2\"><code>Other_Letter</code></td>\n    </tr>\n    <tr>\n      <td><code>Lo</code></td>\n    </tr>\n    <tr>\n      <td><code>Other_Number</code></td>\n      <td rowspan=\"2\"><code>Other_Number</code></td>\n    </tr>\n    <tr>\n      <td><code>No</code></td>\n    </tr>\n    <tr>\n      <td><code>Other_Punctuation</code></td>\n      <td rowspan=\"2\"><code>Other_Punctuation</code></td>\n    </tr>\n    <tr>\n      <td><code>Po</code></td>\n    </tr>\n    <tr>\n      <td><code>Other_Symbol</code></td>\n      <td rowspan=\"2\"><code>Other_Symbol</code></td>\n    </tr>\n    <tr>\n      <td><code>So</code></td>\n    </tr>\n    <tr>\n      <td><code>Paragraph_Separator</code></td>\n      <td rowspan=\"2\"><code>Paragraph_Separator</code></td>\n    </tr>\n    <tr>\n      <td><code>Zp</code></td>\n    </tr>\n    <tr>\n      <td><code>Private_Use</code></td>\n      <td rowspan=\"2\"><code>Private_Use</code></td>\n    </tr>\n    <tr>\n      <td><code>Co</code></td>\n    </tr>\n    <tr>\n      <td><code>Punctuation</code></td>\n      <td rowspan=\"3\"><code>Punctuation</code></td>\n    </tr>\n    <tr>\n      <td><code>P</code></td>\n    </tr>\n    <tr>\n      <td><code>punct</code></td>\n    </tr>\n    <tr>\n      <td><code>Separator</code></td>\n      <td rowspan=\"2\"><code>Separator</code></td>\n    </tr>\n    <tr>\n      <td><code>Z</code></td>\n    </tr>\n    <tr>\n      <td><code>Space_Separator</code></td>\n      <td rowspan=\"2\"><code>Space_Separator</code></td>\n    </tr>\n    <tr>\n      <td><code>Zs</code></td>\n    </tr>\n    <tr>\n      <td><code>Spacing_Mark</code></td>\n      <td rowspan=\"2\"><code>Spacing_Mark</code></td>\n    </tr>\n    <tr>\n      <td><code>Mc</code></td>\n    </tr>\n    <tr>\n      <td><code>Surrogate</code></td>\n      <td rowspan=\"2\"><code>Surrogate</code></td>\n    </tr>\n    <tr>\n      <td><code>Cs</code></td>\n    </tr>\n    <tr>\n      <td><code>Symbol</code></td>\n      <td rowspan=\"2\"><code>Symbol</code></td>\n    </tr>\n    <tr>\n      <td><code>S</code></td>\n    </tr>\n    <tr>\n      <td><code>Titlecase_Letter</code></td>\n      <td rowspan=\"2\"><code>Titlecase_Letter</code></td>\n    </tr>\n    <tr>\n      <td><code>Lt</code></td>\n    </tr>\n    <tr>\n      <td><code>Unassigned</code></td>\n      <td rowspan=\"2\"><code>Unassigned</code></td>\n    </tr>\n    <tr>\n      <td><code>Cn</code></td>\n    </tr>\n    <tr>\n      <td><code>Uppercase_Letter</code></td>\n      <td rowspan=\"2\"><code>Uppercase_Letter</code></td>\n    </tr>\n    <tr>\n      <td><code>Lu</code></td>\n    </tr>\n  </tbody></table>\n</figure></emu-table></emu-import>\n          <emu-import href=\"table-unicode-script-values.html\"><emu-table id=\"table-unicode-script-values\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-unicode-script-values\">#table-unicode-script-values</span>: Value aliases and canonical values for the Unicode properties <a href=\"https://unicode.org/reports/tr24/#Script\"><code>Script</code></a> and <a href=\"https://unicode.org/reports/tr24/#Script_Extensions\"><code>Script_Extensions</code></a></figcaption>\n  \n  <table class=\"real-table unicode-property-table\">\n    <thead>\n      <tr>\n        <th>Property value and aliases</th>\n        <th>Canonical property value</th>\n      </tr>\n    </thead>\n    <tbody><tr>\n      <td><code>Adlam</code></td>\n      <td rowspan=\"2\"><code>Adlam</code></td>\n    </tr>\n    <tr>\n      <td><code>Adlm</code></td>\n    </tr>\n    <tr>\n      <td><code>Ahom</code></td>\n      <td><code>Ahom</code></td>\n    </tr>\n    <tr>\n      <td><code>Anatolian_Hieroglyphs</code></td>\n      <td rowspan=\"2\"><code>Anatolian_Hieroglyphs</code></td>\n    </tr>\n    <tr>\n      <td><code>Hluw</code></td>\n    </tr>\n    <tr>\n      <td><code>Arabic</code></td>\n      <td rowspan=\"2\"><code>Arabic</code></td>\n    </tr>\n    <tr>\n      <td><code>Arab</code></td>\n    </tr>\n    <tr>\n      <td><code>Armenian</code></td>\n      <td rowspan=\"2\"><code>Armenian</code></td>\n    </tr>\n    <tr>\n      <td><code>Armn</code></td>\n    </tr>\n    <tr>\n      <td><code>Avestan</code></td>\n      <td rowspan=\"2\"><code>Avestan</code></td>\n    </tr>\n    <tr>\n      <td><code>Avst</code></td>\n    </tr>\n    <tr>\n      <td><code>Balinese</code></td>\n      <td rowspan=\"2\"><code>Balinese</code></td>\n    </tr>\n    <tr>\n      <td><code>Bali</code></td>\n    </tr>\n    <tr>\n      <td><code>Bamum</code></td>\n      <td rowspan=\"2\"><code>Bamum</code></td>\n    </tr>\n    <tr>\n      <td><code>Bamu</code></td>\n    </tr>\n    <tr>\n      <td><code>Bassa_Vah</code></td>\n      <td rowspan=\"2\"><code>Bassa_Vah</code></td>\n    </tr>\n    <tr>\n      <td><code>Bass</code></td>\n    </tr>\n    <tr>\n      <td><code>Batak</code></td>\n      <td rowspan=\"2\"><code>Batak</code></td>\n    </tr>\n    <tr>\n      <td><code>Batk</code></td>\n    </tr>\n    <tr>\n      <td><code>Bengali</code></td>\n      <td rowspan=\"2\"><code>Bengali</code></td>\n    </tr>\n    <tr>\n      <td><code>Beng</code></td>\n    </tr>\n    <tr>\n      <td><code>Bhaiksuki</code></td>\n      <td rowspan=\"2\"><code>Bhaiksuki</code></td>\n    </tr>\n    <tr>\n      <td><code>Bhks</code></td>\n    </tr>\n    <tr>\n      <td><code>Bopomofo</code></td>\n      <td rowspan=\"2\"><code>Bopomofo</code></td>\n    </tr>\n    <tr>\n      <td><code>Bopo</code></td>\n    </tr>\n    <tr>\n      <td><code>Brahmi</code></td>\n      <td rowspan=\"2\"><code>Brahmi</code></td>\n    </tr>\n    <tr>\n      <td><code>Brah</code></td>\n    </tr>\n    <tr>\n      <td><code>Braille</code></td>\n      <td rowspan=\"2\"><code>Braille</code></td>\n    </tr>\n    <tr>\n      <td><code>Brai</code></td>\n    </tr>\n    <tr>\n      <td><code>Buginese</code></td>\n      <td rowspan=\"2\"><code>Buginese</code></td>\n    </tr>\n    <tr>\n      <td><code>Bugi</code></td>\n    </tr>\n    <tr>\n      <td><code>Buhid</code></td>\n      <td rowspan=\"2\"><code>Buhid</code></td>\n    </tr>\n    <tr>\n      <td><code>Buhd</code></td>\n    </tr>\n    <tr>\n      <td><code>Canadian_Aboriginal</code></td>\n      <td rowspan=\"2\"><code>Canadian_Aboriginal</code></td>\n    </tr>\n    <tr>\n      <td><code>Cans</code></td>\n    </tr>\n    <tr>\n      <td><code>Carian</code></td>\n      <td rowspan=\"2\"><code>Carian</code></td>\n    </tr>\n    <tr>\n      <td><code>Cari</code></td>\n    </tr>\n    <tr>\n      <td><code>Caucasian_Albanian</code></td>\n      <td rowspan=\"2\"><code>Caucasian_Albanian</code></td>\n    </tr>\n    <tr>\n      <td><code>Aghb</code></td>\n    </tr>\n    <tr>\n      <td><code>Chakma</code></td>\n      <td rowspan=\"2\"><code>Chakma</code></td>\n    </tr>\n    <tr>\n      <td><code>Cakm</code></td>\n    </tr>\n    <tr>\n      <td><code>Cham</code></td>\n      <td><code>Cham</code></td>\n    </tr>\n    <tr>\n      <td><code>Chorasmian</code></td>\n      <td rowspan=\"2\"><code>Chorasmian</code></td>\n    </tr>\n    <tr>\n      <td><code>Chrs</code></td>\n    </tr>\n    <tr>\n      <td><code>Cherokee</code></td>\n      <td rowspan=\"2\"><code>Cherokee</code></td>\n    </tr>\n    <tr>\n      <td><code>Cher</code></td>\n    </tr>\n    <tr>\n      <td><code>Common</code></td>\n      <td rowspan=\"2\"><code>Common</code></td>\n    </tr>\n    <tr>\n      <td><code>Zyyy</code></td>\n    </tr>\n    <tr>\n      <td><code>Coptic</code></td>\n      <td rowspan=\"3\"><code>Coptic</code></td>\n    </tr>\n    <tr>\n      <td><code>Copt</code></td>\n    </tr>\n    <tr>\n      <td><code>Qaac</code></td>\n    </tr>\n    <tr>\n      <td><code>Cuneiform</code></td>\n      <td rowspan=\"2\"><code>Cuneiform</code></td>\n    </tr>\n    <tr>\n      <td><code>Xsux</code></td>\n    </tr>\n    <tr>\n      <td><code>Cypriot</code></td>\n      <td rowspan=\"2\"><code>Cypriot</code></td>\n    </tr>\n    <tr>\n      <td><code>Cprt</code></td>\n    </tr>\n    <tr>\n      <td><code>Cyrillic</code></td>\n      <td rowspan=\"2\"><code>Cyrillic</code></td>\n    </tr>\n    <tr>\n      <td><code>Cyrl</code></td>\n    </tr>\n    <tr>\n      <td><code>Deseret</code></td>\n      <td rowspan=\"2\"><code>Deseret</code></td>\n    </tr>\n    <tr>\n      <td><code>Dsrt</code></td>\n    </tr>\n    <tr>\n      <td><code>Devanagari</code></td>\n      <td rowspan=\"2\"><code>Devanagari</code></td>\n    </tr>\n    <tr>\n      <td><code>Deva</code></td>\n    </tr>\n    <tr>\n      <td><code>Dives_Akuru</code></td>\n      <td rowspan=\"2\"><code>Dives_Akuru</code></td>\n    </tr>\n    <tr>\n      <td><code>Diak</code></td>\n    </tr>\n    <tr>\n      <td><code>Dogra</code></td>\n      <td rowspan=\"2\"><code>Dogra</code></td>\n    </tr>\n    <tr>\n      <td><code>Dogr</code></td>\n    </tr>\n    <tr>\n      <td><code>Duployan</code></td>\n      <td rowspan=\"2\"><code>Duployan</code></td>\n    </tr>\n    <tr>\n      <td><code>Dupl</code></td>\n    </tr>\n    <tr>\n      <td><code>Egyptian_Hieroglyphs</code></td>\n      <td rowspan=\"2\"><code>Egyptian_Hieroglyphs</code></td>\n    </tr>\n    <tr>\n      <td><code>Egyp</code></td>\n    </tr>\n    <tr>\n      <td><code>Elbasan</code></td>\n      <td rowspan=\"2\"><code>Elbasan</code></td>\n    </tr>\n    <tr>\n      <td><code>Elba</code></td>\n    </tr>\n    <tr>\n      <td><code>Elymaic</code></td>\n      <td rowspan=\"2\"><code>Elymaic</code></td>\n    </tr>\n    <tr>\n      <td><code>Elym</code></td>\n    </tr>\n    <tr>\n      <td><code>Ethiopic</code></td>\n      <td rowspan=\"2\"><code>Ethiopic</code></td>\n    </tr>\n    <tr>\n      <td><code>Ethi</code></td>\n    </tr>\n    <tr>\n      <td><code>Georgian</code></td>\n      <td rowspan=\"2\"><code>Georgian</code></td>\n    </tr>\n    <tr>\n      <td><code>Geor</code></td>\n    </tr>\n    <tr>\n      <td><code>Glagolitic</code></td>\n      <td rowspan=\"2\"><code>Glagolitic</code></td>\n    </tr>\n    <tr>\n      <td><code>Glag</code></td>\n    </tr>\n    <tr>\n      <td><code>Gothic</code></td>\n      <td rowspan=\"2\"><code>Gothic</code></td>\n    </tr>\n    <tr>\n      <td><code>Goth</code></td>\n    </tr>\n    <tr>\n      <td><code>Grantha</code></td>\n      <td rowspan=\"2\"><code>Grantha</code></td>\n    </tr>\n    <tr>\n      <td><code>Gran</code></td>\n    </tr>\n    <tr>\n      <td><code>Greek</code></td>\n      <td rowspan=\"2\"><code>Greek</code></td>\n    </tr>\n    <tr>\n      <td><code>Grek</code></td>\n    </tr>\n    <tr>\n      <td><code>Gujarati</code></td>\n      <td rowspan=\"2\"><code>Gujarati</code></td>\n    </tr>\n    <tr>\n      <td><code>Gujr</code></td>\n    </tr>\n    <tr>\n      <td><code>Gunjala_Gondi</code></td>\n      <td rowspan=\"2\"><code>Gunjala_Gondi</code></td>\n    </tr>\n    <tr>\n      <td><code>Gong</code></td>\n    </tr>\n    <tr>\n      <td><code>Gurmukhi</code></td>\n      <td rowspan=\"2\"><code>Gurmukhi</code></td>\n    </tr>\n    <tr>\n      <td><code>Guru</code></td>\n    </tr>\n    <tr>\n      <td><code>Han</code></td>\n      <td rowspan=\"2\"><code>Han</code></td>\n    </tr>\n    <tr>\n      <td><code>Hani</code></td>\n    </tr>\n    <tr>\n      <td><code>Hangul</code></td>\n      <td rowspan=\"2\"><code>Hangul</code></td>\n    </tr>\n    <tr>\n      <td><code>Hang</code></td>\n    </tr>\n    <tr>\n      <td><code>Hanifi_Rohingya</code></td>\n      <td rowspan=\"2\"><code>Hanifi_Rohingya</code></td>\n    </tr>\n    <tr>\n      <td><code>Rohg</code></td>\n    </tr>\n    <tr>\n      <td><code>Hanunoo</code></td>\n      <td rowspan=\"2\"><code>Hanunoo</code></td>\n    </tr>\n    <tr>\n      <td><code>Hano</code></td>\n    </tr>\n    <tr>\n      <td><code>Hatran</code></td>\n      <td rowspan=\"2\"><code>Hatran</code></td>\n    </tr>\n    <tr>\n      <td><code>Hatr</code></td>\n    </tr>\n    <tr>\n      <td><code>Hebrew</code></td>\n      <td rowspan=\"2\"><code>Hebrew</code></td>\n    </tr>\n    <tr>\n      <td><code>Hebr</code></td>\n    </tr>\n    <tr>\n      <td><code>Hiragana</code></td>\n      <td rowspan=\"2\"><code>Hiragana</code></td>\n    </tr>\n    <tr>\n      <td><code>Hira</code></td>\n    </tr>\n    <tr>\n      <td><code>Imperial_Aramaic</code></td>\n      <td rowspan=\"2\"><code>Imperial_Aramaic</code></td>\n    </tr>\n    <tr>\n      <td><code>Armi</code></td>\n    </tr>\n    <tr>\n      <td><code>Inherited</code></td>\n      <td rowspan=\"3\"><code>Inherited</code></td>\n    </tr>\n    <tr>\n      <td><code>Zinh</code></td>\n    </tr>\n    <tr>\n      <td><code>Qaai</code></td>\n    </tr>\n    <tr>\n      <td><code>Inscriptional_Pahlavi</code></td>\n      <td rowspan=\"2\"><code>Inscriptional_Pahlavi</code></td>\n    </tr>\n    <tr>\n      <td><code>Phli</code></td>\n    </tr>\n    <tr>\n      <td><code>Inscriptional_Parthian</code></td>\n      <td rowspan=\"2\"><code>Inscriptional_Parthian</code></td>\n    </tr>\n    <tr>\n      <td><code>Prti</code></td>\n    </tr>\n    <tr>\n      <td><code>Javanese</code></td>\n      <td rowspan=\"2\"><code>Javanese</code></td>\n    </tr>\n    <tr>\n      <td><code>Java</code></td>\n    </tr>\n    <tr>\n      <td><code>Kaithi</code></td>\n      <td rowspan=\"2\"><code>Kaithi</code></td>\n    </tr>\n    <tr>\n      <td><code>Kthi</code></td>\n    </tr>\n    <tr>\n      <td><code>Kannada</code></td>\n      <td rowspan=\"2\"><code>Kannada</code></td>\n    </tr>\n    <tr>\n      <td><code>Knda</code></td>\n    </tr>\n    <tr>\n      <td><code>Katakana</code></td>\n      <td rowspan=\"2\"><code>Katakana</code></td>\n    </tr>\n    <tr>\n      <td><code>Kana</code></td>\n    </tr>\n    <tr>\n      <td><code>Kayah_Li</code></td>\n      <td rowspan=\"2\"><code>Kayah_Li</code></td>\n    </tr>\n    <tr>\n      <td><code>Kali</code></td>\n    </tr>\n    <tr>\n      <td><code>Kharoshthi</code></td>\n      <td rowspan=\"2\"><code>Kharoshthi</code></td>\n    </tr>\n    <tr>\n      <td><code>Khar</code></td>\n    </tr>\n    <tr>\n      <td><code>Khitan_Small_Script</code></td>\n      <td rowspan=\"2\"><code>Khitan_Small_Script</code></td>\n    </tr>\n    <tr>\n      <td><code>Kits</code></td>\n    </tr>\n    <tr>\n      <td><code>Khmer</code></td>\n      <td rowspan=\"2\"><code>Khmer</code></td>\n    </tr>\n    <tr>\n      <td><code>Khmr</code></td>\n    </tr>\n    <tr>\n      <td><code>Khojki</code></td>\n      <td rowspan=\"2\"><code>Khojki</code></td>\n    </tr>\n    <tr>\n      <td><code>Khoj</code></td>\n    </tr>\n    <tr>\n      <td><code>Khudawadi</code></td>\n      <td rowspan=\"2\"><code>Khudawadi</code></td>\n    </tr>\n    <tr>\n      <td><code>Sind</code></td>\n    </tr>\n    <tr>\n      <td><code>Lao</code></td>\n      <td rowspan=\"2\"><code>Lao</code></td>\n    </tr>\n    <tr>\n      <td><code>Laoo</code></td>\n    </tr>\n    <tr>\n      <td><code>Latin</code></td>\n      <td rowspan=\"2\"><code>Latin</code></td>\n    </tr>\n    <tr>\n      <td><code>Latn</code></td>\n    </tr>\n    <tr>\n      <td><code>Lepcha</code></td>\n      <td rowspan=\"2\"><code>Lepcha</code></td>\n    </tr>\n    <tr>\n      <td><code>Lepc</code></td>\n    </tr>\n    <tr>\n      <td><code>Limbu</code></td>\n      <td rowspan=\"2\"><code>Limbu</code></td>\n    </tr>\n    <tr>\n      <td><code>Limb</code></td>\n    </tr>\n    <tr>\n      <td><code>Linear_A</code></td>\n      <td rowspan=\"2\"><code>Linear_A</code></td>\n    </tr>\n    <tr>\n      <td><code>Lina</code></td>\n    </tr>\n    <tr>\n      <td><code>Linear_B</code></td>\n      <td rowspan=\"2\"><code>Linear_B</code></td>\n    </tr>\n    <tr>\n      <td><code>Linb</code></td>\n    </tr>\n    <tr>\n      <td><code>Lisu</code></td>\n      <td><code>Lisu</code></td>\n    </tr>\n    <tr>\n      <td><code>Lycian</code></td>\n      <td rowspan=\"2\"><code>Lycian</code></td>\n    </tr>\n    <tr>\n      <td><code>Lyci</code></td>\n    </tr>\n    <tr>\n      <td><code>Lydian</code></td>\n      <td rowspan=\"2\"><code>Lydian</code></td>\n    </tr>\n    <tr>\n      <td><code>Lydi</code></td>\n    </tr>\n    <tr>\n      <td><code>Mahajani</code></td>\n      <td rowspan=\"2\"><code>Mahajani</code></td>\n    </tr>\n    <tr>\n      <td><code>Mahj</code></td>\n    </tr>\n    <tr>\n      <td><code>Makasar</code></td>\n      <td rowspan=\"2\"><code>Makasar</code></td>\n    </tr>\n    <tr>\n      <td><code>Maka</code></td>\n    </tr>\n    <tr>\n      <td><code>Malayalam</code></td>\n      <td rowspan=\"2\"><code>Malayalam</code></td>\n    </tr>\n    <tr>\n      <td><code>Mlym</code></td>\n    </tr>\n    <tr>\n      <td><code>Mandaic</code></td>\n      <td rowspan=\"2\"><code>Mandaic</code></td>\n    </tr>\n    <tr>\n      <td><code>Mand</code></td>\n    </tr>\n    <tr>\n      <td><code>Manichaean</code></td>\n      <td rowspan=\"2\"><code>Manichaean</code></td>\n    </tr>\n    <tr>\n      <td><code>Mani</code></td>\n    </tr>\n    <tr>\n      <td><code>Marchen</code></td>\n      <td rowspan=\"2\"><code>Marchen</code></td>\n    </tr>\n    <tr>\n      <td><code>Marc</code></td>\n    </tr>\n    <tr>\n      <td><code>Medefaidrin</code></td>\n      <td rowspan=\"2\"><code>Medefaidrin</code></td>\n    </tr>\n    <tr>\n      <td><code>Medf</code></td>\n    </tr>\n    <tr>\n      <td><code>Masaram_Gondi</code></td>\n      <td rowspan=\"2\"><code>Masaram_Gondi</code></td>\n    </tr>\n    <tr>\n      <td><code>Gonm</code></td>\n    </tr>\n    <tr>\n      <td><code>Meetei_Mayek</code></td>\n      <td rowspan=\"2\"><code>Meetei_Mayek</code></td>\n    </tr>\n    <tr>\n      <td><code>Mtei</code></td>\n    </tr>\n    <tr>\n      <td><code>Mende_Kikakui</code></td>\n      <td rowspan=\"2\"><code>Mende_Kikakui</code></td>\n    </tr>\n    <tr>\n      <td><code>Mend</code></td>\n    </tr>\n    <tr>\n      <td><code>Meroitic_Cursive</code></td>\n      <td rowspan=\"2\"><code>Meroitic_Cursive</code></td>\n    </tr>\n    <tr>\n      <td><code>Merc</code></td>\n    </tr>\n    <tr>\n      <td><code>Meroitic_Hieroglyphs</code></td>\n      <td rowspan=\"2\"><code>Meroitic_Hieroglyphs</code></td>\n    </tr>\n    <tr>\n      <td><code>Mero</code></td>\n    </tr>\n    <tr>\n      <td><code>Miao</code></td>\n      <td rowspan=\"2\"><code>Miao</code></td>\n    </tr>\n    <tr>\n      <td><code>Plrd</code></td>\n    </tr>\n    <tr>\n      <td><code>Modi</code></td>\n      <td><code>Modi</code></td>\n    </tr>\n    <tr>\n      <td><code>Mongolian</code></td>\n      <td rowspan=\"2\"><code>Mongolian</code></td>\n    </tr>\n    <tr>\n      <td><code>Mong</code></td>\n    </tr>\n    <tr>\n      <td><code>Mro</code></td>\n      <td rowspan=\"2\"><code>Mro</code></td>\n    </tr>\n    <tr>\n      <td><code>Mroo</code></td>\n    </tr>\n    <tr>\n      <td><code>Multani</code></td>\n      <td rowspan=\"2\"><code>Multani</code></td>\n    </tr>\n    <tr>\n      <td><code>Mult</code></td>\n    </tr>\n    <tr>\n      <td><code>Myanmar</code></td>\n      <td rowspan=\"2\"><code>Myanmar</code></td>\n    </tr>\n    <tr>\n      <td><code>Mymr</code></td>\n    </tr>\n    <tr>\n      <td><code>Nabataean</code></td>\n      <td rowspan=\"2\"><code>Nabataean</code></td>\n    </tr>\n    <tr>\n      <td><code>Nbat</code></td>\n    </tr>\n    <tr>\n      <td><code>Nandinagari</code></td>\n      <td rowspan=\"2\"><code>Nandinagari</code></td>\n    </tr>\n    <tr>\n      <td><code>Nand</code></td>\n    </tr>\n    <tr>\n      <td><code>New_Tai_Lue</code></td>\n      <td rowspan=\"2\"><code>New_Tai_Lue</code></td>\n    </tr>\n    <tr>\n      <td><code>Talu</code></td>\n    </tr>\n    <tr>\n      <td><code>Newa</code></td>\n      <td><code>Newa</code></td>\n    </tr>\n    <tr>\n      <td><code>Nko</code></td>\n      <td rowspan=\"2\"><code>Nko</code></td>\n    </tr>\n    <tr>\n      <td><code>Nkoo</code></td>\n    </tr>\n    <tr>\n      <td><code>Nushu</code></td>\n      <td rowspan=\"2\"><code>Nushu</code></td>\n    </tr>\n    <tr>\n      <td><code>Nshu</code></td>\n    </tr>\n    <tr>\n      <td><code>Nyiakeng_Puachue_Hmong</code></td>\n      <td rowspan=\"2\"><code>Nyiakeng_Puachue_Hmong</code></td>\n    </tr>\n    <tr>\n      <td><code>Hmnp</code></td>\n    </tr>\n    <tr>\n      <td><code>Ogham</code></td>\n      <td rowspan=\"2\"><code>Ogham</code></td>\n    </tr>\n    <tr>\n      <td><code>Ogam</code></td>\n    </tr>\n    <tr>\n      <td><code>Ol_Chiki</code></td>\n      <td rowspan=\"2\"><code>Ol_Chiki</code></td>\n    </tr>\n    <tr>\n      <td><code>Olck</code></td>\n    </tr>\n    <tr>\n      <td><code>Old_Hungarian</code></td>\n      <td rowspan=\"2\"><code>Old_Hungarian</code></td>\n    </tr>\n    <tr>\n      <td><code>Hung</code></td>\n    </tr>\n    <tr>\n      <td><code>Old_Italic</code></td>\n      <td rowspan=\"2\"><code>Old_Italic</code></td>\n    </tr>\n    <tr>\n      <td><code>Ital</code></td>\n    </tr>\n    <tr>\n      <td><code>Old_North_Arabian</code></td>\n      <td rowspan=\"2\"><code>Old_North_Arabian</code></td>\n    </tr>\n    <tr>\n      <td><code>Narb</code></td>\n    </tr>\n    <tr>\n      <td><code>Old_Permic</code></td>\n      <td rowspan=\"2\"><code>Old_Permic</code></td>\n    </tr>\n    <tr>\n      <td><code>Perm</code></td>\n    </tr>\n    <tr>\n      <td><code>Old_Persian</code></td>\n      <td rowspan=\"2\"><code>Old_Persian</code></td>\n    </tr>\n    <tr>\n      <td><code>Xpeo</code></td>\n    </tr>\n    <tr>\n      <td><code>Old_Sogdian</code></td>\n      <td rowspan=\"2\"><code>Old_Sogdian</code></td>\n    </tr>\n    <tr>\n      <td><code>Sogo</code></td>\n    </tr>\n    <tr>\n      <td><code>Old_South_Arabian</code></td>\n      <td rowspan=\"2\"><code>Old_South_Arabian</code></td>\n    </tr>\n    <tr>\n      <td><code>Sarb</code></td>\n    </tr>\n    <tr>\n      <td><code>Old_Turkic</code></td>\n      <td rowspan=\"2\"><code>Old_Turkic</code></td>\n    </tr>\n    <tr>\n      <td><code>Orkh</code></td>\n    </tr>\n    <tr>\n      <td><code>Oriya</code></td>\n      <td rowspan=\"2\"><code>Oriya</code></td>\n    </tr>\n    <tr>\n      <td><code>Orya</code></td>\n    </tr>\n    <tr>\n      <td><code>Osage</code></td>\n      <td rowspan=\"2\"><code>Osage</code></td>\n    </tr>\n    <tr>\n      <td><code>Osge</code></td>\n    </tr>\n    <tr>\n      <td><code>Osmanya</code></td>\n      <td rowspan=\"2\"><code>Osmanya</code></td>\n    </tr>\n    <tr>\n      <td><code>Osma</code></td>\n    </tr>\n    <tr>\n      <td><code>Pahawh_Hmong</code></td>\n      <td rowspan=\"2\"><code>Pahawh_Hmong</code></td>\n    </tr>\n    <tr>\n      <td><code>Hmng</code></td>\n    </tr>\n    <tr>\n      <td><code>Palmyrene</code></td>\n      <td rowspan=\"2\"><code>Palmyrene</code></td>\n    </tr>\n    <tr>\n      <td><code>Palm</code></td>\n    </tr>\n    <tr>\n      <td><code>Pau_Cin_Hau</code></td>\n      <td rowspan=\"2\"><code>Pau_Cin_Hau</code></td>\n    </tr>\n    <tr>\n      <td><code>Pauc</code></td>\n    </tr>\n    <tr>\n      <td><code>Phags_Pa</code></td>\n      <td rowspan=\"2\"><code>Phags_Pa</code></td>\n    </tr>\n    <tr>\n      <td><code>Phag</code></td>\n    </tr>\n    <tr>\n      <td><code>Phoenician</code></td>\n      <td rowspan=\"2\"><code>Phoenician</code></td>\n    </tr>\n    <tr>\n      <td><code>Phnx</code></td>\n    </tr>\n    <tr>\n      <td><code>Psalter_Pahlavi</code></td>\n      <td rowspan=\"2\"><code>Psalter_Pahlavi</code></td>\n    </tr>\n    <tr>\n      <td><code>Phlp</code></td>\n    </tr>\n    <tr>\n      <td><code>Rejang</code></td>\n      <td rowspan=\"2\"><code>Rejang</code></td>\n    </tr>\n    <tr>\n      <td><code>Rjng</code></td>\n    </tr>\n    <tr>\n      <td><code>Runic</code></td>\n      <td rowspan=\"2\"><code>Runic</code></td>\n    </tr>\n    <tr>\n      <td><code>Runr</code></td>\n    </tr>\n    <tr>\n      <td><code>Samaritan</code></td>\n      <td rowspan=\"2\"><code>Samaritan</code></td>\n    </tr>\n    <tr>\n      <td><code>Samr</code></td>\n    </tr>\n    <tr>\n      <td><code>Saurashtra</code></td>\n      <td rowspan=\"2\"><code>Saurashtra</code></td>\n    </tr>\n    <tr>\n      <td><code>Saur</code></td>\n    </tr>\n    <tr>\n      <td><code>Sharada</code></td>\n      <td rowspan=\"2\"><code>Sharada</code></td>\n    </tr>\n    <tr>\n      <td><code>Shrd</code></td>\n    </tr>\n    <tr>\n      <td><code>Shavian</code></td>\n      <td rowspan=\"2\"><code>Shavian</code></td>\n    </tr>\n    <tr>\n      <td><code>Shaw</code></td>\n    </tr>\n    <tr>\n      <td><code>Siddham</code></td>\n      <td rowspan=\"2\"><code>Siddham</code></td>\n    </tr>\n    <tr>\n      <td><code>Sidd</code></td>\n    </tr>\n    <tr>\n      <td><code>SignWriting</code></td>\n      <td rowspan=\"2\"><code>SignWriting</code></td>\n    </tr>\n    <tr>\n      <td><code>Sgnw</code></td>\n    </tr>\n    <tr>\n      <td><code>Sinhala</code></td>\n      <td rowspan=\"2\"><code>Sinhala</code></td>\n    </tr>\n    <tr>\n      <td><code>Sinh</code></td>\n    </tr>\n    <tr>\n      <td><code>Sogdian</code></td>\n      <td rowspan=\"2\"><code>Sogdian</code></td>\n    </tr>\n    <tr>\n      <td><code>Sogd</code></td>\n    </tr>\n    <tr>\n      <td><code>Sora_Sompeng</code></td>\n      <td rowspan=\"2\"><code>Sora_Sompeng</code></td>\n    </tr>\n    <tr>\n      <td><code>Sora</code></td>\n    </tr>\n    <tr>\n      <td><code>Soyombo</code></td>\n      <td rowspan=\"2\"><code>Soyombo</code></td>\n    </tr>\n    <tr>\n      <td><code>Soyo</code></td>\n    </tr>\n    <tr>\n      <td><code>Sundanese</code></td>\n      <td rowspan=\"2\"><code>Sundanese</code></td>\n    </tr>\n    <tr>\n      <td><code>Sund</code></td>\n    </tr>\n    <tr>\n      <td><code>Syloti_Nagri</code></td>\n      <td rowspan=\"2\"><code>Syloti_Nagri</code></td>\n    </tr>\n    <tr>\n      <td><code>Sylo</code></td>\n    </tr>\n    <tr>\n      <td><code>Syriac</code></td>\n      <td rowspan=\"2\"><code>Syriac</code></td>\n    </tr>\n    <tr>\n      <td><code>Syrc</code></td>\n    </tr>\n    <tr>\n      <td><code>Tagalog</code></td>\n      <td rowspan=\"2\"><code>Tagalog</code></td>\n    </tr>\n    <tr>\n      <td><code>Tglg</code></td>\n    </tr>\n    <tr>\n      <td><code>Tagbanwa</code></td>\n      <td rowspan=\"2\"><code>Tagbanwa</code></td>\n    </tr>\n    <tr>\n      <td><code>Tagb</code></td>\n    </tr>\n    <tr>\n      <td><code>Tai_Le</code></td>\n      <td rowspan=\"2\"><code>Tai_Le</code></td>\n    </tr>\n    <tr>\n      <td><code>Tale</code></td>\n    </tr>\n    <tr>\n      <td><code>Tai_Tham</code></td>\n      <td rowspan=\"2\"><code>Tai_Tham</code></td>\n    </tr>\n    <tr>\n      <td><code>Lana</code></td>\n    </tr>\n    <tr>\n      <td><code>Tai_Viet</code></td>\n      <td rowspan=\"2\"><code>Tai_Viet</code></td>\n    </tr>\n    <tr>\n      <td><code>Tavt</code></td>\n    </tr>\n    <tr>\n      <td><code>Takri</code></td>\n      <td rowspan=\"2\"><code>Takri</code></td>\n    </tr>\n    <tr>\n      <td><code>Takr</code></td>\n    </tr>\n    <tr>\n      <td><code>Tamil</code></td>\n      <td rowspan=\"2\"><code>Tamil</code></td>\n    </tr>\n    <tr>\n      <td><code>Taml</code></td>\n    </tr>\n    <tr>\n      <td><code>Tangut</code></td>\n      <td rowspan=\"2\"><code>Tangut</code></td>\n    </tr>\n    <tr>\n      <td><code>Tang</code></td>\n    </tr>\n    <tr>\n      <td><code>Telugu</code></td>\n      <td rowspan=\"2\"><code>Telugu</code></td>\n    </tr>\n    <tr>\n      <td><code>Telu</code></td>\n    </tr>\n    <tr>\n      <td><code>Thaana</code></td>\n      <td rowspan=\"2\"><code>Thaana</code></td>\n    </tr>\n    <tr>\n      <td><code>Thaa</code></td>\n    </tr>\n    <tr>\n      <td><code>Thai</code></td>\n      <td><code>Thai</code></td>\n    </tr>\n    <tr>\n      <td><code>Tibetan</code></td>\n      <td rowspan=\"2\"><code>Tibetan</code></td>\n    </tr>\n    <tr>\n      <td><code>Tibt</code></td>\n    </tr>\n    <tr>\n      <td><code>Tifinagh</code></td>\n      <td rowspan=\"2\"><code>Tifinagh</code></td>\n    </tr>\n    <tr>\n      <td><code>Tfng</code></td>\n    </tr>\n    <tr>\n      <td><code>Tirhuta</code></td>\n      <td rowspan=\"2\"><code>Tirhuta</code></td>\n    </tr>\n    <tr>\n      <td><code>Tirh</code></td>\n    </tr>\n    <tr>\n      <td><code>Ugaritic</code></td>\n      <td rowspan=\"2\"><code>Ugaritic</code></td>\n    </tr>\n    <tr>\n      <td><code>Ugar</code></td>\n    </tr>\n    <tr>\n      <td><code>Vai</code></td>\n      <td rowspan=\"2\"><code>Vai</code></td>\n    </tr>\n    <tr>\n      <td><code>Vaii</code></td>\n    </tr>\n    <tr>\n      <td><code>Wancho</code></td>\n      <td rowspan=\"2\"><code>Wancho</code></td>\n    </tr>\n    <tr>\n      <td><code>Wcho</code></td>\n    </tr>\n    <tr>\n      <td><code>Warang_Citi</code></td>\n      <td rowspan=\"2\"><code>Warang_Citi</code></td>\n    </tr>\n    <tr>\n      <td><code>Wara</code></td>\n    </tr>\n    <tr>\n      <td><code>Yezidi</code></td>\n      <td rowspan=\"2\"><code>Yezidi</code></td>\n    </tr>\n    <tr>\n      <td><code>Yezi</code></td>\n    </tr>\n    <tr>\n      <td><code>Yi</code></td>\n      <td rowspan=\"2\"><code>Yi</code></td>\n    </tr>\n    <tr>\n      <td><code>Yiii</code></td>\n    </tr>\n    <tr>\n      <td><code>Zanabazar_Square</code></td>\n      <td rowspan=\"2\"><code>Zanabazar_Square</code></td>\n    </tr>\n    <tr>\n      <td><code>Zanb</code></td>\n    </tr>\n  </tbody></table>\n</figure></emu-table></emu-import>\n        </emu-clause>\n      "}, "sec-keyed-collections": {"num": "23", "title": "#sec-keyed-collections Keyed Collections", "html": "<emu-clause id=\"sec-keyed-collections\" oldids=\"sec-keyed-collection\"><span id=\"sec-keyed-collection\"></span>\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-keyed-collections\">#sec-keyed-collections</span> Keyed Collections</h1>\n\n  <div id=\"excluded-sec-map-objects\"><h1><span class=\"secnum\">23.1</span>#sec-map-objects Map Objects</h1>...</div><div id=\"excluded-sec-set-objects\"><h1><span class=\"secnum\">23.2</span>#sec-set-objects Set Objects</h1>...</div><div id=\"excluded-sec-weakmap-objects\"><h1><span class=\"secnum\">23.3</span>#sec-weakmap-objects WeakMap Objects</h1>...</div><div id=\"excluded-sec-weakset-objects\"><h1><span class=\"secnum\">23.4</span>#sec-weakset-objects WeakSet Objects</h1>...</div></emu-clause>\n\n"}, "sec-properties-of-the-bigint-prototype-object": {"num": "20.2.3", "title": "#sec-properties-of-the-bigint-prototype-object Properties of the BigInt Prototype Object", "html": "<emu-clause id=\"sec-properties-of-the-bigint-prototype-object\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-the-bigint-prototype-object\">#sec-properties-of-the-bigint-prototype-object</span> Properties of the BigInt Prototype Object</h1>\n      <p>The BigInt prototype object:</p>\n      <ul>\n        <li>is <dfn>%BigInt.prototype%</dfn>.</li>\n        <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n        <li>is not a BigInt object; it does not have a [[BigIntData]] internal slot.</li>\n        <li>has a [[Prototype]] internal slot whose value is %Object.prototype%.</li>\n      </ul>\n      <p>The abstract operation <dfn id=\"thisbigintvalue\" aoid=\"thisBigIntValue\" oldids=\"sec-thisbigintvalue\"><span id=\"sec-thisbigintvalue\"></span>thisBigIntValue</dfn> takes argument <var>value</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is BigInt, return <var>value</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Object and <var>value</var> has a [[BigIntData]] internal slot, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>.[[BigIntData]]) is BigInt.</li><li>Return <var>value</var>.[[BigIntData]].</li></ol></li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></emu-alg>\n      <p>The phrase &#8220;this BigInt value&#8221; within the specification of a method refers to the result returned by calling the abstract operation <emu-xref href=\"#thisbigintvalue\"><a href=\"#thisbigintvalue\">thisBigIntValue</a></emu-xref> with the <emu-val>this</emu-val> value of the method invocation passed as the argument.</p>\n\n      <div id=\"excluded-sec-bigint.prototype.constructor\"><h1><span class=\"secnum\">20.2.3.1</span>#sec-bigint.prototype.constructor BigInt.prototype.constructor</h1>...</div><div id=\"excluded-sec-bigint.prototype.tolocalestring\"><h1><span class=\"secnum\">20.2.3.2</span>#sec-bigint.prototype.tolocalestring BigInt.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )</h1>...</div><div id=\"excluded-sec-bigint.prototype.tostring\"><h1><span class=\"secnum\">20.2.3.3</span>#sec-bigint.prototype.tostring BigInt.prototype.toString ( [ radix ] )</h1>...</div><div id=\"excluded-sec-bigint.prototype.valueof\"><h1><span class=\"secnum\">20.2.3.4</span>#sec-bigint.prototype.valueof BigInt.prototype.valueOf ( )</h1>...</div><div id=\"excluded-sec-bigint.prototype-@@tostringtag\"><h1><span class=\"secnum\">20.2.3.5</span>#sec-bigint.prototype-@@tostringtag BigInt.prototype [ @@toStringTag ]</h1>...</div></emu-clause>\n  "}, "sec-semantics-static-semantics-assignmenttargettype": {"num": "12.2.1.5", "title": "#sec-semantics-static-semantics-assignmenttargettype Static Semantics: AssignmentTargetType", "html": "<emu-clause oldids=\"sec-semantics-static-semantics-isvalidsimpleassignmenttarget\" id=\"sec-semantics-static-semantics-assignmenttargettype\"><span id=\"sec-semantics-static-semantics-isvalidsimpleassignmenttarget\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-semantics-static-semantics-assignmenttargettype\">#sec-semantics-static-semantics-assignmenttargettype</span> Static Semantics: AssignmentTargetType</h1>\n        <emu-see-also-para op=\"AssignmentTargetType\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"PrimaryExpression\">\n    <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"8cee0c59\"><emu-t>this</emu-t></emu-rhs>\n    <emu-rhs a=\"92e97e03\"><emu-nt><a href=\"#prod-Literal\">Literal</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"1bf32393\"><emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"cd178913\"><emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"242eeccd\"><emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d8ce6db1\"><emu-nt><a href=\"#prod-ClassExpression\">ClassExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"abb7f7f4\"><emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ad589bb4\"><emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"3403ed46\"><emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"31b672e8\"><emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d9922ce8\"><emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Return <emu-const>invalid</emu-const>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PrimaryExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"cab6f5d7\"><emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>expr</var> be CoveredParenthesizedExpression of <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>.</li><li>Return AssignmentTargetType of <var>expr</var>.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-codepointstostring": {"num": "10.1.2", "title": "#sec-codepointstostring Static Semantics: CodePointsToString ( text )", "html": "<emu-clause id=\"sec-codepointstostring\" aoid=\"CodePointsToString\" oldids=\"sec-utf16encode\"><span id=\"sec-utf16encode\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-codepointstostring\">#sec-codepointstostring</span> Static Semantics: CodePointsToString ( <var>text</var> )</h1>\n      <p>The abstract operation CodePointsToString takes argument <var>text</var> (a sequence of Unicode code points). It converts <var>text</var> into a String value, as described in <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>result</var> be the empty String.</li><li>For each code point <var>cp</var> in <var>text</var>, do<ol><li>Set <var>result</var> to the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>result</var> and !&#160;<emu-xref aoid=\"CodePointToUTF16CodeUnits\"><a href=\"#sec-codepointtoutf16codeunits\">CodePointToUTF16CodeUnits</a></emu-xref>(<var>cp</var>).</li></ol></li><li>Return <var>result</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-numeric-types-number-add": {"num": "6.1.6.1.7", "title": "#sec-numeric-types-number-add Number::add ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-number-add\" oldids=\"sec-applying-the-additive-operators-to-numbers\"><span id=\"sec-applying-the-additive-operators-to-numbers\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-add\">#sec-numeric-types-number-add</span> Number::add ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation Number::add takes arguments <var>x</var> (a Number) and <var>y</var> (a Number). It performs addition, producing the sum of <var>x</var> and <var>y</var> as determined using the rules of <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary double-precision arithmetic:</p>\n          <ul>\n            <li>\n              If either operand is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n            </li>\n            <li>\n              The sum of two infinities of opposite sign is <emu-val>NaN</emu-val>.\n            </li>\n            <li>\n              The sum of two infinities of the same sign is the infinity of that sign.\n            </li>\n            <li>\n              The sum of an infinity and a finite value is equal to the infinite operand.\n            </li>\n            <li>\n              The sum of two negative zeroes is <emu-val>-0</emu-val>. The sum of two positive zeroes, or of two zeroes of opposite sign, is <emu-val>+0</emu-val>.\n            </li>\n            <li>\n              The sum of a zero and a nonzero finite value is equal to the nonzero operand.\n            </li>\n            <li>\n              The sum of two nonzero finite values of the same magnitude and opposite sign is <emu-val>+0</emu-val>.\n            </li>\n            <li>\n              In the remaining cases, where neither an infinity, nor a zero, nor <emu-val>NaN</emu-val> is involved, and the operands have the same sign or have different magnitudes, the sum is computed and rounded to the nearest representable value using <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> roundTiesToEven mode. If the magnitude is too large to represent, the operation overflows and the result is then an infinity of appropriate sign. The ECMAScript language requires support of gradual underflow as defined by <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref>.\n            </li>\n          </ul>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>Finite-precision addition is commutative, but not always associative.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-codepointtoutf16codeunits": {"num": "10.1.1", "title": "#sec-codepointtoutf16codeunits Static Semantics: CodePointToUTF16CodeUnits ( cp )", "html": "<emu-clause id=\"sec-codepointtoutf16codeunits\" aoid=\"CodePointToUTF16CodeUnits\" oldids=\"sec-utf16encoding\"><span id=\"sec-utf16encoding\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-codepointtoutf16codeunits\">#sec-codepointtoutf16codeunits</span> Static Semantics: CodePointToUTF16CodeUnits ( <var>cp</var> )</h1>\n      <p>The abstract operation CodePointToUTF16CodeUnits takes argument <var>cp</var> (a numeric code point value). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: 0 &#8804; <var>cp</var> &#8804; 0x10FFFF.</li><li>If <var>cp</var> &#8804; 0xFFFF, return <var>cp</var>.</li><li>Let <var>cu1</var> be <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>((<var>cp</var> - 0x10000) / 0x400) + 0xD800.</li><li>Let <var>cu2</var> be ((<var>cp</var> - 0x10000) <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 0x400) + 0xDC00.</li><li>Return the code unit sequence consisting of <var>cu1</var> followed by <var>cu2</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-enumerableownpropertynames": {"num": "7.3.23", "title": "#sec-enumerableownpropertynames EnumerableOwnPropertyNames ( O, kind )", "html": "<emu-clause id=\"sec-enumerableownpropertynames\" aoid=\"EnumerableOwnPropertyNames\" oldids=\"sec-enumerableownproperties\"><span id=\"sec-enumerableownproperties\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-enumerableownpropertynames\">#sec-enumerableownpropertynames</span> EnumerableOwnPropertyNames ( <var>O</var>, <var>kind</var> )</h1>\n      <p>The abstract operation EnumerableOwnPropertyNames takes arguments <var>O</var> (an Object) and <var>kind</var> (one of <emu-const>key</emu-const>, <emu-const>value</emu-const>, or <emu-const>key+value</emu-const>). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Let <var>ownKeys</var> be ? <var>O</var>.[[OwnPropertyKeys]]().</li><li>Let <var>properties</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>key</var> of <var>ownKeys</var> in <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is String, then<ol><li>Let <var>desc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>key</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val> and <var>desc</var>.[[Enumerable]] is <emu-val>true</emu-val>, then<ol><li>If <var>kind</var> is <emu-const>key</emu-const>, append <var>key</var> to <var>properties</var>.</li><li>Else,<ol><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>key</var>).</li><li>If <var>kind</var> is <emu-const>value</emu-const>, append <var>value</var> to <var>properties</var>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const>.</li><li>Let <var>entry</var> be !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>key</var>, <var>value</var> &#187;).</li><li>Append <var>entry</var> to <var>properties</var>.</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>Return <var>properties</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-listiteratornext-functions": {"num": "7.4.9.1", "title": "#sec-listiteratornext-functions ListIteratorNext Functions", "html": "<emu-clause id=\"sec-listiteratornext-functions\" oldids=\"sec-listiterator-next\"><span id=\"sec-listiterator-next\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-listiteratornext-functions\">#sec-listiteratornext-functions</span> ListIteratorNext Functions</h1>\n        <p>A ListIteratorNext function is an anonymous built-in function. When called with no arguments, it performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> has an [[IteratedList]] internal slot.</li><li>Let <var>list</var> be <var>O</var>.[[IteratedList]].</li><li>Let <var>index</var> be <var>O</var>.[[ListNextIndex]].</li><li>Let <var>len</var> be the number of elements of <var>list</var>.</li><li>If <var>index</var> &#8805; <var>len</var>, then<ol><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li></ol></li><li>Set <var>O</var>.[[ListNextIndex]] to <var>index</var> + 1.</li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>list</var>[<var>index</var>], <emu-val>false</emu-val>).</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of a ListIteratorNext function is 0.</p>\n      </emu-clause>\n    "}}, "figData": {"table-1": "Table 1", "table-2": "Table 3", "table-3": "Table 4", "table-default-attribute-values": "Table 5", "table-6": "Table 7", "table-15": "Table 16", "table-16": "Table 17", "table-17": "Table 18", "table-18": "Table 19", "table-19": "Table 20", "table-20": "Table 21", "table-27": "Table 28", "table-nonbinary-unicode-properties": "Table 56", "table-binary-unicode-properties": "Table 57", "table-unicode-general-category-values": "Table 58", "table-unicode-script-values": "Table 59", "table-the-typedarray-constructors": "Table 62"}}}