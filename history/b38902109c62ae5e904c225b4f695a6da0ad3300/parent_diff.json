{"from": {"secList": ["sec-internalizejsonproperty"], "secData": {"sec-internalizejsonproperty": {"num": "24.5.1.1", "title": "#sec-internalizejsonproperty Runtime Semantics: InternalizeJSONProperty ( holder, name )", "html": "<emu-clause id=\"sec-internalizejsonproperty\" aoid=\"InternalizeJSONProperty\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-internalizejsonproperty\">#sec-internalizejsonproperty</span> Runtime Semantics: InternalizeJSONProperty ( <var>holder</var>, <var>name</var> )</h1>\n        <p>The abstract operation InternalizeJSONProperty is a recursive abstract operation that takes two parameters: a <var>holder</var> object and the String <var>name</var> of a property in that object. InternalizeJSONProperty uses the value of <var>reviver</var> that was originally passed to the above parse function.</p>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>This algorithm intentionally does not throw an exception if either [[Delete]] or <emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref> return <emu-val>false</emu-val>.</p>\n        </div></emu-note>\n        <emu-alg><ol><li>Let <var>val</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>holder</var>, <var>name</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>val</var>) is Object, then<ol><li>Let <var>isArray</var> be ?&#160;<emu-xref aoid=\"IsArray\"><a href=\"#sec-isarray\">IsArray</a></emu-xref>(<var>val</var>).</li><li>If <var>isArray</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>I</var> be 0.</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>val</var>).</li><li>Repeat, while <var>I</var> &lt; <var>len</var>,<ol><li>Let <var>newElement</var> be ?&#160;<emu-xref aoid=\"InternalizeJSONProperty\"><a href=\"#sec-internalizejsonproperty\">InternalizeJSONProperty</a></emu-xref>(<var>val</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>I</var>)).</li><li>If <var>newElement</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform ? <var>val</var>.[[Delete]](! <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>I</var>)).</li></ol></li><li>Else,<ol><li>Perform ?&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>val</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>I</var>), <var>newElement</var>).</li><li>NOTE: This algorithm intentionally does not throw an exception if <emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref> returns <emu-val>false</emu-val>.</li></ol></li><li>Set <var>I</var> to <var>I</var> + 1.</li></ol></li></ol></li><li>Else,<ol><li>Let <var>keys</var> be ?&#160;<emu-xref aoid=\"EnumerableOwnPropertyNames\"><a href=\"#sec-enumerableownpropertynames\">EnumerableOwnPropertyNames</a></emu-xref>(<var>val</var>, <emu-const>key</emu-const>).</li><li>For each String <var>P</var> in <var>keys</var>, do<ol><li>Let <var>newElement</var> be ?&#160;<emu-xref aoid=\"InternalizeJSONProperty\"><a href=\"#sec-internalizejsonproperty\">InternalizeJSONProperty</a></emu-xref>(<var>val</var>, <var>P</var>).</li><li>If <var>newElement</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform ? <var>val</var>.[[Delete]](<var>P</var>).</li></ol></li><li>Else,<ol><li>Perform ?&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>val</var>, <var>P</var>, <var>newElement</var>).</li></ol></li></ol></li></ol></li></ol></li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>reviver</var>, <var>holder</var>, &#171; <var>name</var>, <var>val</var> &#187;).</li></ol></emu-alg>\n        <p>It is not permitted for a conforming implementation of <code>JSON.parse</code> to extend the JSON grammars. If an implementation wishes to support a modified or extended JSON interchange format it must do so by defining a different parse function.</p>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>In the case where there are duplicate name Strings within an object, lexically preceding values for the same key shall be overwritten.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}}, "figData": {}}, "to": {"secList": ["sec-internalizejsonproperty"], "secData": {"sec-internalizejsonproperty": {"num": "24.5.1.1", "title": "#sec-internalizejsonproperty Runtime Semantics: InternalizeJSONProperty ( holder, name )", "html": "<emu-clause id=\"sec-internalizejsonproperty\" aoid=\"InternalizeJSONProperty\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-internalizejsonproperty\">#sec-internalizejsonproperty</span> Runtime Semantics: InternalizeJSONProperty ( <var>holder</var>, <var>name</var> )</h1>\n        <p>The abstract operation InternalizeJSONProperty is a recursive abstract operation that takes two parameters: a <var>holder</var> object and the String <var>name</var> of a property in that object. InternalizeJSONProperty uses the value of <var>reviver</var> that was originally passed to the above parse function.</p>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>This algorithm intentionally does not throw an exception if either [[Delete]] or <emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref> return <emu-val>false</emu-val>.</p>\n        </div></emu-note>\n        <emu-alg><ol><li>Let <var>val</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>holder</var>, <var>name</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>val</var>) is Object, then<ol><li>Let <var>isArray</var> be ?&#160;<emu-xref aoid=\"IsArray\"><a href=\"#sec-isarray\">IsArray</a></emu-xref>(<var>val</var>).</li><li>If <var>isArray</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>I</var> be 0.</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>val</var>).</li><li>Repeat, while <var>I</var> &lt; <var>len</var>,<ol><li>Let <var>newElement</var> be ?&#160;<emu-xref aoid=\"InternalizeJSONProperty\"><a href=\"#sec-internalizejsonproperty\">InternalizeJSONProperty</a></emu-xref>(<var>val</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>I</var>)).</li><li>If <var>newElement</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform ? <var>val</var>.[[Delete]](! <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>I</var>)).</li></ol></li><li>Else,<ol><li>Perform ?&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>val</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>I</var>), <var>newElement</var>).</li></ol></li><li>Set <var>I</var> to <var>I</var> + 1.</li></ol></li></ol></li><li>Else,<ol><li>Let <var>keys</var> be ?&#160;<emu-xref aoid=\"EnumerableOwnPropertyNames\"><a href=\"#sec-enumerableownpropertynames\">EnumerableOwnPropertyNames</a></emu-xref>(<var>val</var>, <emu-const>key</emu-const>).</li><li>For each String <var>P</var> in <var>keys</var>, do<ol><li>Let <var>newElement</var> be ?&#160;<emu-xref aoid=\"InternalizeJSONProperty\"><a href=\"#sec-internalizejsonproperty\">InternalizeJSONProperty</a></emu-xref>(<var>val</var>, <var>P</var>).</li><li>If <var>newElement</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform ? <var>val</var>.[[Delete]](<var>P</var>).</li></ol></li><li>Else,<ol><li>Perform ?&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>val</var>, <var>P</var>, <var>newElement</var>).</li></ol></li></ol></li></ol></li></ol></li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>reviver</var>, <var>holder</var>, &#171; <var>name</var>, <var>val</var> &#187;).</li></ol></emu-alg>\n        <p>It is not permitted for a conforming implementation of <code>JSON.parse</code> to extend the JSON grammars. If an implementation wishes to support a modified or extended JSON interchange format it must do so by defining a different parse function.</p>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>In the case where there are duplicate name Strings within an object, lexically preceding values for the same key shall be overwritten.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}}, "figData": {}}}