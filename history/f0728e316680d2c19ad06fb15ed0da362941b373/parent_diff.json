{"from": {"secList": ["sec-for-in-and-for-of-statements", "sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset", "sec-for-in-and-for-of-statements-runtime-semantics-bindinginitialization"], "secData": {"sec-for-in-and-for-of-statements": {"num": "13.7.5", "title": "#sec-for-in-and-for-of-statements The for-in, for-of, and for-await-of Statements", "html": "<emu-clause id=\"sec-for-in-and-for-of-statements\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-for-in-and-for-of-statements\">#sec-for-in-and-for-of-statements</span> The <code>for</code>-<code>in</code>, <code>for</code>-<code>of</code>, and <code>for</code>-<code>await</code>-<code>of</code> Statements</h1>\n\n      <div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-early-errors\"><h1><span class=\"secnum\">13.7.5.1</span>#sec-for-in-and-for-of-statements-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-boundnames\"><h1><span class=\"secnum\">13.7.5.2</span>#sec-for-in-and-for-of-statements-static-semantics-boundnames Static Semantics: BoundNames</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels\"><h1><span class=\"secnum\">13.7.5.3</span>#sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget\"><h1><span class=\"secnum\">13.7.5.4</span>#sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget\"><h1><span class=\"secnum\">13.7.5.5</span>#sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-isdestructuring\"><h1><span class=\"secnum\">13.7.5.6</span>#sec-for-in-and-for-of-statements-static-semantics-isdestructuring Static Semantics: IsDestructuring</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-vardeclarednames\"><h1><span class=\"secnum\">13.7.5.7</span>#sec-for-in-and-for-of-statements-static-semantics-vardeclarednames Static Semantics: VarDeclaredNames</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations\"><h1><span class=\"secnum\">13.7.5.8</span>#sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations Static Semantics: VarScopedDeclarations</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-runtime-semantics-bindinginitialization\"><h1><span class=\"secnum\">13.7.5.9</span>#sec-for-in-and-for-of-statements-runtime-semantics-bindinginitialization Runtime Semantics: BindingInitialization</h1>...</div><div id=\"excluded-sec-runtime-semantics-bindinginstantiation\"><h1><span class=\"secnum\">13.7.5.10</span>#sec-runtime-semantics-bindinginstantiation Runtime Semantics: BindingInstantiation</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation\"><h1><span class=\"secnum\">13.7.5.11</span>#sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation Runtime Semantics: LabelledEvaluation</h1>...</div><div id=\"excluded-sec-runtime-semantics-forinofheadevaluation\"><h1><span class=\"secnum\">13.7.5.12</span>#sec-runtime-semantics-forinofheadevaluation ForIn/OfHeadEvaluation ( uninitializedBoundNames, expr, iterationKind )</h1>...</div><div id=\"excluded-sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\"><h1><span class=\"secnum\">13.7.5.13</span>#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset ForIn/OfBodyEvaluation ( lhs, stmt, iteratorRecord, iterationKind, lhsKind, labelSet [ , iteratorKind ] )</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-runtime-semantics-evaluation\"><h1><span class=\"secnum\">13.7.5.14</span>#sec-for-in-and-for-of-statements-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div><div id=\"excluded-sec-enumerate-object-properties\"><h1><span class=\"secnum\">13.7.5.15</span>#sec-enumerate-object-properties EnumerateObjectProperties ( O )</h1>...</div><div id=\"excluded-sec-for-in-iterator-objects\"><h1><span class=\"secnum\">13.7.5.16</span>#sec-for-in-iterator-objects For-In Iterator Objects</h1>...</div></emu-clause>\n  "}, "sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset": {"num": "13.7.5.13", "title": "#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset ForIn/OfBodyEvaluation ( lhs, stmt, iteratorRecord, iterationKind, lhsKind, labelSet [ , iteratorKind ] )", "html": "<emu-clause id=\"sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\" aoid=\"ForIn/OfBodyEvaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset</span> ForIn/OfBodyEvaluation ( <var>lhs</var>, <var>stmt</var>, <var>iteratorRecord</var>, <var>iterationKind</var>, <var>lhsKind</var>, <var>labelSet</var> [ , <var>iteratorKind</var> ] )</h1>\n        <p>The abstract operation ForIn/OfBodyEvaluation takes arguments <var>lhs</var>, <var>stmt</var>, <var>iteratorRecord</var>, <var>iterationKind</var>, <var>lhsKind</var> (either <emu-const>assignment</emu-const>, <emu-const>varBinding</emu-const> or <emu-const>lexicalBinding</emu-const>), and <var>labelSet</var> and optional argument <var>iteratorKind</var> (either <emu-const>sync</emu-const> or <emu-const>async</emu-const>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>iteratorKind</var> is not present, set <var>iteratorKind</var> to <emu-const>sync</emu-const>.</li><li>Let <var>oldEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>V</var> be <emu-val>undefined</emu-val>.</li><li>Let <var>destructuring</var> be IsDestructuring of <var>lhs</var>.</li><li>If <var>destructuring</var> is <emu-val>true</emu-val> and if <var>lhsKind</var> is <emu-const>assignment</emu-const>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhs</var> is a <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li>Let <var>assignmentPattern</var> be the <emu-nt><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <var>lhs</var>.</li></ol></li><li>Repeat,<ol><li>Let <var>nextResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>iteratorRecord</var>.[[NextMethod]], <var>iteratorRecord</var>.[[Iterator]]).</li><li>If <var>iteratorKind</var> is <emu-const>async</emu-const>, set <var>nextResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>nextResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nextResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>nextResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>V</var>).</li><li>Let <var>nextValue</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>nextResult</var>).</li><li>If <var>lhsKind</var> is either <emu-const>assignment</emu-const> or <emu-const>varBinding</emu-const>, then<ol><li>If <var>destructuring</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>lhsRef</var> be the result of evaluating <var>lhs</var>. (It may be evaluated repeatedly.)</li></ol></li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhsKind</var> is <emu-const>lexicalBinding</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhs</var> is a <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>.</li><li>Let <var>iterationEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>Perform BindingInstantiation for <var>lhs</var> passing <var>iterationEnv</var> as the argument.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>iterationEnv</var>.</li><li>If <var>destructuring</var> is <emu-val>false</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhs</var> binds a single name.</li><li>Let <var>lhsName</var> be the sole element of BoundNames of <var>lhs</var>.</li><li>Let <var>lhsRef</var> be !&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>lhsName</var>).</li></ol></li></ol></li><li>If <var>destructuring</var> is <emu-val>false</emu-val>, then<ol><li>If <var>lhsRef</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Let <var>status</var> be <var>lhsRef</var>.</li></ol></li><li>Else if <var>lhsKind</var> is <emu-const>lexicalBinding</emu-const>, then<ol><li>Let <var>status</var> be <emu-xref aoid=\"InitializeReferencedBinding\"><a href=\"#sec-initializereferencedbinding\">InitializeReferencedBinding</a></emu-xref>(<var>lhsRef</var>, <var>nextValue</var>).</li></ol></li><li>Else,<ol><li>Let <var>status</var> be <emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhsRef</var>, <var>nextValue</var>).</li></ol></li></ol></li><li>Else,<ol><li>If <var>lhsKind</var> is <emu-const>assignment</emu-const>, then<ol><li>Let <var>status</var> be DestructuringAssignmentEvaluation of <var>assignmentPattern</var> with argument <var>nextValue</var>.</li></ol></li><li>Else if <var>lhsKind</var> is <emu-const>varBinding</emu-const>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhs</var> is a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>.</li><li>Let <var>status</var> be BindingInitialization of <var>lhs</var> with arguments <var>nextValue</var> and <emu-val>undefined</emu-val>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhsKind</var> is <emu-const>lexicalBinding</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhs</var> is a <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>.</li><li>Let <var>status</var> be BindingInitialization of <var>lhs</var> with arguments <var>nextValue</var> and <var>iterationEnv</var>.</li></ol></li></ol></li><li>If <var>status</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>If <var>iteratorKind</var> is <emu-const>async</emu-const>, return ?&#160;<emu-xref aoid=\"AsyncIteratorClose\"><a href=\"#sec-asynciteratorclose\">AsyncIteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>status</var>).</li><li>If <var>iterationKind</var> is <emu-const>enumerate</emu-const>, then<ol><li>Return <var>status</var>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iterationKind</var> is <emu-const>iterate</emu-const>.</li><li>Return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>status</var>).</li></ol></li></ol></li><li>Let <var>result</var> be the result of evaluating <var>stmt</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>If <emu-xref aoid=\"LoopContinues\"><a href=\"#sec-loopcontinues\">LoopContinues</a></emu-xref>(<var>result</var>, <var>labelSet</var>) is <emu-val>false</emu-val>, then<ol><li>If <var>iterationKind</var> is <emu-const>enumerate</emu-const>, then<ol><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<emu-xref aoid=\"UpdateEmpty\"><a href=\"#sec-updateempty\">UpdateEmpty</a></emu-xref>(<var>result</var>, <var>V</var>)).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iterationKind</var> is <emu-const>iterate</emu-const>.</li><li>Set <var>status</var> to <emu-xref aoid=\"UpdateEmpty\"><a href=\"#sec-updateempty\">UpdateEmpty</a></emu-xref>(<var>result</var>, <var>V</var>).</li><li>If <var>iteratorKind</var> is <emu-const>async</emu-const>, return ?&#160;<emu-xref aoid=\"AsyncIteratorClose\"><a href=\"#sec-asynciteratorclose\">AsyncIteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>status</var>).</li><li>Return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>status</var>).</li></ol></li></ol></li><li>If <var>result</var>.[[Value]] is not <emu-const>empty</emu-const>, set <var>V</var> to <var>result</var>.[[Value]].</li></ol></li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-for-in-and-for-of-statements-runtime-semantics-bindinginitialization": {"num": "13.7.5.9", "title": "#sec-for-in-and-for-of-statements-runtime-semantics-bindinginitialization Runtime Semantics: BindingInitialization", "html": "<emu-clause id=\"sec-for-in-and-for-of-statements-runtime-semantics-bindinginitialization\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-for-in-and-for-of-statements-runtime-semantics-bindinginitialization\">#sec-for-in-and-for-of-statements-runtime-semantics-bindinginitialization</span> Runtime Semantics: BindingInitialization</h1>\n        <p>With parameters <var>value</var> and <var>environment</var>.</p>\n        <emu-see-also-para op=\"BindingInitialization\"></emu-see-also-para>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><emu-val>undefined</emu-val> is passed for <var>environment</var> to indicate that a <emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref> operation should be used to assign the initialization value. This is the case for <code>var</code> statements and the formal parameter lists of some non-strict functions (see <emu-xref href=\"#sec-functiondeclarationinstantiation\"><a href=\"#sec-functiondeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-functiondeclarationinstantiation\">#sec-functiondeclarationinstantiation</a></emu-xref>). In those cases a lexical binding is hoisted and preinitialized prior to evaluation of its initializer.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"ForDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"d32d6fbc\">\n        <emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the result of performing BindingInitialization for <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> passing <var>value</var> and <var>environment</var> as the arguments.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-for-in-and-for-of-statements", "sec-runtime-semantics-fordeclarationbindinginitialization", "sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset"], "secData": {"sec-for-in-and-for-of-statements": {"num": "13.7.5", "title": "#sec-for-in-and-for-of-statements The for-in, for-of, and for-await-of Statements", "html": "<emu-clause id=\"sec-for-in-and-for-of-statements\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-for-in-and-for-of-statements\">#sec-for-in-and-for-of-statements</span> The <code>for</code>-<code>in</code>, <code>for</code>-<code>of</code>, and <code>for</code>-<code>await</code>-<code>of</code> Statements</h1>\n\n      <div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-early-errors\"><h1><span class=\"secnum\">13.7.5.1</span>#sec-for-in-and-for-of-statements-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-boundnames\"><h1><span class=\"secnum\">13.7.5.2</span>#sec-for-in-and-for-of-statements-static-semantics-boundnames Static Semantics: BoundNames</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels\"><h1><span class=\"secnum\">13.7.5.3</span>#sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget\"><h1><span class=\"secnum\">13.7.5.4</span>#sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget\"><h1><span class=\"secnum\">13.7.5.5</span>#sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-isdestructuring\"><h1><span class=\"secnum\">13.7.5.6</span>#sec-for-in-and-for-of-statements-static-semantics-isdestructuring Static Semantics: IsDestructuring</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-vardeclarednames\"><h1><span class=\"secnum\">13.7.5.7</span>#sec-for-in-and-for-of-statements-static-semantics-vardeclarednames Static Semantics: VarDeclaredNames</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations\"><h1><span class=\"secnum\">13.7.5.8</span>#sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations Static Semantics: VarScopedDeclarations</h1>...</div><div id=\"excluded-sec-runtime-semantics-fordeclarationbindinginitialization\"><h1><span class=\"secnum\">13.7.5.9</span>#sec-runtime-semantics-fordeclarationbindinginitialization Runtime Semantics: ForDeclarationBindingInitialization</h1>...</div><div id=\"excluded-sec-runtime-semantics-bindinginstantiation\"><h1><span class=\"secnum\">13.7.5.10</span>#sec-runtime-semantics-bindinginstantiation Runtime Semantics: BindingInstantiation</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation\"><h1><span class=\"secnum\">13.7.5.11</span>#sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation Runtime Semantics: LabelledEvaluation</h1>...</div><div id=\"excluded-sec-runtime-semantics-forinofheadevaluation\"><h1><span class=\"secnum\">13.7.5.12</span>#sec-runtime-semantics-forinofheadevaluation ForIn/OfHeadEvaluation ( uninitializedBoundNames, expr, iterationKind )</h1>...</div><div id=\"excluded-sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\"><h1><span class=\"secnum\">13.7.5.13</span>#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset ForIn/OfBodyEvaluation ( lhs, stmt, iteratorRecord, iterationKind, lhsKind, labelSet [ , iteratorKind ] )</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-runtime-semantics-evaluation\"><h1><span class=\"secnum\">13.7.5.14</span>#sec-for-in-and-for-of-statements-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div><div id=\"excluded-sec-enumerate-object-properties\"><h1><span class=\"secnum\">13.7.5.15</span>#sec-enumerate-object-properties EnumerateObjectProperties ( O )</h1>...</div><div id=\"excluded-sec-for-in-iterator-objects\"><h1><span class=\"secnum\">13.7.5.16</span>#sec-for-in-iterator-objects For-In Iterator Objects</h1>...</div></emu-clause>\n  "}, "sec-runtime-semantics-fordeclarationbindinginitialization": {"num": "13.7.5.9", "title": "#sec-runtime-semantics-fordeclarationbindinginitialization Runtime Semantics: ForDeclarationBindingInitialization", "html": "<emu-clause id=\"sec-runtime-semantics-fordeclarationbindinginitialization\" oldids=\"sec-for-in-and-for-of-statements-runtime-semantics-bindinginitialization\" type=\"sdo\" aoid=\"ForDeclarationBindingInitialization\"><span id=\"sec-for-in-and-for-of-statements-runtime-semantics-bindinginitialization\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-fordeclarationbindinginitialization\">#sec-runtime-semantics-fordeclarationbindinginitialization</span> Runtime Semantics: ForDeclarationBindingInitialization</h1>\n        <p>With parameters <var>value</var> and <var>environment</var>.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><emu-val>undefined</emu-val> is passed for <var>environment</var> to indicate that a <emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref> operation should be used to assign the initialization value. This is the case for <code>var</code> statements and the formal parameter lists of some non-strict functions (see <emu-xref href=\"#sec-functiondeclarationinstantiation\"><a href=\"#sec-functiondeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-functiondeclarationinstantiation\">#sec-functiondeclarationinstantiation</a></emu-xref>). In those cases a lexical binding is hoisted and preinitialized prior to evaluation of its initializer.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"ForDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"d32d6fbc\">\n        <emu-nt><a href=\"#prod-LetOrConst\">LetOrConst</a></emu-nt>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the result of performing BindingInitialization for <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> passing <var>value</var> and <var>environment</var> as the arguments.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset": {"num": "13.7.5.13", "title": "#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset ForIn/OfBodyEvaluation ( lhs, stmt, iteratorRecord, iterationKind, lhsKind, labelSet [ , iteratorKind ] )", "html": "<emu-clause id=\"sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\" aoid=\"ForIn/OfBodyEvaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset</span> ForIn/OfBodyEvaluation ( <var>lhs</var>, <var>stmt</var>, <var>iteratorRecord</var>, <var>iterationKind</var>, <var>lhsKind</var>, <var>labelSet</var> [ , <var>iteratorKind</var> ] )</h1>\n        <p>The abstract operation ForIn/OfBodyEvaluation takes arguments <var>lhs</var>, <var>stmt</var>, <var>iteratorRecord</var>, <var>iterationKind</var>, <var>lhsKind</var> (either <emu-const>assignment</emu-const>, <emu-const>varBinding</emu-const> or <emu-const>lexicalBinding</emu-const>), and <var>labelSet</var> and optional argument <var>iteratorKind</var> (either <emu-const>sync</emu-const> or <emu-const>async</emu-const>). It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <var>iteratorKind</var> is not present, set <var>iteratorKind</var> to <emu-const>sync</emu-const>.</li><li>Let <var>oldEnv</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>V</var> be <emu-val>undefined</emu-val>.</li><li>Let <var>destructuring</var> be IsDestructuring of <var>lhs</var>.</li><li>If <var>destructuring</var> is <emu-val>true</emu-val> and if <var>lhsKind</var> is <emu-const>assignment</emu-const>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhs</var> is a <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li>Let <var>assignmentPattern</var> be the <emu-nt><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <var>lhs</var>.</li></ol></li><li>Repeat,<ol><li>Let <var>nextResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>iteratorRecord</var>.[[NextMethod]], <var>iteratorRecord</var>.[[Iterator]]).</li><li>If <var>iteratorKind</var> is <emu-const>async</emu-const>, set <var>nextResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>nextResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nextResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>nextResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>V</var>).</li><li>Let <var>nextValue</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>nextResult</var>).</li><li>If <var>lhsKind</var> is either <emu-const>assignment</emu-const> or <emu-const>varBinding</emu-const>, then<ol><li>If <var>destructuring</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>lhsRef</var> be the result of evaluating <var>lhs</var>. (It may be evaluated repeatedly.)</li></ol></li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhsKind</var> is <emu-const>lexicalBinding</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhs</var> is a <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>.</li><li>Let <var>iterationEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>Perform BindingInstantiation for <var>lhs</var> passing <var>iterationEnv</var> as the argument.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>iterationEnv</var>.</li><li>If <var>destructuring</var> is <emu-val>false</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhs</var> binds a single name.</li><li>Let <var>lhsName</var> be the sole element of BoundNames of <var>lhs</var>.</li><li>Let <var>lhsRef</var> be !&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>lhsName</var>).</li></ol></li></ol></li><li>If <var>destructuring</var> is <emu-val>false</emu-val>, then<ol><li>If <var>lhsRef</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Let <var>status</var> be <var>lhsRef</var>.</li></ol></li><li>Else if <var>lhsKind</var> is <emu-const>lexicalBinding</emu-const>, then<ol><li>Let <var>status</var> be <emu-xref aoid=\"InitializeReferencedBinding\"><a href=\"#sec-initializereferencedbinding\">InitializeReferencedBinding</a></emu-xref>(<var>lhsRef</var>, <var>nextValue</var>).</li></ol></li><li>Else,<ol><li>Let <var>status</var> be <emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhsRef</var>, <var>nextValue</var>).</li></ol></li></ol></li><li>Else,<ol><li>If <var>lhsKind</var> is <emu-const>assignment</emu-const>, then<ol><li>Let <var>status</var> be DestructuringAssignmentEvaluation of <var>assignmentPattern</var> with argument <var>nextValue</var>.</li></ol></li><li>Else if <var>lhsKind</var> is <emu-const>varBinding</emu-const>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhs</var> is a <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>.</li><li>Let <var>status</var> be BindingInitialization of <var>lhs</var> with arguments <var>nextValue</var> and <emu-val>undefined</emu-val>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhsKind</var> is <emu-const>lexicalBinding</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>lhs</var> is a <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>.</li><li>Let <var>status</var> be <emu-xref aoid=\"ForDeclarationBindingInitialization\"><a href=\"#sec-runtime-semantics-fordeclarationbindinginitialization\">ForDeclarationBindingInitialization</a></emu-xref> of <var>lhs</var> with arguments <var>nextValue</var> and <var>iterationEnv</var>.</li></ol></li></ol></li><li>If <var>status</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>If <var>iteratorKind</var> is <emu-const>async</emu-const>, return ?&#160;<emu-xref aoid=\"AsyncIteratorClose\"><a href=\"#sec-asynciteratorclose\">AsyncIteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>status</var>).</li><li>If <var>iterationKind</var> is <emu-const>enumerate</emu-const>, then<ol><li>Return <var>status</var>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iterationKind</var> is <emu-const>iterate</emu-const>.</li><li>Return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>status</var>).</li></ol></li></ol></li><li>Let <var>result</var> be the result of evaluating <var>stmt</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>If <emu-xref aoid=\"LoopContinues\"><a href=\"#sec-loopcontinues\">LoopContinues</a></emu-xref>(<var>result</var>, <var>labelSet</var>) is <emu-val>false</emu-val>, then<ol><li>If <var>iterationKind</var> is <emu-const>enumerate</emu-const>, then<ol><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<emu-xref aoid=\"UpdateEmpty\"><a href=\"#sec-updateempty\">UpdateEmpty</a></emu-xref>(<var>result</var>, <var>V</var>)).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iterationKind</var> is <emu-const>iterate</emu-const>.</li><li>Set <var>status</var> to <emu-xref aoid=\"UpdateEmpty\"><a href=\"#sec-updateempty\">UpdateEmpty</a></emu-xref>(<var>result</var>, <var>V</var>).</li><li>If <var>iteratorKind</var> is <emu-const>async</emu-const>, return ?&#160;<emu-xref aoid=\"AsyncIteratorClose\"><a href=\"#sec-asynciteratorclose\">AsyncIteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>status</var>).</li><li>Return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>status</var>).</li></ol></li></ol></li><li>If <var>result</var>.[[Value]] is not <emu-const>empty</emu-const>, set <var>V</var> to <var>result</var>.[[Value]].</li></ol></li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {}}}