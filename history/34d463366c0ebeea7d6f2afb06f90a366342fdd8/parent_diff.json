{"from": {"secList": ["sec-toindex"], "secData": {"sec-toindex": {"num": "7.1.22", "title": "#sec-toindex ToIndex ( value )", "html": "<emu-clause id=\"sec-toindex\" type=\"abstract operation\" aoid=\"ToIndex\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-toindex\">#sec-toindex</span> ToIndex ( <var>value</var> )</h1>\n      <p>The abstract operation ToIndex takes argument <var>value</var>. It returns <var>value</var> argument converted to a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> if it is a valid <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> value. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>value</var> is <emu-val>undefined</emu-val>, then<ol><li>Return 0.</li></ol></li><li>Else,<ol><li>Let <var>integerIndex</var> be <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(? <emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>value</var>)).</li><li>If <var>integerIndex</var> &lt; <emu-val>+0</emu-val><sub>&#120125;</sub>, throw a <emu-val>RangeError</emu-val> exception.</li><li>Let <var>index</var> be !&#160;<emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(<var>integerIndex</var>).</li><li>If !&#160;<emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>integerIndex</var>, <var>index</var>) is <emu-val>false</emu-val>, throw a <emu-val>RangeError</emu-val> exception.</li><li>Return <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>index</var>).</li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}}, "figData": {}}, "to": {"secList": ["sec-toindex"], "secData": {"sec-toindex": {"num": "7.1.22", "title": "#sec-toindex ToIndex ( value )", "html": "<emu-clause id=\"sec-toindex\" type=\"abstract operation\" aoid=\"ToIndex\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-toindex\">#sec-toindex</span> ToIndex ( <var>value</var> )</h1>\n      <p>The abstract operation ToIndex takes argument <var>value</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It converts <var>value</var> to a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> if the corresponding decimal representation, as a String, is an <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>value</var> is <emu-val>undefined</emu-val>, then<ol><li>Return 0.</li></ol></li><li>Else,<ol><li>Let <var>integer</var> be ?&#160;<emu-xref aoid=\"ToIntegerOrInfinity\"><a href=\"#sec-tointegerorinfinity\">ToIntegerOrInfinity</a></emu-xref>(<var>value</var>).</li><li>Let <var>clamped</var> be !&#160;<emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>integer</var>)).</li><li>If !&#160;<emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>integer</var>), <var>clamped</var>) is <emu-val>false</emu-val>, throw a <emu-val>RangeError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: 0 &#8804; <var>integer</var> &#8804; 2<sup>53</sup> - 1.</li><li>Return <var>integer</var>.</li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}}, "figData": {}}}