{"from": {"secList": ["sec-numeric-types", "sec-testing-and-comparison-operations", "sec-sortcompare", "sec-islessthan", "sec-relational-operators-runtime-semantics-evaluation"], "secData": {"sec-numeric-types": {"num": "6.1.6", "title": "#sec-numeric-types Numeric Types", "html": "<emu-clause id=\"sec-numeric-types\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types\">#sec-numeric-types</span> Numeric Types</h1>\n      <p>ECMAScript has two built-in numeric types: Number and BigInt. In this specification, every numeric type <var>T</var> contains a multiplicative identity value denoted <var>T</var>::unit. The specification types also have the following <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref>, likewise denoted <var>T</var>::<i>op</i> for a given operation with specification name <i>op</i>. All argument types are <var>T</var>. The \"Result\" column shows the return type, along with an indication if it is possible for some invocations of the operation to return an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</p>\n      <emu-table id=\"table-numeric-type-ops\" caption=\"Numeric Type Operations\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-numeric-type-ops\">#table-numeric-type-ops</span>: Numeric Type Operations</figcaption>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Invocation Synopsis\n            </th>\n            <th>\n              Example source\n            </th>\n            <th>\n              Invoked by the Evaluation semantics of ...\n            </th>\n            <th>\n              Result\n            </th>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::unaryMinus(x)\n            </td>\n            <td>\n              <code>-x</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-unary-minus-operator\" title=\"\"><a href=\"#sec-unary-minus-operator\">Unary <code>-</code> Operator</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::bitwiseNOT(x)\n            </td>\n            <td>\n              <code>~x</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-bitwise-not-operator\" title=\"\"><a href=\"#sec-bitwise-not-operator\">Bitwise NOT Operator ( <code>~</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::exponentiate(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;**&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-exp-operator\" title=\"\"><a href=\"#sec-exp-operator\">Exponentiation Operator</a></emu-xref>\n              and <emu-xref href=\"#sec-math.pow\" title=\"\"><a href=\"#sec-math.pow\">Math.pow ( <var>base</var>, <var>exponent</var> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>, may throw <emu-val>RangeError</emu-val>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::multiply(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;*&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-multiplicative-operators\" title=\"\"><a href=\"#sec-multiplicative-operators\">Multiplicative Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::divide(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;/&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-multiplicative-operators\" title=\"\"><a href=\"#sec-multiplicative-operators\">Multiplicative Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>, may throw <emu-val>RangeError</emu-val>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::remainder(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;%&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-multiplicative-operators\" title=\"\"><a href=\"#sec-multiplicative-operators\">Multiplicative Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>, may throw <emu-val>RangeError</emu-val>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::add(x,&#160;y)\n            </td>\n            <td>\n              <code>x ++</code><br><code>++ x</code><br><code>x&#160;+&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-postfix-increment-operator\" title=\"\"><a href=\"#sec-postfix-increment-operator\">Postfix Increment Operator</a></emu-xref>,\n              <emu-xref href=\"#sec-prefix-increment-operator\" title=\"\"><a href=\"#sec-prefix-increment-operator\">Prefix Increment Operator</a></emu-xref>,\n              and <emu-xref href=\"#sec-addition-operator-plus\" title=\"\"><a href=\"#sec-addition-operator-plus\">The Addition Operator ( <code>+</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::subtract(x,&#160;y)\n            </td>\n            <td>\n              <code>x --</code><br><code>-- x</code><br><code>x&#160;-&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-postfix-decrement-operator\" title=\"\"><a href=\"#sec-postfix-decrement-operator\">Postfix Decrement Operator</a></emu-xref>,\n              <emu-xref href=\"#sec-prefix-decrement-operator\" title=\"\"><a href=\"#sec-prefix-decrement-operator\">Prefix Decrement Operator</a></emu-xref>,\n              and <emu-xref href=\"#sec-subtraction-operator-minus\" title=\"\"><a href=\"#sec-subtraction-operator-minus\">The Subtraction Operator ( <code>-</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::leftShift(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;&lt;&lt;&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-left-shift-operator\" title=\"\"><a href=\"#sec-left-shift-operator\">The Left Shift Operator ( <code>&lt;&lt;</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::signedRightShift(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;&gt;&gt;&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-signed-right-shift-operator\" title=\"\"><a href=\"#sec-signed-right-shift-operator\">The Signed Right Shift Operator ( <code>&gt;&gt;</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::unsignedRightShift(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;&gt;&gt;&gt;&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-unsigned-right-shift-operator\" title=\"\"><a href=\"#sec-unsigned-right-shift-operator\">The Unsigned Right Shift Operator ( <code>&gt;&gt;&gt;</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>, may throw <emu-val>TypeError</emu-val>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::lessThan(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;&lt;&#160;y</code><br><code>x&#160;&gt;&#160;y</code><br><code>x&#160;&lt;=&#160;y</code><br><code>x&#160;&gt;=&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-relational-operators\" title=\"\"><a href=\"#sec-relational-operators\">Relational Operators</a></emu-xref>,\n              via <emu-xref href=\"#sec-islessthan\" title=\"\"><a href=\"#sec-islessthan\">IsLessThan ( <var>x</var>, <var>y</var> [ , <var>LeftFirst</var> ] )</a></emu-xref>\n            </td>\n            <td>\n              Boolean or <emu-val>undefined</emu-val> (for unordered inputs)\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::equal(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;==&#160;y</code><br><code>x&#160;!=&#160;y</code><br><code>x&#160;===&#160;y</code><br><code>x&#160;!==&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-equality-operators\" title=\"\"><a href=\"#sec-equality-operators\">Equality Operators</a></emu-xref>,\n              via <emu-xref href=\"#sec-isstrictlyequal\" title=\"\"><a href=\"#sec-isstrictlyequal\">IsStrictlyEqual ( <var>x</var>, <var>y</var> )</a></emu-xref>\n            </td>\n            <td>\n              Boolean\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::sameValue(x,&#160;y)\n            </td>\n            <td>\n            </td>\n            <td>\n              Object internal methods,\n              via <emu-xref href=\"#sec-samevalue\" title=\"\"><a href=\"#sec-samevalue\">SameValue ( <var>x</var>, <var>y</var> )</a></emu-xref>,\n              to test exact value equality\n            </td>\n            <td>\n              Boolean\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::sameValueZero(x,&#160;y)\n            </td>\n            <td>\n            </td>\n            <td>\n              Array, Map, and Set methods,\n              via <emu-xref href=\"#sec-samevaluezero\" title=\"\"><a href=\"#sec-samevaluezero\">SameValueZero ( <var>x</var>, <var>y</var> )</a></emu-xref>,\n              to test value equality ignoring differences among members of the zero cohort (i.e., <emu-val>-0</emu-val><sub>&#120125;</sub> and <emu-val>+0</emu-val><sub>&#120125;</sub>)\n            </td>\n            <td>\n              Boolean\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::bitwiseAND(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;&amp;&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-binary-bitwise-operators\" title=\"\"><a href=\"#sec-binary-bitwise-operators\">Binary Bitwise Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::bitwiseXOR(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;^&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-binary-bitwise-operators\" title=\"\"><a href=\"#sec-binary-bitwise-operators\">Binary Bitwise Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::bitwiseOR(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;|&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-binary-bitwise-operators\" title=\"\"><a href=\"#sec-binary-bitwise-operators\">Binary Bitwise Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::toString(x)\n            </td>\n            <td>\n              <code>String(x)</code>\n            </td>\n            <td>\n              Many expressions and built-in functions, via <emu-xref href=\"#sec-tostring\" title=\"\"><a href=\"#sec-tostring\">ToString ( <var>argument</var> )</a></emu-xref>\n            </td>\n            <td>\n              String\n            </td>\n\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n      <p>The <var>T</var>::unit value and <var>T</var>::<var>op</var> operations are not a part of the ECMAScript language; they are defined here solely to aid the specification of the semantics of the ECMAScript language. Other <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> are defined throughout this specification.</p>\n      <p>Because the numeric types are in general not convertible without loss of precision or truncation, the ECMAScript language provides no implicit conversion among these types. Programmers must explicitly call <code>Number</code> and <code>BigInt</code> functions to convert among types when calling a function which requires another type.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The first and subsequent editions of ECMAScript have provided, for certain operators, implicit numeric conversions that could lose precision or truncate. These legacy implicit conversions are maintained for backward compatibility, but not provided for BigInt in order to minimize opportunity for programmer error, and to leave open the option of generalized <em>value types</em> in a future edition.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-ecmascript-language-types-number-type\"><h1><span class=\"secnum\">6.1.6.1</span>#sec-ecmascript-language-types-number-type The Number Type</h1>...</div><div id=\"excluded-sec-ecmascript-language-types-bigint-type\"><h1><span class=\"secnum\">6.1.6.2</span>#sec-ecmascript-language-types-bigint-type The BigInt Type</h1>...</div></emu-clause>\n\n    "}, "sec-testing-and-comparison-operations": {"num": "7.2", "title": "#sec-testing-and-comparison-operations Testing and Comparison Operations", "html": "<emu-clause id=\"sec-testing-and-comparison-operations\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-testing-and-comparison-operations\">#sec-testing-and-comparison-operations</span> Testing and Comparison Operations</h1>\n\n    <div id=\"excluded-sec-requireobjectcoercible\"><h1><span class=\"secnum\">7.2.1</span>#sec-requireobjectcoercible RequireObjectCoercible ( argument )</h1>...</div><div id=\"excluded-sec-isarray\"><h1><span class=\"secnum\">7.2.2</span>#sec-isarray IsArray ( argument )</h1>...</div><div id=\"excluded-sec-iscallable\"><h1><span class=\"secnum\">7.2.3</span>#sec-iscallable IsCallable ( argument )</h1>...</div><div id=\"excluded-sec-isconstructor\"><h1><span class=\"secnum\">7.2.4</span>#sec-isconstructor IsConstructor ( argument )</h1>...</div><div id=\"excluded-sec-isextensible-o\"><h1><span class=\"secnum\">7.2.5</span>#sec-isextensible-o IsExtensible ( O )</h1>...</div><div id=\"excluded-sec-isintegralnumber\"><h1><span class=\"secnum\">7.2.6</span>#sec-isintegralnumber IsIntegralNumber ( argument )</h1>...</div><div id=\"excluded-sec-ispropertykey\"><h1><span class=\"secnum\">7.2.7</span>#sec-ispropertykey IsPropertyKey ( argument )</h1>...</div><div id=\"excluded-sec-isregexp\"><h1><span class=\"secnum\">7.2.8</span>#sec-isregexp IsRegExp ( argument )</h1>...</div><div id=\"excluded-sec-isstringprefix\"><h1><span class=\"secnum\">7.2.9</span>#sec-isstringprefix IsStringPrefix ( p, q )</h1>...</div><div id=\"excluded-sec-samevalue\"><h1><span class=\"secnum\">7.2.10</span>#sec-samevalue SameValue ( x, y )</h1>...</div><div id=\"excluded-sec-samevaluezero\"><h1><span class=\"secnum\">7.2.11</span>#sec-samevaluezero SameValueZero ( x, y )</h1>...</div><div id=\"excluded-sec-samevaluenonnumeric\"><h1><span class=\"secnum\">7.2.12</span>#sec-samevaluenonnumeric SameValueNonNumeric ( x, y )</h1>...</div><div id=\"excluded-sec-islessthan\"><h1><span class=\"secnum\">7.2.13</span>#sec-islessthan IsLessThan ( x, y [ , LeftFirst ] )</h1>...</div><div id=\"excluded-sec-islooselyequal\"><h1><span class=\"secnum\">7.2.14</span>#sec-islooselyequal IsLooselyEqual ( x, y )</h1>...</div><div id=\"excluded-sec-isstrictlyequal\"><h1><span class=\"secnum\">7.2.15</span>#sec-isstrictlyequal IsStrictlyEqual ( x, y )</h1>...</div></emu-clause>\n\n  "}, "sec-sortcompare": {"num": "23.1.3.27.1", "title": "#sec-sortcompare SortCompare ( x, y )", "html": "<emu-clause id=\"sec-sortcompare\" aoid=\"SortCompare\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-sortcompare\">#sec-sortcompare</span> SortCompare ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation SortCompare takes arguments <var>x</var> and <var>y</var>. It also has access to the <var>comparefn</var> argument passed to the current invocation of the <code>sort</code> method. It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>x</var> and <var>y</var> are both <emu-val>undefined</emu-val>, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>If <var>x</var> is <emu-val>undefined</emu-val>, return <emu-val>1</emu-val><sub>&#120125;</sub>.</li><li>If <var>y</var> is <emu-val>undefined</emu-val>, return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li><li>If <var>comparefn</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>comparefn</var>, <emu-val>undefined</emu-val>, &#171; <var>x</var>, <var>y</var> &#187;)).</li><li>If <var>v</var> is <emu-val>NaN</emu-val>, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>Return <var>v</var>.</li></ol></li><li id=\"step-sortcompare-tostring-x\">Let <var>xString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>x</var>).</li><li id=\"step-sortcompare-tostring-y\">Let <var>yString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>y</var>).</li><li>Let <var>xSmaller</var> be <emu-xref aoid=\"IsLessThan\"><a href=\"#sec-islessthan\">IsLessThan</a></emu-xref>(<var>xString</var>, <var>yString</var>).</li><li>If <var>xSmaller</var> is <emu-val>true</emu-val>, return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li><li>Let <var>ySmaller</var> be <emu-xref aoid=\"IsLessThan\"><a href=\"#sec-islessthan\">IsLessThan</a></emu-xref>(<var>yString</var>, <var>xString</var>).</li><li>If <var>ySmaller</var> is <emu-val>true</emu-val>, return <emu-val>1</emu-val><sub>&#120125;</sub>.</li><li>Return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>Because non-existent property values always compare greater than <emu-val>undefined</emu-val> property values, and <emu-val>undefined</emu-val> always compares greater than any other value, <emu-val>undefined</emu-val> property values always sort to the end of the result, followed by non-existent property values.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>Method calls performed by the <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref> <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> in steps <emu-xref href=\"#step-sortcompare-tostring-x\"><a href=\"#step-sortcompare-tostring-x\" class=\"excluded-xref\" excluded-id=\"step-sortcompare-tostring-x\">#step-sortcompare-tostring-x</a></emu-xref> and <emu-xref href=\"#step-sortcompare-tostring-y\"><a href=\"#step-sortcompare-tostring-y\" class=\"excluded-xref\" excluded-id=\"step-sortcompare-tostring-y\">#step-sortcompare-tostring-y</a></emu-xref> have the potential to cause SortCompare to not behave as a consistent comparison function.</p>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-islessthan": {"num": "7.2.13", "title": "#sec-islessthan IsLessThan ( x, y [ , LeftFirst ] )", "html": "<emu-clause id=\"sec-islessthan\" aoid=\"IsLessThan\" oldids=\"sec-abstract-relational-comparison\"><span id=\"sec-abstract-relational-comparison\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-islessthan\">#sec-islessthan</span> IsLessThan ( <var>x</var>, <var>y</var> [ , <var>LeftFirst</var> ] )</h1>\n      <p>The abstract operation IsLessThan takes arguments <var>x</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>y</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and optional argument <var>LeftFirst</var> (a Boolean). It provides the semantics for the comparison <var>x</var> &lt; <var>y</var>, returning <emu-val>true</emu-val>, <emu-val>false</emu-val>, or <emu-val>undefined</emu-val> (which indicates that at least one operand is <emu-val>NaN</emu-val>). The <var>LeftFirst</var> flag is used to control the order in which operations with potentially visible side-effects are performed upon <var>x</var> and <var>y</var>. It is necessary because ECMAScript specifies left to right evaluation of expressions. The default value of <var>LeftFirst</var> is <emu-val>true</emu-val> and indicates that the <var>x</var> parameter corresponds to an expression that occurs to the left of the <var>y</var> parameter's corresponding expression. If <var>LeftFirst</var> is <emu-val>false</emu-val>, the reverse is the case and operations must be performed upon <var>y</var> before <var>x</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If the <var>LeftFirst</var> flag is <emu-val>true</emu-val>, then<ol><li>Let <var>px</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>x</var>, <emu-const>number</emu-const>).</li><li>Let <var>py</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>y</var>, <emu-const>number</emu-const>).</li></ol></li><li>Else,<ol><li>NOTE: The order of evaluation needs to be reversed to preserve left to right evaluation.</li><li>Let <var>py</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>y</var>, <emu-const>number</emu-const>).</li><li>Let <var>px</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>x</var>, <emu-const>number</emu-const>).</li></ol></li><li id=\"step-arc-string-check\">If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is String, then<ol><li>If <emu-xref aoid=\"IsStringPrefix\"><a href=\"#sec-isstringprefix\">IsStringPrefix</a></emu-xref>(<var>py</var>, <var>px</var>) is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"IsStringPrefix\"><a href=\"#sec-isstringprefix\">IsStringPrefix</a></emu-xref>(<var>px</var>, <var>py</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>k</var> be the smallest non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> such that the code unit at index <var>k</var> within <var>px</var> is different from the code unit at index <var>k</var> within <var>py</var>. (There must be such a <var>k</var>, for neither String is a prefix of the other.)</li><li>Let <var>m</var> be the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> that is the numeric value of the code unit at index <var>k</var> within <var>px</var>.</li><li>Let <var>n</var> be the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> that is the numeric value of the code unit at index <var>k</var> within <var>py</var>.</li><li>If <var>m</var> &lt; <var>n</var>, return <emu-val>true</emu-val>. Otherwise, return <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is String, then<ol><li>Let <var>ny</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>py</var>).</li><li>If <var>ny</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return BigInt::lessThan(<var>px</var>, <var>ny</var>).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is BigInt, then<ol><li>Let <var>nx</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>px</var>).</li><li>If <var>nx</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return BigInt::lessThan(<var>nx</var>, <var>py</var>).</li></ol></li><li>NOTE: Because <var>px</var> and <var>py</var> are primitive values, evaluation order is not important.</li><li>Let <var>nx</var> be !&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>px</var>).</li><li>Let <var>ny</var> be !&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>py</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is the same as <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>), return <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>)::lessThan(<var>nx</var>, <var>ny</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>) is Number, or <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is Number and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>) is BigInt.</li><li>If <var>nx</var> or <var>ny</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <var>nx</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub> or <var>ny</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>true</emu-val>.</li><li>If <var>nx</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub> or <var>ny</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>false</emu-val>.</li><li>If <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>nx</var>) &lt; <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>ny</var>), return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Step <emu-xref href=\"#step-arc-string-check\"><a href=\"#step-arc-string-check\" class=\"excluded-xref\" excluded-id=\"step-arc-string-check\">#step-arc-string-check</a></emu-xref> differs from step <emu-xref href=\"#step-binary-op-string-check\"><a href=\"#step-binary-op-string-check\">2.c</a></emu-xref> in the algorithm that handles the addition operator <code>+</code> (<emu-xref href=\"#sec-applystringornumericbinaryoperator\"><a href=\"#sec-applystringornumericbinaryoperator\" class=\"excluded-xref\" excluded-id=\"sec-applystringornumericbinaryoperator\">#sec-applystringornumericbinaryoperator</a></emu-xref>) by using the logical-and operation instead of the logical-or operation.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The comparison of Strings uses a simple lexicographic ordering on sequences of code unit values. There is no attempt to use the more complex, semantically oriented definitions of character or string equality and collating order defined in the Unicode specification. Therefore String values that are canonically equal according to the Unicode standard could test as unequal. In effect this algorithm assumes that both Strings are already in normalized form. Also, note that for strings containing supplementary characters, lexicographic ordering on sequences of UTF-16 code unit values differs from that on sequences of code point values.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-relational-operators-runtime-semantics-evaluation": {"num": "13.10.1", "title": "#sec-relational-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-relational-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-relational-operators-runtime-semantics-evaluation\">#sec-relational-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0hbjkrqw\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>&lt;</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be ?&#160;<emu-xref aoid=\"IsLessThan\"><a href=\"#sec-islessthan\">IsLessThan</a></emu-xref>(<var>lval</var>, <var>rval</var>).</li><li>If <var>r</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <var>r</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gziyg7ut\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>&gt;</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be ?&#160;<emu-xref aoid=\"IsLessThan\"><a href=\"#sec-islessthan\">IsLessThan</a></emu-xref>(<var>rval</var>, <var>lval</var>, <emu-val>false</emu-val>).</li><li>If <var>r</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <var>r</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"kcktdtrm\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>&lt;=</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be ?&#160;<emu-xref aoid=\"IsLessThan\"><a href=\"#sec-islessthan\">IsLessThan</a></emu-xref>(<var>rval</var>, <var>lval</var>, <emu-val>false</emu-val>).</li><li>If <var>r</var> is <emu-val>true</emu-val> or <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3cupp_tq\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>&gt;=</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be ?&#160;<emu-xref aoid=\"IsLessThan\"><a href=\"#sec-islessthan\">IsLessThan</a></emu-xref>(<var>lval</var>, <var>rval</var>).</li><li>If <var>r</var> is <emu-val>true</emu-val> or <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1ec9rmdp\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>instanceof</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Return ?&#160;<emu-xref aoid=\"InstanceofOperator\"><a href=\"#sec-instanceofoperator\">InstanceofOperator</a></emu-xref>(<var>lval</var>, <var>rval</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9mtjpkmx\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rval</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>rval</var>, ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>lval</var>)).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {"table-numeric-type-ops": "Table 2"}}, "to": {"secList": ["sec-numeric-types", "sec-testing-and-comparison-operations", "sec-sortcompare", "sec-islessthan", "sec-relational-operators-runtime-semantics-evaluation"], "secData": {"sec-numeric-types": {"num": "6.1.6", "title": "#sec-numeric-types Numeric Types", "html": "<emu-clause id=\"sec-numeric-types\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types\">#sec-numeric-types</span> Numeric Types</h1>\n      <p>ECMAScript has two built-in numeric types: Number and BigInt. In this specification, every numeric type <var>T</var> contains a multiplicative identity value denoted <var>T</var>::unit. The specification types also have the following <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref>, likewise denoted <var>T</var>::<i>op</i> for a given operation with specification name <i>op</i>. All argument types are <var>T</var>. The \"Result\" column shows the return type, along with an indication if it is possible for some invocations of the operation to return an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</p>\n      <emu-table id=\"table-numeric-type-ops\" caption=\"Numeric Type Operations\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-numeric-type-ops\">#table-numeric-type-ops</span>: Numeric Type Operations</figcaption>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Invocation Synopsis\n            </th>\n            <th>\n              Example source\n            </th>\n            <th>\n              Invoked by the Evaluation semantics of ...\n            </th>\n            <th>\n              Result\n            </th>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::unaryMinus(x)\n            </td>\n            <td>\n              <code>-x</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-unary-minus-operator\" title=\"\"><a href=\"#sec-unary-minus-operator\">Unary <code>-</code> Operator</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::bitwiseNOT(x)\n            </td>\n            <td>\n              <code>~x</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-bitwise-not-operator\" title=\"\"><a href=\"#sec-bitwise-not-operator\">Bitwise NOT Operator ( <code>~</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::exponentiate(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;**&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-exp-operator\" title=\"\"><a href=\"#sec-exp-operator\">Exponentiation Operator</a></emu-xref>\n              and <emu-xref href=\"#sec-math.pow\" title=\"\"><a href=\"#sec-math.pow\">Math.pow ( <var>base</var>, <var>exponent</var> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>, may throw <emu-val>RangeError</emu-val>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::multiply(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;*&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-multiplicative-operators\" title=\"\"><a href=\"#sec-multiplicative-operators\">Multiplicative Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::divide(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;/&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-multiplicative-operators\" title=\"\"><a href=\"#sec-multiplicative-operators\">Multiplicative Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>, may throw <emu-val>RangeError</emu-val>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::remainder(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;%&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-multiplicative-operators\" title=\"\"><a href=\"#sec-multiplicative-operators\">Multiplicative Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>, may throw <emu-val>RangeError</emu-val>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::add(x,&#160;y)\n            </td>\n            <td>\n              <code>x ++</code><br><code>++ x</code><br><code>x&#160;+&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-postfix-increment-operator\" title=\"\"><a href=\"#sec-postfix-increment-operator\">Postfix Increment Operator</a></emu-xref>,\n              <emu-xref href=\"#sec-prefix-increment-operator\" title=\"\"><a href=\"#sec-prefix-increment-operator\">Prefix Increment Operator</a></emu-xref>,\n              and <emu-xref href=\"#sec-addition-operator-plus\" title=\"\"><a href=\"#sec-addition-operator-plus\">The Addition Operator ( <code>+</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::subtract(x,&#160;y)\n            </td>\n            <td>\n              <code>x --</code><br><code>-- x</code><br><code>x&#160;-&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-postfix-decrement-operator\" title=\"\"><a href=\"#sec-postfix-decrement-operator\">Postfix Decrement Operator</a></emu-xref>,\n              <emu-xref href=\"#sec-prefix-decrement-operator\" title=\"\"><a href=\"#sec-prefix-decrement-operator\">Prefix Decrement Operator</a></emu-xref>,\n              and <emu-xref href=\"#sec-subtraction-operator-minus\" title=\"\"><a href=\"#sec-subtraction-operator-minus\">The Subtraction Operator ( <code>-</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::leftShift(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;&lt;&lt;&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-left-shift-operator\" title=\"\"><a href=\"#sec-left-shift-operator\">The Left Shift Operator ( <code>&lt;&lt;</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::signedRightShift(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;&gt;&gt;&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-signed-right-shift-operator\" title=\"\"><a href=\"#sec-signed-right-shift-operator\">The Signed Right Shift Operator ( <code>&gt;&gt;</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::unsignedRightShift(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;&gt;&gt;&gt;&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-unsigned-right-shift-operator\" title=\"\"><a href=\"#sec-unsigned-right-shift-operator\">The Unsigned Right Shift Operator ( <code>&gt;&gt;&gt;</code> )</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>, may throw <emu-val>TypeError</emu-val>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::lessThan(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;&lt;&#160;y</code><br><code>x&#160;&gt;&#160;y</code><br><code>x&#160;&lt;=&#160;y</code><br><code>x&#160;&gt;=&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-relational-operators\" title=\"\"><a href=\"#sec-relational-operators\">Relational Operators</a></emu-xref>,\n              via <emu-xref href=\"#sec-islessthan\" title=\"\"><a href=\"#sec-islessthan\">IsLessThan ( <var>x</var>, <var>y</var>, <var>LeftFirst</var> )</a></emu-xref>\n            </td>\n            <td>\n              Boolean or <emu-val>undefined</emu-val> (for unordered inputs)\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::equal(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;==&#160;y</code><br><code>x&#160;!=&#160;y</code><br><code>x&#160;===&#160;y</code><br><code>x&#160;!==&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-equality-operators\" title=\"\"><a href=\"#sec-equality-operators\">Equality Operators</a></emu-xref>,\n              via <emu-xref href=\"#sec-isstrictlyequal\" title=\"\"><a href=\"#sec-isstrictlyequal\">IsStrictlyEqual ( <var>x</var>, <var>y</var> )</a></emu-xref>\n            </td>\n            <td>\n              Boolean\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::sameValue(x,&#160;y)\n            </td>\n            <td>\n            </td>\n            <td>\n              Object internal methods,\n              via <emu-xref href=\"#sec-samevalue\" title=\"\"><a href=\"#sec-samevalue\">SameValue ( <var>x</var>, <var>y</var> )</a></emu-xref>,\n              to test exact value equality\n            </td>\n            <td>\n              Boolean\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::sameValueZero(x,&#160;y)\n            </td>\n            <td>\n            </td>\n            <td>\n              Array, Map, and Set methods,\n              via <emu-xref href=\"#sec-samevaluezero\" title=\"\"><a href=\"#sec-samevaluezero\">SameValueZero ( <var>x</var>, <var>y</var> )</a></emu-xref>,\n              to test value equality ignoring differences among members of the zero cohort (i.e., <emu-val>-0</emu-val><sub>&#120125;</sub> and <emu-val>+0</emu-val><sub>&#120125;</sub>)\n            </td>\n            <td>\n              Boolean\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::bitwiseAND(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;&amp;&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-binary-bitwise-operators\" title=\"\"><a href=\"#sec-binary-bitwise-operators\">Binary Bitwise Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::bitwiseXOR(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;^&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-binary-bitwise-operators\" title=\"\"><a href=\"#sec-binary-bitwise-operators\">Binary Bitwise Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::bitwiseOR(x,&#160;y)\n            </td>\n            <td>\n              <code>x&#160;|&#160;y</code>\n            </td>\n            <td>\n              <emu-xref href=\"#sec-binary-bitwise-operators\" title=\"\"><a href=\"#sec-binary-bitwise-operators\">Binary Bitwise Operators</a></emu-xref>\n            </td>\n            <td>\n              <var>T</var>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <var>T</var>::toString(x)\n            </td>\n            <td>\n              <code>String(x)</code>\n            </td>\n            <td>\n              Many expressions and built-in functions, via <emu-xref href=\"#sec-tostring\" title=\"\"><a href=\"#sec-tostring\">ToString ( <var>argument</var> )</a></emu-xref>\n            </td>\n            <td>\n              String\n            </td>\n\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n      <p>The <var>T</var>::unit value and <var>T</var>::<var>op</var> operations are not a part of the ECMAScript language; they are defined here solely to aid the specification of the semantics of the ECMAScript language. Other <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> are defined throughout this specification.</p>\n      <p>Because the numeric types are in general not convertible without loss of precision or truncation, the ECMAScript language provides no implicit conversion among these types. Programmers must explicitly call <code>Number</code> and <code>BigInt</code> functions to convert among types when calling a function which requires another type.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The first and subsequent editions of ECMAScript have provided, for certain operators, implicit numeric conversions that could lose precision or truncate. These legacy implicit conversions are maintained for backward compatibility, but not provided for BigInt in order to minimize opportunity for programmer error, and to leave open the option of generalized <em>value types</em> in a future edition.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-ecmascript-language-types-number-type\"><h1><span class=\"secnum\">6.1.6.1</span>#sec-ecmascript-language-types-number-type The Number Type</h1>...</div><div id=\"excluded-sec-ecmascript-language-types-bigint-type\"><h1><span class=\"secnum\">6.1.6.2</span>#sec-ecmascript-language-types-bigint-type The BigInt Type</h1>...</div></emu-clause>\n\n    "}, "sec-testing-and-comparison-operations": {"num": "7.2", "title": "#sec-testing-and-comparison-operations Testing and Comparison Operations", "html": "<emu-clause id=\"sec-testing-and-comparison-operations\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-testing-and-comparison-operations\">#sec-testing-and-comparison-operations</span> Testing and Comparison Operations</h1>\n\n    <div id=\"excluded-sec-requireobjectcoercible\"><h1><span class=\"secnum\">7.2.1</span>#sec-requireobjectcoercible RequireObjectCoercible ( argument )</h1>...</div><div id=\"excluded-sec-isarray\"><h1><span class=\"secnum\">7.2.2</span>#sec-isarray IsArray ( argument )</h1>...</div><div id=\"excluded-sec-iscallable\"><h1><span class=\"secnum\">7.2.3</span>#sec-iscallable IsCallable ( argument )</h1>...</div><div id=\"excluded-sec-isconstructor\"><h1><span class=\"secnum\">7.2.4</span>#sec-isconstructor IsConstructor ( argument )</h1>...</div><div id=\"excluded-sec-isextensible-o\"><h1><span class=\"secnum\">7.2.5</span>#sec-isextensible-o IsExtensible ( O )</h1>...</div><div id=\"excluded-sec-isintegralnumber\"><h1><span class=\"secnum\">7.2.6</span>#sec-isintegralnumber IsIntegralNumber ( argument )</h1>...</div><div id=\"excluded-sec-ispropertykey\"><h1><span class=\"secnum\">7.2.7</span>#sec-ispropertykey IsPropertyKey ( argument )</h1>...</div><div id=\"excluded-sec-isregexp\"><h1><span class=\"secnum\">7.2.8</span>#sec-isregexp IsRegExp ( argument )</h1>...</div><div id=\"excluded-sec-isstringprefix\"><h1><span class=\"secnum\">7.2.9</span>#sec-isstringprefix IsStringPrefix ( p, q )</h1>...</div><div id=\"excluded-sec-samevalue\"><h1><span class=\"secnum\">7.2.10</span>#sec-samevalue SameValue ( x, y )</h1>...</div><div id=\"excluded-sec-samevaluezero\"><h1><span class=\"secnum\">7.2.11</span>#sec-samevaluezero SameValueZero ( x, y )</h1>...</div><div id=\"excluded-sec-samevaluenonnumeric\"><h1><span class=\"secnum\">7.2.12</span>#sec-samevaluenonnumeric SameValueNonNumeric ( x, y )</h1>...</div><div id=\"excluded-sec-islessthan\"><h1><span class=\"secnum\">7.2.13</span>#sec-islessthan IsLessThan ( x, y, LeftFirst )</h1>...</div><div id=\"excluded-sec-islooselyequal\"><h1><span class=\"secnum\">7.2.14</span>#sec-islooselyequal IsLooselyEqual ( x, y )</h1>...</div><div id=\"excluded-sec-isstrictlyequal\"><h1><span class=\"secnum\">7.2.15</span>#sec-isstrictlyequal IsStrictlyEqual ( x, y )</h1>...</div></emu-clause>\n\n  "}, "sec-sortcompare": {"num": "23.1.3.27.1", "title": "#sec-sortcompare SortCompare ( x, y )", "html": "<emu-clause id=\"sec-sortcompare\" aoid=\"SortCompare\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-sortcompare\">#sec-sortcompare</span> SortCompare ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation SortCompare takes arguments <var>x</var> and <var>y</var>. It also has access to the <var>comparefn</var> argument passed to the current invocation of the <code>sort</code> method. It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>x</var> and <var>y</var> are both <emu-val>undefined</emu-val>, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>If <var>x</var> is <emu-val>undefined</emu-val>, return <emu-val>1</emu-val><sub>&#120125;</sub>.</li><li>If <var>y</var> is <emu-val>undefined</emu-val>, return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li><li>If <var>comparefn</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>comparefn</var>, <emu-val>undefined</emu-val>, &#171; <var>x</var>, <var>y</var> &#187;)).</li><li>If <var>v</var> is <emu-val>NaN</emu-val>, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>Return <var>v</var>.</li></ol></li><li id=\"step-sortcompare-tostring-x\">Let <var>xString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>x</var>).</li><li id=\"step-sortcompare-tostring-y\">Let <var>yString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>y</var>).</li><li>Let <var>xSmaller</var> be <emu-xref aoid=\"IsLessThan\"><a href=\"#sec-islessthan\">IsLessThan</a></emu-xref>(<var>xString</var>, <var>yString</var>, <emu-val>true</emu-val>).</li><li>If <var>xSmaller</var> is <emu-val>true</emu-val>, return <emu-val>-1</emu-val><sub>&#120125;</sub>.</li><li>Let <var>ySmaller</var> be <emu-xref aoid=\"IsLessThan\"><a href=\"#sec-islessthan\">IsLessThan</a></emu-xref>(<var>yString</var>, <var>xString</var>, <emu-val>true</emu-val>).</li><li>If <var>ySmaller</var> is <emu-val>true</emu-val>, return <emu-val>1</emu-val><sub>&#120125;</sub>.</li><li>Return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>Because non-existent property values always compare greater than <emu-val>undefined</emu-val> property values, and <emu-val>undefined</emu-val> always compares greater than any other value, <emu-val>undefined</emu-val> property values always sort to the end of the result, followed by non-existent property values.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>Method calls performed by the <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref> <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> in steps <emu-xref href=\"#step-sortcompare-tostring-x\"><a href=\"#step-sortcompare-tostring-x\" class=\"excluded-xref\" excluded-id=\"step-sortcompare-tostring-x\">#step-sortcompare-tostring-x</a></emu-xref> and <emu-xref href=\"#step-sortcompare-tostring-y\"><a href=\"#step-sortcompare-tostring-y\" class=\"excluded-xref\" excluded-id=\"step-sortcompare-tostring-y\">#step-sortcompare-tostring-y</a></emu-xref> have the potential to cause SortCompare to not behave as a consistent comparison function.</p>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-islessthan": {"num": "7.2.13", "title": "#sec-islessthan IsLessThan ( x, y, LeftFirst )", "html": "<emu-clause id=\"sec-islessthan\" aoid=\"IsLessThan\" oldids=\"sec-abstract-relational-comparison\"><span id=\"sec-abstract-relational-comparison\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-islessthan\">#sec-islessthan</span> IsLessThan ( <var>x</var>, <var>y</var>, <var>LeftFirst</var> )</h1>\n      <p>The abstract operation IsLessThan takes arguments <var>x</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>y</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), and <var>LeftFirst</var> (a Boolean). It provides the semantics for the comparison <var>x</var> &lt; <var>y</var>, returning <emu-val>true</emu-val>, <emu-val>false</emu-val>, or <emu-val>undefined</emu-val> (which indicates that at least one operand is <emu-val>NaN</emu-val>). The <var>LeftFirst</var> flag is used to control the order in which operations with potentially visible side-effects are performed upon <var>x</var> and <var>y</var>. It is necessary because ECMAScript specifies left to right evaluation of expressions. If <var>LeftFirst</var> is <emu-val>true</emu-val>, the <var>x</var> parameter corresponds to an expression that occurs to the left of the <var>y</var> parameter's corresponding expression. If <var>LeftFirst</var> is <emu-val>false</emu-val>, the reverse is the case and operations must be performed upon <var>y</var> before <var>x</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If the <var>LeftFirst</var> flag is <emu-val>true</emu-val>, then<ol><li>Let <var>px</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>x</var>, <emu-const>number</emu-const>).</li><li>Let <var>py</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>y</var>, <emu-const>number</emu-const>).</li></ol></li><li>Else,<ol><li>NOTE: The order of evaluation needs to be reversed to preserve left to right evaluation.</li><li>Let <var>py</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>y</var>, <emu-const>number</emu-const>).</li><li>Let <var>px</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>x</var>, <emu-const>number</emu-const>).</li></ol></li><li id=\"step-arc-string-check\">If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is String, then<ol><li>If <emu-xref aoid=\"IsStringPrefix\"><a href=\"#sec-isstringprefix\">IsStringPrefix</a></emu-xref>(<var>py</var>, <var>px</var>) is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"IsStringPrefix\"><a href=\"#sec-isstringprefix\">IsStringPrefix</a></emu-xref>(<var>px</var>, <var>py</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>k</var> be the smallest non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> such that the code unit at index <var>k</var> within <var>px</var> is different from the code unit at index <var>k</var> within <var>py</var>. (There must be such a <var>k</var>, for neither String is a prefix of the other.)</li><li>Let <var>m</var> be the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> that is the numeric value of the code unit at index <var>k</var> within <var>px</var>.</li><li>Let <var>n</var> be the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> that is the numeric value of the code unit at index <var>k</var> within <var>py</var>.</li><li>If <var>m</var> &lt; <var>n</var>, return <emu-val>true</emu-val>. Otherwise, return <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is String, then<ol><li>Let <var>ny</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>py</var>).</li><li>If <var>ny</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return BigInt::lessThan(<var>px</var>, <var>ny</var>).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>px</var>) is String and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>py</var>) is BigInt, then<ol><li>Let <var>nx</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>px</var>).</li><li>If <var>nx</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return BigInt::lessThan(<var>nx</var>, <var>py</var>).</li></ol></li><li>NOTE: Because <var>px</var> and <var>py</var> are primitive values, evaluation order is not important.</li><li>Let <var>nx</var> be !&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>px</var>).</li><li>Let <var>ny</var> be !&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>py</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is the same as <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>), return <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>)::lessThan(<var>nx</var>, <var>ny</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is BigInt and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>) is Number, or <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nx</var>) is Number and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>ny</var>) is BigInt.</li><li>If <var>nx</var> or <var>ny</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <var>nx</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub> or <var>ny</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>true</emu-val>.</li><li>If <var>nx</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub> or <var>ny</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>false</emu-val>.</li><li>If <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>nx</var>) &lt; <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>ny</var>), return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Step <emu-xref href=\"#step-arc-string-check\"><a href=\"#step-arc-string-check\" class=\"excluded-xref\" excluded-id=\"step-arc-string-check\">#step-arc-string-check</a></emu-xref> differs from step <emu-xref href=\"#step-binary-op-string-check\"><a href=\"#step-binary-op-string-check\">2.c</a></emu-xref> in the algorithm that handles the addition operator <code>+</code> (<emu-xref href=\"#sec-applystringornumericbinaryoperator\"><a href=\"#sec-applystringornumericbinaryoperator\" class=\"excluded-xref\" excluded-id=\"sec-applystringornumericbinaryoperator\">#sec-applystringornumericbinaryoperator</a></emu-xref>) by using the logical-and operation instead of the logical-or operation.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The comparison of Strings uses a simple lexicographic ordering on sequences of code unit values. There is no attempt to use the more complex, semantically oriented definitions of character or string equality and collating order defined in the Unicode specification. Therefore String values that are canonically equal according to the Unicode standard could test as unequal. In effect this algorithm assumes that both Strings are already in normalized form. Also, note that for strings containing supplementary characters, lexicographic ordering on sequences of UTF-16 code unit values differs from that on sequences of code point values.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-relational-operators-runtime-semantics-evaluation": {"num": "13.10.1", "title": "#sec-relational-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-relational-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-relational-operators-runtime-semantics-evaluation\">#sec-relational-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0hbjkrqw\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>&lt;</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be ?&#160;<emu-xref aoid=\"IsLessThan\"><a href=\"#sec-islessthan\">IsLessThan</a></emu-xref>(<var>lval</var>, <var>rval</var>, <emu-val>true</emu-val>).</li><li>If <var>r</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <var>r</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"gziyg7ut\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>&gt;</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be ?&#160;<emu-xref aoid=\"IsLessThan\"><a href=\"#sec-islessthan\">IsLessThan</a></emu-xref>(<var>rval</var>, <var>lval</var>, <emu-val>false</emu-val>).</li><li>If <var>r</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <var>r</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"kcktdtrm\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>&lt;=</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be ?&#160;<emu-xref aoid=\"IsLessThan\"><a href=\"#sec-islessthan\">IsLessThan</a></emu-xref>(<var>rval</var>, <var>lval</var>, <emu-val>false</emu-val>).</li><li>If <var>r</var> is <emu-val>true</emu-val> or <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3cupp_tq\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>&gt;=</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be ?&#160;<emu-xref aoid=\"IsLessThan\"><a href=\"#sec-islessthan\">IsLessThan</a></emu-xref>(<var>lval</var>, <var>rval</var>, <emu-val>true</emu-val>).</li><li>If <var>r</var> is <emu-val>true</emu-val> or <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1ec9rmdp\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>instanceof</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Return ?&#160;<emu-xref aoid=\"InstanceofOperator\"><a href=\"#sec-instanceofoperator\">InstanceofOperator</a></emu-xref>(<var>lval</var>, <var>rval</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"RelationalExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9mtjpkmx\">\n        <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-RelationalExpression\">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-ShiftExpression\">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rval</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>rval</var>, ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>lval</var>)).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {"table-numeric-type-ops": "Table 2"}}}