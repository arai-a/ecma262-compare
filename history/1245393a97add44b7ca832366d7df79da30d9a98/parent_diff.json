{"from": {"secList": ["sec-properties-of-async-from-sync-iterator-instances", "sec-%asyncfromsynciteratorprototype%.next", "sec-%asyncfromsynciteratorprototype%-object", "sec-getiterator", "sec-%asyncfromsynciteratorprototype%-@@tostringtag", "sec-createasyncfromsynciterator", "sec-completepropertydescriptor", "sec-async-from-sync-iterator-value-unwrap-functions", "sec-%asyncfromsynciteratorprototype%.return", "sec-%asyncfromsynciteratorprototype%.throw"], "secData": {"sec-properties-of-async-from-sync-iterator-instances": {"num": "25.1.4.3", "title": "#sec-properties-of-async-from-sync-iterator-instances Properties of Async-from-Sync Iterator Instances", "html": "<emu-clause id=\"sec-properties-of-async-from-sync-iterator-instances\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-async-from-sync-iterator-instances\">#sec-properties-of-async-from-sync-iterator-instances</span> Properties of Async-from-Sync Iterator Instances</h1>\n        <p>Async-from-Sync Iterator instances are ordinary objects that inherit properties from the <emu-xref href=\"#sec-%asyncfromsynciteratorprototype%-object\"><a href=\"#sec-%asyncfromsynciteratorprototype%-object\">%AsyncFromSyncIteratorPrototype%</a></emu-xref> intrinsic object. Async-from-Sync Iterator instances are initially created with the internal slots listed in  <emu-xref href=\"#table-async-from-sync-iterator-internal-slots\"><a href=\"#table-async-from-sync-iterator-internal-slots\" class=\"excluded-xref\" excluded-id=\"table-async-from-sync-iterator-internal-slots\">#table-async-from-sync-iterator-internal-slots</a></emu-xref>.</p>\n        <emu-table id=\"table-async-from-sync-iterator-internal-slots\" caption=\"Internal Slots of Async-from-Sync Iterator Instances\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-async-from-sync-iterator-internal-slots\">#table-async-from-sync-iterator-internal-slots</span>: Internal Slots of Async-from-Sync Iterator Instances</figcaption>\n          <table>\n            <thead>\n            <tr>\n              <th>\n                Internal Slot\n              \n              </th>\n              <th>\n                Description\n              \n              </th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr>\n              <td>\n                [[SyncIteratorRecord]]\n              \n              </td>\n              <td>\n                A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>, of the type returned by <emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>, representing the original synchronous iterator which is being adapted.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n\n      "}, "sec-%asyncfromsynciteratorprototype%.next": {"num": "25.1.4.2.1", "title": "#sec-%asyncfromsynciteratorprototype%.next %AsyncFromSyncIteratorPrototype%.next ( value )", "html": "<emu-clause id=\"sec-%asyncfromsynciteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%asyncfromsynciteratorprototype%.next\">#sec-%asyncfromsynciteratorprototype%.next</span> %AsyncFromSyncIteratorPrototype%.next ( <var>value</var> )</h1>\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>promiseCapability</var> be !&#160;<emu-xref aoid=\"NewPromiseCapability\"><a href=\"#sec-newpromisecapability\">NewPromiseCapability</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, or if <var>O</var> does not have a [[SyncIteratorRecord]] internal slot, then<ol><li>Let <var>invalidIteratorError</var> be a newly created <emu-val>TypeError</emu-val> object.</li><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>invalidIteratorError</var> &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></li><li>Let <var>syncIteratorRecord</var> be <var>O</var>.[[SyncIteratorRecord]].</li><li>Let <var>result</var> be <emu-xref aoid=\"IteratorNext\"><a href=\"#sec-iteratornext\">IteratorNext</a></emu-xref>(<var>syncIteratorRecord</var>, <var>value</var>).</li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).</li><li>Return !&#160;<emu-xref aoid=\"AsyncFromSyncIteratorContinuation\"><a href=\"#sec-asyncfromsynciteratorcontinuation\">AsyncFromSyncIteratorContinuation</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-%asyncfromsynciteratorprototype%-object": {"num": "25.1.4.2", "title": "#sec-%asyncfromsynciteratorprototype%-object The %AsyncFromSyncIteratorPrototype% Object", "html": "<emu-clause id=\"sec-%asyncfromsynciteratorprototype%-object\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%asyncfromsynciteratorprototype%-object\">#sec-%asyncfromsynciteratorprototype%-object</span> The %AsyncFromSyncIteratorPrototype% Object</h1>\n        <p>The  <dfn>%AsyncFromSyncIteratorPrototype%</dfn> object:</p>\n        <ul>\n          <li>has properties that are inherited by all Async-from-Sync Iterator Objects.</li>\n          <li>is an ordinary object.</li>\n          <li>has a [[Prototype]] internal slot whose value is the intrinsic object <emu-xref href=\"#sec-asynciteratorprototype\"><a href=\"#sec-asynciteratorprototype\">%AsyncIteratorPrototype%</a></emu-xref>.</li>\n          <li>has the following properties:</li>\n        </ul>\n\n        <div id=\"excluded-sec-%asyncfromsynciteratorprototype%.next\"><h1><span class=\"secnum\">25.1.4.2.1</span>#sec-%asyncfromsynciteratorprototype%.next %AsyncFromSyncIteratorPrototype%.next ( value )</h1>...</div><div id=\"excluded-sec-%asyncfromsynciteratorprototype%.return\"><h1><span class=\"secnum\">25.1.4.2.2</span>#sec-%asyncfromsynciteratorprototype%.return %AsyncFromSyncIteratorPrototype%.return ( value )</h1>...</div><div id=\"excluded-sec-%asyncfromsynciteratorprototype%.throw\"><h1><span class=\"secnum\">25.1.4.2.3</span>#sec-%asyncfromsynciteratorprototype%.throw %AsyncFromSyncIteratorPrototype%.throw ( value )</h1>...</div><div id=\"excluded-sec-%asyncfromsynciteratorprototype%-@@tostringtag\"><h1><span class=\"secnum\">25.1.4.2.4</span>#sec-%asyncfromsynciteratorprototype%-@@tostringtag %AsyncFromSyncIteratorPrototype% [ @@toStringTag ]</h1>...</div><div id=\"excluded-sec-async-from-sync-iterator-value-unwrap-functions\"><h1><span class=\"secnum\">25.1.4.2.5</span>#sec-async-from-sync-iterator-value-unwrap-functions Async-from-Sync Iterator Value Unwrap Functions</h1>...</div></emu-clause>\n\n      "}, "sec-getiterator": {"num": "7.4.1", "title": "#sec-getiterator GetIterator ( obj [ , hint [ , method ] ] )", "html": "<emu-clause id=\"sec-getiterator\" aoid=\"GetIterator\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getiterator\">#sec-getiterator</span> GetIterator ( <var>obj</var> [ , <var>hint</var> [ , <var>method</var> ] ] )</h1>\n      <p>The abstract operation GetIterator with argument <var>obj</var> and optional arguments <var>hint</var> and <var>method</var> performs the following steps:</p>\n      <emu-alg><ol><li>If <var>hint</var> is not present, set <var>hint</var> to <emu-const>sync</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>hint</var> is either <emu-const>sync</emu-const> or <emu-const>async</emu-const>.</li><li>If <var>method</var> is not present, then<ol><li>If <var>hint</var> is <emu-const>async</emu-const>, then<ol><li>Set <var>method</var> to ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>obj</var>, @@asyncIterator).</li><li>If <var>method</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>syncMethod</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>obj</var>, @@iterator).</li><li>Let <var>syncIteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>obj</var>, <emu-const>sync</emu-const>, <var>syncMethod</var>).</li><li>Return ?&#160;<emu-xref aoid=\"CreateAsyncFromSyncIterator\"><a href=\"#sec-createasyncfromsynciterator\">CreateAsyncFromSyncIterator</a></emu-xref>(<var>syncIteratorRecord</var>).</li></ol></li></ol></li><li>Otherwise, set <var>method</var> to ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>obj</var>, @@iterator).</li></ol></li><li>Let <var>iterator</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>method</var>, <var>obj</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>iterator</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>nextMethod</var> be ?&#160;<emu-xref aoid=\"GetV\"><a href=\"#sec-getv\">GetV</a></emu-xref>(<var>iterator</var>, <code>\"next\"</code>).</li><li>Let <var>iteratorRecord</var> be <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Iterator]]: <var>iterator</var>, [[NextMethod]]: <var>nextMethod</var>, [[Done]]: <emu-val>false</emu-val> }.</li><li>Return <var>iteratorRecord</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-%asyncfromsynciteratorprototype%-@@tostringtag": {"num": "25.1.4.2.4", "title": "#sec-%asyncfromsynciteratorprototype%-@@tostringtag %AsyncFromSyncIteratorPrototype% [ @@toStringTag ]", "html": "<emu-clause id=\"sec-%asyncfromsynciteratorprototype%-@@tostringtag\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%asyncfromsynciteratorprototype%-@@tostringtag\">#sec-%asyncfromsynciteratorprototype%-@@tostringtag</span> %AsyncFromSyncIteratorPrototype% [ @@toStringTag ]</h1>\n          <p>The initial value of the @@toStringTag property is the String value <code>\"Async-from-Sync Iterator\"</code>.</p>\n          <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n        </emu-clause>\n\n        "}, "sec-createasyncfromsynciterator": {"num": "25.1.4.1", "title": "#sec-createasyncfromsynciterator CreateAsyncFromSyncIterator ( syncIteratorRecord )", "html": "<emu-clause id=\"sec-createasyncfromsynciterator\" aoid=\"CreateAsyncFromSyncIterator\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createasyncfromsynciterator\">#sec-createasyncfromsynciterator</span> CreateAsyncFromSyncIterator ( <var>syncIteratorRecord</var> )</h1>\n        <p>The abstract operation CreateAsyncFromSyncIterator is used to create an async iterator <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> from a synchronous iterator <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>. It performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>asyncIterator</var> be !&#160;<emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-%asyncfromsynciteratorprototype%-object\"><a href=\"#sec-%asyncfromsynciteratorprototype%-object\">%AsyncFromSyncIteratorPrototype%</a></emu-xref>, &#171; [[SyncIteratorRecord]] &#187;).</li><li>Set <var>asyncIterator</var>.[[SyncIteratorRecord]] to <var>syncIteratorRecord</var>.</li><li>Return ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>asyncIterator</var>, <emu-const>async</emu-const>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-completepropertydescriptor": {"num": "6.2.5.6", "title": "#sec-completepropertydescriptor CompletePropertyDescriptor ( Desc )", "html": "<emu-clause id=\"sec-completepropertydescriptor\" aoid=\"CompletePropertyDescriptor\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-completepropertydescriptor\">#sec-completepropertydescriptor</span> CompletePropertyDescriptor ( <var>Desc</var> )</h1>\n        <p>When the abstract operation CompletePropertyDescriptor is called with <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref> <var>Desc</var>, the following steps are taken:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>Desc</var> is a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>.</li><li>Let <var>like</var> be <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Value]]: <emu-val>undefined</emu-val>, [[Writable]]: <emu-val>false</emu-val>, [[Get]]: <emu-val>undefined</emu-val>, [[Set]]: <emu-val>undefined</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</li><li>If <emu-xref aoid=\"IsGenericDescriptor\"><a href=\"#sec-isgenericdescriptor\">IsGenericDescriptor</a></emu-xref>(<var>Desc</var>) is <emu-val>true</emu-val> or <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>Desc</var>) is <emu-val>true</emu-val>, then<ol><li>If <var>Desc</var> does not have a [[Value]] field, set <var>Desc</var>.[[Value]] to <var>like</var>.[[Value]].</li><li>If <var>Desc</var> does not have a [[Writable]] field, set <var>Desc</var>.[[Writable]] to <var>like</var>.[[Writable]].</li></ol></li><li>Else,<ol><li>If <var>Desc</var> does not have a [[Get]] field, set <var>Desc</var>.[[Get]] to <var>like</var>.[[Get]].</li><li>If <var>Desc</var> does not have a [[Set]] field, set <var>Desc</var>.[[Set]] to <var>like</var>.[[Set]].</li></ol></li><li>If <var>Desc</var> does not have an [[Enumerable]] field, set <var>Desc</var>.[[Enumerable]] to <var>like</var>.[[Enumerable]].</li><li>If <var>Desc</var> does not have a [[Configurable]] field, set <var>Desc</var>.[[Configurable]] to <var>like</var>.[[Configurable]].</li><li>Return <var>Desc</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-async-from-sync-iterator-value-unwrap-functions": {"num": "25.1.4.2.5", "title": "#sec-async-from-sync-iterator-value-unwrap-functions Async-from-Sync Iterator Value Unwrap Functions", "html": "<emu-clause id=\"sec-async-from-sync-iterator-value-unwrap-functions\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-from-sync-iterator-value-unwrap-functions\">#sec-async-from-sync-iterator-value-unwrap-functions</span> Async-from-Sync Iterator Value Unwrap Functions</h1>\n\n          <p>An async-from-sync iterator value unwrap function is an anonymous built-in function that is used by methods of <emu-xref href=\"#sec-%asyncfromsynciteratorprototype%-object\"><a href=\"#sec-%asyncfromsynciteratorprototype%-object\">%AsyncFromSyncIteratorPrototype%</a></emu-xref> when processing the <code>value</code> field of an  <i>IteratorResult</i> object, in order to wait for its value if it is a promise and re-package the result in a new \"unwrapped\"  <i>IteratorResult</i> object. Each async iterator value unwrap function has a [[Done]] internal slot.</p>\n\n          <p>When an async-from-sync iterator value unwrap function is called with argument <var>value</var>, the following steps are taken:</p>\n\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Return !&#160;<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>value</var>, <var>F</var>.[[Done]]).\n          </li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-%asyncfromsynciteratorprototype%.return": {"num": "25.1.4.2.2", "title": "#sec-%asyncfromsynciteratorprototype%.return %AsyncFromSyncIteratorPrototype%.return ( value )", "html": "<emu-clause id=\"sec-%asyncfromsynciteratorprototype%.return\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%asyncfromsynciteratorprototype%.return\">#sec-%asyncfromsynciteratorprototype%.return</span> %AsyncFromSyncIteratorPrototype%.return ( <var>value</var> )</h1>\n\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>promiseCapability</var> be !&#160;<emu-xref aoid=\"NewPromiseCapability\"><a href=\"#sec-newpromisecapability\">NewPromiseCapability</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, or if <var>O</var> does not have a [[SyncIteratorRecord]] internal slot, then<ol><li>Let <var>invalidIteratorError</var> be a newly created <emu-val>TypeError</emu-val> object.</li><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>invalidIteratorError</var> &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></li><li>Let <var>syncIterator</var> be <var>O</var>.[[SyncIteratorRecord]].[[Iterator]].</li><li>Let <var>return</var> be <emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>syncIterator</var>, <code>\"return\"</code>).</li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>return</var>, <var>promiseCapability</var>).</li><li>If <var>return</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>iterResult</var> be !&#160;<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>value</var>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>iterResult</var> &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></li><li>Let <var>result</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>return</var>, <var>syncIterator</var>, &#171; <var>value</var> &#187;).</li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is not Object, then<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; a newly created <emu-val>TypeError</emu-val> object &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></li><li>Return !&#160;<emu-xref aoid=\"AsyncFromSyncIteratorContinuation\"><a href=\"#sec-asyncfromsynciteratorcontinuation\">AsyncFromSyncIteratorContinuation</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-%asyncfromsynciteratorprototype%.throw": {"num": "25.1.4.2.3", "title": "#sec-%asyncfromsynciteratorprototype%.throw %AsyncFromSyncIteratorPrototype%.throw ( value )", "html": "<emu-clause id=\"sec-%asyncfromsynciteratorprototype%.throw\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%asyncfromsynciteratorprototype%.throw\">#sec-%asyncfromsynciteratorprototype%.throw</span> %AsyncFromSyncIteratorPrototype%.throw ( <var>value</var> )</h1>\n\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>promiseCapability</var> be !&#160;<emu-xref aoid=\"NewPromiseCapability\"><a href=\"#sec-newpromisecapability\">NewPromiseCapability</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, or if <var>O</var> does not have a [[SyncIteratorRecord]] internal slot, then<ol><li>Let <var>invalidIteratorError</var> be a newly created <emu-val>TypeError</emu-val> object.</li><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>invalidIteratorError</var> &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></li><li>Let <var>syncIterator</var> be <var>O</var>.[[SyncIteratorRecord]].[[Iterator]].</li><li>Let <var>throw</var> be <emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>syncIterator</var>, <code>\"throw\"</code>).</li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>throw</var>, <var>promiseCapability</var>).</li><li>If <var>throw</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>value</var> &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></li><li>Let <var>result</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>throw</var>, <var>syncIterator</var>, &#171; <var>value</var> &#187;).</li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is not Object, then<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; a newly created <emu-val>TypeError</emu-val> object &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></li><li>Return !&#160;<emu-xref aoid=\"AsyncFromSyncIteratorContinuation\"><a href=\"#sec-asyncfromsynciteratorcontinuation\">AsyncFromSyncIteratorContinuation</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}}, "figData": {"table-async-from-sync-iterator-internal-slots": "Table 71"}}, "to": {"secList": ["sec-properties-of-async-from-sync-iterator-instances", "sec-%asyncfromsynciteratorprototype%.next", "sec-%asyncfromsynciteratorprototype%-object", "sec-getiterator", "sec-createasyncfromsynciterator", "sec-completepropertydescriptor", "sec-async-from-sync-iterator-value-unwrap-functions", "sec-%asyncfromsynciteratorprototype%.return", "sec-%asyncfromsynciteratorprototype%.throw"], "secData": {"sec-properties-of-async-from-sync-iterator-instances": {"num": "25.1.4.3", "title": "#sec-properties-of-async-from-sync-iterator-instances Properties of Async-from-Sync Iterator Instances", "html": "<emu-clause id=\"sec-properties-of-async-from-sync-iterator-instances\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-async-from-sync-iterator-instances\">#sec-properties-of-async-from-sync-iterator-instances</span> Properties of Async-from-Sync Iterator Instances</h1>\n        <p>Async-from-Sync Iterator instances are ordinary objects that inherit properties from the <emu-xref href=\"#sec-%asyncfromsynciteratorprototype%-object\"><a href=\"#sec-%asyncfromsynciteratorprototype%-object\">%AsyncFromSyncIteratorPrototype%</a></emu-xref> intrinsic object. Async-from-Sync Iterator instances are initially created with the internal slots listed in  <emu-xref href=\"#table-async-from-sync-iterator-internal-slots\"><a href=\"#table-async-from-sync-iterator-internal-slots\" class=\"excluded-xref\" excluded-id=\"table-async-from-sync-iterator-internal-slots\">#table-async-from-sync-iterator-internal-slots</a></emu-xref>. Async-from-Sync Iterator instances are not directly observable from ECMAScript code.</p>\n        <emu-table id=\"table-async-from-sync-iterator-internal-slots\" caption=\"Internal Slots of Async-from-Sync Iterator Instances\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-async-from-sync-iterator-internal-slots\">#table-async-from-sync-iterator-internal-slots</span>: Internal Slots of Async-from-Sync Iterator Instances</figcaption>\n          <table>\n            <thead>\n            <tr>\n              <th>\n                Internal Slot\n              \n              </th>\n              <th>\n                Description\n              \n              </th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr>\n              <td>\n                [[SyncIteratorRecord]]\n              \n              </td>\n              <td>\n                A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>, of the type returned by <emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>, representing the original synchronous iterator which is being adapted.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n\n      "}, "sec-%asyncfromsynciteratorprototype%.next": {"num": "25.1.4.2.1", "title": "#sec-%asyncfromsynciteratorprototype%.next %AsyncFromSyncIteratorPrototype%.next ( value )", "html": "<emu-clause id=\"sec-%asyncfromsynciteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%asyncfromsynciteratorprototype%.next\">#sec-%asyncfromsynciteratorprototype%.next</span> %AsyncFromSyncIteratorPrototype%.next ( <var>value</var> )</h1>\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object and <var>O</var> has a [[SyncIteratorRecord]] internal slot.</li><li>Let <var>promiseCapability</var> be !&#160;<emu-xref aoid=\"NewPromiseCapability\"><a href=\"#sec-newpromisecapability\">NewPromiseCapability</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>).</li><li>Let <var>syncIteratorRecord</var> be <var>O</var>.[[SyncIteratorRecord]].</li><li>Let <var>result</var> be <emu-xref aoid=\"IteratorNext\"><a href=\"#sec-iteratornext\">IteratorNext</a></emu-xref>(<var>syncIteratorRecord</var>, <var>value</var>).</li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).</li><li>Return !&#160;<emu-xref aoid=\"AsyncFromSyncIteratorContinuation\"><a href=\"#sec-asyncfromsynciteratorcontinuation\">AsyncFromSyncIteratorContinuation</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-%asyncfromsynciteratorprototype%-object": {"num": "25.1.4.2", "title": "#sec-%asyncfromsynciteratorprototype%-object The %AsyncFromSyncIteratorPrototype% Object", "html": "<emu-clause id=\"sec-%asyncfromsynciteratorprototype%-object\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%asyncfromsynciteratorprototype%-object\">#sec-%asyncfromsynciteratorprototype%-object</span> The %AsyncFromSyncIteratorPrototype% Object</h1>\n        <p>The  <dfn>%AsyncFromSyncIteratorPrototype%</dfn> object:</p>\n        <ul>\n          <li>has properties that are inherited by all Async-from-Sync Iterator Objects.</li>\n          <li>is an ordinary object.</li>\n          <li>has a [[Prototype]] internal slot whose value is the intrinsic object <emu-xref href=\"#sec-asynciteratorprototype\"><a href=\"#sec-asynciteratorprototype\">%AsyncIteratorPrototype%</a></emu-xref>.</li>\n          <li>has the following properties:</li>\n        </ul>\n\n        <div id=\"excluded-sec-%asyncfromsynciteratorprototype%.next\"><h1><span class=\"secnum\">25.1.4.2.1</span>#sec-%asyncfromsynciteratorprototype%.next %AsyncFromSyncIteratorPrototype%.next ( value )</h1>...</div><div id=\"excluded-sec-%asyncfromsynciteratorprototype%.return\"><h1><span class=\"secnum\">25.1.4.2.2</span>#sec-%asyncfromsynciteratorprototype%.return %AsyncFromSyncIteratorPrototype%.return ( value )</h1>...</div><div id=\"excluded-sec-%asyncfromsynciteratorprototype%.throw\"><h1><span class=\"secnum\">25.1.4.2.3</span>#sec-%asyncfromsynciteratorprototype%.throw %AsyncFromSyncIteratorPrototype%.throw ( value )</h1>...</div><div id=\"excluded-sec-async-from-sync-iterator-value-unwrap-functions\"><h1><span class=\"secnum\">25.1.4.2.4</span>#sec-async-from-sync-iterator-value-unwrap-functions Async-from-Sync Iterator Value Unwrap Functions</h1>...</div></emu-clause>\n\n      "}, "sec-getiterator": {"num": "7.4.1", "title": "#sec-getiterator GetIterator ( obj [ , hint [ , method ] ] )", "html": "<emu-clause id=\"sec-getiterator\" aoid=\"GetIterator\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getiterator\">#sec-getiterator</span> GetIterator ( <var>obj</var> [ , <var>hint</var> [ , <var>method</var> ] ] )</h1>\n      <p>The abstract operation GetIterator with argument <var>obj</var> and optional arguments <var>hint</var> and <var>method</var> performs the following steps:</p>\n      <emu-alg><ol><li>If <var>hint</var> is not present, set <var>hint</var> to <emu-const>sync</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>hint</var> is either <emu-const>sync</emu-const> or <emu-const>async</emu-const>.</li><li>If <var>method</var> is not present, then<ol><li>If <var>hint</var> is <emu-const>async</emu-const>, then<ol><li>Set <var>method</var> to ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>obj</var>, @@asyncIterator).</li><li>If <var>method</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>syncMethod</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>obj</var>, @@iterator).</li><li>Let <var>syncIteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>obj</var>, <emu-const>sync</emu-const>, <var>syncMethod</var>).</li><li>Return ?&#160;<emu-xref aoid=\"CreateAsyncFromSyncIterator\"><a href=\"#sec-createasyncfromsynciterator\">CreateAsyncFromSyncIterator</a></emu-xref>(<var>syncIteratorRecord</var>).</li></ol></li></ol></li><li>Otherwise, set <var>method</var> to ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>obj</var>, @@iterator).</li></ol></li><li>Let <var>iterator</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>method</var>, <var>obj</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>iterator</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>nextMethod</var> be ?&#160;<emu-xref aoid=\"GetV\"><a href=\"#sec-getv\">GetV</a></emu-xref>(<var>iterator</var>, <code>\"next\"</code>).</li><li>Let <var>iteratorRecord</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Iterator]]: <var>iterator</var>, [[NextMethod]]: <var>nextMethod</var>, [[Done]]: <emu-val>false</emu-val> }.</li><li>Return <var>iteratorRecord</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-createasyncfromsynciterator": {"num": "25.1.4.1", "title": "#sec-createasyncfromsynciterator CreateAsyncFromSyncIterator ( syncIteratorRecord )", "html": "<emu-clause id=\"sec-createasyncfromsynciterator\" aoid=\"CreateAsyncFromSyncIterator\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createasyncfromsynciterator\">#sec-createasyncfromsynciterator</span> CreateAsyncFromSyncIterator ( <var>syncIteratorRecord</var> )</h1>\n        <p>The abstract operation CreateAsyncFromSyncIterator is used to create an async iterator <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> from a synchronous iterator <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>. It performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>asyncIterator</var> be !&#160;<emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-%asyncfromsynciteratorprototype%-object\"><a href=\"#sec-%asyncfromsynciteratorprototype%-object\">%AsyncFromSyncIteratorPrototype%</a></emu-xref>, &#171; [[SyncIteratorRecord]] &#187;).</li><li>Set <var>asyncIterator</var>.[[SyncIteratorRecord]] to <var>syncIteratorRecord</var>.</li><li>Let <var>nextMethod</var> be !&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>asyncIterator</var>, <code>\"next\"</code>).</li><li>Let <var>iteratorRecord</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Iterator]]: <var>asyncIterator</var>, [[NextMethod]]: <var>nextMethod</var>, [[Done]]: <emu-val>false</emu-val> }.</li><li>Return <var>iteratorRecord</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-completepropertydescriptor": {"num": "6.2.5.6", "title": "#sec-completepropertydescriptor CompletePropertyDescriptor ( Desc )", "html": "<emu-clause id=\"sec-completepropertydescriptor\" aoid=\"CompletePropertyDescriptor\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-completepropertydescriptor\">#sec-completepropertydescriptor</span> CompletePropertyDescriptor ( <var>Desc</var> )</h1>\n        <p>When the abstract operation CompletePropertyDescriptor is called with <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref> <var>Desc</var>, the following steps are taken:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>Desc</var> is a <emu-xref href=\"#sec-property-descriptor-specification-type\"><a href=\"#sec-property-descriptor-specification-type\">Property Descriptor</a></emu-xref>.</li><li>Let <var>like</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Value]]: <emu-val>undefined</emu-val>, [[Writable]]: <emu-val>false</emu-val>, [[Get]]: <emu-val>undefined</emu-val>, [[Set]]: <emu-val>undefined</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</li><li>If <emu-xref aoid=\"IsGenericDescriptor\"><a href=\"#sec-isgenericdescriptor\">IsGenericDescriptor</a></emu-xref>(<var>Desc</var>) is <emu-val>true</emu-val> or <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>Desc</var>) is <emu-val>true</emu-val>, then<ol><li>If <var>Desc</var> does not have a [[Value]] field, set <var>Desc</var>.[[Value]] to <var>like</var>.[[Value]].</li><li>If <var>Desc</var> does not have a [[Writable]] field, set <var>Desc</var>.[[Writable]] to <var>like</var>.[[Writable]].</li></ol></li><li>Else,<ol><li>If <var>Desc</var> does not have a [[Get]] field, set <var>Desc</var>.[[Get]] to <var>like</var>.[[Get]].</li><li>If <var>Desc</var> does not have a [[Set]] field, set <var>Desc</var>.[[Set]] to <var>like</var>.[[Set]].</li></ol></li><li>If <var>Desc</var> does not have an [[Enumerable]] field, set <var>Desc</var>.[[Enumerable]] to <var>like</var>.[[Enumerable]].</li><li>If <var>Desc</var> does not have a [[Configurable]] field, set <var>Desc</var>.[[Configurable]] to <var>like</var>.[[Configurable]].</li><li>Return <var>Desc</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-async-from-sync-iterator-value-unwrap-functions": {"num": "25.1.4.2.4", "title": "#sec-async-from-sync-iterator-value-unwrap-functions Async-from-Sync Iterator Value Unwrap Functions", "html": "<emu-clause id=\"sec-async-from-sync-iterator-value-unwrap-functions\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-from-sync-iterator-value-unwrap-functions\">#sec-async-from-sync-iterator-value-unwrap-functions</span> Async-from-Sync Iterator Value Unwrap Functions</h1>\n\n          <p>An async-from-sync iterator value unwrap function is an anonymous built-in function that is used by <emu-xref aoid=\"AsyncFromSyncIteratorContinuation\"><a href=\"#sec-asyncfromsynciteratorcontinuation\">AsyncFromSyncIteratorContinuation</a></emu-xref> when processing the <code>value</code> property of an  <i>IteratorResult</i> object, in order to wait for its value if it is a promise and re-package the result in a new \"unwrapped\"  <i>IteratorResult</i> object. Each async-from-sync iterator value unwrap function has a [[Done]] internal slot.</p>\n\n          <p>When an async-from-sync iterator value unwrap function is called with argument <var>value</var>, the following steps are taken:</p>\n\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Return !&#160;<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>value</var>, <var>F</var>.[[Done]]).\n          </li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-%asyncfromsynciteratorprototype%.return": {"num": "25.1.4.2.2", "title": "#sec-%asyncfromsynciteratorprototype%.return %AsyncFromSyncIteratorPrototype%.return ( value )", "html": "<emu-clause id=\"sec-%asyncfromsynciteratorprototype%.return\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%asyncfromsynciteratorprototype%.return\">#sec-%asyncfromsynciteratorprototype%.return</span> %AsyncFromSyncIteratorPrototype%.return ( <var>value</var> )</h1>\n\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object and <var>O</var> has a [[SyncIteratorRecord]] internal slot.</li><li>Let <var>promiseCapability</var> be !&#160;<emu-xref aoid=\"NewPromiseCapability\"><a href=\"#sec-newpromisecapability\">NewPromiseCapability</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>).</li><li>Let <var>syncIterator</var> be <var>O</var>.[[SyncIteratorRecord]].[[Iterator]].</li><li>Let <var>return</var> be <emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>syncIterator</var>, <code>\"return\"</code>).</li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>return</var>, <var>promiseCapability</var>).</li><li>If <var>return</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>iterResult</var> be !&#160;<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>value</var>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>iterResult</var> &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></li><li>Let <var>result</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>return</var>, <var>syncIterator</var>, &#171; <var>value</var> &#187;).</li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is not Object, then<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; a newly created <emu-val>TypeError</emu-val> object &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></li><li>Return !&#160;<emu-xref aoid=\"AsyncFromSyncIteratorContinuation\"><a href=\"#sec-asyncfromsynciteratorcontinuation\">AsyncFromSyncIteratorContinuation</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-%asyncfromsynciteratorprototype%.throw": {"num": "25.1.4.2.3", "title": "#sec-%asyncfromsynciteratorprototype%.throw %AsyncFromSyncIteratorPrototype%.throw ( value )", "html": "<emu-clause id=\"sec-%asyncfromsynciteratorprototype%.throw\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%asyncfromsynciteratorprototype%.throw\">#sec-%asyncfromsynciteratorprototype%.throw</span> %AsyncFromSyncIteratorPrototype%.throw ( <var>value</var> )</h1>\n\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object and <var>O</var> has a [[SyncIteratorRecord]] internal slot.</li><li>Let <var>promiseCapability</var> be !&#160;<emu-xref aoid=\"NewPromiseCapability\"><a href=\"#sec-newpromisecapability\">NewPromiseCapability</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>).</li><li>Let <var>syncIterator</var> be <var>O</var>.[[SyncIteratorRecord]].[[Iterator]].</li><li>Let <var>throw</var> be <emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>syncIterator</var>, <code>\"throw\"</code>).</li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>throw</var>, <var>promiseCapability</var>).</li><li>If <var>throw</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>value</var> &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></li><li>Let <var>result</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>throw</var>, <var>syncIterator</var>, &#171; <var>value</var> &#187;).</li><li><emu-xref aoid=\"IfAbruptRejectPromise\"><a href=\"#sec-ifabruptrejectpromise\">IfAbruptRejectPromise</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is not Object, then<ol><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; a newly created <emu-val>TypeError</emu-val> object &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></li><li>Return !&#160;<emu-xref aoid=\"AsyncFromSyncIteratorContinuation\"><a href=\"#sec-asyncfromsynciteratorcontinuation\">AsyncFromSyncIteratorContinuation</a></emu-xref>(<var>result</var>, <var>promiseCapability</var>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}}, "figData": {"table-async-from-sync-iterator-internal-slots": "Table 71"}}}