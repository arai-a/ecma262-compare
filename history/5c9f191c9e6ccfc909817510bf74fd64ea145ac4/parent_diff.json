{"from": {"secList": ["sec-numeric-types-number-remainder", "sec-numeric-types-number-exponentiate", "sec-numeric-types-number-add", "sec-numeric-types-number-multiply", "sec-numeric-types-number-divide"], "secData": {"sec-numeric-types-number-remainder": {"num": "6.1.6.1.6", "title": "#sec-numeric-types-number-remainder Number::remainder ( n, d )", "html": "<emu-clause id=\"sec-numeric-types-number-remainder\" oldids=\"sec-applying-the-mod-operator\"><span id=\"sec-applying-the-mod-operator\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-remainder\">#sec-numeric-types-number-remainder</span> Number::remainder ( <var>n</var>, <var>d</var> )</h1>\n          <p>The abstract operation Number::remainder takes arguments <var>n</var> (a Number) and <var>d</var> (a Number). It yields the remainder of its operands from an implied division; <var>n</var> is the dividend and <var>d</var> is the divisor.</p>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>In C and C++, the remainder operator accepts only integral operands; in ECMAScript, it also accepts floating-point operands.</p>\n          </div></emu-note>\n          <p>The result of a floating-point remainder operation as computed by the <code>%</code> operator is not the same as the &#8220;remainder&#8221; operation defined by <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref>. The <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> &#8220;remainder&#8221; operation computes the remainder from a rounding division, not a truncating division, and so its behaviour is not analogous to that of the usual <emu-not-ref>integer</emu-not-ref> remainder operator. Instead the ECMAScript language defines <code>%</code> on floating-point operations to behave in a manner analogous to that of the Java <emu-not-ref>integer</emu-not-ref> remainder operator; this may be compared with the C library function fmod.</p>\n          <p>The result of an ECMAScript floating-point remainder operation is determined by the rules of IEEE arithmetic:</p>\n          <ul>\n            <li>\n              If either operand is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n            </li>\n            <li>\n              The sign of the result equals the sign of the dividend.\n            </li>\n            <li>\n              If the dividend is an infinity, or the divisor is a zero, or both, the result is <emu-val>NaN</emu-val>.\n            </li>\n            <li>\n              If the dividend is finite and the divisor is an infinity, the result equals the dividend.\n            </li>\n            <li>\n              If the dividend is a zero and the divisor is non-zero and finite, the result is the same as the dividend.\n            </li>\n            <li>\n              In the remaining cases, where neither an infinity, nor a zero, nor <emu-val>NaN</emu-val> is involved, the floating-point remainder <var>r</var> from a dividend <var>n</var> and a divisor <var>d</var> is defined by the mathematical relation <var>r</var> = <var>n</var> - (<var>d</var> &#215; <var>q</var>) where <var>q</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> that is negative only if <var>n</var>/<var>d</var> is negative and positive only if <var>n</var>/<var>d</var> is positive, and whose magnitude is as large as possible without exceeding the magnitude of the true mathematical quotient of <var>n</var> and <var>d</var>. <var>r</var> is computed and rounded to the nearest representable value using <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> roundTiesToEven mode.\n            </li>\n          </ul>\n        </emu-clause>\n\n        "}, "sec-numeric-types-number-exponentiate": {"num": "6.1.6.1.3", "title": "#sec-numeric-types-number-exponentiate Number::exponentiate ( base, exponent )", "html": "<emu-clause id=\"sec-numeric-types-number-exponentiate\" oldids=\"sec-applying-the-exp-operator\"><span id=\"sec-applying-the-exp-operator\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-exponentiate\">#sec-numeric-types-number-exponentiate</span> Number::exponentiate ( <var>base</var>, <var>exponent</var> )</h1>\n          <p>The abstract operation Number::exponentiate takes arguments <var>base</var> (a Number) and <var>exponent</var> (a Number). It returns an <emu-xref href=\"#implementation-approximated\"><a href=\"#implementation-approximated\">implementation-approximated</a></emu-xref> value representing the result of raising <var>base</var> to the power <var>exponent</var>, subject to the following requirements:</p>\n          <ul>\n            <li>If <var>exponent</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.</li>\n            <li>If <var>exponent</var> is <emu-val>+0</emu-val><sub>&#120125;</sub>, the result is <emu-val>1</emu-val><sub>&#120125;</sub>, even if <var>base</var> is <emu-val>NaN</emu-val>.</li>\n            <li>If <var>exponent</var> is <emu-val>-0</emu-val><sub>&#120125;</sub>, the result is <emu-val>1</emu-val><sub>&#120125;</sub>, even if <var>base</var> is <emu-val>NaN</emu-val>.</li>\n            <li>If <var>base</var> is <emu-val>NaN</emu-val> and <var>exponent</var> is non-zero, the result is <emu-val>NaN</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>base</var>)) &gt; 1 and <var>exponent</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, the result is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>base</var>)) &gt; 1 and <var>exponent</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, the result is <emu-val>+0</emu-val><sub>&#120125;</sub>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>base</var>)) is 1 and <var>exponent</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, the result is <emu-val>NaN</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>base</var>)) is 1 and <var>exponent</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, the result is <emu-val>NaN</emu-val>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>base</var>)) &lt; 1 and <var>exponent</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, the result is <emu-val>+0</emu-val><sub>&#120125;</sub>.</li>\n            <li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>base</var>)) &lt; 1 and <var>exponent</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, the result is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>.</li>\n            <li>If <var>base</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub> and <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>exponent</var>) &gt; 0, the result is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>.</li>\n            <li>If <var>base</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub> and <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>exponent</var>) &lt; 0, the result is <emu-val>+0</emu-val><sub>&#120125;</sub>.</li>\n            <li>If <var>base</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub> and <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>exponent</var>) &gt; 0 and <var>exponent</var> is an odd <emu-xref href=\"#integral-number\"><a href=\"#integral-number\">integral Number</a></emu-xref>, the result is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>.</li>\n            <li>If <var>base</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub> and <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>exponent</var>) &gt; 0 and <var>exponent</var> is not an odd <emu-xref href=\"#integral-number\"><a href=\"#integral-number\">integral Number</a></emu-xref>, the result is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>.</li>\n            <li>If <var>base</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub> and <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>exponent</var>) &lt; 0 and <var>exponent</var> is an odd <emu-xref href=\"#integral-number\"><a href=\"#integral-number\">integral Number</a></emu-xref>, the result is <emu-val>-0</emu-val><sub>&#120125;</sub>.</li>\n            <li>If <var>base</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub> and <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>exponent</var>) &lt; 0 and <var>exponent</var> is not an odd <emu-xref href=\"#integral-number\"><a href=\"#integral-number\">integral Number</a></emu-xref>, the result is <emu-val>+0</emu-val><sub>&#120125;</sub>.</li>\n            <li>If <var>base</var> is <emu-val>+0</emu-val><sub>&#120125;</sub> and <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>exponent</var>) &gt; 0, the result is <emu-val>+0</emu-val><sub>&#120125;</sub>.</li>\n            <li>If <var>base</var> is <emu-val>+0</emu-val><sub>&#120125;</sub> and <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>exponent</var>) &lt; 0, the result is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>.</li>\n            <li>If <var>base</var> is <emu-val>-0</emu-val><sub>&#120125;</sub> and <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>exponent</var>) &gt; 0 and <var>exponent</var> is an odd <emu-xref href=\"#integral-number\"><a href=\"#integral-number\">integral Number</a></emu-xref>, the result is <emu-val>-0</emu-val><sub>&#120125;</sub>.</li>\n            <li>If <var>base</var> is <emu-val>-0</emu-val><sub>&#120125;</sub> and <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>exponent</var>) &gt; 0 and <var>exponent</var> is not an odd <emu-xref href=\"#integral-number\"><a href=\"#integral-number\">integral Number</a></emu-xref>, the result is <emu-val>+0</emu-val><sub>&#120125;</sub>.</li>\n            <li>If <var>base</var> is <emu-val>-0</emu-val><sub>&#120125;</sub> and <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>exponent</var>) &lt; 0 and <var>exponent</var> is an odd <emu-xref href=\"#integral-number\"><a href=\"#integral-number\">integral Number</a></emu-xref>, the result is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>.</li>\n            <li>If <var>base</var> is <emu-val>-0</emu-val><sub>&#120125;</sub> and <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>exponent</var>) &lt; 0 and <var>exponent</var> is not an odd <emu-xref href=\"#integral-number\"><a href=\"#integral-number\">integral Number</a></emu-xref>, the result is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>.</li>\n            <li>If <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>base</var>) &lt; 0 and <var>base</var> is finite and <var>exponent</var> is finite and <var>exponent</var> is not an <emu-xref href=\"#integral-number\"><a href=\"#integral-number\">integral Number</a></emu-xref>, the result is <emu-val>NaN</emu-val>.</li>\n          </ul>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>The result of <var>base</var> <code>**</code> <var>exponent</var> when <var>base</var> is <emu-val>1</emu-val><sub>&#120125;</sub> or <emu-val>-1</emu-val><sub>&#120125;</sub> and <var>exponent</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub> or <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, or when <var>base</var> is <emu-val>1</emu-val><sub>&#120125;</sub> and <var>exponent</var> is <emu-val>NaN</emu-val>, differs from <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref>. The first edition of ECMAScript specified a result of <emu-val>NaN</emu-val> for this operation, whereas later versions of <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> specified <emu-val>1</emu-val><sub>&#120125;</sub>. The historical ECMAScript behaviour is preserved for compatibility reasons.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-numeric-types-number-add": {"num": "6.1.6.1.7", "title": "#sec-numeric-types-number-add Number::add ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-number-add\" oldids=\"sec-applying-the-additive-operators-to-numbers\"><span id=\"sec-applying-the-additive-operators-to-numbers\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-add\">#sec-numeric-types-number-add</span> Number::add ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation Number::add takes arguments <var>x</var> (a Number) and <var>y</var> (a Number). It performs addition, producing the sum of <var>x</var> and <var>y</var> as determined using the rules of <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary double-precision arithmetic:</p>\n          <ul>\n            <li>\n              If either operand is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n            </li>\n            <li>\n              The sum of two infinities of opposite sign is <emu-val>NaN</emu-val>.\n            </li>\n            <li>\n              The sum of two infinities of the same sign is the infinity of that sign.\n            </li>\n            <li>\n              The sum of an infinity and a finite value is the infinite operand.\n            </li>\n            <li>\n              The sum of two negative zeroes is <emu-val>-0</emu-val><sub>&#120125;</sub>. The sum of two positive zeroes, or of two zeroes of opposite sign, is <emu-val>+0</emu-val><sub>&#120125;</sub>.\n            </li>\n            <li>\n              The sum of a zero and a non-zero finite value is the non-zero operand.\n            </li>\n            <li>\n              The sum of two non-zero finite values of the same magnitude and opposite sign is <emu-val>+0</emu-val><sub>&#120125;</sub>.\n            </li>\n            <li>\n              In the remaining cases, where neither an infinity, nor a zero, nor <emu-val>NaN</emu-val> is involved, and the operands have the same sign or have different magnitudes, the sum is computed and rounded to the nearest representable value using <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> roundTiesToEven mode. If the magnitude is too large to represent, the operation overflows and the result is then an infinity of appropriate sign. The ECMAScript language requires support of gradual underflow as defined by <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref>.\n            </li>\n          </ul>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>Finite-precision addition is commutative, but not always associative.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-numeric-types-number-multiply": {"num": "6.1.6.1.4", "title": "#sec-numeric-types-number-multiply Number::multiply ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-number-multiply\" oldids=\"sec-applying-the-mul-operator\"><span id=\"sec-applying-the-mul-operator\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-multiply\">#sec-numeric-types-number-multiply</span> Number::multiply ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation Number::multiply takes arguments <var>x</var> (a Number) and <var>y</var> (a Number). It performs multiplication, producing the product of <var>x</var> and <var>y</var>, as determined by the rules of <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary double-precision arithmetic:</p>\n          <ul>\n            <li>\n              If either operand is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n            </li>\n            <li>\n              The sign of the result is positive if both operands have the same sign, negative if the operands have different signs.\n            </li>\n            <li>\n              Multiplication of an infinity by a zero results in <emu-val>NaN</emu-val>.\n            </li>\n            <li>\n              Multiplication of an infinity by an infinity results in an infinity. The sign is determined by the rule already stated above.\n            </li>\n            <li>\n              Multiplication of an infinity by a finite non-zero value results in a signed infinity. The sign is determined by the rule already stated above.\n            </li>\n            <li>\n              In the remaining cases, where neither an infinity nor <emu-val>NaN</emu-val> is involved, the product is computed and rounded to the nearest representable value using <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> roundTiesToEven mode. If the magnitude is too large to represent, the result is then an infinity of appropriate sign. If the magnitude is too small to represent, the result is then a zero of appropriate sign. The ECMAScript language requires support of gradual underflow as defined by <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref>.\n            </li>\n          </ul>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>Finite-precision multiplication is commutative, but not always associative.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-numeric-types-number-divide": {"num": "6.1.6.1.5", "title": "#sec-numeric-types-number-divide Number::divide ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-number-divide\" oldids=\"sec-applying-the-div-operator\"><span id=\"sec-applying-the-div-operator\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-divide\">#sec-numeric-types-number-divide</span> Number::divide ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation Number::divide takes arguments <var>x</var> (a Number) and <var>y</var> (a Number). It performs division, producing the quotient of <var>x</var> and <var>y</var>; <var>x</var> is the dividend and <var>y</var> is the divisor. The result is determined by the specification of <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> arithmetic:</p>\n          <ul>\n            <li>\n              If either operand is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.\n            </li>\n            <li>\n              The sign of the result is positive if both operands have the same sign, negative if the operands have different signs.\n            </li>\n            <li>\n              Division of an infinity by an infinity results in <emu-val>NaN</emu-val>.\n            </li>\n            <li>\n              Division of an infinity by a zero results in an infinity. The sign is determined by the rule already stated above.\n            </li>\n            <li>\n              Division of an infinity by a non-zero finite value results in a signed infinity. The sign is determined by the rule already stated above.\n            </li>\n            <li>\n              Division of a finite value by an infinity results in zero. The sign is determined by the rule already stated above.\n            </li>\n            <li>\n              Division of a zero by a zero results in <emu-val>NaN</emu-val>; division of zero by any other finite value results in zero, with the sign determined by the rule already stated above.\n            </li>\n            <li>\n              Division of a non-zero finite value by a zero results in a signed infinity. The sign is determined by the rule already stated above.\n            </li>\n            <li>\n              In the remaining cases, where neither an infinity, nor a zero, nor <emu-val>NaN</emu-val> is involved, the quotient is computed and rounded to the nearest representable value using <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> roundTiesToEven mode. If the magnitude is too large to represent, the operation overflows; the result is then an infinity of appropriate sign. If the magnitude is too small to represent, the operation underflows and the result is a zero of the appropriate sign. The ECMAScript language requires support of gradual underflow as defined by <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref>.\n            </li>\n          </ul>\n        </emu-clause>\n\n        "}}, "figData": {}}, "to": {"secList": ["sec-numeric-types-number-remainder", "sec-numeric-types-number-exponentiate", "sec-numeric-types-number-add", "sec-numeric-types-number-multiply", "sec-numeric-types-number-divide"], "secData": {"sec-numeric-types-number-remainder": {"num": "6.1.6.1.6", "title": "#sec-numeric-types-number-remainder Number::remainder ( n, d )", "html": "<emu-clause id=\"sec-numeric-types-number-remainder\" oldids=\"sec-applying-the-mod-operator\"><span id=\"sec-applying-the-mod-operator\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-remainder\">#sec-numeric-types-number-remainder</span> Number::remainder ( <var>n</var>, <var>d</var> )</h1>\n          <p>The abstract operation Number::remainder takes arguments <var>n</var> (a Number) and <var>d</var> (a Number). It yields the remainder from an implied division of its operands where <var>n</var> is the dividend and <var>d</var> is the divisor. It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>n</var> is <emu-val>NaN</emu-val> or <var>d</var> is <emu-val>NaN</emu-val>, return <emu-val>NaN</emu-val>.</li><li>If <var>n</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub> or <var>n</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>NaN</emu-val>.</li><li>If <var>d</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub> or <var>d</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, return <var>n</var>.</li><li>If <var>d</var> is <emu-val>+0</emu-val><sub>&#120125;</sub> or <var>d</var> is <emu-val>-0</emu-val><sub>&#120125;</sub>, return <emu-val>NaN</emu-val>.</li><li>If <var>n</var> is <emu-val>+0</emu-val><sub>&#120125;</sub> or <var>n</var> is <emu-val>-0</emu-val><sub>&#120125;</sub>, return <var>n</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>n</var> and <var>d</var> are finite and non-zero.</li><li>Let <var>r</var> be <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) - (<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>d</var>) &#215; <var>q</var>) where <var>q</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> that is negative if and only if <var>n</var> and <var>d</var> have opposite sign, and whose magnitude is as large as possible without exceeding the magnitude of <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>n</var>) / <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>d</var>).</li><li>Return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<var>r</var>).</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>In C and C++, the remainder operator accepts only integral operands; in ECMAScript, it also accepts floating-point operands.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">The result of a floating-point remainder operation as computed by the <code>%</code> operator is not the same as the &#8220;remainder&#8221; operation defined by <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref>. The <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> &#8220;remainder&#8221; operation computes the remainder from a rounding division, not a truncating division, and so its behaviour is not analogous to that of the usual <emu-not-ref>integer</emu-not-ref> remainder operator. Instead the ECMAScript language defines <code>%</code> on floating-point operations to behave in a manner analogous to that of the Java <emu-not-ref>integer</emu-not-ref> remainder operator; this may be compared with the C library function fmod.</div></emu-note>\n        </emu-clause>\n\n        "}, "sec-numeric-types-number-exponentiate": {"num": "6.1.6.1.3", "title": "#sec-numeric-types-number-exponentiate Number::exponentiate ( base, exponent )", "html": "<emu-clause id=\"sec-numeric-types-number-exponentiate\" oldids=\"sec-applying-the-exp-operator\"><span id=\"sec-applying-the-exp-operator\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-exponentiate\">#sec-numeric-types-number-exponentiate</span> Number::exponentiate ( <var>base</var>, <var>exponent</var> )</h1>\n          <p>The abstract operation Number::exponentiate takes arguments <var>base</var> (a Number) and <var>exponent</var> (a Number). It returns an <emu-xref href=\"#implementation-approximated\"><a href=\"#implementation-approximated\">implementation-approximated</a></emu-xref> value representing the result of raising <var>base</var> to the <var>exponent</var> power. It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>exponent</var> is <emu-val>NaN</emu-val>, return <emu-val>NaN</emu-val>.</li><li>If <var>exponent</var> is <emu-val>+0</emu-val><sub>&#120125;</sub> or <var>exponent</var> is <emu-val>-0</emu-val><sub>&#120125;</sub>, return <emu-val>1</emu-val><sub>&#120125;</sub>.</li><li>If <var>base</var> is <emu-val>NaN</emu-val>, return <emu-val>NaN</emu-val>.</li><li>If <var>base</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, then<ol><li>If <var>exponent</var> &gt; <emu-val>+0</emu-val><sub>&#120125;</sub>, return <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>. Otherwise, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li></ol></li><li>If <var>base</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, then<ol><li>If <var>exponent</var> &gt; <emu-val>+0</emu-val><sub>&#120125;</sub>, then<ol><li>If <var>exponent</var> is an odd <emu-xref href=\"#integral-number\"><a href=\"#integral-number\">integral Number</a></emu-xref>, return <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>. Otherwise, return <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>.</li></ol></li><li>Else,<ol><li>If <var>exponent</var> is an odd <emu-xref href=\"#integral-number\"><a href=\"#integral-number\">integral Number</a></emu-xref>, return <emu-val>-0</emu-val><sub>&#120125;</sub>. Otherwise, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li></ol></li></ol></li><li>If <var>base</var> is <emu-val>+0</emu-val><sub>&#120125;</sub>, then<ol><li>If <var>exponent</var> &gt; <emu-val>+0</emu-val><sub>&#120125;</sub>, return <emu-val>+0</emu-val><sub>&#120125;</sub>. Otherwise, return <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>.</li></ol></li><li>If <var>base</var> is <emu-val>-0</emu-val><sub>&#120125;</sub>, then<ol><li>If <var>exponent</var> &gt; <emu-val>+0</emu-val><sub>&#120125;</sub>, then<ol><li>If <var>exponent</var> is an odd <emu-xref href=\"#integral-number\"><a href=\"#integral-number\">integral Number</a></emu-xref>, return <emu-val>-0</emu-val><sub>&#120125;</sub>. Otherwise, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li></ol></li><li>Else,<ol><li>If <var>exponent</var> is an odd <emu-xref href=\"#integral-number\"><a href=\"#integral-number\">integral Number</a></emu-xref>, return <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>. Otherwise, return <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>.</li></ol></li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>base</var> is finite and is neither <emu-val>+0</emu-val><sub>&#120125;</sub> nor <emu-val>-0</emu-val><sub>&#120125;</sub>.</li><li>If <var>exponent</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, then<ol><li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>base</var>)) &gt; 1, return <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>.</li><li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>base</var>)) is 1, return <emu-val>NaN</emu-val>.</li><li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>base</var>)) &lt; 1, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li></ol></li><li>If <var>exponent</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, then<ol><li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>base</var>)) &gt; 1, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li><li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>base</var>)) is 1, return <emu-val>NaN</emu-val>.</li><li>If <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>base</var>)) &lt; 1, return <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>exponent</var> is finite and is neither <emu-val>+0</emu-val><sub>&#120125;</sub> nor <emu-val>-0</emu-val><sub>&#120125;</sub>.</li><li>If <var>base</var> &lt; <emu-val>+0</emu-val><sub>&#120125;</sub> and <var>exponent</var> is not an <emu-xref href=\"#integral-number\"><a href=\"#integral-number\">integral Number</a></emu-xref>, return <emu-val>NaN</emu-val>.</li><li>Return an <emu-xref href=\"#implementation-approximated\"><a href=\"#implementation-approximated\">implementation-approximated</a></emu-xref> value representing the result of raising <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>base</var>) to the <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>exponent</var>) power.</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>The result of <var>base</var> <code>**</code> <var>exponent</var> when <var>base</var> is <emu-val>1</emu-val><sub>&#120125;</sub> or <emu-val>-1</emu-val><sub>&#120125;</sub> and <var>exponent</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub> or <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, or when <var>base</var> is <emu-val>1</emu-val><sub>&#120125;</sub> and <var>exponent</var> is <emu-val>NaN</emu-val>, differs from <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref>. The first edition of ECMAScript specified a result of <emu-val>NaN</emu-val> for this operation, whereas later versions of <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> specified <emu-val>1</emu-val><sub>&#120125;</sub>. The historical ECMAScript behaviour is preserved for compatibility reasons.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-numeric-types-number-add": {"num": "6.1.6.1.7", "title": "#sec-numeric-types-number-add Number::add ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-number-add\" oldids=\"sec-applying-the-additive-operators-to-numbers\"><span id=\"sec-applying-the-additive-operators-to-numbers\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-add\">#sec-numeric-types-number-add</span> Number::add ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation Number::add takes arguments <var>x</var> (a Number) and <var>y</var> (a Number). It performs addition according to the rules of <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary double-precision arithmetic, producing the sum of its arguments. It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>x</var> is <emu-val>NaN</emu-val> or <var>y</var> is <emu-val>NaN</emu-val>, return <emu-val>NaN</emu-val>.</li><li>If <var>x</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub> and <var>y</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>NaN</emu-val>.</li><li>If <var>x</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub> and <var>y</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>NaN</emu-val>.</li><li>If <var>x</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub> or <var>x</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, return <var>x</var>.</li><li>If <var>y</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub> or <var>y</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, return <var>y</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>x</var> and <var>y</var> are both finite.</li><li>If <var>x</var> is <emu-val>-0</emu-val><sub>&#120125;</sub> and <var>y</var> is <emu-val>-0</emu-val><sub>&#120125;</sub>, return <emu-val>-0</emu-val><sub>&#120125;</sub>.</li><li>Return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>) + <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>y</var>)).</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>Finite-precision addition is commutative, but not always associative.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-numeric-types-number-multiply": {"num": "6.1.6.1.4", "title": "#sec-numeric-types-number-multiply Number::multiply ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-number-multiply\" oldids=\"sec-applying-the-mul-operator\"><span id=\"sec-applying-the-mul-operator\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-multiply\">#sec-numeric-types-number-multiply</span> Number::multiply ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation Number::multiply takes arguments <var>x</var> (a Number) and <var>y</var> (a Number). It performs multiplication according to the rules of <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary double-precision arithmetic, producing the product of <var>x</var> and <var>y</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>x</var> is <emu-val>NaN</emu-val> or <var>y</var> is <emu-val>NaN</emu-val>, return <emu-val>NaN</emu-val>.</li><li>If <var>x</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub> or <var>x</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, then<ol><li>If <var>y</var> is <emu-val>+0</emu-val><sub>&#120125;</sub> or <var>y</var> is <emu-val>-0</emu-val><sub>&#120125;</sub>, return <emu-val>NaN</emu-val>.</li><li>If <var>y</var> &gt; <emu-val>+0</emu-val><sub>&#120125;</sub>, return <var>x</var>.</li><li>Return -<var>x</var>.</li></ol></li><li>If <var>y</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub> or <var>y</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, then<ol><li>If <var>x</var> is <emu-val>+0</emu-val><sub>&#120125;</sub> or <var>x</var> is <emu-val>-0</emu-val><sub>&#120125;</sub>, return <emu-val>NaN</emu-val>.</li><li>If <var>x</var> &gt; <emu-val>+0</emu-val><sub>&#120125;</sub>, return <var>y</var>.</li><li>Return -<var>y</var>.</li></ol></li><li>Return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>) &#215; <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>y</var>)).</li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>Finite-precision multiplication is commutative, but not always associative.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-numeric-types-number-divide": {"num": "6.1.6.1.5", "title": "#sec-numeric-types-number-divide Number::divide ( x, y )", "html": "<emu-clause id=\"sec-numeric-types-number-divide\" oldids=\"sec-applying-the-div-operator\"><span id=\"sec-applying-the-div-operator\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numeric-types-number-divide\">#sec-numeric-types-number-divide</span> Number::divide ( <var>x</var>, <var>y</var> )</h1>\n          <p>The abstract operation Number::divide takes arguments <var>x</var> (a Number) and <var>y</var> (a Number). It performs division according to the rules of <emu-xref href=\"#sec-bibliography\"><a href=\"#sec-bibliography\">IEEE 754-2019</a></emu-xref> binary double-precision arithmetic, producing the quotient of <var>x</var> and <var>y</var> where <var>x</var> is the dividend and <var>y</var> is the divisor. It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <var>x</var> is <emu-val>NaN</emu-val> or <var>y</var> is <emu-val>NaN</emu-val>, return <emu-val>NaN</emu-val>.</li><li>If <var>x</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub> or <var>x</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, then<ol><li>If <var>y</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub> or <var>y</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, return <emu-val>NaN</emu-val>.</li><li>If <var>y</var> is <emu-val>+0</emu-val><sub>&#120125;</sub> or <var>y</var> &gt; <emu-val>+0</emu-val><sub>&#120125;</sub>, return <var>x</var>.</li><li>Return -<var>x</var>.</li></ol></li><li>If <var>y</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, then<ol><li>If <var>x</var> is <emu-val>+0</emu-val><sub>&#120125;</sub> or <var>x</var> &gt; <emu-val>+0</emu-val><sub>&#120125;</sub>, return <emu-val>+0</emu-val><sub>&#120125;</sub>. Otherwise, return <emu-val>-0</emu-val><sub>&#120125;</sub>.</li></ol></li><li>If <var>y</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, then<ol><li>If <var>x</var> is <emu-val>+0</emu-val><sub>&#120125;</sub> or <var>x</var> &gt; <emu-val>+0</emu-val><sub>&#120125;</sub>, return <emu-val>-0</emu-val><sub>&#120125;</sub>. Otherwise, return <emu-val>+0</emu-val><sub>&#120125;</sub>.</li></ol></li><li>If <var>x</var> is <emu-val>+0</emu-val><sub>&#120125;</sub> or <var>x</var> is <emu-val>-0</emu-val><sub>&#120125;</sub>, then<ol><li>If <var>y</var> is <emu-val>+0</emu-val><sub>&#120125;</sub> or <var>y</var> is <emu-val>-0</emu-val><sub>&#120125;</sub>, return <emu-val>NaN</emu-val>.</li><li>If <var>y</var> &gt; <emu-val>+0</emu-val><sub>&#120125;</sub>, return <var>x</var>.</li><li>Return -<var>x</var>.</li></ol></li><li>If <var>y</var> is <emu-val>+0</emu-val><sub>&#120125;</sub>, then<ol><li>If <var>x</var> &gt; <emu-val>+0</emu-val><sub>&#120125;</sub>, return <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>. Otherwise, return <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>.</li></ol></li><li>If <var>y</var> is <emu-val>-0</emu-val><sub>&#120125;</sub>, then<ol><li>If <var>x</var> &gt; <emu-val>+0</emu-val><sub>&#120125;</sub>, return <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>. Otherwise, return <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>.</li></ol></li><li>Return <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>(<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>) / <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>y</var>)).</li></ol></emu-alg>\n        </emu-clause>\n\n        "}}, "figData": {}}}