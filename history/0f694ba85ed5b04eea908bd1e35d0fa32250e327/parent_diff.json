{"from": {"secList": ["sec-asyncgeneratorfunction-constructor", "sec-generatorfunction-constructor", "sec-async-function-constructor"], "secData": {"sec-asyncgeneratorfunction-constructor": {"num": "25.3.1", "title": "#sec-asyncgeneratorfunction-constructor The AsyncGeneratorFunction Constructor", "html": "<emu-clause id=\"sec-asyncgeneratorfunction-constructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorfunction-constructor\">#sec-asyncgeneratorfunction-constructor</span> The AsyncGeneratorFunction Constructor</h1>\n      <p>The AsyncGeneratorFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>:</p>\n      <ul>\n        <li>is the intrinsic object  <dfn>%AsyncGeneratorFunction%</dfn>.</li>\n        <li>creates and initializes a new AsyncGeneratorFunction object when called as a function rather than as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. Thus the function call <code>AsyncGeneratorFunction (...)</code> is equivalent to the object creation expression <code>new AsyncGeneratorFunction (...)</code> with the same arguments.</li>\n        <li>is designed to be subclassable. It may be used as the value of an <code>extends</code> clause of a class definition. Subclass constructors that intend to inherit the specified AsyncGeneratorFunction behaviour must include a <code>super</code> call to the AsyncGeneratorFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create and initialize subclass instances with the internal slots necessary for built-in AsyncGeneratorFunction behaviour. All ECMAScript syntactic forms for defining async generator function objects create direct instances of AsyncGeneratorFunction. There is no syntactic means to create instances of AsyncGeneratorFunction subclasses.</li>\n      </ul>\n\n      <div id=\"excluded-sec-asyncgeneratorfunction\"><h1><span class=\"secnum\">25.3.1.1</span>#sec-asyncgeneratorfunction AsyncGeneratorFunction ( p1, p2, &#8230; , pn, body )</h1>...</div></emu-clause>\n\n    "}, "sec-generatorfunction-constructor": {"num": "25.2.1", "title": "#sec-generatorfunction-constructor The GeneratorFunction Constructor", "html": "<emu-clause id=\"sec-generatorfunction-constructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorfunction-constructor\">#sec-generatorfunction-constructor</span> The GeneratorFunction Constructor</h1>\n      <p>The GeneratorFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>:</p>\n      <ul>\n        <li>is the intrinsic object  <dfn>%GeneratorFunction%</dfn>.</li>\n        <li>creates and initializes a new GeneratorFunction object when called as a function rather than as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. Thus the function call <code>GeneratorFunction (&#8230;)</code> is equivalent to the object creation expression <code>new GeneratorFunction (&#8230;)</code> with the same arguments.</li>\n        <li>is designed to be subclassable. It may be used as the value of an <code>extends</code> clause of a class definition. Subclass constructors that intend to inherit the specified GeneratorFunction behaviour must include a <code>super</code> call to the GeneratorFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create and initialize subclass instances with the internal slots necessary for built-in GeneratorFunction behaviour. All ECMAScript syntactic forms for defining generator function objects create direct instances of GeneratorFunction. There is no syntactic means to create instances of GeneratorFunction subclasses.</li>\n      </ul>\n\n      <div id=\"excluded-sec-generatorfunction\"><h1><span class=\"secnum\">25.2.1.1</span>#sec-generatorfunction GeneratorFunction ( p1, p2, &#8230; , pn, body )</h1>...</div></emu-clause>\n\n    "}, "sec-async-function-constructor": {"num": "25.7.1", "title": "#sec-async-function-constructor The AsyncFunction Constructor", "html": "<emu-clause id=\"sec-async-function-constructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-constructor\">#sec-async-function-constructor</span> The AsyncFunction Constructor</h1>\n\n      <p>The AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>:</p>\n      <ul>\n        <li>is the intrinsic object  <dfn>%AsyncFunction%</dfn>.</li>\n        <li>is a subclass of <code>Function</code>.</li>\n        <li>creates and initializes a new AsyncFunction object when called as a function rather than as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. Thus the function call <code>AsyncFunction(&#8230;)</code> is equivalent to the object creation expression <code>new AsyncFunction(&#8230;)</code> with the same arguments.</li>\n        <li>is designed to be subclassable. It may be used as the value of an <code>extends</code> clause of a class definition. Subclass constructors that intend to inherit the specified AsyncFunction behaviour must include a <code>super</code> call to the AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create and initialize a subclass instance with the internal slots necessary for built-in async function behaviour.</li>\n      </ul>\n\n      <div id=\"excluded-sec-async-function-constructor-arguments\"><h1><span class=\"secnum\">25.7.1.1</span>#sec-async-function-constructor-arguments AsyncFunction ( p1, p2, &#8230; , pn, body )</h1>...</div></emu-clause>\n    "}}, "figData": {}}, "to": {"secList": ["sec-asyncgeneratorfunction-constructor", "sec-generatorfunction-constructor", "sec-async-function-constructor"], "secData": {"sec-asyncgeneratorfunction-constructor": {"num": "25.3.1", "title": "#sec-asyncgeneratorfunction-constructor The AsyncGeneratorFunction Constructor", "html": "<emu-clause id=\"sec-asyncgeneratorfunction-constructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorfunction-constructor\">#sec-asyncgeneratorfunction-constructor</span> The AsyncGeneratorFunction Constructor</h1>\n      <p>The AsyncGeneratorFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>:</p>\n      <ul>\n        <li>is the intrinsic object  <dfn>%AsyncGeneratorFunction%</dfn>.</li>\n        <li>is a subclass of <code>Function</code>.</li>\n        <li>creates and initializes a new AsyncGeneratorFunction object when called as a function rather than as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. Thus the function call <code>AsyncGeneratorFunction (...)</code> is equivalent to the object creation expression <code>new AsyncGeneratorFunction (...)</code> with the same arguments.</li>\n        <li>is designed to be subclassable. It may be used as the value of an <code>extends</code> clause of a class definition. Subclass constructors that intend to inherit the specified AsyncGeneratorFunction behaviour must include a <code>super</code> call to the AsyncGeneratorFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create and initialize subclass instances with the internal slots necessary for built-in AsyncGeneratorFunction behaviour. All ECMAScript syntactic forms for defining async generator function objects create direct instances of AsyncGeneratorFunction. There is no syntactic means to create instances of AsyncGeneratorFunction subclasses.</li>\n      </ul>\n\n      <div id=\"excluded-sec-asyncgeneratorfunction\"><h1><span class=\"secnum\">25.3.1.1</span>#sec-asyncgeneratorfunction AsyncGeneratorFunction ( p1, p2, &#8230; , pn, body )</h1>...</div></emu-clause>\n\n    "}, "sec-generatorfunction-constructor": {"num": "25.2.1", "title": "#sec-generatorfunction-constructor The GeneratorFunction Constructor", "html": "<emu-clause id=\"sec-generatorfunction-constructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorfunction-constructor\">#sec-generatorfunction-constructor</span> The GeneratorFunction Constructor</h1>\n      <p>The GeneratorFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>:</p>\n      <ul>\n        <li>is the intrinsic object  <dfn>%GeneratorFunction%</dfn>.</li>\n        <li>is a subclass of <code>Function</code>.</li>\n        <li>creates and initializes a new GeneratorFunction object when called as a function rather than as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. Thus the function call <code>GeneratorFunction (&#8230;)</code> is equivalent to the object creation expression <code>new GeneratorFunction (&#8230;)</code> with the same arguments.</li>\n        <li>is designed to be subclassable. It may be used as the value of an <code>extends</code> clause of a class definition. Subclass constructors that intend to inherit the specified GeneratorFunction behaviour must include a <code>super</code> call to the GeneratorFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create and initialize subclass instances with the internal slots necessary for built-in GeneratorFunction behaviour. All ECMAScript syntactic forms for defining generator function objects create direct instances of GeneratorFunction. There is no syntactic means to create instances of GeneratorFunction subclasses.</li>\n      </ul>\n\n      <div id=\"excluded-sec-generatorfunction\"><h1><span class=\"secnum\">25.2.1.1</span>#sec-generatorfunction GeneratorFunction ( p1, p2, &#8230; , pn, body )</h1>...</div></emu-clause>\n\n    "}, "sec-async-function-constructor": {"num": "25.7.1", "title": "#sec-async-function-constructor The AsyncFunction Constructor", "html": "<emu-clause id=\"sec-async-function-constructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-constructor\">#sec-async-function-constructor</span> The AsyncFunction Constructor</h1>\n\n      <p>The AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>:</p>\n      <ul>\n        <li>is the intrinsic object  <dfn>%AsyncFunction%</dfn>.</li>\n        <li>is a subclass of <code>Function</code>.</li>\n        <li>creates and initializes a new AsyncFunction object when called as a function rather than as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. Thus the function call <code>AsyncFunction(&#8230;)</code> is equivalent to the object creation expression <code>new AsyncFunction(&#8230;)</code> with the same arguments.</li>\n        <li>is designed to be subclassable. It may be used as the value of an <code>extends</code> clause of a class definition. Subclass constructors that intend to inherit the specified AsyncFunction behaviour must include a <code>super</code> call to the AsyncFunction <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create and initialize a subclass instance with the internal slots necessary for built-in async function behaviour. All ECMAScript syntactic forms for defining async function objects create direct instances of AsyncFunction. There is no syntactic means to create instances of AsyncFunction subclasses.</li>\n      </ul>\n\n      <div id=\"excluded-sec-async-function-constructor-arguments\"><h1><span class=\"secnum\">25.7.1.1</span>#sec-async-function-constructor-arguments AsyncFunction ( p1, p2, &#8230; , pn, body )</h1>...</div></emu-clause>\n    "}}, "figData": {}}}