{"from": {"secList": ["sec-primary-expression-regular-expression-literals-static-semantics-early-errors", "sec-decodeuri-encodeduri", "sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact", "sec-characterclassescape", "sec-encodeuri-uri", "sec-pattern-semantics", "sec-runtime-semantics-mv-s", "sec-runtime-semantics-canonicalize-ch", "sec-directive-prologues-and-the-use-strict-directive"], "secData": {"sec-primary-expression-regular-expression-literals-static-semantics-early-errors": {"num": "12.2.8.1", "title": "#sec-primary-expression-regular-expression-literals-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-primary-expression-regular-expression-literals-static-semantics-early-errors\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-primary-expression-regular-expression-literals-static-semantics-early-errors\">#sec-primary-expression-regular-expression-literals-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n        <emu-grammar><emu-production name=\"PrimaryExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"31b672e8\"><emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if BodyText of <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt> cannot be recognized using the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt> of the ECMAScript RegExp grammar specified in  <emu-xref href=\"#sec-patterns\"><a href=\"#sec-patterns\" class=\"excluded-xref\" excluded-id=\"sec-patterns\">#sec-patterns</a></emu-xref>.\n          \n          </li>\n          <li>\n            It is a Syntax Error if FlagText of <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt> contains any code points other than <code>\"g\"</code>, <code>\"i\"</code>, <code>\"m\"</code>, <code>\"s\"</code>, <code>\"u\"</code>, or <code>\"y\"</code>, or if it contains the same code point more than once.\n          \n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-decodeuri-encodeduri": {"num": "18.2.6.2", "title": "#sec-decodeuri-encodeduri decodeURI ( encodedURI )", "html": "<emu-clause id=\"sec-decodeuri-encodeduri\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-decodeuri-encodeduri\">#sec-decodeuri-encodeduri</span> decodeURI ( <var>encodedURI</var> )</h1>\n        <p>The <code>decodeURI</code> function computes a new version of a URI in which each escape sequence and UTF-8 encoding of the sort that might be introduced by the <code>encodeURI</code> function is replaced with the UTF-16 encoding of the code points that it represents. Escape sequences that could not have been introduced by <code>encodeURI</code> are not replaced.</p>\n        <p>The <code>decodeURI</code> function is the  <dfn>%decodeURI%</dfn> intrinsic object. When the <code>decodeURI</code> function is called with one argument <var>encodedURI</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>uriString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>encodedURI</var>).</li><li>Let <var>reservedURISet</var> be a String containing one instance of each code unit valid in <emu-nt><a href=\"#prod-uriReserved\">uriReserved</a></emu-nt> plus <code>\"#\"</code>.</li><li>Return ?&#160;<emu-xref aoid=\"Decode\"><a href=\"#sec-decode\">Decode</a></emu-xref>(<var>uriString</var>, <var>reservedURISet</var>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The code point <code>\"#\"</code> is not decoded from escape sequences even though it is not a reserved URI code point.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact": {"num": "D", "title": "#sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact Corrections and Clarifications in ECMAScript 2015 with Possible Compatibility Impact", "html": "<emu-annex id=\"sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact\">#sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact</span> Corrections and Clarifications in ECMAScript 2015 with Possible Compatibility Impact</h1>\n  <p><emu-xref href=\"#sec-candeclareglobalvar\"><a href=\"#sec-candeclareglobalvar\" class=\"excluded-xref\" excluded-id=\"sec-candeclareglobalvar\">#sec-candeclareglobalvar</a></emu-xref>-<emu-xref href=\"#sec-createglobalfunctionbinding\"><a href=\"#sec-createglobalfunctionbinding\" class=\"excluded-xref\" excluded-id=\"sec-createglobalfunctionbinding\">#sec-createglobalfunctionbinding</a></emu-xref> Edition 5 and 5.1 used a property existence test to determine whether a <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> property corresponding to a new global declaration already existed. ECMAScript 2015 uses an own property existence test. This corresponds to what has been most commonly implemented by web browsers.</p>\n  <p><emu-xref href=\"#sec-array-exotic-objects-defineownproperty-p-desc\"><a href=\"#sec-array-exotic-objects-defineownproperty-p-desc\" class=\"excluded-xref\" excluded-id=\"sec-array-exotic-objects-defineownproperty-p-desc\">#sec-array-exotic-objects-defineownproperty-p-desc</a></emu-xref>: The 5<sup>th</sup> Edition moved the capture of the current array length prior to the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> conversion of the <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref> or new length value. However, the captured length value could become invalid if the conversion process has the side-effect of changing the array length. ECMAScript 2015 specifies that the current array length must be captured after the possible occurrence of such side-effects.</p>\n  <p><emu-xref href=\"#sec-timeclip\"><a href=\"#sec-timeclip\" class=\"excluded-xref\" excluded-id=\"sec-timeclip\">#sec-timeclip</a></emu-xref>: Previous editions permitted the <emu-xref aoid=\"TimeClip\"><a href=\"#sec-timeclip\">TimeClip</a></emu-xref> abstract operation to return either <emu-val>+0</emu-val> or <emu-val>-0</emu-val> as the representation of a 0 <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref>. ECMAScript 2015 specifies that <emu-val>+0</emu-val> always returned. This means that for ECMAScript 2015 the <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> of a Date object is never observably <emu-val>-0</emu-val> and methods that return time values never return <emu-val>-0</emu-val>.</p>\n  <p><emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\" class=\"excluded-xref\" excluded-id=\"sec-date-time-string-format\">#sec-date-time-string-format</a></emu-xref>: If a UTC offset representation is not present, the local time zone is used. Edition 5.1 incorrectly stated that a missing time zone should be interpreted as <code>\"z\"</code>.</p>\n  <p><emu-xref href=\"#sec-date.prototype.toisostring\"><a href=\"#sec-date.prototype.toisostring\" class=\"excluded-xref\" excluded-id=\"sec-date.prototype.toisostring\">#sec-date.prototype.toisostring</a></emu-xref>: If the year cannot be represented using the Date Time String Format specified in  <emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\" class=\"excluded-xref\" excluded-id=\"sec-date-time-string-format\">#sec-date-time-string-format</a></emu-xref> a RangeError exception is thrown. Previous editions did not specify the behaviour for that case.</p>\n  <p><emu-xref href=\"#sec-date.prototype.tostring\"><a href=\"#sec-date.prototype.tostring\" class=\"excluded-xref\" excluded-id=\"sec-date.prototype.tostring\">#sec-date.prototype.tostring</a></emu-xref>: Previous editions did not specify the value returned by <code>Date.prototype.toString</code> when <emu-xref href=\"#this-time-value\"><a href=\"#this-time-value\">this time value</a></emu-xref> is <emu-val>NaN</emu-val>. ECMAScript 2015 specifies the result to be the String value <emu-val>\"Invalid Date\"</emu-val>.</p>\n  <p><emu-xref href=\"#sec-regexp-pattern-flags\"><a href=\"#sec-regexp-pattern-flags\" class=\"excluded-xref\" excluded-id=\"sec-regexp-pattern-flags\">#sec-regexp-pattern-flags</a></emu-xref>,  <emu-xref href=\"#sec-escaperegexppattern\"><a href=\"#sec-escaperegexppattern\" class=\"excluded-xref\" excluded-id=\"sec-escaperegexppattern\">#sec-escaperegexppattern</a></emu-xref>: Any LineTerminator code points in the value of the <code>\"source\"</code> property of a RegExp instance must be expressed using an escape sequence. Edition 5.1 only required the escaping of <code>\"/\"</code>.</p>\n  <p><emu-xref href=\"#sec-regexp.prototype-@@match\"><a href=\"#sec-regexp.prototype-@@match\" class=\"excluded-xref\" excluded-id=\"sec-regexp.prototype-@@match\">#sec-regexp.prototype-@@match</a></emu-xref>,  <emu-xref href=\"#sec-regexp.prototype-@@replace\"><a href=\"#sec-regexp.prototype-@@replace\" class=\"excluded-xref\" excluded-id=\"sec-regexp.prototype-@@replace\">#sec-regexp.prototype-@@replace</a></emu-xref>: In previous editions, the specifications for <code>String.prototype.match</code> and <code>String.prototype.replace</code> was incorrect for cases where the pattern argument was a RegExp value whose <code>global</code> flag is set. The previous specifications stated that for each attempt to match the pattern, if <code>lastIndex</code> did not change it should be incremented by 1. The correct behaviour is that <code>lastIndex</code> should be incremented by one only if the pattern matched the empty string.</p>\n  <p><emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>,  <emu-xref href=\"#sec-sortcompare\"><a href=\"#sec-sortcompare\" class=\"excluded-xref\" excluded-id=\"sec-sortcompare\">#sec-sortcompare</a></emu-xref>: Previous editions did not specify how a <emu-val>NaN</emu-val> value returned by a <var>comparefn</var> was interpreted by <code>Array.prototype.sort</code>. ECMAScript 2015 specifies that such as value is treated as if <emu-val>+0</emu-val> was returned from the <var>comparefn</var>. ECMAScript 2015 also specifies that <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref> is applied to the result returned by a <var>comparefn</var>. In previous editions, the effect of a <var>comparefn</var> result that is not a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> was implementation-dependent. In practice, implementations call <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>.</p>\n</emu-annex>\n\n"}, "sec-characterclassescape": {"num": "21.2.2.12", "title": "#sec-characterclassescape CharacterClassEscape", "html": "<emu-clause id=\"sec-characterclassescape\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-characterclassescape\">#sec-characterclassescape</span> CharacterClassEscape</h1>\n        <p>The production  <emu-grammar><emu-production name=\"CharacterClassEscape\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CharacterClassEscape\">CharacterClassEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"f0f32729\"><emu-t>d</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the ten-element set of characters containing the characters <code>0</code> through <code>9</code> inclusive.\n        </li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"CharacterClassEscape\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CharacterClassEscape\">CharacterClassEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"919b1483\"><emu-t>D</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the set of all characters not included in the set returned by <emu-grammar><emu-production name=\"CharacterClassEscape\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CharacterClassEscape\">CharacterClassEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"f0f32729\"><emu-t>d</emu-t></emu-rhs>\n</emu-production></emu-grammar> .\n        </li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"CharacterClassEscape\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CharacterClassEscape\">CharacterClassEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5b9c6c6e\"><emu-t>s</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the set of characters containing the characters that are on the right-hand side of the <emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt> or <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> productions.\n        </li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"CharacterClassEscape\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CharacterClassEscape\">CharacterClassEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"6952cf48\"><emu-t>S</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the set of all characters not included in the set returned by <emu-grammar><emu-production name=\"CharacterClassEscape\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CharacterClassEscape\">CharacterClassEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5b9c6c6e\"><emu-t>s</emu-t></emu-rhs>\n</emu-production></emu-grammar> .\n        </li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"CharacterClassEscape\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CharacterClassEscape\">CharacterClassEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"2d8b484a\"><emu-t>w</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the set of all characters returned by <emu-xref aoid=\"WordCharacters\"><a href=\"#sec-runtime-semantics-wordcharacters-abstract-operation\">WordCharacters</a></emu-xref>().\n        </li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"CharacterClassEscape\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CharacterClassEscape\">CharacterClassEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ae15e851\"><emu-t>W</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the set of all characters not included in the set returned by <emu-grammar><emu-production name=\"CharacterClassEscape\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CharacterClassEscape\">CharacterClassEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"2d8b484a\"><emu-t>w</emu-t></emu-rhs>\n</emu-production></emu-grammar> .\n        </li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"CharacterClassEscape\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CharacterClassEscape\">CharacterClassEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"c3a04bb2\"><emu-t>p{</emu-t><emu-nt><a href=\"#prod-UnicodePropertyValueExpression\">UnicodePropertyValueExpression</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the CharSet containing all Unicode code points included in the CharSet returned by <emu-nt><a href=\"#prod-UnicodePropertyValueExpression\">UnicodePropertyValueExpression</a></emu-nt>.\n        </li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"CharacterClassEscape\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CharacterClassEscape\">CharacterClassEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"e281bb28\"><emu-t>P{</emu-t><emu-nt><a href=\"#prod-UnicodePropertyValueExpression\">UnicodePropertyValueExpression</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the CharSet containing all Unicode code points not included in the CharSet returned by <emu-nt><a href=\"#prod-UnicodePropertyValueExpression\">UnicodePropertyValueExpression</a></emu-nt>.\n        </li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"UnicodePropertyValueExpression\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UnicodePropertyValueExpression\">UnicodePropertyValueExpression</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"b11de407\"><emu-nt><a href=\"#prod-UnicodePropertyName\">UnicodePropertyName</a></emu-nt><emu-t>=</emu-t><emu-nt><a href=\"#prod-UnicodePropertyValue\">UnicodePropertyValue</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Let <var>ps</var> be SourceText of <emu-nt><a href=\"#prod-UnicodePropertyName\">UnicodePropertyName</a></emu-nt>.</li><li>Let <var>p</var> be !&#160;<emu-xref aoid=\"UnicodeMatchProperty\"><a href=\"#sec-runtime-semantics-unicodematchproperty-p\">UnicodeMatchProperty</a></emu-xref>(<var>ps</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>p</var> is a Unicode <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> or property alias listed in the &#8220;<emu-xref href=\"#property-name\"><a href=\"#property-name\">Property name</a></emu-xref> and aliases&#8221; column of <emu-xref href=\"#table-nonbinary-unicode-properties\"><a href=\"#table-nonbinary-unicode-properties\" class=\"excluded-xref\" excluded-id=\"table-nonbinary-unicode-properties\">#table-nonbinary-unicode-properties</a></emu-xref>.</li><li>Let <var>vs</var> be SourceText of <emu-nt><a href=\"#prod-UnicodePropertyValue\">UnicodePropertyValue</a></emu-nt>.</li><li>Let <var>v</var> be !&#160;<emu-xref aoid=\"UnicodeMatchPropertyValue\"><a href=\"#sec-runtime-semantics-unicodematchpropertyvalue-p-v\">UnicodeMatchPropertyValue</a></emu-xref>(<var>p</var>, <var>vs</var>).</li><li>Return the CharSet containing all Unicode code points whose character database definition includes the property <var>p</var> with value <var>v</var>.\n        </li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"UnicodePropertyValueExpression\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UnicodePropertyValueExpression\">UnicodePropertyValueExpression</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"25d94190\"><emu-nt><a href=\"#prod-LoneUnicodePropertyNameOrValue\">LoneUnicodePropertyNameOrValue</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Let <var>s</var> be SourceText of <emu-nt><a href=\"#prod-LoneUnicodePropertyNameOrValue\">LoneUnicodePropertyNameOrValue</a></emu-nt>.</li><li>If !&#160;<emu-xref aoid=\"UnicodeMatchPropertyValue\"><a href=\"#sec-runtime-semantics-unicodematchpropertyvalue-p-v\">UnicodeMatchPropertyValue</a></emu-xref>(<code>\"General_Category\"</code>, <var>s</var>) is identical to a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points that is the name of a Unicode general category or general category alias listed in the &#8220;Property value and aliases&#8221; column of <emu-xref href=\"#table-unicode-general-category-values\"><a href=\"#table-unicode-general-category-values\" class=\"excluded-xref\" excluded-id=\"table-unicode-general-category-values\">#table-unicode-general-category-values</a></emu-xref>, then<ol><li>Return the CharSet containing all Unicode code points whose character database definition includes the property &#8220;General_Category&#8221; with value <var>s</var>.</li></ol></li><li>Let <var>p</var> be !&#160;<emu-xref aoid=\"UnicodeMatchProperty\"><a href=\"#sec-runtime-semantics-unicodematchproperty-p\">UnicodeMatchProperty</a></emu-xref>(<var>s</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>p</var> is a binary Unicode property or binary property alias listed in the &#8220;<emu-xref href=\"#property-name\"><a href=\"#property-name\">Property name</a></emu-xref> and aliases&#8221; column of <emu-xref href=\"#table-binary-unicode-properties\"><a href=\"#table-binary-unicode-properties\" class=\"excluded-xref\" excluded-id=\"table-binary-unicode-properties\">#table-binary-unicode-properties</a></emu-xref>.</li><li>Return the CharSet containing all Unicode code points whose character database definition includes the property <var>p</var> with value &#8220;True&#8221;.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-encodeuri-uri": {"num": "18.2.6.4", "title": "#sec-encodeuri-uri encodeURI ( uri )", "html": "<emu-clause id=\"sec-encodeuri-uri\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-encodeuri-uri\">#sec-encodeuri-uri</span> encodeURI ( <var>uri</var> )</h1>\n        <p>The <code>encodeURI</code> function computes a new version of a UTF-16 encoded (<emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>) URI in which each instance of certain code points is replaced by one, two, three, or four escape sequences representing the UTF-8 encoding of the code points.</p>\n        <p>The <code>encodeURI</code> function is the  <dfn>%encodeURI%</dfn> intrinsic object. When the <code>encodeURI</code> function is called with one argument <var>uri</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>uriString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>uri</var>).</li><li>Let <var>unescapedURISet</var> be a String containing one instance of each code unit valid in <emu-nt><a href=\"#prod-uriReserved\">uriReserved</a></emu-nt> and <emu-nt><a href=\"#prod-uriUnescaped\">uriUnescaped</a></emu-nt> plus <code>\"#\"</code>.</li><li>Return ?&#160;<emu-xref aoid=\"Encode\"><a href=\"#sec-encode\">Encode</a></emu-xref>(<var>uriString</var>, <var>unescapedURISet</var>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The code unit <code>\"#\"</code> is not encoded to an escape sequence even though it is not a reserved or unescaped URI code point.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-pattern-semantics": {"num": "21.2.2", "title": "#sec-pattern-semantics Pattern Semantics", "html": "<emu-clause id=\"sec-pattern-semantics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</span> Pattern Semantics</h1>\n      <p>A regular expression pattern is converted into an internal procedure using the process described below. An implementation is encouraged to use more efficient algorithms than the ones listed below, as long as the results are the same. The internal procedure is used as the value of a RegExp object's [[RegExpMatcher]] internal slot.</p>\n      <p>A <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt> is either a BMP pattern or a Unicode pattern depending upon whether or not its associated flags contain a <code>\"u\"</code>. A BMP pattern matches against a String interpreted as consisting of a sequence of 16-bit values that are Unicode code points in the range of the Basic Multilingual Plane. A Unicode pattern matches against a String interpreted as consisting of Unicode code points encoded using UTF-16. In the context of describing the behaviour of a BMP pattern &#8220;character&#8221; means a single 16-bit Unicode BMP code point. In the context of describing the behaviour of a Unicode pattern &#8220;character&#8221; means a UTF-16 encoded code point (<emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>). In either context, &#8220;character value&#8221; means the numeric value of the corresponding non-encoded code point.</p>\n      <p>The syntax and semantics of <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt> is defined as if the source code for the <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt> was a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> values where each <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> corresponds to a Unicode code point. If a BMP pattern contains a non-BMP <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> the entire pattern is encoded using UTF-16 and the individual code units of that encoding are used as the elements of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>For example, consider a pattern expressed in source text as the single non-BMP character U+1D11E (MUSICAL SYMBOL G CLEF). Interpreted as a Unicode pattern, it would be a single element (character) <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> consisting of the single code point 0x1D11E. However, interpreted as a BMP pattern, it is first UTF-16 encoded to produce a two element <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> consisting of the code units 0xD834 and 0xDD1E.</p>\n        <p>Patterns are passed to the RegExp <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> as ECMAScript String values in which non-BMP characters are UTF-16 encoded. For example, the single character MUSICAL SYMBOL G CLEF pattern, expressed as a String value, is a String of length 2 whose elements were the code units 0xD834 and 0xDD1E. So no further translation of the string would be necessary to process it as a BMP pattern consisting of two pattern characters. However, to process it as a Unicode pattern <emu-xref aoid=\"UTF16Decode\"><a href=\"#sec-utf16decode\">UTF16Decode</a></emu-xref> must be used in producing a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> consisting of a single pattern character, the code point U+1D11E.</p>\n        <p>An implementation may not actually perform such translations to or from UTF-16, but the semantics of this specification requires that the result of pattern matching be as if such translations were performed.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-notation\"><h1><span class=\"secnum\">21.2.2.1</span>#sec-notation Notation</h1>...</div><div id=\"excluded-sec-pattern\"><h1><span class=\"secnum\">21.2.2.2</span>#sec-pattern Pattern</h1>...</div><div id=\"excluded-sec-disjunction\"><h1><span class=\"secnum\">21.2.2.3</span>#sec-disjunction Disjunction</h1>...</div><div id=\"excluded-sec-alternative\"><h1><span class=\"secnum\">21.2.2.4</span>#sec-alternative Alternative</h1>...</div><div id=\"excluded-sec-term\"><h1><span class=\"secnum\">21.2.2.5</span>#sec-term Term</h1>...</div><div id=\"excluded-sec-assertion\"><h1><span class=\"secnum\">21.2.2.6</span>#sec-assertion Assertion</h1>...</div><div id=\"excluded-sec-quantifier\"><h1><span class=\"secnum\">21.2.2.7</span>#sec-quantifier Quantifier</h1>...</div><div id=\"excluded-sec-atom\"><h1><span class=\"secnum\">21.2.2.8</span>#sec-atom Atom</h1>...</div><div id=\"excluded-sec-atomescape\"><h1><span class=\"secnum\">21.2.2.9</span>#sec-atomescape AtomEscape</h1>...</div><div id=\"excluded-sec-characterescape\"><h1><span class=\"secnum\">21.2.2.10</span>#sec-characterescape CharacterEscape</h1>...</div><div id=\"excluded-sec-decimalescape\"><h1><span class=\"secnum\">21.2.2.11</span>#sec-decimalescape DecimalEscape</h1>...</div><div id=\"excluded-sec-characterclassescape\"><h1><span class=\"secnum\">21.2.2.12</span>#sec-characterclassescape CharacterClassEscape</h1>...</div><div id=\"excluded-sec-characterclass\"><h1><span class=\"secnum\">21.2.2.13</span>#sec-characterclass CharacterClass</h1>...</div><div id=\"excluded-sec-classranges\"><h1><span class=\"secnum\">21.2.2.14</span>#sec-classranges ClassRanges</h1>...</div><div id=\"excluded-sec-nonemptyclassranges\"><h1><span class=\"secnum\">21.2.2.15</span>#sec-nonemptyclassranges NonemptyClassRanges</h1>...</div><div id=\"excluded-sec-nonemptyclassrangesnodash\"><h1><span class=\"secnum\">21.2.2.16</span>#sec-nonemptyclassrangesnodash NonemptyClassRangesNoDash</h1>...</div><div id=\"excluded-sec-classatom\"><h1><span class=\"secnum\">21.2.2.17</span>#sec-classatom ClassAtom</h1>...</div><div id=\"excluded-sec-classatomnodash\"><h1><span class=\"secnum\">21.2.2.18</span>#sec-classatomnodash ClassAtomNoDash</h1>...</div><div id=\"excluded-sec-classescape\"><h1><span class=\"secnum\">21.2.2.19</span>#sec-classescape ClassEscape</h1>...</div></emu-clause>\n\n    "}, "sec-runtime-semantics-mv-s": {"num": "7.1.4.1.1", "title": "#sec-runtime-semantics-mv-s Runtime Semantics: MV", "html": "<emu-clause id=\"sec-runtime-semantics-mv-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-mv-s\">#sec-runtime-semantics-mv-s</span> Runtime Semantics: MV</h1>\n          <p>The conversion of a String to a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> is similar overall to the determination of the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for a numeric literal (see  <emu-xref href=\"#sec-literals-numeric-literals\"><a href=\"#sec-literals-numeric-literals\" class=\"excluded-xref\" excluded-id=\"sec-literals-numeric-literals\">#sec-literals-numeric-literals</a></emu-xref>), but some of the details are different, so the process for converting a String numeric literal to a value of Number type is given here. This value is determined in two steps: first, a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> (MV) is derived from the String numeric literal; second, this <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> is rounded as described below. The MV on any grammar symbol, not provided below, is the MV for that symbol defined in  <emu-xref href=\"#sec-static-semantics-mv\"><a href=\"#sec-static-semantics-mv\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-mv\">#sec-static-semantics-mv</a></emu-xref>.</p>\n          <ul>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StringNumericLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production></emu-grammar> is 0<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StringNumericLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"63c9217f\"><emu-nt><a href=\"#prod-StrWhiteSpace\">StrWhiteSpace</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is 0<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StringNumericLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"fe58c396\"><emu-nt optional=\"\"><a href=\"#prod-StrWhiteSpace\">StrWhiteSpace</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-StrNumericLiteral\">StrNumericLiteral</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-StrWhiteSpace\">StrWhiteSpace</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-StrNumericLiteral\">StrNumericLiteral</a></emu-nt>, no matter whether white space is present or not.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrNumericLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrNumericLiteral\">StrNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"db369ee0\"><emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrNumericLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrNumericLiteral\">StrNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"e867b70b\"><emu-nt><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"477fcd23\"><emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"a3f639a9\"><emu-t>+</emu-t><emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"d60f01a5\"><emu-t>-</emu-t><emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the negative of the MV of <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt>. (Note that if the MV of <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt> is 0, the negative of this MV is also 0. The rounding rule described below handles the conversion of this signless mathematical zero to a floating-point <emu-val>+0</emu-val> or <emu-val>-0</emu-val> as appropriate.)\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"4afe8df8\"><emu-t>Infinity</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>10000<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> (a value so large that it will round to <emu-val>+&#8734;</emu-val>).\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"33bf537e\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-t>.</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"4565db95\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of the first <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> plus (the MV of the second <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>-<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><var>n</var></sup>), where <var>n</var> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the number of code points in the second <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"6f5fda9f\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup><var>e</var></sup>, where <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"4694f1d2\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is (the MV of the first <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> plus (the MV of the second <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>-<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><var>n</var></sup>)) times 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup><var>e</var></sup>, where <var>n</var> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the number of code points in the second <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> and <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"c1f33372\"><emu-t>.</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>-<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><var>n</var></sup>, where <var>n</var> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"0cd5f3c3\"><emu-t>.</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup><var>e</var> -<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> <var>n</var></sup>, where <var>n</var> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> and <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"6d7b4e5f\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"2e993467\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup><var>e</var></sup>, where <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n            \n            </li>\n          </ul>\n          <p>Once the exact MV for a String numeric literal has been determined, it is then rounded to a value of the Number type. If the MV is 0, then the rounded value is <emu-val>+0</emu-val> unless the first non white space code point in the String numeric literal is <code>\"-\"</code>, in which case the rounded value is <emu-val>-0</emu-val>. Otherwise, the rounded value must be the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the MV (in the sense defined in  <emu-xref href=\"#sec-ecmascript-language-types-number-type\"><a href=\"#sec-ecmascript-language-types-number-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-number-type\">#sec-ecmascript-language-types-number-type</a></emu-xref>), unless the literal includes a <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt> and the literal has more than 20 significant digits, in which case the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> may be either the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the MV of a literal produced by replacing each significant digit after the 20th with a 0 digit or the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the MV of a literal produced by replacing each significant digit after the 20th with a 0 digit and then incrementing the literal at the 20th digit position. A digit is significant if it is not part of an <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt> and</p>\n          <ul>\n            <li>\n              it is not <code>0</code>; or\n            \n            </li>\n            <li>\n              there is a nonzero digit to its left and there is a nonzero digit, not in the <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>, to its right.\n            \n            </li>\n          </ul>\n        </emu-clause>\n      "}, "sec-runtime-semantics-canonicalize-ch": {"num": "21.2.2.8.2", "title": "#sec-runtime-semantics-canonicalize-ch Runtime Semantics: Canonicalize ( ch )", "html": "<emu-clause id=\"sec-runtime-semantics-canonicalize-ch\" aoid=\"Canonicalize\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-canonicalize-ch\">#sec-runtime-semantics-canonicalize-ch</span> Runtime Semantics: Canonicalize ( <var>ch</var> )</h1>\n          <p>The abstract operation Canonicalize takes a character parameter <var>ch</var> and performs the following steps:</p>\n          <emu-alg><ol><li>If <var>IgnoreCase</var> is <emu-val>false</emu-val>, return <var>ch</var>.</li><li>If <var>Unicode</var> is <emu-val>true</emu-val>, then<ol><li>If the file CaseFolding.txt of the Unicode Character Database provides a simple or common case folding mapping for <var>ch</var>, return the result of applying that mapping to <var>ch</var>.</li><li>Return <var>ch</var>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>ch</var> is a UTF-16 code unit.</li><li>Let <var>s</var> be the String value consisting of the single code unit <var>ch</var>.</li><li>Let <var>u</var> be the same result produced as if by performing the algorithm for <code>String.prototype.toUpperCase</code> using <var>s</var> as the <emu-val>this</emu-val> value.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>u</var>) is String.</li><li>If <var>u</var> does not consist of a single code unit, return <var>ch</var>.</li><li>Let <var>cu</var> be <var>u</var>'s single code unit element.</li><li>If the numeric value of <var>ch</var> &#8805; 128 and the numeric value of <var>cu</var> &lt; 128, return <var>ch</var>.</li><li>Return <var>cu</var>.\n          </li></ol></li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>Parentheses of the form <code>(</code> <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> <code>)</code> serve both to group the components of the <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> pattern together and to save the result of the match. The result can be used either in a backreference (<code>\\</code> followed by a nonzero decimal number), referenced in a replace String, or returned as part of an array from the regular expression matching internal procedure. To inhibit the capturing behaviour of parentheses, use the form <code>(?:</code> <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> <code>)</code> instead.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>The form <code>(?=</code> <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> <code>)</code> specifies a zero-width positive lookahead. In order for it to succeed, the pattern inside <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> must match at the current position, but the current position is not advanced before matching the sequel. If <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> can match at the current position in several ways, only the first one is tried. Unlike other regular expression operators, there is no backtracking into a <code>(?=</code> form (this unusual behaviour is inherited from Perl). This only matters when the <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> contains capturing parentheses and the sequel of the pattern contains backreferences to those captures.</p>\n            <p>For example,</p>\n            <pre><code class=\"javascript hljs\">/(?=(a+))/.exec(<span class=\"hljs-string\">\"baaabac\"</span>)</code></pre>\n            <p>matches the empty String immediately after the first <code>b</code> and therefore returns the array:</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-string\">\"aaa\"</span>]</code></pre>\n            <p>To illustrate the lack of backtracking into the lookahead, consider:</p>\n            <pre><code class=\"javascript hljs\">/(?=(a+))a*b\\<span class=\"hljs-number\">1</span>/.exec(<span class=\"hljs-string\">\"baaabac\"</span>)</code></pre>\n            <p>This expression returns</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"aba\"</span>, <span class=\"hljs-string\">\"a\"</span>]</code></pre>\n            <p>and not:</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"aaaba\"</span>, <span class=\"hljs-string\">\"a\"</span>]</code></pre>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n            <p>The form <code>(?!</code> <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> <code>)</code> specifies a zero-width negative lookahead. In order for it to succeed, the pattern inside <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> must fail to match at the current position. The current position is not advanced before matching the sequel. <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> can contain capturing parentheses, but backreferences to them only make sense from within <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> itself. Backreferences to these capturing parentheses from elsewhere in the pattern always return <emu-val>undefined</emu-val> because the negative lookahead must fail for the pattern to succeed. For example,</p>\n            <pre><code class=\"javascript hljs\">/(.*?)a(?!(a+)b\\<span class=\"hljs-number\">2</span>c)\\<span class=\"hljs-number\">2</span>(.*)/.exec(<span class=\"hljs-string\">\"baaabaac\"</span>)</code></pre>\n            <p>looks for an <code>a</code> not immediately followed by some positive number n of <code>a</code>'s, a <code>b</code>, another n <code>a</code>'s (specified by the first <code>\\2</code>) and a <code>c</code>. The second <code>\\2</code> is outside the negative lookahead, so it matches against <emu-val>undefined</emu-val> and therefore always succeeds. The whole expression returns the array:</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"baaabaac\"</span>, <span class=\"hljs-string\">\"ba\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">\"abaac\"</span>]</code></pre>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 4</span><div class=\"note-contents\">\n            <p>In case-insignificant matches when <var>Unicode</var> is <emu-val>true</emu-val>, all characters are implicitly case-folded using the simple mapping provided by the Unicode standard immediately before they are compared. The simple mapping always maps to a single code point, so it does not map, for example, <code>\"&#223;\"</code> (U+00DF) to <code>\"SS\"</code>. It may however map a code point outside the Basic Latin range to a character within, for example, <code>\"&#383;\"</code> (U+017F) to <code>\"s\"</code>. Such characters are not mapped if <var>Unicode</var> is <emu-val>false</emu-val>. This prevents Unicode code points such as U+017F and U+212A from matching regular expressions such as <code>/[a-z]/i</code>, but they will match <code>/[a-z]/ui</code>.</p>\n          </div></emu-note>\n        </emu-clause>\n        "}, "sec-directive-prologues-and-the-use-strict-directive": {"num": "14.1.1", "title": "#sec-directive-prologues-and-the-use-strict-directive Directive Prologues and the Use Strict Directive", "html": "<emu-clause id=\"sec-directive-prologues-and-the-use-strict-directive\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-directive-prologues-and-the-use-strict-directive\">#sec-directive-prologues-and-the-use-strict-directive</span> Directive Prologues and the Use Strict Directive</h1>\n      <p>A  <dfn id=\"directive-prologue\">Directive Prologue</dfn> is the longest sequence of <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt>s occurring as the initial <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>s or <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>s of a <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, a <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt>, or a <emu-nt><a href=\"#prod-ModuleBody\">ModuleBody</a></emu-nt> and where each <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt> in the sequence consists entirely of a <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt> token followed by a semicolon. The semicolon may appear explicitly or may be inserted by automatic semicolon insertion. A <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> may be an empty sequence.</p>\n      <p>A  <dfn id=\"use-strict-directive\">Use Strict Directive</dfn> is an <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt> in a <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> whose <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt> is either the exact code unit sequences <code>\"use strict\"</code> or <code>'use strict'</code>. A <emu-xref href=\"#use-strict-directive\"><a href=\"#use-strict-directive\">Use Strict Directive</a></emu-xref> may not contain an <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt> or <emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt>.</p>\n      <p>A <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> may contain more than one <emu-xref href=\"#use-strict-directive\"><a href=\"#use-strict-directive\">Use Strict Directive</a></emu-xref>. However, an implementation may issue a warning if this occurs.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt>s of a <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> are evaluated normally during evaluation of the containing production. Implementations may define implementation specific meanings for <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt>s which are not a <emu-xref href=\"#use-strict-directive\"><a href=\"#use-strict-directive\">Use Strict Directive</a></emu-xref> and which occur in a <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref>. If an appropriate notification mechanism exists, an implementation should issue a warning if it encounters in a <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> an <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt> that is not a <emu-xref href=\"#use-strict-directive\"><a href=\"#use-strict-directive\">Use Strict Directive</a></emu-xref> and which does not have a meaning defined by the implementation.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}}, "figData": {"table-nonbinary-unicode-properties": "Table 56", "table-binary-unicode-properties": "Table 57", "table-unicode-general-category-values": "Table 58"}}, "to": {"secList": ["sec-primary-expression-regular-expression-literals-static-semantics-early-errors", "sec-decodeuri-encodeduri", "sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact", "sec-characterclassescape", "sec-encodeuri-uri", "sec-pattern-semantics", "sec-runtime-semantics-mv-s", "sec-runtime-semantics-canonicalize-ch", "sec-directive-prologues-and-the-use-strict-directive"], "secData": {"sec-primary-expression-regular-expression-literals-static-semantics-early-errors": {"num": "12.2.8.1", "title": "#sec-primary-expression-regular-expression-literals-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-primary-expression-regular-expression-literals-static-semantics-early-errors\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-primary-expression-regular-expression-literals-static-semantics-early-errors\">#sec-primary-expression-regular-expression-literals-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n        <emu-grammar><emu-production name=\"PrimaryExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"31b672e8\"><emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if BodyText of <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt> cannot be recognized using the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt> of the ECMAScript RegExp grammar specified in  <emu-xref href=\"#sec-patterns\"><a href=\"#sec-patterns\" class=\"excluded-xref\" excluded-id=\"sec-patterns\">#sec-patterns</a></emu-xref>.\n          \n          </li>\n          <li>\n            It is a Syntax Error if FlagText of <emu-nt><a href=\"#prod-RegularExpressionLiteral\">RegularExpressionLiteral</a></emu-nt> contains any code points other than <code>g</code>, <code>i</code>, <code>m</code>, <code>s</code>, <code>u</code>, or <code>y</code>, or if it contains the same code point more than once.\n          \n          </li>\n        </ul>\n      </emu-clause>\n\n      "}, "sec-decodeuri-encodeduri": {"num": "18.2.6.2", "title": "#sec-decodeuri-encodeduri decodeURI ( encodedURI )", "html": "<emu-clause id=\"sec-decodeuri-encodeduri\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-decodeuri-encodeduri\">#sec-decodeuri-encodeduri</span> decodeURI ( <var>encodedURI</var> )</h1>\n        <p>The <code>decodeURI</code> function computes a new version of a URI in which each escape sequence and UTF-8 encoding of the sort that might be introduced by the <code>encodeURI</code> function is replaced with the UTF-16 encoding of the code points that it represents. Escape sequences that could not have been introduced by <code>encodeURI</code> are not replaced.</p>\n        <p>The <code>decodeURI</code> function is the  <dfn>%decodeURI%</dfn> intrinsic object. When the <code>decodeURI</code> function is called with one argument <var>encodedURI</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>uriString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>encodedURI</var>).</li><li>Let <var>reservedURISet</var> be a String containing one instance of each code unit valid in <emu-nt><a href=\"#prod-uriReserved\">uriReserved</a></emu-nt> plus <code>\"#\"</code>.</li><li>Return ?&#160;<emu-xref aoid=\"Decode\"><a href=\"#sec-decode\">Decode</a></emu-xref>(<var>uriString</var>, <var>reservedURISet</var>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The code point <code>#</code> is not decoded from escape sequences even though it is not a reserved URI code point.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact": {"num": "D", "title": "#sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact Corrections and Clarifications in ECMAScript 2015 with Possible Compatibility Impact", "html": "<emu-annex id=\"sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact\">#sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact</span> Corrections and Clarifications in ECMAScript 2015 with Possible Compatibility Impact</h1>\n  <p><emu-xref href=\"#sec-candeclareglobalvar\"><a href=\"#sec-candeclareglobalvar\" class=\"excluded-xref\" excluded-id=\"sec-candeclareglobalvar\">#sec-candeclareglobalvar</a></emu-xref>-<emu-xref href=\"#sec-createglobalfunctionbinding\"><a href=\"#sec-createglobalfunctionbinding\" class=\"excluded-xref\" excluded-id=\"sec-createglobalfunctionbinding\">#sec-createglobalfunctionbinding</a></emu-xref> Edition 5 and 5.1 used a property existence test to determine whether a <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref> property corresponding to a new global declaration already existed. ECMAScript 2015 uses an own property existence test. This corresponds to what has been most commonly implemented by web browsers.</p>\n  <p><emu-xref href=\"#sec-array-exotic-objects-defineownproperty-p-desc\"><a href=\"#sec-array-exotic-objects-defineownproperty-p-desc\" class=\"excluded-xref\" excluded-id=\"sec-array-exotic-objects-defineownproperty-p-desc\">#sec-array-exotic-objects-defineownproperty-p-desc</a></emu-xref>: The 5<sup>th</sup> Edition moved the capture of the current array length prior to the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> conversion of the <emu-xref href=\"#array-index\"><a href=\"#array-index\">array index</a></emu-xref> or new length value. However, the captured length value could become invalid if the conversion process has the side-effect of changing the array length. ECMAScript 2015 specifies that the current array length must be captured after the possible occurrence of such side-effects.</p>\n  <p><emu-xref href=\"#sec-timeclip\"><a href=\"#sec-timeclip\" class=\"excluded-xref\" excluded-id=\"sec-timeclip\">#sec-timeclip</a></emu-xref>: Previous editions permitted the <emu-xref aoid=\"TimeClip\"><a href=\"#sec-timeclip\">TimeClip</a></emu-xref> abstract operation to return either <emu-val>+0</emu-val> or <emu-val>-0</emu-val> as the representation of a 0 <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref>. ECMAScript 2015 specifies that <emu-val>+0</emu-val> always returned. This means that for ECMAScript 2015 the <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> of a Date object is never observably <emu-val>-0</emu-val> and methods that return time values never return <emu-val>-0</emu-val>.</p>\n  <p><emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\" class=\"excluded-xref\" excluded-id=\"sec-date-time-string-format\">#sec-date-time-string-format</a></emu-xref>: If a UTC offset representation is not present, the local time zone is used. Edition 5.1 incorrectly stated that a missing time zone should be interpreted as <code>\"z\"</code>.</p>\n  <p><emu-xref href=\"#sec-date.prototype.toisostring\"><a href=\"#sec-date.prototype.toisostring\" class=\"excluded-xref\" excluded-id=\"sec-date.prototype.toisostring\">#sec-date.prototype.toisostring</a></emu-xref>: If the year cannot be represented using the Date Time String Format specified in  <emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\" class=\"excluded-xref\" excluded-id=\"sec-date-time-string-format\">#sec-date-time-string-format</a></emu-xref> a RangeError exception is thrown. Previous editions did not specify the behaviour for that case.</p>\n  <p><emu-xref href=\"#sec-date.prototype.tostring\"><a href=\"#sec-date.prototype.tostring\" class=\"excluded-xref\" excluded-id=\"sec-date.prototype.tostring\">#sec-date.prototype.tostring</a></emu-xref>: Previous editions did not specify the value returned by <code>Date.prototype.toString</code> when <emu-xref href=\"#this-time-value\"><a href=\"#this-time-value\">this time value</a></emu-xref> is <emu-val>NaN</emu-val>. ECMAScript 2015 specifies the result to be the String value <emu-val>\"Invalid Date\"</emu-val>.</p>\n  <p><emu-xref href=\"#sec-regexp-pattern-flags\"><a href=\"#sec-regexp-pattern-flags\" class=\"excluded-xref\" excluded-id=\"sec-regexp-pattern-flags\">#sec-regexp-pattern-flags</a></emu-xref>,  <emu-xref href=\"#sec-escaperegexppattern\"><a href=\"#sec-escaperegexppattern\" class=\"excluded-xref\" excluded-id=\"sec-escaperegexppattern\">#sec-escaperegexppattern</a></emu-xref>: Any LineTerminator code points in the value of the <code>\"source\"</code> property of a RegExp instance must be expressed using an escape sequence. Edition 5.1 only required the escaping of <code>/</code>.</p>\n  <p><emu-xref href=\"#sec-regexp.prototype-@@match\"><a href=\"#sec-regexp.prototype-@@match\" class=\"excluded-xref\" excluded-id=\"sec-regexp.prototype-@@match\">#sec-regexp.prototype-@@match</a></emu-xref>,  <emu-xref href=\"#sec-regexp.prototype-@@replace\"><a href=\"#sec-regexp.prototype-@@replace\" class=\"excluded-xref\" excluded-id=\"sec-regexp.prototype-@@replace\">#sec-regexp.prototype-@@replace</a></emu-xref>: In previous editions, the specifications for <code>String.prototype.match</code> and <code>String.prototype.replace</code> was incorrect for cases where the pattern argument was a RegExp value whose <code>global</code> flag is set. The previous specifications stated that for each attempt to match the pattern, if <code>lastIndex</code> did not change it should be incremented by 1. The correct behaviour is that <code>lastIndex</code> should be incremented by one only if the pattern matched the empty string.</p>\n  <p><emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>,  <emu-xref href=\"#sec-sortcompare\"><a href=\"#sec-sortcompare\" class=\"excluded-xref\" excluded-id=\"sec-sortcompare\">#sec-sortcompare</a></emu-xref>: Previous editions did not specify how a <emu-val>NaN</emu-val> value returned by a <var>comparefn</var> was interpreted by <code>Array.prototype.sort</code>. ECMAScript 2015 specifies that such as value is treated as if <emu-val>+0</emu-val> was returned from the <var>comparefn</var>. ECMAScript 2015 also specifies that <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref> is applied to the result returned by a <var>comparefn</var>. In previous editions, the effect of a <var>comparefn</var> result that is not a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> was implementation-dependent. In practice, implementations call <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>.</p>\n</emu-annex>\n\n"}, "sec-characterclassescape": {"num": "21.2.2.12", "title": "#sec-characterclassescape CharacterClassEscape", "html": "<emu-clause id=\"sec-characterclassescape\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-characterclassescape\">#sec-characterclassescape</span> CharacterClassEscape</h1>\n        <p>The production  <emu-grammar><emu-production name=\"CharacterClassEscape\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CharacterClassEscape\">CharacterClassEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"f0f32729\"><emu-t>d</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the ten-element set of characters containing the characters <code>0</code> through <code>9</code> inclusive.\n        </li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"CharacterClassEscape\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CharacterClassEscape\">CharacterClassEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"919b1483\"><emu-t>D</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the set of all characters not included in the set returned by <emu-grammar><emu-production name=\"CharacterClassEscape\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CharacterClassEscape\">CharacterClassEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"f0f32729\"><emu-t>d</emu-t></emu-rhs>\n</emu-production></emu-grammar> .\n        </li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"CharacterClassEscape\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CharacterClassEscape\">CharacterClassEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5b9c6c6e\"><emu-t>s</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the set of characters containing the characters that are on the right-hand side of the <emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt> or <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> productions.\n        </li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"CharacterClassEscape\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CharacterClassEscape\">CharacterClassEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"6952cf48\"><emu-t>S</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the set of all characters not included in the set returned by <emu-grammar><emu-production name=\"CharacterClassEscape\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CharacterClassEscape\">CharacterClassEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"5b9c6c6e\"><emu-t>s</emu-t></emu-rhs>\n</emu-production></emu-grammar> .\n        </li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"CharacterClassEscape\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CharacterClassEscape\">CharacterClassEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"2d8b484a\"><emu-t>w</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the set of all characters returned by <emu-xref aoid=\"WordCharacters\"><a href=\"#sec-runtime-semantics-wordcharacters-abstract-operation\">WordCharacters</a></emu-xref>().\n        </li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"CharacterClassEscape\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CharacterClassEscape\">CharacterClassEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"ae15e851\"><emu-t>W</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the set of all characters not included in the set returned by <emu-grammar><emu-production name=\"CharacterClassEscape\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CharacterClassEscape\">CharacterClassEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"2d8b484a\"><emu-t>w</emu-t></emu-rhs>\n</emu-production></emu-grammar> .\n        </li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"CharacterClassEscape\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CharacterClassEscape\">CharacterClassEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"c3a04bb2\"><emu-t>p{</emu-t><emu-nt><a href=\"#prod-UnicodePropertyValueExpression\">UnicodePropertyValueExpression</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the CharSet containing all Unicode code points included in the CharSet returned by <emu-nt><a href=\"#prod-UnicodePropertyValueExpression\">UnicodePropertyValueExpression</a></emu-nt>.\n        </li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"CharacterClassEscape\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-CharacterClassEscape\">CharacterClassEscape</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"e281bb28\"><emu-t>P{</emu-t><emu-nt><a href=\"#prod-UnicodePropertyValueExpression\">UnicodePropertyValueExpression</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Return the CharSet containing all Unicode code points not included in the CharSet returned by <emu-nt><a href=\"#prod-UnicodePropertyValueExpression\">UnicodePropertyValueExpression</a></emu-nt>.\n        </li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"UnicodePropertyValueExpression\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UnicodePropertyValueExpression\">UnicodePropertyValueExpression</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"b11de407\"><emu-nt><a href=\"#prod-UnicodePropertyName\">UnicodePropertyName</a></emu-nt><emu-t>=</emu-t><emu-nt><a href=\"#prod-UnicodePropertyValue\">UnicodePropertyValue</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Let <var>ps</var> be SourceText of <emu-nt><a href=\"#prod-UnicodePropertyName\">UnicodePropertyName</a></emu-nt>.</li><li>Let <var>p</var> be !&#160;<emu-xref aoid=\"UnicodeMatchProperty\"><a href=\"#sec-runtime-semantics-unicodematchproperty-p\">UnicodeMatchProperty</a></emu-xref>(<var>ps</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>p</var> is a Unicode <emu-xref href=\"#property-name\"><a href=\"#property-name\">property name</a></emu-xref> or property alias listed in the &#8220;<emu-xref href=\"#property-name\"><a href=\"#property-name\">Property name</a></emu-xref> and aliases&#8221; column of <emu-xref href=\"#table-nonbinary-unicode-properties\"><a href=\"#table-nonbinary-unicode-properties\" class=\"excluded-xref\" excluded-id=\"table-nonbinary-unicode-properties\">#table-nonbinary-unicode-properties</a></emu-xref>.</li><li>Let <var>vs</var> be SourceText of <emu-nt><a href=\"#prod-UnicodePropertyValue\">UnicodePropertyValue</a></emu-nt>.</li><li>Let <var>v</var> be !&#160;<emu-xref aoid=\"UnicodeMatchPropertyValue\"><a href=\"#sec-runtime-semantics-unicodematchpropertyvalue-p-v\">UnicodeMatchPropertyValue</a></emu-xref>(<var>p</var>, <var>vs</var>).</li><li>Return the CharSet containing all Unicode code points whose character database definition includes the property <var>p</var> with value <var>v</var>.\n        </li></ol></emu-alg>\n        <p>The production  <emu-grammar><emu-production name=\"UnicodePropertyValueExpression\" type=\"lexical\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UnicodePropertyValueExpression\">UnicodePropertyValueExpression</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a=\"25d94190\"><emu-nt><a href=\"#prod-LoneUnicodePropertyNameOrValue\">LoneUnicodePropertyNameOrValue</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> evaluates as follows:</p>\n        <emu-alg><ol><li>Let <var>s</var> be SourceText of <emu-nt><a href=\"#prod-LoneUnicodePropertyNameOrValue\">LoneUnicodePropertyNameOrValue</a></emu-nt>.</li><li>If !&#160;<emu-xref aoid=\"UnicodeMatchPropertyValue\"><a href=\"#sec-runtime-semantics-unicodematchpropertyvalue-p-v\">UnicodeMatchPropertyValue</a></emu-xref>(<code>General_Category</code>, <var>s</var>) is identical to a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of Unicode code points that is the name of a Unicode general category or general category alias listed in the &#8220;Property value and aliases&#8221; column of <emu-xref href=\"#table-unicode-general-category-values\"><a href=\"#table-unicode-general-category-values\" class=\"excluded-xref\" excluded-id=\"table-unicode-general-category-values\">#table-unicode-general-category-values</a></emu-xref>, then<ol><li>Return the CharSet containing all Unicode code points whose character database definition includes the property &#8220;General_Category&#8221; with value <var>s</var>.</li></ol></li><li>Let <var>p</var> be !&#160;<emu-xref aoid=\"UnicodeMatchProperty\"><a href=\"#sec-runtime-semantics-unicodematchproperty-p\">UnicodeMatchProperty</a></emu-xref>(<var>s</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>p</var> is a binary Unicode property or binary property alias listed in the &#8220;<emu-xref href=\"#property-name\"><a href=\"#property-name\">Property name</a></emu-xref> and aliases&#8221; column of <emu-xref href=\"#table-binary-unicode-properties\"><a href=\"#table-binary-unicode-properties\" class=\"excluded-xref\" excluded-id=\"table-binary-unicode-properties\">#table-binary-unicode-properties</a></emu-xref>.</li><li>Return the CharSet containing all Unicode code points whose character database definition includes the property <var>p</var> with value &#8220;True&#8221;.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-encodeuri-uri": {"num": "18.2.6.4", "title": "#sec-encodeuri-uri encodeURI ( uri )", "html": "<emu-clause id=\"sec-encodeuri-uri\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-encodeuri-uri\">#sec-encodeuri-uri</span> encodeURI ( <var>uri</var> )</h1>\n        <p>The <code>encodeURI</code> function computes a new version of a UTF-16 encoded (<emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>) URI in which each instance of certain code points is replaced by one, two, three, or four escape sequences representing the UTF-8 encoding of the code points.</p>\n        <p>The <code>encodeURI</code> function is the  <dfn>%encodeURI%</dfn> intrinsic object. When the <code>encodeURI</code> function is called with one argument <var>uri</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>uriString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>uri</var>).</li><li>Let <var>unescapedURISet</var> be a String containing one instance of each code unit valid in <emu-nt><a href=\"#prod-uriReserved\">uriReserved</a></emu-nt> and <emu-nt><a href=\"#prod-uriUnescaped\">uriUnescaped</a></emu-nt> plus <code>\"#\"</code>.</li><li>Return ?&#160;<emu-xref aoid=\"Encode\"><a href=\"#sec-encode\">Encode</a></emu-xref>(<var>uriString</var>, <var>unescapedURISet</var>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The code point <code>#</code> is not encoded to an escape sequence even though it is not a reserved or unescaped URI code point.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-pattern-semantics": {"num": "21.2.2", "title": "#sec-pattern-semantics Pattern Semantics", "html": "<emu-clause id=\"sec-pattern-semantics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-pattern-semantics\">#sec-pattern-semantics</span> Pattern Semantics</h1>\n      <p>A regular expression pattern is converted into an internal procedure using the process described below. An implementation is encouraged to use more efficient algorithms than the ones listed below, as long as the results are the same. The internal procedure is used as the value of a RegExp object's [[RegExpMatcher]] internal slot.</p>\n      <p>A <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt> is either a BMP pattern or a Unicode pattern depending upon whether or not its associated flags contain a <code>u</code>. A BMP pattern matches against a String interpreted as consisting of a sequence of 16-bit values that are Unicode code points in the range of the Basic Multilingual Plane. A Unicode pattern matches against a String interpreted as consisting of Unicode code points encoded using UTF-16. In the context of describing the behaviour of a BMP pattern &#8220;character&#8221; means a single 16-bit Unicode BMP code point. In the context of describing the behaviour of a Unicode pattern &#8220;character&#8221; means a UTF-16 encoded code point (<emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>). In either context, &#8220;character value&#8221; means the numeric value of the corresponding non-encoded code point.</p>\n      <p>The syntax and semantics of <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt> is defined as if the source code for the <emu-nt><a href=\"#prod-Pattern\">Pattern</a></emu-nt> was a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> values where each <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> corresponds to a Unicode code point. If a BMP pattern contains a non-BMP <emu-nt><a href=\"#prod-SourceCharacter\">SourceCharacter</a></emu-nt> the entire pattern is encoded using UTF-16 and the individual code units of that encoding are used as the elements of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>For example, consider a pattern expressed in source text as the single non-BMP character U+1D11E (MUSICAL SYMBOL G CLEF). Interpreted as a Unicode pattern, it would be a single element (character) <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> consisting of the single code point 0x1D11E. However, interpreted as a BMP pattern, it is first UTF-16 encoded to produce a two element <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> consisting of the code units 0xD834 and 0xDD1E.</p>\n        <p>Patterns are passed to the RegExp <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> as ECMAScript String values in which non-BMP characters are UTF-16 encoded. For example, the single character MUSICAL SYMBOL G CLEF pattern, expressed as a String value, is a String of length 2 whose elements were the code units 0xD834 and 0xDD1E. So no further translation of the string would be necessary to process it as a BMP pattern consisting of two pattern characters. However, to process it as a Unicode pattern <emu-xref aoid=\"UTF16Decode\"><a href=\"#sec-utf16decode\">UTF16Decode</a></emu-xref> must be used in producing a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> consisting of a single pattern character, the code point U+1D11E.</p>\n        <p>An implementation may not actually perform such translations to or from UTF-16, but the semantics of this specification requires that the result of pattern matching be as if such translations were performed.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-notation\"><h1><span class=\"secnum\">21.2.2.1</span>#sec-notation Notation</h1>...</div><div id=\"excluded-sec-pattern\"><h1><span class=\"secnum\">21.2.2.2</span>#sec-pattern Pattern</h1>...</div><div id=\"excluded-sec-disjunction\"><h1><span class=\"secnum\">21.2.2.3</span>#sec-disjunction Disjunction</h1>...</div><div id=\"excluded-sec-alternative\"><h1><span class=\"secnum\">21.2.2.4</span>#sec-alternative Alternative</h1>...</div><div id=\"excluded-sec-term\"><h1><span class=\"secnum\">21.2.2.5</span>#sec-term Term</h1>...</div><div id=\"excluded-sec-assertion\"><h1><span class=\"secnum\">21.2.2.6</span>#sec-assertion Assertion</h1>...</div><div id=\"excluded-sec-quantifier\"><h1><span class=\"secnum\">21.2.2.7</span>#sec-quantifier Quantifier</h1>...</div><div id=\"excluded-sec-atom\"><h1><span class=\"secnum\">21.2.2.8</span>#sec-atom Atom</h1>...</div><div id=\"excluded-sec-atomescape\"><h1><span class=\"secnum\">21.2.2.9</span>#sec-atomescape AtomEscape</h1>...</div><div id=\"excluded-sec-characterescape\"><h1><span class=\"secnum\">21.2.2.10</span>#sec-characterescape CharacterEscape</h1>...</div><div id=\"excluded-sec-decimalescape\"><h1><span class=\"secnum\">21.2.2.11</span>#sec-decimalescape DecimalEscape</h1>...</div><div id=\"excluded-sec-characterclassescape\"><h1><span class=\"secnum\">21.2.2.12</span>#sec-characterclassescape CharacterClassEscape</h1>...</div><div id=\"excluded-sec-characterclass\"><h1><span class=\"secnum\">21.2.2.13</span>#sec-characterclass CharacterClass</h1>...</div><div id=\"excluded-sec-classranges\"><h1><span class=\"secnum\">21.2.2.14</span>#sec-classranges ClassRanges</h1>...</div><div id=\"excluded-sec-nonemptyclassranges\"><h1><span class=\"secnum\">21.2.2.15</span>#sec-nonemptyclassranges NonemptyClassRanges</h1>...</div><div id=\"excluded-sec-nonemptyclassrangesnodash\"><h1><span class=\"secnum\">21.2.2.16</span>#sec-nonemptyclassrangesnodash NonemptyClassRangesNoDash</h1>...</div><div id=\"excluded-sec-classatom\"><h1><span class=\"secnum\">21.2.2.17</span>#sec-classatom ClassAtom</h1>...</div><div id=\"excluded-sec-classatomnodash\"><h1><span class=\"secnum\">21.2.2.18</span>#sec-classatomnodash ClassAtomNoDash</h1>...</div><div id=\"excluded-sec-classescape\"><h1><span class=\"secnum\">21.2.2.19</span>#sec-classescape ClassEscape</h1>...</div></emu-clause>\n\n    "}, "sec-runtime-semantics-mv-s": {"num": "7.1.4.1.1", "title": "#sec-runtime-semantics-mv-s Runtime Semantics: MV", "html": "<emu-clause id=\"sec-runtime-semantics-mv-s\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-mv-s\">#sec-runtime-semantics-mv-s</span> Runtime Semantics: MV</h1>\n          <p>The conversion of a String to a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> is similar overall to the determination of the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for a numeric literal (see  <emu-xref href=\"#sec-literals-numeric-literals\"><a href=\"#sec-literals-numeric-literals\" class=\"excluded-xref\" excluded-id=\"sec-literals-numeric-literals\">#sec-literals-numeric-literals</a></emu-xref>), but some of the details are different, so the process for converting a String numeric literal to a value of Number type is given here. This value is determined in two steps: first, a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> (MV) is derived from the String numeric literal; second, this <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> is rounded as described below. The MV on any grammar symbol, not provided below, is the MV for that symbol defined in  <emu-xref href=\"#sec-static-semantics-mv\"><a href=\"#sec-static-semantics-mv\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-mv\">#sec-static-semantics-mv</a></emu-xref>.</p>\n          <ul>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StringNumericLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production></emu-grammar> is 0<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StringNumericLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"63c9217f\"><emu-nt><a href=\"#prod-StrWhiteSpace\">StrWhiteSpace</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is 0<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StringNumericLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StringNumericLiteral\">StringNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"fe58c396\"><emu-nt optional=\"\"><a href=\"#prod-StrWhiteSpace\">StrWhiteSpace</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href=\"#prod-StrNumericLiteral\">StrNumericLiteral</a></emu-nt><emu-nt optional=\"\"><a href=\"#prod-StrWhiteSpace\">StrWhiteSpace</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-StrNumericLiteral\">StrNumericLiteral</a></emu-nt>, no matter whether white space is present or not.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrNumericLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrNumericLiteral\">StrNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"db369ee0\"><emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrNumericLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrNumericLiteral\">StrNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"e867b70b\"><emu-nt><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-NonDecimalIntegerLiteral\">NonDecimalIntegerLiteral</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"477fcd23\"><emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"a3f639a9\"><emu-t>+</emu-t><emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"d60f01a5\"><emu-t>-</emu-t><emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the negative of the MV of <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt>. (Note that if the MV of <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt> is 0, the negative of this MV is also 0. The rounding rule described below handles the conversion of this signless mathematical zero to a floating-point <emu-val>+0</emu-val> or <emu-val>-0</emu-val> as appropriate.)\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"4afe8df8\"><emu-t>Infinity</emu-t></emu-rhs>\n</emu-production></emu-grammar> is 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>10000<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub></sup> (a value so large that it will round to <emu-val>+&#8734;</emu-val>).\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"33bf537e\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-t>.</emu-t></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"4565db95\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of the first <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> plus (the MV of the second <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>-<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><var>n</var></sup>), where <var>n</var> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the number of code points in the second <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"6f5fda9f\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup><var>e</var></sup>, where <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"4694f1d2\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-t>.</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is (the MV of the first <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> plus (the MV of the second <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>-<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><var>n</var></sup>)) times 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup><var>e</var></sup>, where <var>n</var> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the number of code points in the second <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> and <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"c1f33372\"><emu-t>.</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup>-<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><var>n</var></sup>, where <var>n</var> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"0cd5f3c3\"><emu-t>.</emu-t><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup><var>e</var> -<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> <var>n</var></sup>, where <var>n</var> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the number of code points in <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> and <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"6d7b4e5f\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt>.\n            \n            </li>\n            <li>\n              The MV of  <emu-grammar><emu-production name=\"StrUnsignedDecimalLiteral\" type=\"regexp\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a=\"2e993467\"><emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt><emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> is the MV of <emu-nt><a href=\"#prod-DecimalDigits\">DecimalDigits</a></emu-nt> times 10<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub><sup><var>e</var></sup>, where <var>e</var> is the MV of <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>.\n            \n            </li>\n          </ul>\n          <p>Once the exact MV for a String numeric literal has been determined, it is then rounded to a value of the Number type. If the MV is 0, then the rounded value is <emu-val>+0</emu-val> unless the first non white space code point in the String numeric literal is <code>-</code>, in which case the rounded value is <emu-val>-0</emu-val>. Otherwise, the rounded value must be the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the MV (in the sense defined in  <emu-xref href=\"#sec-ecmascript-language-types-number-type\"><a href=\"#sec-ecmascript-language-types-number-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-number-type\">#sec-ecmascript-language-types-number-type</a></emu-xref>), unless the literal includes a <emu-nt><a href=\"#prod-StrUnsignedDecimalLiteral\">StrUnsignedDecimalLiteral</a></emu-nt> and the literal has more than 20 significant digits, in which case the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> may be either the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the MV of a literal produced by replacing each significant digit after the 20th with a 0 digit or the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for the MV of a literal produced by replacing each significant digit after the 20th with a 0 digit and then incrementing the literal at the 20th digit position. A digit is significant if it is not part of an <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt> and</p>\n          <ul>\n            <li>\n              it is not <code>0</code>; or\n            \n            </li>\n            <li>\n              there is a nonzero digit to its left and there is a nonzero digit, not in the <emu-nt><a href=\"#prod-ExponentPart\">ExponentPart</a></emu-nt>, to its right.\n            \n            </li>\n          </ul>\n        </emu-clause>\n      "}, "sec-runtime-semantics-canonicalize-ch": {"num": "21.2.2.8.2", "title": "#sec-runtime-semantics-canonicalize-ch Runtime Semantics: Canonicalize ( ch )", "html": "<emu-clause id=\"sec-runtime-semantics-canonicalize-ch\" aoid=\"Canonicalize\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-canonicalize-ch\">#sec-runtime-semantics-canonicalize-ch</span> Runtime Semantics: Canonicalize ( <var>ch</var> )</h1>\n          <p>The abstract operation Canonicalize takes a character parameter <var>ch</var> and performs the following steps:</p>\n          <emu-alg><ol><li>If <var>IgnoreCase</var> is <emu-val>false</emu-val>, return <var>ch</var>.</li><li>If <var>Unicode</var> is <emu-val>true</emu-val>, then<ol><li>If the file CaseFolding.txt of the Unicode Character Database provides a simple or common case folding mapping for <var>ch</var>, return the result of applying that mapping to <var>ch</var>.</li><li>Return <var>ch</var>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>ch</var> is a UTF-16 code unit.</li><li>Let <var>s</var> be the String value consisting of the single code unit <var>ch</var>.</li><li>Let <var>u</var> be the same result produced as if by performing the algorithm for <code>String.prototype.toUpperCase</code> using <var>s</var> as the <emu-val>this</emu-val> value.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>u</var>) is String.</li><li>If <var>u</var> does not consist of a single code unit, return <var>ch</var>.</li><li>Let <var>cu</var> be <var>u</var>'s single code unit element.</li><li>If the numeric value of <var>ch</var> &#8805; 128 and the numeric value of <var>cu</var> &lt; 128, return <var>ch</var>.</li><li>Return <var>cu</var>.\n          </li></ol></li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>Parentheses of the form <code>(</code> <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> <code>)</code> serve both to group the components of the <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> pattern together and to save the result of the match. The result can be used either in a backreference (<code>\\</code> followed by a nonzero decimal number), referenced in a replace String, or returned as part of an array from the regular expression matching internal procedure. To inhibit the capturing behaviour of parentheses, use the form <code>(?:</code> <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> <code>)</code> instead.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>The form <code>(?=</code> <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> <code>)</code> specifies a zero-width positive lookahead. In order for it to succeed, the pattern inside <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> must match at the current position, but the current position is not advanced before matching the sequel. If <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> can match at the current position in several ways, only the first one is tried. Unlike other regular expression operators, there is no backtracking into a <code>(?=</code> form (this unusual behaviour is inherited from Perl). This only matters when the <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> contains capturing parentheses and the sequel of the pattern contains backreferences to those captures.</p>\n            <p>For example,</p>\n            <pre><code class=\"javascript hljs\">/(?=(a+))/.exec(<span class=\"hljs-string\">\"baaabac\"</span>)</code></pre>\n            <p>matches the empty String immediately after the first <code>b</code> and therefore returns the array:</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-string\">\"aaa\"</span>]</code></pre>\n            <p>To illustrate the lack of backtracking into the lookahead, consider:</p>\n            <pre><code class=\"javascript hljs\">/(?=(a+))a*b\\<span class=\"hljs-number\">1</span>/.exec(<span class=\"hljs-string\">\"baaabac\"</span>)</code></pre>\n            <p>This expression returns</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"aba\"</span>, <span class=\"hljs-string\">\"a\"</span>]</code></pre>\n            <p>and not:</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"aaaba\"</span>, <span class=\"hljs-string\">\"a\"</span>]</code></pre>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n            <p>The form <code>(?!</code> <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> <code>)</code> specifies a zero-width negative lookahead. In order for it to succeed, the pattern inside <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> must fail to match at the current position. The current position is not advanced before matching the sequel. <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> can contain capturing parentheses, but backreferences to them only make sense from within <emu-nt><a href=\"#prod-Disjunction\">Disjunction</a></emu-nt> itself. Backreferences to these capturing parentheses from elsewhere in the pattern always return <emu-val>undefined</emu-val> because the negative lookahead must fail for the pattern to succeed. For example,</p>\n            <pre><code class=\"javascript hljs\">/(.*?)a(?!(a+)b\\<span class=\"hljs-number\">2</span>c)\\<span class=\"hljs-number\">2</span>(.*)/.exec(<span class=\"hljs-string\">\"baaabaac\"</span>)</code></pre>\n            <p>looks for an <code>a</code> not immediately followed by some positive number n of <code>a</code>'s, a <code>b</code>, another n <code>a</code>'s (specified by the first <code>\\2</code>) and a <code>c</code>. The second <code>\\2</code> is outside the negative lookahead, so it matches against <emu-val>undefined</emu-val> and therefore always succeeds. The whole expression returns the array:</p>\n            <pre><code class=\"javascript hljs\">[<span class=\"hljs-string\">\"baaabaac\"</span>, <span class=\"hljs-string\">\"ba\"</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">\"abaac\"</span>]</code></pre>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 4</span><div class=\"note-contents\">\n            <p>In case-insignificant matches when <var>Unicode</var> is <emu-val>true</emu-val>, all characters are implicitly case-folded using the simple mapping provided by the Unicode standard immediately before they are compared. The simple mapping always maps to a single code point, so it does not map, for example, <code>&#223;</code> (U+00DF) to <code>SS</code>. It may however map a code point outside the Basic Latin range to a character within, for example, <code>&#383;</code> (U+017F) to <code>s</code>. Such characters are not mapped if <var>Unicode</var> is <emu-val>false</emu-val>. This prevents Unicode code points such as U+017F and U+212A from matching regular expressions such as <code>/[a-z]/i</code>, but they will match <code>/[a-z]/ui</code>.</p>\n          </div></emu-note>\n        </emu-clause>\n        "}, "sec-directive-prologues-and-the-use-strict-directive": {"num": "14.1.1", "title": "#sec-directive-prologues-and-the-use-strict-directive Directive Prologues and the Use Strict Directive", "html": "<emu-clause id=\"sec-directive-prologues-and-the-use-strict-directive\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-directive-prologues-and-the-use-strict-directive\">#sec-directive-prologues-and-the-use-strict-directive</span> Directive Prologues and the Use Strict Directive</h1>\n      <p>A  <dfn id=\"directive-prologue\">Directive Prologue</dfn> is the longest sequence of <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt>s occurring as the initial <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>s or <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>s of a <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, a <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt>, or a <emu-nt><a href=\"#prod-ModuleBody\">ModuleBody</a></emu-nt> and where each <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt> in the sequence consists entirely of a <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt> token followed by a semicolon. The semicolon may appear explicitly or may be inserted by automatic semicolon insertion. A <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> may be an empty sequence.</p>\n      <p>A  <dfn id=\"use-strict-directive\">Use Strict Directive</dfn> is an <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt> in a <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> whose <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt> is either of the exact code point sequences <code>\"use strict\"</code> or <code>'use strict'</code>. A <emu-xref href=\"#use-strict-directive\"><a href=\"#use-strict-directive\">Use Strict Directive</a></emu-xref> may not contain an <emu-nt><a href=\"#prod-EscapeSequence\">EscapeSequence</a></emu-nt> or <emu-nt><a href=\"#prod-LineContinuation\">LineContinuation</a></emu-nt>.</p>\n      <p>A <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> may contain more than one <emu-xref href=\"#use-strict-directive\"><a href=\"#use-strict-directive\">Use Strict Directive</a></emu-xref>. However, an implementation may issue a warning if this occurs.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt>s of a <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> are evaluated normally during evaluation of the containing production. Implementations may define implementation specific meanings for <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt>s which are not a <emu-xref href=\"#use-strict-directive\"><a href=\"#use-strict-directive\">Use Strict Directive</a></emu-xref> and which occur in a <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref>. If an appropriate notification mechanism exists, an implementation should issue a warning if it encounters in a <emu-xref href=\"#directive-prologue\"><a href=\"#directive-prologue\">Directive Prologue</a></emu-xref> an <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt> that is not a <emu-xref href=\"#use-strict-directive\"><a href=\"#use-strict-directive\">Use Strict Directive</a></emu-xref> and which does not have a meaning defined by the implementation.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}}, "figData": {"table-nonbinary-unicode-properties": "Table 56", "table-binary-unicode-properties": "Table 57", "table-unicode-general-category-values": "Table 58"}}}