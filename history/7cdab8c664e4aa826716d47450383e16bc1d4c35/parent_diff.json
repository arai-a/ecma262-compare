{"from": {"secList": ["sec-cyclic-module-records", "sec-labelled-statements-static-semantics-containsundefinedcontinuetarget", "sec-do-while-statement-static-semantics-containsundefinedbreaktarget", "sec-switch-statement-static-semantics-containsduplicatelabels", "sec-try-statement-static-semantics-containsundefinedcontinuetarget", "sec-if-statement-static-semantics-containsundefinedcontinuetarget", "sec-statement-semantics", "sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget", "sec-block-static-semantics-containsduplicatelabels", "sec-do-while-statement", "sec-while-statement", "sec-function-definitions-static-semantics-containsundefinedbreaktarget", "sec-break-statement-static-semantics-containsundefinedbreaktarget", "sec-module-semantics-static-semantics-early-errors", "sec-if-statement", "sec-statement-semantics-static-semantics-containsundefinedbreaktarget", "sec-for-statement-static-semantics-containsduplicatelabels", "sec-try-statement", "sec-function-definitions-static-semantics-containsundefinedcontinuetarget", "sec-moduledeclarationlinking", "sec-module-semantics-static-semantics-containsundefinedbreaktarget", "sec-labelled-statements-static-semantics-containsduplicatelabels", "sec-do-while-statement-static-semantics-containsundefinedcontinuetarget", "sec-%foriniteratorprototype%-object", "sec-break-statement", "sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget", "sec-switch-statement", "sec-module-semantics", "sec-module-semantics-static-semantics-containsundefinedcontinuetarget", "sec-labelled-statements-static-semantics-containsundefinedbreaktarget", "sec-while-statement-static-semantics-containsundefinedcontinuetarget", "sec-while-statement-static-semantics-containsduplicatelabels", "sec-while-statement-static-semantics-containsundefinedbreaktarget", "sec-labelled-statements", "sec-module-semantics-static-semantics-containsduplicatelabels", "sec-block", "sec-block-static-semantics-containsundefinedcontinuetarget", "sec-try-statement-static-semantics-containsduplicatelabels", "sec-function-definitions-static-semantics-early-errors", "sec-for-statement-static-semantics-containsundefinedbreaktarget", "sec-scripts-static-semantics-early-errors", "sec-do-while-statement-static-semantics-containsduplicatelabels", "sec-with-statement-static-semantics-containsundefinedcontinuetarget", "sec-for-in-iterator-objects", "sec-function-definitions", "sec-switch-statement-static-semantics-containsundefinedcontinuetarget", "sec-with-statement-static-semantics-containsundefinedbreaktarget", "sec-for-in-and-for-of-statements", "sec-moduleevaluation", "sec-for-statement", "sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels", "sec-continue-statement", "sec-switch-statement-static-semantics-containsundefinedbreaktarget", "sec-initializers-in-forin-statement-heads", "sec-with-statement-static-semantics-containsduplicatelabels", "sec-statement-semantics-static-semantics-containsduplicatelabels", "sec-for-statement-static-semantics-containsundefinedcontinuetarget", "sec-if-statement-static-semantics-containsduplicatelabels", "sec-with-statement", "sec-block-static-semantics-containsundefinedbreaktarget", "sec-continue-statement-static-semantics-containsundefinedcontinuetarget", "sec-function-definitions-static-semantics-containsduplicatelabels", "sec-syntax-directed-operations-labels", "sec-try-statement-static-semantics-containsundefinedbreaktarget", "sec-if-statement-static-semantics-containsundefinedbreaktarget", "sec-statement-semantics-static-semantics-containsundefinedcontinuetarget", "sec-source-text-module-records"], "secData": {"sec-cyclic-module-records": {"num": "16.2.1.12", "title": "#sec-cyclic-module-records Cyclic Module Records", "html": "<emu-clause id=\"sec-cyclic-module-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-cyclic-module-records\">#sec-cyclic-module-records</span> Cyclic Module Records</h1>\n        <p>A <dfn id=\"cyclic-module-record\">Cyclic Module Record</dfn> is used to represent information about a module that can participate in dependency cycles with other modules that are subclasses of the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> type. Module Records that are not subclasses of the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> type must not participate in dependency cycles with Source Text Module Records.</p>\n        <p>In addition to the fields defined in <emu-xref href=\"#table-module-record-fields\"><a href=\"#table-module-record-fields\" class=\"excluded-xref\" excluded-id=\"table-module-record-fields\">#table-module-record-fields</a></emu-xref> Cyclic Module Records have the additional fields listed in <emu-xref href=\"#table-cyclic-module-fields\"><a href=\"#table-cyclic-module-fields\" class=\"excluded-xref\" excluded-id=\"table-cyclic-module-fields\">#table-cyclic-module-fields</a></emu-xref></p>\n        <emu-table id=\"table-cyclic-module-fields\" caption=\"Additional Fields of Cyclic Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-cyclic-module-fields\">#table-cyclic-module-fields</span>: Additional Fields of Cyclic Module Records</figcaption>\n          <table>\n            <tbody>\n              <tr>\n                <th>\n                  Field Name\n                </th>\n                <th>\n                  Value Type\n                </th>\n                <th>\n                  Meaning\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  [[Status]]\n                </td>\n                <td>\n                  <emu-const>unlinked</emu-const> | <emu-const>linking</emu-const> | <emu-const>linked</emu-const> | <emu-const>evaluating</emu-const> | <emu-const>evaluated</emu-const>\n                </td>\n                <td>\n                  Initially <emu-const>unlinked</emu-const>. Transitions to <emu-const>linking</emu-const>, <emu-const>linked</emu-const>, <emu-const>evaluating</emu-const>, <emu-const>evaluated</emu-const> (in that order) as the module progresses throughout its lifecycle.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[EvaluationError]]\n                </td>\n                <td>\n                  An <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> | <emu-val>undefined</emu-val>\n                </td>\n                <td>\n                  A completion of type <emu-const>throw</emu-const> representing the exception that occurred during evaluation. <emu-val>undefined</emu-val> if no exception occurred or if [[Status]] is not <emu-const>evaluated</emu-const>.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[DFSIndex]]\n                </td>\n                <td>\n                  <emu-xref href=\"#integer\"><a href=\"#integer\">Integer</a></emu-xref> | <emu-val>undefined</emu-val>\n                </td>\n                <td>\n                  Auxiliary field used during Link and Evaluate only.\n                  If [[Status]] is <emu-const>linking</emu-const> or <emu-const>evaluating</emu-const>, this non-negative number records the point at which the module was first visited during the ongoing depth-first traversal of the dependency graph.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[DFSAncestorIndex]]\n                </td>\n                <td>\n                  <emu-xref href=\"#integer\"><a href=\"#integer\">Integer</a></emu-xref> | <emu-val>undefined</emu-val>\n                </td>\n                <td>\n                  Auxiliary field used during Link and Evaluate only. If [[Status]] is <emu-const>linking</emu-const> or <emu-const>evaluating</emu-const>, this is either the module's own [[DFSIndex]] or that of an \"earlier\" module in the same strongly connected component.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[RequestedModules]]\n                </td>\n                <td>\n                  <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of String\n                </td>\n                <td>\n                  A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of all the <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> strings used by the module represented by this record to request the importation of a module. The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is source code occurrence ordered.\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>In addition to the methods defined in <emu-xref href=\"#table-abstract-methods-of-module-records\"><a href=\"#table-abstract-methods-of-module-records\" class=\"excluded-xref\" excluded-id=\"table-abstract-methods-of-module-records\">#table-abstract-methods-of-module-records</a></emu-xref> Cyclic Module Records have the additional methods listed in <emu-xref href=\"#table-cyclic-module-methods\"><a href=\"#table-cyclic-module-methods\" class=\"excluded-xref\" excluded-id=\"table-cyclic-module-methods\">#table-cyclic-module-methods</a></emu-xref></p>\n        <emu-table id=\"table-cyclic-module-methods\" caption=\"Additional Abstract Methods of Cyclic Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-cyclic-module-methods\">#table-cyclic-module-methods</span>: Additional Abstract Methods of Cyclic Module Records</figcaption>\n          <table>\n            <tbody>\n              <tr>\n                <th>\n                  Method\n                </th>\n                <th>\n                  Purpose\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  <emu-xref aoid=\"InitializeEnvironment\"><a href=\"#sec-source-text-module-record-initialize-environment\">InitializeEnvironment</a></emu-xref>()\n                </td>\n                <td>\n                  Initialize the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> of the module, including resolving all imported bindings, and create the module's <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-xref aoid=\"ExecuteModule\"><a href=\"#sec-source-text-module-record-execute-module\">ExecuteModule</a></emu-xref>()\n                </td>\n                <td>\n                  Evaluate the module's code within its <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n\n        <div id=\"excluded-sec-moduledeclarationlinking\"><h1><span class=\"secnum\">16.2.1.12.1</span>#sec-moduledeclarationlinking Link ( ) Concrete Method</h1>...</div><div id=\"excluded-sec-moduleevaluation\"><h1><span class=\"secnum\">16.2.1.12.2</span>#sec-moduleevaluation Evaluate ( ) Concrete Method</h1>...</div><div id=\"excluded-sec-example-cyclic-module-record-graphs\"><h1><span class=\"secnum\">16.2.1.12.3</span>#sec-example-cyclic-module-record-graphs Example Cyclic Module Record Graphs</h1>...</div></emu-clause>\n\n      "}, "sec-labelled-statements-static-semantics-containsundefinedcontinuetarget": {"num": "14.13.4", "title": "#sec-labelled-statements-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget", "html": "<emu-clause id=\"sec-labelled-statements-static-semantics-containsundefinedcontinuetarget\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-labelled-statements-static-semantics-containsundefinedcontinuetarget\">#sec-labelled-statements-static-semantics-containsundefinedcontinuetarget</span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n      <p>With parameters <var>iterationSet</var> and <var>labelSet</var>.</p>\n      <emu-see-also-para op=\"ContainsUndefinedContinueTarget\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"51b6efb5\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>label</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>.</li><li>Let <var>newLabelSet</var> be a copy of <var>labelSet</var> with <var>label</var> appended.</li><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> with arguments <var>iterationSet</var> and <var>newLabelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fa7a943c\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-do-while-statement-static-semantics-containsundefinedbreaktarget": {"num": "14.7.2.2", "title": "#sec-do-while-statement-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget", "html": "<emu-clause id=\"sec-do-while-statement-static-semantics-containsundefinedbreaktarget\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-do-while-statement-static-semantics-containsundefinedbreaktarget\">#sec-do-while-statement-static-semantics-containsundefinedbreaktarget</span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n        <p>With parameter <var>labelSet</var>.</p>\n        <emu-see-also-para op=\"ContainsUndefinedBreakTarget\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"24e70caa\">\n        <emu-t>do</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-switch-statement-static-semantics-containsduplicatelabels": {"num": "14.12.2", "title": "#sec-switch-statement-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels", "html": "<emu-clause id=\"sec-switch-statement-static-semantics-containsduplicatelabels\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-switch-statement-static-semantics-containsduplicatelabels\">#sec-switch-statement-static-semantics-containsduplicatelabels</span> Static Semantics: ContainsDuplicateLabels</h1>\n      <p>With parameter <var>labelSet</var>.</p>\n      <emu-see-also-para op=\"ContainsDuplicateLabels\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"515acffe\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ContainsDuplicateLabels of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"81ba5a4a\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"503b8396\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, then<ol><li>Let <var>hasDuplicates</var> be ContainsDuplicateLabels of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Let <var>hasDuplicates</var> be ContainsDuplicateLabels of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is not present, return <emu-val>false</emu-val>.</li><li>Return ContainsDuplicateLabels of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"68374923\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicates</var> be ContainsDuplicateLabels of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsDuplicateLabels of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c76d0d30\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return ContainsDuplicateLabels of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6782073e\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return ContainsDuplicateLabels of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-try-statement-static-semantics-containsundefinedcontinuetarget": {"num": "14.15.4", "title": "#sec-try-statement-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget", "html": "<emu-clause id=\"sec-try-statement-static-semantics-containsundefinedcontinuetarget\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-try-statement-static-semantics-containsundefinedcontinuetarget\">#sec-try-statement-static-semantics-containsundefinedcontinuetarget</span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n      <p>With parameters <var>iterationSet</var> and <var>labelSet</var>.</p>\n      <emu-see-also-para op=\"ContainsUndefinedContinueTarget\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a8714e57\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"5ec68ab9\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1b19737c\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ddc13c36\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-if-statement-static-semantics-containsundefinedcontinuetarget": {"num": "14.6.4", "title": "#sec-if-statement-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget", "html": "<emu-clause id=\"sec-if-statement-static-semantics-containsundefinedcontinuetarget\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-if-statement-static-semantics-containsundefinedcontinuetarget\">#sec-if-statement-static-semantics-containsundefinedcontinuetarget</span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n      <p>With parameters <var>iterationSet</var> and <var>labelSet</var>.</p>\n      <emu-see-also-para op=\"ContainsUndefinedContinueTarget\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"16e86a13\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedContinueTarget of the first <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsUndefinedContinueTarget of the second <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f6819570\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-statement-semantics": {"num": "14.1", "title": "#sec-statement-semantics Statement Semantics", "html": "<emu-clause id=\"sec-statement-semantics\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-statement-semantics\">#sec-statement-semantics</span> Statement Semantics</h1>\n\n    <div id=\"excluded-sec-statement-semantics-static-semantics-containsduplicatelabels\"><h1><span class=\"secnum\">14.1.1</span>#sec-statement-semantics-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels</h1>...</div><div id=\"excluded-sec-statement-semantics-static-semantics-containsundefinedbreaktarget\"><h1><span class=\"secnum\">14.1.2</span>#sec-statement-semantics-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget</h1>...</div><div id=\"excluded-sec-statement-semantics-static-semantics-containsundefinedcontinuetarget\"><h1><span class=\"secnum\">14.1.3</span>#sec-statement-semantics-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget</h1>...</div><div id=\"excluded-sec-statement-semantics-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.1.4</span>#sec-statement-semantics-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget": {"num": "14.7.5.4", "title": "#sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget", "html": "<emu-clause id=\"sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget\">#sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget</span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n        <p>With parameters <var>iterationSet</var> and <var>labelSet</var>.</p>\n        <emu-see-also-para op=\"ContainsUndefinedContinueTarget\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"IterationStatement\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bf521b70\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ecf18944\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"2590ad81\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"8ea6608b\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ee6f9a77\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"6f7c3304\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"9a146e5f\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7324ff96\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"b80b6675\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-block-static-semantics-containsduplicatelabels": {"num": "14.2.2", "title": "#sec-block-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels", "html": "<emu-clause id=\"sec-block-static-semantics-containsduplicatelabels\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-block-static-semantics-containsduplicatelabels\">#sec-block-static-semantics-containsduplicatelabels</span> Static Semantics: ContainsDuplicateLabels</h1>\n      <p>With parameter <var>labelSet</var>.</p>\n      <emu-see-also-para op=\"ContainsDuplicateLabels\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"81ba5a4a\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0db4597a\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicates</var> be ContainsDuplicateLabels of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsDuplicateLabels of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"d6f37721\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-do-while-statement": {"num": "14.7.2", "title": "#sec-do-while-statement The do-while Statement", "html": "<emu-clause id=\"sec-do-while-statement\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-do-while-statement\">#sec-do-while-statement</span> The <code>do</code>-<code>while</code> Statement</h1>\n\n      <div id=\"excluded-sec-do-while-statement-static-semantics-containsduplicatelabels\"><h1><span class=\"secnum\">14.7.2.1</span>#sec-do-while-statement-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels</h1>...</div><div id=\"excluded-sec-do-while-statement-static-semantics-containsundefinedbreaktarget\"><h1><span class=\"secnum\">14.7.2.2</span>#sec-do-while-statement-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget</h1>...</div><div id=\"excluded-sec-do-while-statement-static-semantics-containsundefinedcontinuetarget\"><h1><span class=\"secnum\">14.7.2.3</span>#sec-do-while-statement-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget</h1>...</div></emu-clause>\n\n    "}, "sec-while-statement": {"num": "14.7.3", "title": "#sec-while-statement The while Statement", "html": "<emu-clause id=\"sec-while-statement\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-while-statement\">#sec-while-statement</span> The <code>while</code> Statement</h1>\n\n      <div id=\"excluded-sec-while-statement-static-semantics-containsduplicatelabels\"><h1><span class=\"secnum\">14.7.3.1</span>#sec-while-statement-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels</h1>...</div><div id=\"excluded-sec-while-statement-static-semantics-containsundefinedbreaktarget\"><h1><span class=\"secnum\">14.7.3.2</span>#sec-while-statement-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget</h1>...</div><div id=\"excluded-sec-while-statement-static-semantics-containsundefinedcontinuetarget\"><h1><span class=\"secnum\">14.7.3.3</span>#sec-while-statement-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget</h1>...</div></emu-clause>\n\n    "}, "sec-function-definitions-static-semantics-containsundefinedbreaktarget": {"num": "15.2.4", "title": "#sec-function-definitions-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget", "html": "<emu-clause id=\"sec-function-definitions-static-semantics-containsundefinedbreaktarget\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions-static-semantics-containsundefinedbreaktarget\">#sec-function-definitions-static-semantics-containsundefinedbreaktarget</span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n      <p>With parameter <var>labelSet</var>.</p>\n      <emu-see-also-para op=\"ContainsUndefinedBreakTarget\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-break-statement-static-semantics-containsundefinedbreaktarget": {"num": "14.9.2", "title": "#sec-break-statement-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget", "html": "<emu-clause id=\"sec-break-statement-static-semantics-containsundefinedbreaktarget\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-break-statement-static-semantics-containsundefinedbreaktarget\">#sec-break-statement-static-semantics-containsundefinedbreaktarget</span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n      <p>With parameter <var>labelSet</var>.</p>\n      <emu-see-also-para op=\"ContainsUndefinedBreakTarget\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"BreakStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b65229e7\">\n        <emu-t>break</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BreakStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"91c83ecb\">\n        <emu-t>break</emu-t>\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt> is not an element of <var>labelSet</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-module-semantics-static-semantics-early-errors": {"num": "16.2.1.1", "title": "#sec-module-semantics-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-module-semantics-static-semantics-early-errors\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-semantics-static-semantics-early-errors\">#sec-module-semantics-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n        <emu-grammar><emu-production name=\"ModuleBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleBody\">ModuleBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"89010d7d\"><emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> contains any duplicate entries.\n          </li>\n          <li>\n            It is a Syntax Error if any element of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> also occurs in the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.\n          </li>\n          <li>\n            It is a Syntax Error if the ExportedNames of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> contains any duplicate entries.\n          </li>\n          <li>\n            It is a Syntax Error if any element of the ExportedBindings of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> does not also occur in either the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>, or the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.\n          </li>\n          <li>\n            It is a Syntax Error if <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> Contains <code>super</code>.\n          </li>\n          <li>\n            It is a Syntax Error if <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> Contains <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt>.\n          </li>\n          <li>\n            It is a Syntax Error if ContainsDuplicateLabels of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> with argument &#171; &#187; is <emu-val>true</emu-val>.\n          </li>\n          <li>\n            It is a Syntax Error if ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> with argument &#171; &#187; is <emu-val>true</emu-val>.\n          </li>\n          <li>\n            It is a Syntax Error if ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> with arguments &#171; &#187; and &#171; &#187; is <emu-val>true</emu-val>.\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The duplicate ExportedNames rule implies that multiple <code>export default</code> <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> items within a <emu-nt><a href=\"#prod-ModuleBody\">ModuleBody</a></emu-nt> is a Syntax Error. Additional error conditions relating to conflicting or duplicate declarations are checked during module linking prior to evaluation of a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. If any such errors are detected the <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> is not evaluated.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-if-statement": {"num": "14.6", "title": "#sec-if-statement The if Statement", "html": "<emu-clause id=\"sec-if-statement\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-if-statement\">#sec-if-statement</span> The <code>if</code> Statement</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"IfStatement\" params=\"Yield, Await, Return\" id=\"prod-IfStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-IfStatement\">IfStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"19528ab2\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"5fd3ff70\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[lookahead &#8800; <emu-t>else</emu-t>]</emu-gann>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">The lookahead-restriction [lookahead &#8800; <code>else</code>] resolves the classic \"dangling else\" problem in the usual way. That is, when the choice of associated <code>if</code> is otherwise ambiguous, the <code>else</code> is associated with the nearest (innermost) of the candidate <code>if</code>s</div></emu-note>\n\n    <div id=\"excluded-sec-if-statement-static-semantics-early-errors\"><h1><span class=\"secnum\">14.6.1</span>#sec-if-statement-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-if-statement-static-semantics-containsduplicatelabels\"><h1><span class=\"secnum\">14.6.2</span>#sec-if-statement-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels</h1>...</div><div id=\"excluded-sec-if-statement-static-semantics-containsundefinedbreaktarget\"><h1><span class=\"secnum\">14.6.3</span>#sec-if-statement-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget</h1>...</div><div id=\"excluded-sec-if-statement-static-semantics-containsundefinedcontinuetarget\"><h1><span class=\"secnum\">14.6.4</span>#sec-if-statement-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget</h1>...</div><div id=\"excluded-sec-if-statement-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.6.5</span>#sec-if-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-statement-semantics-static-semantics-containsundefinedbreaktarget": {"num": "14.1.2", "title": "#sec-statement-semantics-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget", "html": "<emu-clause id=\"sec-statement-semantics-static-semantics-containsundefinedbreaktarget\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-statement-semantics-static-semantics-containsundefinedbreaktarget\">#sec-statement-semantics-static-semantics-containsundefinedbreaktarget</span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n      <p>With parameter <var>labelSet</var>.</p>\n      <emu-see-also-para op=\"ContainsUndefinedBreakTarget\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"Statement\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8b0c0df0\"><emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"7338aabb\"><emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"1d7d329e\"><emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"aa6f7913\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"867b4090\"><emu-nt><a href=\"#prod-ThrowStatement\">ThrowStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"21212edb\"><emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-for-statement-static-semantics-containsduplicatelabels": {"num": "14.7.4.2", "title": "#sec-for-statement-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels", "html": "<emu-clause id=\"sec-for-statement-static-semantics-containsduplicatelabels\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-for-statement-static-semantics-containsduplicatelabels\">#sec-for-statement-static-semantics-containsduplicatelabels</span> Static Semantics: ContainsDuplicateLabels</h1>\n        <p>With parameter <var>labelSet</var>.</p>\n        <emu-see-also-para op=\"ContainsDuplicateLabels\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"IterationStatement\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fc33bcf0\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"48e766b4\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"93c07e45\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ContainsDuplicateLabels of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-try-statement": {"num": "14.15", "title": "#sec-try-statement The try Statement", "html": "<emu-clause id=\"sec-try-statement\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-try-statement\">#sec-try-statement</span> The <code>try</code> Statement</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"TryStatement\" params=\"Yield, Await, Return\" id=\"prod-TryStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-TryStatement\">TryStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1105fb1b\">\n        <emu-t>try</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Block\">Block</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Catch\">Catch</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"032228f5\">\n        <emu-t>try</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Block\">Block</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Finally\">Finally</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"c9f66613\">\n        <emu-t>try</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Block\">Block</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Catch\">Catch</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Finally\">Finally</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"Catch\" params=\"Yield, Await, Return\" id=\"prod-Catch\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-Catch\">Catch</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"824e8c92\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CatchParameter\">CatchParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Block\">Block</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"548fd244\">\n        <emu-t>catch</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Block\">Block</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"Finally\" params=\"Yield, Await, Return\" id=\"prod-Finally\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-Finally\">Finally</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7bd00a40\">\n        <emu-t>finally</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Block\">Block</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"CatchParameter\" params=\"Yield, Await\" id=\"prod-CatchParameter\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-CatchParameter\">CatchParameter</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"22bf917e\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"9eb89dc1\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingPattern\">BindingPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>The <code>try</code> statement encloses a block of code in which an exceptional condition can occur, such as a runtime error or a <code>throw</code> statement. The <code>catch</code> clause provides the exception-handling code. When a catch clause catches an exception, its <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> is bound to that exception.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-try-statement-static-semantics-early-errors\"><h1><span class=\"secnum\">14.15.1</span>#sec-try-statement-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-try-statement-static-semantics-containsduplicatelabels\"><h1><span class=\"secnum\">14.15.2</span>#sec-try-statement-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels</h1>...</div><div id=\"excluded-sec-try-statement-static-semantics-containsundefinedbreaktarget\"><h1><span class=\"secnum\">14.15.3</span>#sec-try-statement-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget</h1>...</div><div id=\"excluded-sec-try-statement-static-semantics-containsundefinedcontinuetarget\"><h1><span class=\"secnum\">14.15.4</span>#sec-try-statement-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget</h1>...</div><div id=\"excluded-sec-runtime-semantics-catchclauseevaluation\"><h1><span class=\"secnum\">14.15.5</span>#sec-runtime-semantics-catchclauseevaluation Runtime Semantics: CatchClauseEvaluation</h1>...</div><div id=\"excluded-sec-try-statement-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.15.6</span>#sec-try-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-function-definitions-static-semantics-containsundefinedcontinuetarget": {"num": "15.2.5", "title": "#sec-function-definitions-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget", "html": "<emu-clause id=\"sec-function-definitions-static-semantics-containsundefinedcontinuetarget\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions-static-semantics-containsundefinedcontinuetarget\">#sec-function-definitions-static-semantics-containsundefinedcontinuetarget</span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n      <p>With parameters <var>iterationSet</var> and <var>labelSet</var>.</p>\n      <emu-see-also-para op=\"ContainsUndefinedContinueTarget\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-moduledeclarationlinking": {"num": "16.2.1.12.1", "title": "#sec-moduledeclarationlinking Link ( ) Concrete Method", "html": "<emu-clause id=\"sec-moduledeclarationlinking\" oldids=\"sec-moduledeclarationinstantiation\"><span id=\"sec-moduledeclarationinstantiation\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-moduledeclarationlinking\">#sec-moduledeclarationlinking</span> Link ( ) Concrete Method</h1>\n          <p>The Link concrete method of a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> <var>module</var> takes no arguments. On success, Link transitions this module's [[Status]] from <emu-const>unlinked</emu-const> to <emu-const>linked</emu-const>. On failure, an exception is thrown and this module's [[Status]] remains <emu-const>unlinked</emu-const>. (Most of the work is done by the auxiliary function <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>.) It performs the following steps when called:</p>\n\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is not <emu-const>linking</emu-const> or <emu-const>evaluating</emu-const>.</li><li>Let <var>stack</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>(<var>module</var>, <var>stack</var>, 0).</li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>For each <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> <var>m</var> of <var>stack</var>, do<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>m</var>.[[Status]] is <emu-const>linking</emu-const>.</li><li>Set <var>m</var>.[[Status]] to <emu-const>unlinked</emu-const>.</li><li>Set <var>m</var>.[[Environment]] to <emu-val>undefined</emu-val>.</li><li>Set <var>m</var>.[[DFSIndex]] to <emu-val>undefined</emu-val>.</li><li>Set <var>m</var>.[[DFSAncestorIndex]] to <emu-val>undefined</emu-val>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>unlinked</emu-const>.</li><li>Return <var>result</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>linked</emu-const> or <emu-const>evaluated</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>stack</var> is empty.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n          <div id=\"excluded-sec-InnerModuleLinking\"><h1><span class=\"secnum\">16.2.1.12.1.1</span>#sec-InnerModuleLinking InnerModuleLinking ( module, stack, index )</h1>...</div></emu-clause>\n\n        "}, "sec-module-semantics-static-semantics-containsundefinedbreaktarget": {"num": "16.2.1.3", "title": "#sec-module-semantics-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget", "html": "<emu-clause id=\"sec-module-semantics-static-semantics-containsundefinedbreaktarget\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-semantics-static-semantics-containsundefinedbreaktarget\">#sec-module-semantics-static-semantics-containsundefinedbreaktarget</span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n        <p>With parameter <var>labelSet</var>.</p>\n        <emu-see-also-para op=\"ContainsUndefinedBreakTarget\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"75ddb725\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ModuleItem\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e0559377\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"298e81b0\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-labelled-statements-static-semantics-containsduplicatelabels": {"num": "14.13.2", "title": "#sec-labelled-statements-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels", "html": "<emu-clause id=\"sec-labelled-statements-static-semantics-containsduplicatelabels\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-labelled-statements-static-semantics-containsduplicatelabels\">#sec-labelled-statements-static-semantics-containsduplicatelabels</span> Static Semantics: ContainsDuplicateLabels</h1>\n      <p>With parameter <var>labelSet</var>.</p>\n      <emu-see-also-para op=\"ContainsDuplicateLabels\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"51b6efb5\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>label</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>.</li><li>If <var>label</var> is an element of <var>labelSet</var>, return <emu-val>true</emu-val>.</li><li>Let <var>newLabelSet</var> be a copy of <var>labelSet</var> with <var>label</var> appended.</li><li>Return ContainsDuplicateLabels of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> with argument <var>newLabelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fa7a943c\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-do-while-statement-static-semantics-containsundefinedcontinuetarget": {"num": "14.7.2.3", "title": "#sec-do-while-statement-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget", "html": "<emu-clause id=\"sec-do-while-statement-static-semantics-containsundefinedcontinuetarget\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-do-while-statement-static-semantics-containsundefinedcontinuetarget\">#sec-do-while-statement-static-semantics-containsundefinedcontinuetarget</span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n        <p>With parameters <var>iterationSet</var> and <var>labelSet</var>.</p>\n        <emu-see-also-para op=\"ContainsUndefinedContinueTarget\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"24e70caa\">\n        <emu-t>do</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-%foriniteratorprototype%-object": {"num": "14.7.5.12.2", "title": "#sec-%foriniteratorprototype%-object The %ForInIteratorPrototype% Object", "html": "<emu-clause id=\"sec-%foriniteratorprototype%-object\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%foriniteratorprototype%-object\">#sec-%foriniteratorprototype%-object</span> The %ForInIteratorPrototype% Object</h1>\n          <p>The <dfn>%ForInIteratorPrototype%</dfn> object:</p>\n          <ul>\n            <li>has properties that are inherited by all For-In Iterator Objects.</li>\n            <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n            <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-%iteratorprototype%-object\"><a href=\"#sec-%iteratorprototype%-object\">%IteratorPrototype%</a></emu-xref>.</li>\n            <li>is never directly accessible to ECMAScript code.</li>\n            <li>has the following properties:</li>\n          </ul>\n\n          <div id=\"excluded-sec-%foriniteratorprototype%.next\"><h1><span class=\"secnum\">14.7.5.12.2.1</span>#sec-%foriniteratorprototype%.next %ForInIteratorPrototype%.next ( )</h1>...</div></emu-clause>\n\n        "}, "sec-break-statement": {"num": "14.9", "title": "#sec-break-statement The break Statement", "html": "<emu-clause id=\"sec-break-statement\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-break-statement\">#sec-break-statement</span> The <code>break</code> Statement</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"BreakStatement\" params=\"Yield, Await\" id=\"prod-BreakStatement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-BreakStatement\">BreakStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b65229e7\">\n        <emu-t>break</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"9c83b42f\">\n        <emu-t>break</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n\n    <div id=\"excluded-sec-break-statement-static-semantics-early-errors\"><h1><span class=\"secnum\">14.9.1</span>#sec-break-statement-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-break-statement-static-semantics-containsundefinedbreaktarget\"><h1><span class=\"secnum\">14.9.2</span>#sec-break-statement-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget</h1>...</div><div id=\"excluded-sec-break-statement-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.9.3</span>#sec-break-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget": {"num": "14.7.5.3", "title": "#sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget", "html": "<emu-clause id=\"sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget\">#sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget</span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n        <p>With parameter <var>labelSet</var>.</p>\n        <emu-see-also-para op=\"ContainsUndefinedBreakTarget\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"IterationStatement\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bf521b70\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ecf18944\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"2590ad81\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"8ea6608b\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ee6f9a77\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"6f7c3304\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"9a146e5f\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7324ff96\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"b80b6675\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-switch-statement": {"num": "14.12", "title": "#sec-switch-statement The switch Statement", "html": "<emu-clause id=\"sec-switch-statement\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-switch-statement\">#sec-switch-statement</span> The <code>switch</code> Statement</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"SwitchStatement\" params=\"Yield, Await, Return\" id=\"prod-SwitchStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-SwitchStatement\">SwitchStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"751972c0\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-CaseBlock\">CaseBlock</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"CaseBlock\" params=\"Yield, Await, Return\" id=\"prod-CaseBlock\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-CaseBlock\">CaseBlock</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"57e1f602\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\" optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"d34b22b4\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\" optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-DefaultClause\">DefaultClause</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await, ?Return\" optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"CaseClauses\" params=\"Yield, Await, Return\" id=\"prod-CaseClauses\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"5cf2554e\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-CaseClause\">CaseClause</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"f11e9d08\">\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-CaseClause\">CaseClause</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"CaseClause\" params=\"Yield, Await, Return\" id=\"prod-CaseClause\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-CaseClause\">CaseClause</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ccfab6dd\">\n        <emu-t>case</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\" optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"DefaultClause\" params=\"Yield, Await, Return\" id=\"prod-DefaultClause\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-DefaultClause\">DefaultClause</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"74934b03\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\" optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n\n    <div id=\"excluded-sec-switch-statement-static-semantics-early-errors\"><h1><span class=\"secnum\">14.12.1</span>#sec-switch-statement-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-switch-statement-static-semantics-containsduplicatelabels\"><h1><span class=\"secnum\">14.12.2</span>#sec-switch-statement-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels</h1>...</div><div id=\"excluded-sec-switch-statement-static-semantics-containsundefinedbreaktarget\"><h1><span class=\"secnum\">14.12.3</span>#sec-switch-statement-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget</h1>...</div><div id=\"excluded-sec-switch-statement-static-semantics-containsundefinedcontinuetarget\"><h1><span class=\"secnum\">14.12.4</span>#sec-switch-statement-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget</h1>...</div><div id=\"excluded-sec-runtime-semantics-caseblockevaluation\"><h1><span class=\"secnum\">14.12.5</span>#sec-runtime-semantics-caseblockevaluation Runtime Semantics: CaseBlockEvaluation</h1>...</div><div id=\"excluded-sec-runtime-semantics-caseclauseisselected\"><h1><span class=\"secnum\">14.12.6</span>#sec-runtime-semantics-caseclauseisselected CaseClauseIsSelected ( C, input )</h1>...</div><div id=\"excluded-sec-switch-statement-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.12.7</span>#sec-switch-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-module-semantics": {"num": "16.2.1", "title": "#sec-module-semantics Module Semantics", "html": "<emu-clause id=\"sec-module-semantics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-semantics\">#sec-module-semantics</span> Module Semantics</h1>\n\n      <div id=\"excluded-sec-module-semantics-static-semantics-early-errors\"><h1><span class=\"secnum\">16.2.1.1</span>#sec-module-semantics-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-containsduplicatelabels\"><h1><span class=\"secnum\">16.2.1.2</span>#sec-module-semantics-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-containsundefinedbreaktarget\"><h1><span class=\"secnum\">16.2.1.3</span>#sec-module-semantics-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-containsundefinedcontinuetarget\"><h1><span class=\"secnum\">16.2.1.4</span>#sec-module-semantics-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-exportedbindings\"><h1><span class=\"secnum\">16.2.1.5</span>#sec-module-semantics-static-semantics-exportedbindings Static Semantics: ExportedBindings</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-exportednames\"><h1><span class=\"secnum\">16.2.1.6</span>#sec-module-semantics-static-semantics-exportednames Static Semantics: ExportedNames</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-exportentries\"><h1><span class=\"secnum\">16.2.1.7</span>#sec-module-semantics-static-semantics-exportentries Static Semantics: ExportEntries</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-importentries\"><h1><span class=\"secnum\">16.2.1.8</span>#sec-module-semantics-static-semantics-importentries Static Semantics: ImportEntries</h1>...</div><div id=\"excluded-sec-importedlocalnames\"><h1><span class=\"secnum\">16.2.1.9</span>#sec-importedlocalnames Static Semantics: ImportedLocalNames ( importEntries )</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-modulerequests\"><h1><span class=\"secnum\">16.2.1.10</span>#sec-module-semantics-static-semantics-modulerequests Static Semantics: ModuleRequests</h1>...</div><div id=\"excluded-sec-abstract-module-records\"><h1><span class=\"secnum\">16.2.1.11</span>#sec-abstract-module-records Abstract Module Records</h1>...</div><div id=\"excluded-sec-cyclic-module-records\"><h1><span class=\"secnum\">16.2.1.12</span>#sec-cyclic-module-records Cyclic Module Records</h1>...</div><div id=\"excluded-sec-source-text-module-records\"><h1><span class=\"secnum\">16.2.1.13</span>#sec-source-text-module-records Source Text Module Records</h1>...</div><div id=\"excluded-sec-hostresolveimportedmodule\"><h1><span class=\"secnum\">16.2.1.14</span>#sec-hostresolveimportedmodule HostResolveImportedModule ( referencingScriptOrModule, specifier )</h1>...</div><div id=\"excluded-sec-hostimportmoduledynamically\"><h1><span class=\"secnum\">16.2.1.15</span>#sec-hostimportmoduledynamically HostImportModuleDynamically ( referencingScriptOrModule, specifier, promiseCapability )</h1>...</div><div id=\"excluded-sec-finishdynamicimport\"><h1><span class=\"secnum\">16.2.1.16</span>#sec-finishdynamicimport FinishDynamicImport ( referencingScriptOrModule, specifier, promiseCapability, completion )</h1>...</div><div id=\"excluded-sec-getmodulenamespace\"><h1><span class=\"secnum\">16.2.1.17</span>#sec-getmodulenamespace GetModuleNamespace ( module )</h1>...</div><div id=\"excluded-sec-module-semantics-runtime-semantics-evaluation\"><h1><span class=\"secnum\">16.2.1.18</span>#sec-module-semantics-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n    "}, "sec-module-semantics-static-semantics-containsundefinedcontinuetarget": {"num": "16.2.1.4", "title": "#sec-module-semantics-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget", "html": "<emu-clause id=\"sec-module-semantics-static-semantics-containsundefinedcontinuetarget\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-semantics-static-semantics-containsundefinedcontinuetarget\">#sec-module-semantics-static-semantics-containsundefinedcontinuetarget</span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n        <p>With parameters <var>iterationSet</var> and <var>labelSet</var>.</p>\n        <emu-see-also-para op=\"ContainsUndefinedContinueTarget\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"75ddb725\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ModuleItem\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e0559377\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"298e81b0\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-labelled-statements-static-semantics-containsundefinedbreaktarget": {"num": "14.13.3", "title": "#sec-labelled-statements-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget", "html": "<emu-clause id=\"sec-labelled-statements-static-semantics-containsundefinedbreaktarget\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-labelled-statements-static-semantics-containsundefinedbreaktarget\">#sec-labelled-statements-static-semantics-containsundefinedbreaktarget</span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n      <p>With parameter <var>labelSet</var>.</p>\n      <emu-see-also-para op=\"ContainsUndefinedBreakTarget\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"51b6efb5\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>label</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>.</li><li>Let <var>newLabelSet</var> be a copy of <var>labelSet</var> with <var>label</var> appended.</li><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> with argument <var>newLabelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fa7a943c\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-while-statement-static-semantics-containsundefinedcontinuetarget": {"num": "14.7.3.3", "title": "#sec-while-statement-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget", "html": "<emu-clause id=\"sec-while-statement-static-semantics-containsundefinedcontinuetarget\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-while-statement-static-semantics-containsundefinedcontinuetarget\">#sec-while-statement-static-semantics-containsundefinedcontinuetarget</span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n        <p>With parameters <var>iterationSet</var> and <var>labelSet</var>.</p>\n        <emu-see-also-para op=\"ContainsUndefinedContinueTarget\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f7627bf3\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-while-statement-static-semantics-containsduplicatelabels": {"num": "14.7.3.1", "title": "#sec-while-statement-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels", "html": "<emu-clause id=\"sec-while-statement-static-semantics-containsduplicatelabels\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-while-statement-static-semantics-containsduplicatelabels\">#sec-while-statement-static-semantics-containsduplicatelabels</span> Static Semantics: ContainsDuplicateLabels</h1>\n        <p>With parameter <var>labelSet</var>.</p>\n        <emu-see-also-para op=\"ContainsDuplicateLabels\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f7627bf3\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ContainsDuplicateLabels of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-while-statement-static-semantics-containsundefinedbreaktarget": {"num": "14.7.3.2", "title": "#sec-while-statement-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget", "html": "<emu-clause id=\"sec-while-statement-static-semantics-containsundefinedbreaktarget\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-while-statement-static-semantics-containsundefinedbreaktarget\">#sec-while-statement-static-semantics-containsundefinedbreaktarget</span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n        <p>With parameter <var>labelSet</var>.</p>\n        <emu-see-also-para op=\"ContainsUndefinedBreakTarget\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f7627bf3\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-labelled-statements": {"num": "14.13", "title": "#sec-labelled-statements Labelled Statements", "html": "<emu-clause id=\"sec-labelled-statements\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-labelled-statements\">#sec-labelled-statements</span> Labelled Statements</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"LabelledStatement\" params=\"Yield, Await, Return\" id=\"prod-LabelledStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-LabelledStatement\">LabelledStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"be1c4a00\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-LabelledItem\">LabelledItem</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"LabelledItem\" params=\"Yield, Await, Return\" id=\"prod-LabelledItem\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-LabelledItem\">LabelledItem</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4843d33f\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"7743708d\"><emu-nt params=\"?Yield, ?Await, ~Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ~Default]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>A <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> may be prefixed by a label. Labelled statements are only used in conjunction with labelled <code>break</code> and <code>continue</code> statements. ECMAScript has no <code>goto</code> statement. A <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> can be part of a <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt>, which itself can be part of a <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt>, and so on. The labels introduced this way are collectively referred to as the &#8220;current label set&#8221; when describing the semantics of individual statements.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-labelled-statements-static-semantics-early-errors\"><h1><span class=\"secnum\">14.13.1</span>#sec-labelled-statements-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-labelled-statements-static-semantics-containsduplicatelabels\"><h1><span class=\"secnum\">14.13.2</span>#sec-labelled-statements-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels</h1>...</div><div id=\"excluded-sec-labelled-statements-static-semantics-containsundefinedbreaktarget\"><h1><span class=\"secnum\">14.13.3</span>#sec-labelled-statements-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget</h1>...</div><div id=\"excluded-sec-labelled-statements-static-semantics-containsundefinedcontinuetarget\"><h1><span class=\"secnum\">14.13.4</span>#sec-labelled-statements-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget</h1>...</div><div id=\"excluded-sec-islabelledfunction\"><h1><span class=\"secnum\">14.13.5</span>#sec-islabelledfunction Static Semantics: IsLabelledFunction ( stmt )</h1>...</div><div id=\"excluded-sec-labelled-statements-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.13.6</span>#sec-labelled-statements-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div><div id=\"excluded-sec-runtime-semantics-labelledevaluation\"><h1><span class=\"secnum\">14.13.7</span>#sec-runtime-semantics-labelledevaluation Runtime Semantics: LabelledEvaluation</h1>...</div></emu-clause>\n\n  "}, "sec-module-semantics-static-semantics-containsduplicatelabels": {"num": "16.2.1.2", "title": "#sec-module-semantics-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels", "html": "<emu-clause id=\"sec-module-semantics-static-semantics-containsduplicatelabels\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-semantics-static-semantics-containsduplicatelabels\">#sec-module-semantics-static-semantics-containsduplicatelabels</span> Static Semantics: ContainsDuplicateLabels</h1>\n        <p>With parameter <var>labelSet</var>.</p>\n        <emu-see-also-para op=\"ContainsDuplicateLabels\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"75ddb725\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>hasDuplicates</var> be ContainsDuplicateLabels of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsDuplicateLabels of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ModuleItem\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e0559377\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"298e81b0\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-block": {"num": "14.2", "title": "#sec-block Block", "html": "<emu-clause id=\"sec-block\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-block\">#sec-block</span> Block</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"BlockStatement\" params=\"Yield, Await, Return\" id=\"prod-BlockStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-BlockStatement\">BlockStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cf0a5fc2\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Block\">Block</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"Block\" params=\"Yield, Await, Return\" id=\"prod-Block\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-Block\">Block</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"5228fd45\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\" optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"StatementList\" params=\"Yield, Await, Return\" id=\"prod-StatementList\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39651bc0\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-StatementListItem\">StatementListItem</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"db572542\">\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-StatementListItem\">StatementListItem</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"StatementListItem\" params=\"Yield, Await, Return\" id=\"prod-StatementListItem\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-StatementListItem\">StatementListItem</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4843d33f\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"31391311\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-Declaration\">Declaration</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n\n    <div id=\"excluded-sec-block-static-semantics-early-errors\"><h1><span class=\"secnum\">14.2.1</span>#sec-block-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-block-static-semantics-containsduplicatelabels\"><h1><span class=\"secnum\">14.2.2</span>#sec-block-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels</h1>...</div><div id=\"excluded-sec-block-static-semantics-containsundefinedbreaktarget\"><h1><span class=\"secnum\">14.2.3</span>#sec-block-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget</h1>...</div><div id=\"excluded-sec-block-static-semantics-containsundefinedcontinuetarget\"><h1><span class=\"secnum\">14.2.4</span>#sec-block-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget</h1>...</div><div id=\"excluded-sec-block-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.2.5</span>#sec-block-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div><div id=\"excluded-sec-blockdeclarationinstantiation\"><h1><span class=\"secnum\">14.2.6</span>#sec-blockdeclarationinstantiation BlockDeclarationInstantiation ( code, env )</h1>...</div></emu-clause>\n\n  "}, "sec-block-static-semantics-containsundefinedcontinuetarget": {"num": "14.2.4", "title": "#sec-block-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget", "html": "<emu-clause id=\"sec-block-static-semantics-containsundefinedcontinuetarget\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-block-static-semantics-containsundefinedcontinuetarget\">#sec-block-static-semantics-containsundefinedcontinuetarget</span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n      <p>With parameters <var>iterationSet</var> and <var>labelSet</var>.</p>\n      <emu-see-also-para op=\"ContainsUndefinedContinueTarget\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"81ba5a4a\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0db4597a\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"d6f37721\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-try-statement-static-semantics-containsduplicatelabels": {"num": "14.15.2", "title": "#sec-try-statement-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels", "html": "<emu-clause id=\"sec-try-statement-static-semantics-containsduplicatelabels\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-try-statement-static-semantics-containsduplicatelabels\">#sec-try-statement-static-semantics-containsduplicatelabels</span> Static Semantics: ContainsDuplicateLabels</h1>\n      <p>With parameter <var>labelSet</var>.</p>\n      <emu-see-also-para op=\"ContainsDuplicateLabels\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a8714e57\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicates</var> be ContainsDuplicateLabels of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsDuplicateLabels of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"5ec68ab9\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicates</var> be ContainsDuplicateLabels of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsDuplicateLabels of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1b19737c\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicates</var> be ContainsDuplicateLabels of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>hasDuplicates</var> be ContainsDuplicateLabels of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsDuplicateLabels of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ddc13c36\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ContainsDuplicateLabels of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-function-definitions-static-semantics-early-errors": {"num": "15.2.1", "title": "#sec-function-definitions-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-function-definitions-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions-static-semantics-early-errors\">#sec-function-definitions-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"81739a57\">\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b26bacea\">\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8379937e\">\n        <emu-t>function</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          If the source code matching <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, the Early Error rules for <emu-grammar><emu-production name=\"UniqueFormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0218c6f5\"><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> are applied.\n        </li>\n        <li>\n          If <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is present and the source code matching <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, it is a Syntax Error if the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"FunctionBodyContainsUseStrict\"><a href=\"#sec-static-semantics-functionbodycontainsusestrict\">FunctionBodyContainsUseStrict</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsSimpleParameterList\"><a href=\"#sec-static-semantics-issimpleparameterlist\">IsSimpleParameterList</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-val>false</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if any element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> also occurs in the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of a <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> does not include identifiers bound using var or function declarations.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"FunctionBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"5cdf1a9f\"><emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> contains any duplicate entries.\n        </li>\n        <li>\n          It is a Syntax Error if any element of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> also occurs in the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt>.\n        </li>\n        <li>\n          It is a Syntax Error if ContainsDuplicateLabels of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> with argument &#171; &#187; is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> with argument &#171; &#187; is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> with arguments &#171; &#187; and &#171; &#187; is <emu-val>true</emu-val>.\n        </li>\n      </ul>\n    </emu-clause>\n\n    "}, "sec-for-statement-static-semantics-containsundefinedbreaktarget": {"num": "14.7.4.3", "title": "#sec-for-statement-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget", "html": "<emu-clause id=\"sec-for-statement-static-semantics-containsundefinedbreaktarget\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-for-statement-static-semantics-containsundefinedbreaktarget\">#sec-for-statement-static-semantics-containsundefinedbreaktarget</span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n        <p>With parameter <var>labelSet</var>.</p>\n        <emu-see-also-para op=\"ContainsUndefinedBreakTarget\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"IterationStatement\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fc33bcf0\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"48e766b4\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"93c07e45\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-scripts-static-semantics-early-errors": {"num": "16.1.1", "title": "#sec-scripts-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-scripts-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-scripts-static-semantics-early-errors\">#sec-scripts-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"Script\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b78f99cc\"><emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> contains any duplicate entries.\n        </li>\n        <li>\n          It is a Syntax Error if any element of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> also occurs in the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt>.\n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"ScriptBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cf403a0c\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> Contains <code>super</code> unless the source code containing <code>super</code> is eval code that is being processed by a <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref>. Additional <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules for <code>super</code> within <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> are defined in <emu-xref href=\"#sec-performeval\"><a href=\"#sec-performeval\" class=\"excluded-xref\" excluded-id=\"sec-performeval\">#sec-performeval</a></emu-xref>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> Contains <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt> unless the source code containing <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt> is eval code that is being processed by a <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref>. Additional <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules for <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt> in <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> are defined in <emu-xref href=\"#sec-performeval\"><a href=\"#sec-performeval\" class=\"excluded-xref\" excluded-id=\"sec-performeval\">#sec-performeval</a></emu-xref>.\n        </li>\n        <li>\n          It is a Syntax Error if ContainsDuplicateLabels of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument &#171; &#187; is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument &#171; &#187; is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with arguments &#171; &#187; and &#171; &#187; is <emu-val>true</emu-val>.\n        </li>\n      </ul>\n    </emu-clause>\n\n    "}, "sec-do-while-statement-static-semantics-containsduplicatelabels": {"num": "14.7.2.1", "title": "#sec-do-while-statement-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels", "html": "<emu-clause id=\"sec-do-while-statement-static-semantics-containsduplicatelabels\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-do-while-statement-static-semantics-containsduplicatelabels\">#sec-do-while-statement-static-semantics-containsduplicatelabels</span> Static Semantics: ContainsDuplicateLabels</h1>\n        <p>With parameter <var>labelSet</var>.</p>\n        <emu-see-also-para op=\"ContainsDuplicateLabels\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"24e70caa\">\n        <emu-t>do</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ContainsDuplicateLabels of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-with-statement-static-semantics-containsundefinedcontinuetarget": {"num": "14.11.4", "title": "#sec-with-statement-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget", "html": "<emu-clause id=\"sec-with-statement-static-semantics-containsundefinedcontinuetarget\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-with-statement-static-semantics-containsundefinedcontinuetarget\">#sec-with-statement-static-semantics-containsundefinedcontinuetarget</span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n      <p>With parameters <var>iterationSet</var> and <var>labelSet</var>.</p>\n      <emu-see-also-para op=\"ContainsUndefinedContinueTarget\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"23bd2456\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-for-in-iterator-objects": {"num": "14.7.5.12", "title": "#sec-for-in-iterator-objects For-In Iterator Objects", "html": "<emu-clause id=\"sec-for-in-iterator-objects\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-for-in-iterator-objects\">#sec-for-in-iterator-objects</span> For-In Iterator Objects</h1>\n        <p>A For-In Iterator is an object that represents a specific iteration over some specific object. For-In Iterator objects are never directly accessible to ECMAScript code; they exist solely to illustrate the behaviour of <emu-xref aoid=\"EnumerateObjectProperties\"><a href=\"#sec-enumerate-object-properties\">EnumerateObjectProperties</a></emu-xref>.</p>\n\n        <div id=\"excluded-sec-createforiniterator\"><h1><span class=\"secnum\">14.7.5.12.1</span>#sec-createforiniterator CreateForInIterator ( object )</h1>...</div><div id=\"excluded-sec-%foriniteratorprototype%-object\"><h1><span class=\"secnum\">14.7.5.12.2</span>#sec-%foriniteratorprototype%-object The %ForInIteratorPrototype% Object</h1>...</div><div id=\"excluded-sec-properties-of-for-in-iterator-instances\"><h1><span class=\"secnum\">14.7.5.12.3</span>#sec-properties-of-for-in-iterator-instances Properties of For-In Iterator Instances</h1>...</div></emu-clause>\n    "}, "sec-function-definitions": {"num": "15.2", "title": "#sec-function-definitions Function Definitions", "html": "<emu-clause id=\"sec-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions\">#sec-function-definitions</span> Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"FunctionDeclaration\" params=\"Yield, Await, Default\" id=\"prod-FunctionDeclaration\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7c02f6b3\">\n        <emu-t>function</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"ff05b860\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionExpression\" id=\"prod-FunctionExpression\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1faafdcc\">\n        <emu-t>function</emu-t>\n        <emu-nt params=\"~Yield, ~Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionBody\" params=\"Yield, Await\" id=\"prod-FunctionBody\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"82527203\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionStatementList\" params=\"Yield, Await\" id=\"prod-FunctionStatementList\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2267baf8\"><emu-nt params=\"?Yield, ?Await, +Return\" optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[?Yield, ?Await, +Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n\n    <div id=\"excluded-sec-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">15.2.1</span>#sec-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-contains\"><h1><span class=\"secnum\">15.2.2</span>#sec-function-definitions-static-semantics-contains Static Semantics: Contains</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-containsduplicatelabels\"><h1><span class=\"secnum\">15.2.3</span>#sec-function-definitions-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-containsundefinedbreaktarget\"><h1><span class=\"secnum\">15.2.4</span>#sec-function-definitions-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-containsundefinedcontinuetarget\"><h1><span class=\"secnum\">15.2.5</span>#sec-function-definitions-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget</h1>...</div><div id=\"excluded-sec-static-semantics-functionbodycontainsusestrict\"><h1><span class=\"secnum\">15.2.6</span>#sec-static-semantics-functionbodycontainsusestrict Static Semantics: FunctionBodyContainsUseStrict</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-hasname\"><h1><span class=\"secnum\">15.2.7</span>#sec-function-definitions-static-semantics-hasname Static Semantics: HasName</h1>...</div><div id=\"excluded-sec-isanonymousfunctiondefinition\"><h1><span class=\"secnum\">15.2.8</span>#sec-isanonymousfunctiondefinition Static Semantics: IsAnonymousFunctionDefinition ( expr )</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-isfunctiondefinition\"><h1><span class=\"secnum\">15.2.9</span>#sec-function-definitions-static-semantics-isfunctiondefinition Static Semantics: IsFunctionDefinition</h1>...</div><div id=\"excluded-sec-runtime-semantics-evaluatefunctionbody\"><h1><span class=\"secnum\">15.2.10</span>#sec-runtime-semantics-evaluatefunctionbody Runtime Semantics: EvaluateFunctionBody</h1>...</div><div id=\"excluded-sec-function-definitions-runtime-semantics-iteratorbindinginitialization\"><h1><span class=\"secnum\">15.2.11</span>#sec-function-definitions-runtime-semantics-iteratorbindinginitialization Runtime Semantics: IteratorBindingInitialization</h1>...</div><div id=\"excluded-sec-runtime-semantics-instantiateordinaryfunctionobject\"><h1><span class=\"secnum\">15.2.12</span>#sec-runtime-semantics-instantiateordinaryfunctionobject Runtime Semantics: InstantiateOrdinaryFunctionObject</h1>...</div><div id=\"excluded-sec-function-definitions-runtime-semantics-namedevaluation\"><h1><span class=\"secnum\">15.2.13</span>#sec-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation</h1>...</div><div id=\"excluded-sec-function-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">15.2.14</span>#sec-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-switch-statement-static-semantics-containsundefinedcontinuetarget": {"num": "14.12.4", "title": "#sec-switch-statement-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget", "html": "<emu-clause id=\"sec-switch-statement-static-semantics-containsundefinedcontinuetarget\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-switch-statement-static-semantics-containsundefinedcontinuetarget\">#sec-switch-statement-static-semantics-containsundefinedcontinuetarget</span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n      <p>With parameters <var>iterationSet</var> and <var>labelSet</var>.</p>\n      <emu-see-also-para op=\"ContainsUndefinedContinueTarget\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"515acffe\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"81ba5a4a\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"503b8396\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, then<ol><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedContinueTarget of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is not present, return <emu-val>false</emu-val>.</li><li>Return ContainsUndefinedContinueTarget of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"68374923\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c76d0d30\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6782073e\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-with-statement-static-semantics-containsundefinedbreaktarget": {"num": "14.11.3", "title": "#sec-with-statement-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget", "html": "<emu-clause id=\"sec-with-statement-static-semantics-containsundefinedbreaktarget\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-with-statement-static-semantics-containsundefinedbreaktarget\">#sec-with-statement-static-semantics-containsundefinedbreaktarget</span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n      <p>With parameter <var>labelSet</var>.</p>\n      <emu-see-also-para op=\"ContainsUndefinedBreakTarget\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"23bd2456\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-for-in-and-for-of-statements": {"num": "14.7.5", "title": "#sec-for-in-and-for-of-statements The for-in, for-of, and for-await-of Statements", "html": "<emu-clause id=\"sec-for-in-and-for-of-statements\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-for-in-and-for-of-statements\">#sec-for-in-and-for-of-statements</span> The <code>for</code>-<code>in</code>, <code>for</code>-<code>of</code>, and <code>for</code>-<code>await</code>-<code>of</code> Statements</h1>\n\n      <div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-early-errors\"><h1><span class=\"secnum\">14.7.5.1</span>#sec-for-in-and-for-of-statements-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels\"><h1><span class=\"secnum\">14.7.5.2</span>#sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget\"><h1><span class=\"secnum\">14.7.5.3</span>#sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget\"><h1><span class=\"secnum\">14.7.5.4</span>#sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-isdestructuring\"><h1><span class=\"secnum\">14.7.5.5</span>#sec-for-in-and-for-of-statements-static-semantics-isdestructuring Static Semantics: IsDestructuring</h1>...</div><div id=\"excluded-sec-runtime-semantics-fordeclarationbindinginitialization\"><h1><span class=\"secnum\">14.7.5.6</span>#sec-runtime-semantics-fordeclarationbindinginitialization Runtime Semantics: ForDeclarationBindingInitialization</h1>...</div><div id=\"excluded-sec-runtime-semantics-bindinginstantiation\"><h1><span class=\"secnum\">14.7.5.7</span>#sec-runtime-semantics-bindinginstantiation Runtime Semantics: BindingInstantiation</h1>...</div><div id=\"excluded-sec-runtime-semantics-forinofheadevaluation\"><h1><span class=\"secnum\">14.7.5.8</span>#sec-runtime-semantics-forinofheadevaluation ForIn/OfHeadEvaluation ( uninitializedBoundNames, expr, iterationKind )</h1>...</div><div id=\"excluded-sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\"><h1><span class=\"secnum\">14.7.5.9</span>#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset ForIn/OfBodyEvaluation ( lhs, stmt, iteratorRecord, iterationKind, lhsKind, labelSet [ , iteratorKind ] )</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.7.5.10</span>#sec-for-in-and-for-of-statements-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div><div id=\"excluded-sec-enumerate-object-properties\"><h1><span class=\"secnum\">14.7.5.11</span>#sec-enumerate-object-properties EnumerateObjectProperties ( O )</h1>...</div><div id=\"excluded-sec-for-in-iterator-objects\"><h1><span class=\"secnum\">14.7.5.12</span>#sec-for-in-iterator-objects For-In Iterator Objects</h1>...</div></emu-clause>\n  "}, "sec-moduleevaluation": {"num": "16.2.1.12.2", "title": "#sec-moduleevaluation Evaluate ( ) Concrete Method", "html": "<emu-clause id=\"sec-moduleevaluation\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-moduleevaluation\">#sec-moduleevaluation</span> Evaluate ( ) Concrete Method</h1>\n          <p>The Evaluate concrete method of a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> <var>module</var> takes no arguments. Evaluate transitions this module's [[Status]] from <emu-const>linked</emu-const> to <emu-const>evaluated</emu-const>. If execution results in an exception, that exception is recorded in the [[EvaluationError]] field and rethrown by future invocations of Evaluate. (Most of the work is done by the auxiliary function <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref>.) It performs the following steps when called:</p>\n\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This call to Evaluate is not happening at the same time as another call to Evaluate within the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>linked</emu-const> or <emu-const>evaluated</emu-const>.</li><li>Let <var>stack</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref>(<var>module</var>, <var>stack</var>, 0).</li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>For each <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> <var>m</var> of <var>stack</var>, do<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>m</var>.[[Status]] is <emu-const>evaluating</emu-const>.</li><li>Set <var>m</var>.[[Status]] to <emu-const>evaluated</emu-const>.</li><li>Set <var>m</var>.[[EvaluationError]] to <var>result</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>evaluated</emu-const> and <var>module</var>.[[EvaluationError]] is <var>result</var>.</li><li>Return <var>result</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>evaluated</emu-const> and <var>module</var>.[[EvaluationError]] is <emu-val>undefined</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>stack</var> is empty.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n          <div id=\"excluded-sec-innermoduleevaluation\"><h1><span class=\"secnum\">16.2.1.12.2.1</span>#sec-innermoduleevaluation InnerModuleEvaluation ( module, stack, index )</h1>...</div></emu-clause>\n\n        "}, "sec-for-statement": {"num": "14.7.4", "title": "#sec-for-statement The for Statement", "html": "<emu-clause id=\"sec-for-statement\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-for-statement\">#sec-for-statement</span> The <code>for</code> Statement</h1>\n\n      <div id=\"excluded-sec-for-statement-static-semantics-early-errors\"><h1><span class=\"secnum\">14.7.4.1</span>#sec-for-statement-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-for-statement-static-semantics-containsduplicatelabels\"><h1><span class=\"secnum\">14.7.4.2</span>#sec-for-statement-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels</h1>...</div><div id=\"excluded-sec-for-statement-static-semantics-containsundefinedbreaktarget\"><h1><span class=\"secnum\">14.7.4.3</span>#sec-for-statement-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget</h1>...</div><div id=\"excluded-sec-for-statement-static-semantics-containsundefinedcontinuetarget\"><h1><span class=\"secnum\">14.7.4.4</span>#sec-for-statement-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget</h1>...</div><div id=\"excluded-sec-forbodyevaluation\"><h1><span class=\"secnum\">14.7.4.5</span>#sec-forbodyevaluation ForBodyEvaluation ( test, increment, stmt, perIterationBindings, labelSet )</h1>...</div><div id=\"excluded-sec-createperiterationenvironment\"><h1><span class=\"secnum\">14.7.4.6</span>#sec-createperiterationenvironment CreatePerIterationEnvironment ( perIterationBindings )</h1>...</div></emu-clause>\n\n    "}, "sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels": {"num": "14.7.5.2", "title": "#sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels", "html": "<emu-clause id=\"sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels\">#sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels</span> Static Semantics: ContainsDuplicateLabels</h1>\n        <p>With parameter <var>labelSet</var>.</p>\n        <emu-see-also-para op=\"ContainsDuplicateLabels\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"IterationStatement\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bf521b70\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ecf18944\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"2590ad81\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"8ea6608b\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ee6f9a77\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"6f7c3304\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"9a146e5f\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7324ff96\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"b80b6675\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ContainsDuplicateLabels of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-continue-statement": {"num": "14.8", "title": "#sec-continue-statement The continue Statement", "html": "<emu-clause id=\"sec-continue-statement\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-continue-statement\">#sec-continue-statement</span> The <code>continue</code> Statement</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"ContinueStatement\" params=\"Yield, Await\" id=\"prod-ContinueStatement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ContinueStatement\">ContinueStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e903cf81\">\n        <emu-t>continue</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"14858b1f\">\n        <emu-t>continue</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n\n    <div id=\"excluded-sec-continue-statement-static-semantics-early-errors\"><h1><span class=\"secnum\">14.8.1</span>#sec-continue-statement-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-continue-statement-static-semantics-containsundefinedcontinuetarget\"><h1><span class=\"secnum\">14.8.2</span>#sec-continue-statement-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget</h1>...</div><div id=\"excluded-sec-continue-statement-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.8.3</span>#sec-continue-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-switch-statement-static-semantics-containsundefinedbreaktarget": {"num": "14.12.3", "title": "#sec-switch-statement-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget", "html": "<emu-clause id=\"sec-switch-statement-static-semantics-containsundefinedbreaktarget\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-switch-statement-static-semantics-containsundefinedbreaktarget\">#sec-switch-statement-static-semantics-containsundefinedbreaktarget</span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n      <p>With parameter <var>labelSet</var>.</p>\n      <emu-see-also-para op=\"ContainsUndefinedBreakTarget\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"515acffe\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"81ba5a4a\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"503b8396\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, then<ol><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedBreakTarget of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is not present, return <emu-val>false</emu-val>.</li><li>Return ContainsUndefinedBreakTarget of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"68374923\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c76d0d30\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6782073e\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-initializers-in-forin-statement-heads": {"num": "B.3.6", "title": "#sec-initializers-in-forin-statement-heads Initializers in ForIn Statement Heads", "html": "<emu-annex id=\"sec-initializers-in-forin-statement-heads\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</span> Initializers in ForIn Statement Heads</h1>\n      <p>The following augments the <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> production in <emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>:</p>\n      <emu-grammar type=\"definition\"><emu-production name=\"IterationStatement\" params=\"Yield, Await, Return\" id=\"prod-annexB-IterationStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a2e02ff2\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"~In, ?Yield, ?Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[~In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>This production only applies when parsing <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>.</p>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of ContainsDuplicateLabels in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels\">#sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ContainsDuplicateLabels of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of ContainsUndefinedBreakTarget in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget\">#sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of ContainsUndefinedContinueTarget in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget\">#sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of IsDestructuring in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-isdestructuring\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-isdestructuring\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-isdestructuring\">#sec-for-in-and-for-of-statements-static-semantics-isdestructuring</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"BindingIdentifier\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"06b6ace8\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"857d4354\"><emu-t>await</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-vardeclarednames\"><a href=\"#sec-static-semantics-vardeclarednames\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-vardeclarednames\">#sec-static-semantics-vardeclarednames</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-varscopeddeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-varscopeddeclarations\">#sec-static-semantics-varscopeddeclarations</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-runtime-semantics\"><a href=\"#sec-runtime-semantics\">runtime semantics</a></emu-xref> of <emu-xref aoid=\"LoopEvaluation\"><a href=\"#sec-runtime-semantics-loopevaluation\">LoopEvaluation</a></emu-xref> in <emu-xref href=\"#sec-runtime-semantics-loopevaluation\"><a href=\"#sec-runtime-semantics-loopevaluation\" class=\"excluded-xref\" excluded-id=\"sec-runtime-semantics-loopevaluation\">#sec-runtime-semantics-loopevaluation</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>bindingId</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>bindingId</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be NamedEvaluation of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>bindingId</var>.</li></ol></li><li>Else,<ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>value</var>).</li><li>Let <var>keyResult</var> be ? <emu-xref aoid=\"ForIn/OfHeadEvaluation\"><a href=\"#sec-runtime-semantics-forinofheadevaluation\">ForIn/OfHeadEvaluation</a></emu-xref>(&#171; &#187;, <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-const>enumerate</emu-const>).</li><li>Return ? <emu-xref aoid=\"ForIn/OfBodyEvaluation\"><a href=\"#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>enumerate</emu-const>, <emu-const>varBinding</emu-const>, <var>labelSet</var>).</li></ol></emu-alg>\n    </emu-annex>\n\n    "}, "sec-with-statement-static-semantics-containsduplicatelabels": {"num": "14.11.2", "title": "#sec-with-statement-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels", "html": "<emu-clause id=\"sec-with-statement-static-semantics-containsduplicatelabels\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-with-statement-static-semantics-containsduplicatelabels\">#sec-with-statement-static-semantics-containsduplicatelabels</span> Static Semantics: ContainsDuplicateLabels</h1>\n      <p>With parameter <var>labelSet</var>.</p>\n      <emu-see-also-para op=\"ContainsDuplicateLabels\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"23bd2456\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ContainsDuplicateLabels of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-statement-semantics-static-semantics-containsduplicatelabels": {"num": "14.1.1", "title": "#sec-statement-semantics-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels", "html": "<emu-clause id=\"sec-statement-semantics-static-semantics-containsduplicatelabels\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-statement-semantics-static-semantics-containsduplicatelabels\">#sec-statement-semantics-static-semantics-containsduplicatelabels</span> Static Semantics: ContainsDuplicateLabels</h1>\n      <p>With parameter <var>labelSet</var>.</p>\n      <emu-see-also-para op=\"ContainsDuplicateLabels\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"Statement\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8b0c0df0\"><emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"7338aabb\"><emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"1d7d329e\"><emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ab8baff9\"><emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"aa6f7913\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"867b4090\"><emu-nt><a href=\"#prod-ThrowStatement\">ThrowStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"21212edb\"><emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-for-statement-static-semantics-containsundefinedcontinuetarget": {"num": "14.7.4.4", "title": "#sec-for-statement-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget", "html": "<emu-clause id=\"sec-for-statement-static-semantics-containsundefinedcontinuetarget\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-for-statement-static-semantics-containsundefinedcontinuetarget\">#sec-for-statement-static-semantics-containsundefinedcontinuetarget</span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n        <p>With parameters <var>iterationSet</var> and <var>labelSet</var>.</p>\n        <emu-see-also-para op=\"ContainsUndefinedContinueTarget\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"IterationStatement\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fc33bcf0\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"48e766b4\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"93c07e45\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-if-statement-static-semantics-containsduplicatelabels": {"num": "14.6.2", "title": "#sec-if-statement-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels", "html": "<emu-clause id=\"sec-if-statement-static-semantics-containsduplicatelabels\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-if-statement-static-semantics-containsduplicatelabels\">#sec-if-statement-static-semantics-containsduplicatelabels</span> Static Semantics: ContainsDuplicateLabels</h1>\n      <p>With parameter <var>labelSet</var>.</p>\n      <emu-see-also-para op=\"ContainsDuplicateLabels\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"16e86a13\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicate</var> be ContainsDuplicateLabels of the first <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicate</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsDuplicateLabels of the second <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f6819570\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ContainsDuplicateLabels of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-with-statement": {"num": "14.11", "title": "#sec-with-statement The with Statement", "html": "<emu-clause id=\"sec-with-statement\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-with-statement\">#sec-with-statement</span> The <code>with</code> Statement</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"WithStatement\" params=\"Yield, Await, Return\" id=\"prod-WithStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-WithStatement\">WithStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2ceedb70\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>The <code>with</code> statement adds an <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> for a computed object to the lexical environment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>. It then executes a statement using this augmented lexical environment. Finally, it restores the original lexical environment.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-with-statement-static-semantics-early-errors\"><h1><span class=\"secnum\">14.11.1</span>#sec-with-statement-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-with-statement-static-semantics-containsduplicatelabels\"><h1><span class=\"secnum\">14.11.2</span>#sec-with-statement-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels</h1>...</div><div id=\"excluded-sec-with-statement-static-semantics-containsundefinedbreaktarget\"><h1><span class=\"secnum\">14.11.3</span>#sec-with-statement-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget</h1>...</div><div id=\"excluded-sec-with-statement-static-semantics-containsundefinedcontinuetarget\"><h1><span class=\"secnum\">14.11.4</span>#sec-with-statement-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget</h1>...</div><div id=\"excluded-sec-with-statement-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.11.5</span>#sec-with-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-block-static-semantics-containsundefinedbreaktarget": {"num": "14.2.3", "title": "#sec-block-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget", "html": "<emu-clause id=\"sec-block-static-semantics-containsundefinedbreaktarget\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-block-static-semantics-containsundefinedbreaktarget\">#sec-block-static-semantics-containsundefinedbreaktarget</span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n      <p>With parameter <var>labelSet</var>.</p>\n      <emu-see-also-para op=\"ContainsUndefinedBreakTarget\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"81ba5a4a\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0db4597a\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"d6f37721\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-continue-statement-static-semantics-containsundefinedcontinuetarget": {"num": "14.8.2", "title": "#sec-continue-statement-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget", "html": "<emu-clause id=\"sec-continue-statement-static-semantics-containsundefinedcontinuetarget\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-continue-statement-static-semantics-containsundefinedcontinuetarget\">#sec-continue-statement-static-semantics-containsundefinedcontinuetarget</span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n      <p>With parameters <var>iterationSet</var> and <var>labelSet</var>.</p>\n      <emu-see-also-para op=\"ContainsUndefinedContinueTarget\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"ContinueStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e903cf81\">\n        <emu-t>continue</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ContinueStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"5a1eea0d\">\n        <emu-t>continue</emu-t>\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt> is not an element of <var>iterationSet</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-function-definitions-static-semantics-containsduplicatelabels": {"num": "15.2.3", "title": "#sec-function-definitions-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels", "html": "<emu-clause id=\"sec-function-definitions-static-semantics-containsduplicatelabels\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions-static-semantics-containsduplicatelabels\">#sec-function-definitions-static-semantics-containsduplicatelabels</span> Static Semantics: ContainsDuplicateLabels</h1>\n      <p>With parameter <var>labelSet</var>.</p>\n      <emu-see-also-para op=\"ContainsDuplicateLabels\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-syntax-directed-operations-labels": {"num": "8.2", "title": "#sec-syntax-directed-operations-labels Labels", "html": "<emu-clause id=\"sec-syntax-directed-operations-labels\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-syntax-directed-operations-labels\">#sec-syntax-directed-operations-labels</span> Labels</h1>\n  </emu-clause>\n\n  "}, "sec-try-statement-static-semantics-containsundefinedbreaktarget": {"num": "14.15.3", "title": "#sec-try-statement-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget", "html": "<emu-clause id=\"sec-try-statement-static-semantics-containsundefinedbreaktarget\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-try-statement-static-semantics-containsundefinedbreaktarget\">#sec-try-statement-static-semantics-containsundefinedbreaktarget</span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n      <p>With parameter <var>labelSet</var>.</p>\n      <emu-see-also-para op=\"ContainsUndefinedBreakTarget\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a8714e57\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"5ec68ab9\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1b19737c\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ddc13c36\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-if-statement-static-semantics-containsundefinedbreaktarget": {"num": "14.6.3", "title": "#sec-if-statement-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget", "html": "<emu-clause id=\"sec-if-statement-static-semantics-containsundefinedbreaktarget\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-if-statement-static-semantics-containsundefinedbreaktarget\">#sec-if-statement-static-semantics-containsundefinedbreaktarget</span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n      <p>With parameter <var>labelSet</var>.</p>\n      <emu-see-also-para op=\"ContainsUndefinedBreakTarget\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"16e86a13\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedBreakTarget of the first <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsUndefinedBreakTarget of the second <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f6819570\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-statement-semantics-static-semantics-containsundefinedcontinuetarget": {"num": "14.1.3", "title": "#sec-statement-semantics-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget", "html": "<emu-clause id=\"sec-statement-semantics-static-semantics-containsundefinedcontinuetarget\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-statement-semantics-static-semantics-containsundefinedcontinuetarget\">#sec-statement-semantics-static-semantics-containsundefinedcontinuetarget</span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n      <p>With parameters <var>iterationSet</var> and <var>labelSet</var>.</p>\n      <emu-see-also-para op=\"ContainsUndefinedContinueTarget\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"Statement\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8b0c0df0\"><emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"7338aabb\"><emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ab8baff9\"><emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"aa6f7913\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"867b4090\"><emu-nt><a href=\"#prod-ThrowStatement\">ThrowStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"21212edb\"><emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BreakableStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BreakableStatement\">BreakableStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"28c5e5e3\"><emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>newIterationSet</var> be a copy of <var>iterationSet</var> with all the elements of <var>labelSet</var> appended.</li><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> with arguments <var>newIterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-source-text-module-records": {"num": "16.2.1.13", "title": "#sec-source-text-module-records Source Text Module Records", "html": "<emu-clause id=\"sec-source-text-module-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-source-text-module-records\">#sec-source-text-module-records</span> Source Text Module Records</h1>\n\n        <p>A <dfn id=\"sourctextmodule-record\">Source Text Module Record</dfn> is used to represent information about a module that was defined from ECMAScript source text (<emu-xref href=\"#sec-ecmascript-language-source-code\"><a href=\"#sec-ecmascript-language-source-code\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-source-code\">#sec-ecmascript-language-source-code</a></emu-xref>) that was parsed using the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. Its fields contain digested information about the names that are imported by the module and its concrete methods use this digest to link, link, and evaluate the module.</p>\n\n        <p>A <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> can exist in a module graph with other subclasses of the abstract <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> type, and can participate in cycles with other subclasses of the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> type.</p>\n\n        <p>In addition to the fields defined in <emu-xref href=\"#table-cyclic-module-fields\"><a href=\"#table-cyclic-module-fields\" class=\"excluded-xref\" excluded-id=\"table-cyclic-module-fields\">#table-cyclic-module-fields</a></emu-xref>, Source Text Module Records have the additional fields listed in <emu-xref href=\"#table-additional-fields-of-source-text-module-records\"><a href=\"#table-additional-fields-of-source-text-module-records\" class=\"excluded-xref\" excluded-id=\"table-additional-fields-of-source-text-module-records\">#table-additional-fields-of-source-text-module-records</a></emu-xref>. Each of these fields is initially set in <emu-xref aoid=\"ParseModule\"><a href=\"#sec-parsemodule\">ParseModule</a></emu-xref>.</p>\n        <emu-table id=\"table-additional-fields-of-source-text-module-records\" caption=\"Additional Fields of Source Text Module Records\" oldids=\"table-38\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-additional-fields-of-source-text-module-records\">#table-additional-fields-of-source-text-module-records</span>: Additional Fields of Source Text Module Records</figcaption><span id=\"table-38\"></span>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              </th>\n              <th>\n                Value Type\n              </th>\n              <th>\n                Meaning\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[ECMAScriptCode]]\n              </td>\n              <td>\n                a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n              </td>\n              <td>\n                The result of parsing the source text of this module using <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Context]]\n              </td>\n              <td>\n                An ECMAScript <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n              </td>\n              <td>\n                The <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> associated with this module.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ImportMeta]]\n              </td>\n              <td>\n                Object\n              </td>\n              <td>\n                An object exposed through the <code>import.meta</code> meta property. It is <emu-const>empty</emu-const> until it is accessed by ECMAScript code.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ImportEntries]]\n              </td>\n              <td>\n                <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ImportEntry Records\n              </td>\n              <td>\n                A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ImportEntry records derived from the code of this module.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[LocalExportEntries]]\n              </td>\n              <td>\n                <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry Records\n              </td>\n              <td>\n                A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry records derived from the code of this module that correspond to declarations that occur within the module.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[IndirectExportEntries]]\n              </td>\n              <td>\n                <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry Records\n              </td>\n              <td>\n                A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry records derived from the code of this module that correspond to reexported imports that occur within the module or exports from <code>export * as namespace</code> declarations.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[StarExportEntries]]\n              </td>\n              <td>\n                <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry Records\n              </td>\n              <td>\n                A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry records derived from the code of this module that correspond to <code>export *</code> declarations that occur within the module, not including <code>export * as namespace</code> declarations.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>An <dfn id=\"importentry-record\">ImportEntry Record</dfn> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> that digests information about a single declarative import. Each <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> has the fields defined in <emu-xref href=\"#table-importentry-record-fields\"><a href=\"#table-importentry-record-fields\" class=\"excluded-xref\" excluded-id=\"table-importentry-record-fields\">#table-importentry-record-fields</a></emu-xref>:</p>\n        <emu-table id=\"table-importentry-record-fields\" caption=\"ImportEntry Record Fields\" oldids=\"table-39\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-importentry-record-fields\">#table-importentry-record-fields</span>: <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> Fields</figcaption><span id=\"table-39\"></span>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              </th>\n              <th>\n                Value Type\n              </th>\n              <th>\n                Meaning\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[ModuleRequest]]\n              </td>\n              <td>\n                String\n              </td>\n              <td>\n                String value of the <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> of the <emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ImportName]]\n              </td>\n              <td>\n                String\n              </td>\n              <td>\n                The name under which the desired binding is exported by the module identified by [[ModuleRequest]]. The value <emu-val>\"*\"</emu-val> indicates that the import request is for the target module's namespace object.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[LocalName]]\n              </td>\n              <td>\n                String\n              </td>\n              <td>\n                The name that is used to locally access the imported value from within the importing module.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><emu-xref href=\"#table-import-forms-mapping-to-importentry-records\"><a href=\"#table-import-forms-mapping-to-importentry-records\" class=\"excluded-xref\" excluded-id=\"table-import-forms-mapping-to-importentry-records\">#table-import-forms-mapping-to-importentry-records</a></emu-xref> gives examples of ImportEntry records fields used to represent the syntactic import forms:</p>\n          <emu-table id=\"table-import-forms-mapping-to-importentry-records\" caption=\"Import Forms Mappings to ImportEntry Records\" informative=\"\" oldids=\"table-40\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-import-forms-mapping-to-importentry-records\">#table-import-forms-mapping-to-importentry-records</span> (Informative): Import Forms Mappings to ImportEntry Records</figcaption><span id=\"table-40\"></span>\n            <table>\n              <tbody>\n              <tr>\n                <th>\n                  Import Statement Form\n                </th>\n                <th>\n                  [[ModuleRequest]]\n                </th>\n                <th>\n                  [[ImportName]]\n                </th>\n                <th>\n                  [[LocalName]]\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  <code>import v from \"mod\";</code>\n                </td>\n                <td>\n                  <emu-val>\"mod\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"default\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"v\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>import * as ns from \"mod\";</code>\n                </td>\n                <td>\n                  <emu-val>\"mod\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"*\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"ns\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>import {x} from \"mod\";</code>\n                </td>\n                <td>\n                  <emu-val>\"mod\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>import {x as v} from \"mod\";</code>\n                </td>\n                <td>\n                  <emu-val>\"mod\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"v\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>import \"mod\";</code>\n                </td>\n                <td colspan=\"3\">\n                  An <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> is not created.\n                </td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </div></emu-note>\n        <p>An <dfn id=\"exportentry-record\">ExportEntry Record</dfn> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> that digests information about a single declarative export. Each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> has the fields defined in <emu-xref href=\"#table-exportentry-records\"><a href=\"#table-exportentry-records\" class=\"excluded-xref\" excluded-id=\"table-exportentry-records\">#table-exportentry-records</a></emu-xref>:</p>\n        <emu-table id=\"table-exportentry-records\" caption=\"ExportEntry Record Fields\" oldids=\"table-41\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-exportentry-records\">#table-exportentry-records</span>: <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> Fields</figcaption><span id=\"table-41\"></span>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              </th>\n              <th>\n                Value Type\n              </th>\n              <th>\n                Meaning\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[ExportName]]\n              </td>\n              <td>\n                String | null\n              </td>\n              <td>\n                The name used to export this binding by this module.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ModuleRequest]]\n              </td>\n              <td>\n                String | null\n              </td>\n              <td>\n                The String value of the <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> of the <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt>. <emu-val>null</emu-val> if the <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> does not have a <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ImportName]]\n              </td>\n              <td>\n                String | null\n              </td>\n              <td>\n                The name under which the desired binding is exported by the module identified by [[ModuleRequest]]. <emu-val>null</emu-val> if the <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> does not have a <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt>. <emu-val>\"*\"</emu-val> indicates that the export request is for all exported bindings.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[LocalName]]\n              </td>\n              <td>\n                String | null\n              </td>\n              <td>\n                The name that is used to locally access the exported value from within the importing module. <emu-val>null</emu-val> if the exported value is not locally accessible from within the module.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p><emu-xref href=\"#table-export-forms-mapping-to-exportentry-records\"><a href=\"#table-export-forms-mapping-to-exportentry-records\" class=\"excluded-xref\" excluded-id=\"table-export-forms-mapping-to-exportentry-records\">#table-export-forms-mapping-to-exportentry-records</a></emu-xref> gives examples of the ExportEntry record fields used to represent the syntactic export forms:</p>\n          <emu-table id=\"table-export-forms-mapping-to-exportentry-records\" caption=\"Export Forms Mappings to ExportEntry Records\" informative=\"\" oldids=\"table-42\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-export-forms-mapping-to-exportentry-records\">#table-export-forms-mapping-to-exportentry-records</span> (Informative): Export Forms Mappings to ExportEntry Records</figcaption><span id=\"table-42\"></span>\n            <table>\n              <tbody>\n              <tr>\n                <th>\n                  Export Statement Form\n                </th>\n                <th>\n                  [[ExportName]]\n                </th>\n                <th>\n                  [[ModuleRequest]]\n                </th>\n                <th>\n                  [[ImportName]]\n                </th>\n                <th>\n                  [[LocalName]]\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  <code>export var v;</code>\n                </td>\n                <td>\n                  <emu-val>\"v\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"v\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export default function f() {}</code>\n                </td>\n                <td>\n                  <emu-val>\"default\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"f\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export default function () {}</code>\n                </td>\n                <td>\n                  <emu-val>\"default\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"*default*\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export default 42;</code>\n                </td>\n                <td>\n                  <emu-val>\"default\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"*default*\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export {x};</code>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export {v as x};</code>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"v\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export {x} from \"mod\";</code>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"mod\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export {v as x} from \"mod\";</code>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"mod\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"v\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export * from \"mod\";</code>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"mod\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"*\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export * as ns from \"mod\";</code>\n                </td>\n                <td>\n                  <emu-val>\"ns\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"mod\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"*\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </div></emu-note>\n        <p>The following definitions specify the required concrete methods and other <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> for Source Text Module Records</p>\n\n        <div id=\"excluded-sec-parsemodule\"><h1><span class=\"secnum\">16.2.1.13.1</span>#sec-parsemodule ParseModule ( sourceText, realm, hostDefined )</h1>...</div><div id=\"excluded-sec-getexportednames\"><h1><span class=\"secnum\">16.2.1.13.2</span>#sec-getexportednames GetExportedNames ( [ exportStarSet ] ) Concrete Method</h1>...</div><div id=\"excluded-sec-resolveexport\"><h1><span class=\"secnum\">16.2.1.13.3</span>#sec-resolveexport ResolveExport ( exportName [ , resolveSet ] ) Concrete Method</h1>...</div><div id=\"excluded-sec-source-text-module-record-initialize-environment\"><h1><span class=\"secnum\">16.2.1.13.4</span>#sec-source-text-module-record-initialize-environment InitializeEnvironment ( ) Concrete Method</h1>...</div><div id=\"excluded-sec-source-text-module-record-execute-module\"><h1><span class=\"secnum\">16.2.1.13.5</span>#sec-source-text-module-record-execute-module ExecuteModule ( ) Concrete Method</h1>...</div></emu-clause>\n\n      "}}, "figData": {"table-module-record-fields": "Table 40", "table-abstract-methods-of-module-records": "Table 41", "table-cyclic-module-fields": "Table 42", "table-cyclic-module-methods": "Table 43", "table-additional-fields-of-source-text-module-records": "Table 44", "table-importentry-record-fields": "Table 45", "table-import-forms-mapping-to-importentry-records": "Table 46", "table-exportentry-records": "Table 47", "table-export-forms-mapping-to-exportentry-records": "Table 48"}}, "to": {"secList": ["sec-cyclic-module-records", "sec-static-semantics-containsundefinedcontinuetarget", "sec-statement-semantics", "sec-do-while-statement", "sec-while-statement", "sec-module-semantics-static-semantics-early-errors", "sec-if-statement", "sec-try-statement", "sec-moduledeclarationlinking", "sec-%foriniteratorprototype%-object", "sec-break-statement", "sec-static-semantics-containsundefinedbreaktarget", "sec-static-semantics-containsduplicatelabels", "sec-switch-statement", "sec-module-semantics", "sec-labelled-statements", "sec-block", "sec-function-definitions-static-semantics-early-errors", "sec-scripts-static-semantics-early-errors", "sec-for-in-iterator-objects", "sec-function-definitions", "sec-for-in-and-for-of-statements", "sec-moduleevaluation", "sec-for-statement", "sec-continue-statement", "sec-initializers-in-forin-statement-heads", "sec-with-statement", "sec-syntax-directed-operations-labels", "sec-source-text-module-records"], "secData": {"sec-cyclic-module-records": {"num": "16.2.1.9", "title": "#sec-cyclic-module-records Cyclic Module Records", "html": "<emu-clause id=\"sec-cyclic-module-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-cyclic-module-records\">#sec-cyclic-module-records</span> Cyclic Module Records</h1>\n        <p>A <dfn id=\"cyclic-module-record\">Cyclic Module Record</dfn> is used to represent information about a module that can participate in dependency cycles with other modules that are subclasses of the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> type. Module Records that are not subclasses of the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> type must not participate in dependency cycles with Source Text Module Records.</p>\n        <p>In addition to the fields defined in <emu-xref href=\"#table-module-record-fields\"><a href=\"#table-module-record-fields\" class=\"excluded-xref\" excluded-id=\"table-module-record-fields\">#table-module-record-fields</a></emu-xref> Cyclic Module Records have the additional fields listed in <emu-xref href=\"#table-cyclic-module-fields\"><a href=\"#table-cyclic-module-fields\" class=\"excluded-xref\" excluded-id=\"table-cyclic-module-fields\">#table-cyclic-module-fields</a></emu-xref></p>\n        <emu-table id=\"table-cyclic-module-fields\" caption=\"Additional Fields of Cyclic Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-cyclic-module-fields\">#table-cyclic-module-fields</span>: Additional Fields of Cyclic Module Records</figcaption>\n          <table>\n            <tbody>\n              <tr>\n                <th>\n                  Field Name\n                </th>\n                <th>\n                  Value Type\n                </th>\n                <th>\n                  Meaning\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  [[Status]]\n                </td>\n                <td>\n                  <emu-const>unlinked</emu-const> | <emu-const>linking</emu-const> | <emu-const>linked</emu-const> | <emu-const>evaluating</emu-const> | <emu-const>evaluated</emu-const>\n                </td>\n                <td>\n                  Initially <emu-const>unlinked</emu-const>. Transitions to <emu-const>linking</emu-const>, <emu-const>linked</emu-const>, <emu-const>evaluating</emu-const>, <emu-const>evaluated</emu-const> (in that order) as the module progresses throughout its lifecycle.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[EvaluationError]]\n                </td>\n                <td>\n                  An <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> | <emu-val>undefined</emu-val>\n                </td>\n                <td>\n                  A completion of type <emu-const>throw</emu-const> representing the exception that occurred during evaluation. <emu-val>undefined</emu-val> if no exception occurred or if [[Status]] is not <emu-const>evaluated</emu-const>.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[DFSIndex]]\n                </td>\n                <td>\n                  <emu-xref href=\"#integer\"><a href=\"#integer\">Integer</a></emu-xref> | <emu-val>undefined</emu-val>\n                </td>\n                <td>\n                  Auxiliary field used during Link and Evaluate only.\n                  If [[Status]] is <emu-const>linking</emu-const> or <emu-const>evaluating</emu-const>, this non-negative number records the point at which the module was first visited during the ongoing depth-first traversal of the dependency graph.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[DFSAncestorIndex]]\n                </td>\n                <td>\n                  <emu-xref href=\"#integer\"><a href=\"#integer\">Integer</a></emu-xref> | <emu-val>undefined</emu-val>\n                </td>\n                <td>\n                  Auxiliary field used during Link and Evaluate only. If [[Status]] is <emu-const>linking</emu-const> or <emu-const>evaluating</emu-const>, this is either the module's own [[DFSIndex]] or that of an \"earlier\" module in the same strongly connected component.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[RequestedModules]]\n                </td>\n                <td>\n                  <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of String\n                </td>\n                <td>\n                  A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of all the <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> strings used by the module represented by this record to request the importation of a module. The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is source code occurrence ordered.\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>In addition to the methods defined in <emu-xref href=\"#table-abstract-methods-of-module-records\"><a href=\"#table-abstract-methods-of-module-records\" class=\"excluded-xref\" excluded-id=\"table-abstract-methods-of-module-records\">#table-abstract-methods-of-module-records</a></emu-xref> Cyclic Module Records have the additional methods listed in <emu-xref href=\"#table-cyclic-module-methods\"><a href=\"#table-cyclic-module-methods\" class=\"excluded-xref\" excluded-id=\"table-cyclic-module-methods\">#table-cyclic-module-methods</a></emu-xref></p>\n        <emu-table id=\"table-cyclic-module-methods\" caption=\"Additional Abstract Methods of Cyclic Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-cyclic-module-methods\">#table-cyclic-module-methods</span>: Additional Abstract Methods of Cyclic Module Records</figcaption>\n          <table>\n            <tbody>\n              <tr>\n                <th>\n                  Method\n                </th>\n                <th>\n                  Purpose\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  <emu-xref aoid=\"InitializeEnvironment\"><a href=\"#sec-source-text-module-record-initialize-environment\">InitializeEnvironment</a></emu-xref>()\n                </td>\n                <td>\n                  Initialize the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> of the module, including resolving all imported bindings, and create the module's <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-xref aoid=\"ExecuteModule\"><a href=\"#sec-source-text-module-record-execute-module\">ExecuteModule</a></emu-xref>()\n                </td>\n                <td>\n                  Evaluate the module's code within its <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n\n        <div id=\"excluded-sec-moduledeclarationlinking\"><h1><span class=\"secnum\">16.2.1.9.1</span>#sec-moduledeclarationlinking Link ( ) Concrete Method</h1>...</div><div id=\"excluded-sec-moduleevaluation\"><h1><span class=\"secnum\">16.2.1.9.2</span>#sec-moduleevaluation Evaluate ( ) Concrete Method</h1>...</div><div id=\"excluded-sec-example-cyclic-module-record-graphs\"><h1><span class=\"secnum\">16.2.1.9.3</span>#sec-example-cyclic-module-record-graphs Example Cyclic Module Record Graphs</h1>...</div></emu-clause>\n\n      "}, "sec-static-semantics-containsundefinedcontinuetarget": {"num": "8.2.3", "title": "#sec-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget", "html": "<emu-clause id=\"sec-static-semantics-containsundefinedcontinuetarget\" oldids=\"sec-statement-semantics-static-semantics-containsundefinedcontinuetarget,sec-block-static-semantics-containsundefinedcontinuetarget,sec-if-statement-static-semantics-containsundefinedcontinuetarget,sec-do-while-statement-static-semantics-containsundefinedcontinuetarget,sec-while-statement-static-semantics-containsundefinedcontinuetarget,sec-for-statement-static-semantics-containsundefinedcontinuetarget,sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget,sec-continue-statement-static-semantics-containsundefinedcontinuetarget,sec-with-statement-static-semantics-containsundefinedcontinuetarget,sec-switch-statement-static-semantics-containsundefinedcontinuetarget,sec-labelled-statements-static-semantics-containsundefinedcontinuetarget,sec-try-statement-static-semantics-containsundefinedcontinuetarget,sec-function-definitions-static-semantics-containsundefinedcontinuetarget,sec-module-semantics-static-semantics-containsundefinedcontinuetarget\" type=\"sdo\" aoid=\"ContainsUndefinedContinueTarget\"><span id=\"sec-module-semantics-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-function-definitions-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-try-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-labelled-statements-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-switch-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-with-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-continue-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-for-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-while-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-do-while-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-if-statement-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-block-static-semantics-containsundefinedcontinuetarget\"></span><span id=\"sec-statement-semantics-static-semantics-containsundefinedcontinuetarget\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-containsundefinedcontinuetarget\">#sec-static-semantics-containsundefinedcontinuetarget</span> Static Semantics: ContainsUndefinedContinueTarget</h1>\n      <p>With parameters <var>iterationSet</var> and <var>labelSet</var>.</p>\n      <emu-grammar><emu-production name=\"Statement\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8b0c0df0\"><emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"7338aabb\"><emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ab8baff9\"><emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"aa6f7913\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"867b4090\"><emu-nt><a href=\"#prod-ThrowStatement\">ThrowStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"21212edb\"><emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"81ba5a4a\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"d6f37721\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BreakableStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BreakableStatement\">BreakableStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"28c5e5e3\"><emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>newIterationSet</var> be a copy of <var>iterationSet</var> with all the elements of <var>labelSet</var> appended.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> with arguments <var>newIterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0db4597a\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"16e86a13\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of the first <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of the second <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f6819570\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"24e70caa\">\n        <emu-t>do</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f7627bf3\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IterationStatement\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fc33bcf0\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"48e766b4\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"93c07e45\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IterationStatement\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bf521b70\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ecf18944\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"2590ad81\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"8ea6608b\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ee6f9a77\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"6f7c3304\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"9a146e5f\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7324ff96\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"b80b6675\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ContinueStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e903cf81\">\n        <emu-t>continue</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ContinueStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"5a1eea0d\">\n        <emu-t>continue</emu-t>\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt> is not an element of <var>iterationSet</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"23bd2456\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"515acffe\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"81ba5a4a\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"503b8396\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, then<ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is not present, return <emu-val>false</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"68374923\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c76d0d30\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6782073e\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"51b6efb5\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>label</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>.</li><li>Let <var>newLabelSet</var> be a copy of <var>labelSet</var> with <var>label</var> appended.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> with arguments <var>iterationSet</var> and <var>newLabelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fa7a943c\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a8714e57\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"5ec68ab9\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1b19737c\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ddc13c36\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"75ddb725\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e0559377\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"298e81b0\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-statement-semantics": {"num": "14.1", "title": "#sec-statement-semantics Statement Semantics", "html": "<emu-clause id=\"sec-statement-semantics\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-statement-semantics\">#sec-statement-semantics</span> Statement Semantics</h1>\n\n    <div id=\"excluded-sec-statement-semantics-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.1.1</span>#sec-statement-semantics-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-do-while-statement": {"num": "14.7.2", "title": "#sec-do-while-statement The do-while Statement", "html": "<emu-clause id=\"sec-do-while-statement\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-do-while-statement\">#sec-do-while-statement</span> The <code>do</code>-<code>while</code> Statement</h1>\n    </emu-clause>\n\n    "}, "sec-while-statement": {"num": "14.7.3", "title": "#sec-while-statement The while Statement", "html": "<emu-clause id=\"sec-while-statement\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-while-statement\">#sec-while-statement</span> The <code>while</code> Statement</h1>\n    </emu-clause>\n\n    "}, "sec-module-semantics-static-semantics-early-errors": {"num": "16.2.1.1", "title": "#sec-module-semantics-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-module-semantics-static-semantics-early-errors\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-semantics-static-semantics-early-errors\">#sec-module-semantics-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n        <emu-grammar><emu-production name=\"ModuleBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleBody\">ModuleBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"89010d7d\"><emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <ul>\n          <li>\n            It is a Syntax Error if the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> contains any duplicate entries.\n          </li>\n          <li>\n            It is a Syntax Error if any element of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> also occurs in the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.\n          </li>\n          <li>\n            It is a Syntax Error if the ExportedNames of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> contains any duplicate entries.\n          </li>\n          <li>\n            It is a Syntax Error if any element of the ExportedBindings of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> does not also occur in either the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>, or the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>.\n          </li>\n          <li>\n            It is a Syntax Error if <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> Contains <code>super</code>.\n          </li>\n          <li>\n            It is a Syntax Error if <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> Contains <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt>.\n          </li>\n          <li>\n            It is a Syntax Error if <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> with argument &#171; &#187; is <emu-val>true</emu-val>.\n          </li>\n          <li>\n            It is a Syntax Error if <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> with argument &#171; &#187; is <emu-val>true</emu-val>.\n          </li>\n          <li>\n            It is a Syntax Error if <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> with arguments &#171; &#187; and &#171; &#187; is <emu-val>true</emu-val>.\n          </li>\n        </ul>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The duplicate ExportedNames rule implies that multiple <code>export default</code> <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> items within a <emu-nt><a href=\"#prod-ModuleBody\">ModuleBody</a></emu-nt> is a Syntax Error. Additional error conditions relating to conflicting or duplicate declarations are checked during module linking prior to evaluation of a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. If any such errors are detected the <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> is not evaluated.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-if-statement": {"num": "14.6", "title": "#sec-if-statement The if Statement", "html": "<emu-clause id=\"sec-if-statement\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-if-statement\">#sec-if-statement</span> The <code>if</code> Statement</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"IfStatement\" params=\"Yield, Await, Return\" id=\"prod-IfStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-IfStatement\">IfStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"19528ab2\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"5fd3ff70\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-gann>[lookahead &#8800; <emu-t>else</emu-t>]</emu-gann>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">The lookahead-restriction [lookahead &#8800; <code>else</code>] resolves the classic \"dangling else\" problem in the usual way. That is, when the choice of associated <code>if</code> is otherwise ambiguous, the <code>else</code> is associated with the nearest (innermost) of the candidate <code>if</code>s</div></emu-note>\n\n    <div id=\"excluded-sec-if-statement-static-semantics-early-errors\"><h1><span class=\"secnum\">14.6.1</span>#sec-if-statement-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-if-statement-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.6.2</span>#sec-if-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-try-statement": {"num": "14.15", "title": "#sec-try-statement The try Statement", "html": "<emu-clause id=\"sec-try-statement\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-try-statement\">#sec-try-statement</span> The <code>try</code> Statement</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"TryStatement\" params=\"Yield, Await, Return\" id=\"prod-TryStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-TryStatement\">TryStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1105fb1b\">\n        <emu-t>try</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Block\">Block</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Catch\">Catch</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"032228f5\">\n        <emu-t>try</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Block\">Block</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Finally\">Finally</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"c9f66613\">\n        <emu-t>try</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Block\">Block</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Catch\">Catch</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Finally\">Finally</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"Catch\" params=\"Yield, Await, Return\" id=\"prod-Catch\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-Catch\">Catch</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"824e8c92\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CatchParameter\">CatchParameter</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Block\">Block</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"548fd244\">\n        <emu-t>catch</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Block\">Block</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"Finally\" params=\"Yield, Await, Return\" id=\"prod-Finally\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-Finally\">Finally</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7bd00a40\">\n        <emu-t>finally</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Block\">Block</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"CatchParameter\" params=\"Yield, Await\" id=\"prod-CatchParameter\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-CatchParameter\">CatchParameter</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"22bf917e\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"9eb89dc1\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingPattern\">BindingPattern</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>The <code>try</code> statement encloses a block of code in which an exceptional condition can occur, such as a runtime error or a <code>throw</code> statement. The <code>catch</code> clause provides the exception-handling code. When a catch clause catches an exception, its <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt> is bound to that exception.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-try-statement-static-semantics-early-errors\"><h1><span class=\"secnum\">14.15.1</span>#sec-try-statement-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-runtime-semantics-catchclauseevaluation\"><h1><span class=\"secnum\">14.15.2</span>#sec-runtime-semantics-catchclauseevaluation Runtime Semantics: CatchClauseEvaluation</h1>...</div><div id=\"excluded-sec-try-statement-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.15.3</span>#sec-try-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-moduledeclarationlinking": {"num": "16.2.1.9.1", "title": "#sec-moduledeclarationlinking Link ( ) Concrete Method", "html": "<emu-clause id=\"sec-moduledeclarationlinking\" oldids=\"sec-moduledeclarationinstantiation\"><span id=\"sec-moduledeclarationinstantiation\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-moduledeclarationlinking\">#sec-moduledeclarationlinking</span> Link ( ) Concrete Method</h1>\n          <p>The Link concrete method of a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> <var>module</var> takes no arguments. On success, Link transitions this module's [[Status]] from <emu-const>unlinked</emu-const> to <emu-const>linked</emu-const>. On failure, an exception is thrown and this module's [[Status]] remains <emu-const>unlinked</emu-const>. (Most of the work is done by the auxiliary function <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>.) It performs the following steps when called:</p>\n\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is not <emu-const>linking</emu-const> or <emu-const>evaluating</emu-const>.</li><li>Let <var>stack</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>(<var>module</var>, <var>stack</var>, 0).</li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>For each <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> <var>m</var> of <var>stack</var>, do<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>m</var>.[[Status]] is <emu-const>linking</emu-const>.</li><li>Set <var>m</var>.[[Status]] to <emu-const>unlinked</emu-const>.</li><li>Set <var>m</var>.[[Environment]] to <emu-val>undefined</emu-val>.</li><li>Set <var>m</var>.[[DFSIndex]] to <emu-val>undefined</emu-val>.</li><li>Set <var>m</var>.[[DFSAncestorIndex]] to <emu-val>undefined</emu-val>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>unlinked</emu-const>.</li><li>Return <var>result</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>linked</emu-const> or <emu-const>evaluated</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>stack</var> is empty.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n          <div id=\"excluded-sec-InnerModuleLinking\"><h1><span class=\"secnum\">16.2.1.9.1.1</span>#sec-InnerModuleLinking InnerModuleLinking ( module, stack, index )</h1>...</div></emu-clause>\n\n        "}, "sec-%foriniteratorprototype%-object": {"num": "14.7.5.9.2", "title": "#sec-%foriniteratorprototype%-object The %ForInIteratorPrototype% Object", "html": "<emu-clause id=\"sec-%foriniteratorprototype%-object\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%foriniteratorprototype%-object\">#sec-%foriniteratorprototype%-object</span> The %ForInIteratorPrototype% Object</h1>\n          <p>The <dfn>%ForInIteratorPrototype%</dfn> object:</p>\n          <ul>\n            <li>has properties that are inherited by all For-In Iterator Objects.</li>\n            <li>is an <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li>\n            <li>has a [[Prototype]] internal slot whose value is <emu-xref href=\"#sec-%iteratorprototype%-object\"><a href=\"#sec-%iteratorprototype%-object\">%IteratorPrototype%</a></emu-xref>.</li>\n            <li>is never directly accessible to ECMAScript code.</li>\n            <li>has the following properties:</li>\n          </ul>\n\n          <div id=\"excluded-sec-%foriniteratorprototype%.next\"><h1><span class=\"secnum\">14.7.5.9.2.1</span>#sec-%foriniteratorprototype%.next %ForInIteratorPrototype%.next ( )</h1>...</div></emu-clause>\n\n        "}, "sec-break-statement": {"num": "14.9", "title": "#sec-break-statement The break Statement", "html": "<emu-clause id=\"sec-break-statement\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-break-statement\">#sec-break-statement</span> The <code>break</code> Statement</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"BreakStatement\" params=\"Yield, Await\" id=\"prod-BreakStatement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-BreakStatement\">BreakStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b65229e7\">\n        <emu-t>break</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"9c83b42f\">\n        <emu-t>break</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n\n    <div id=\"excluded-sec-break-statement-static-semantics-early-errors\"><h1><span class=\"secnum\">14.9.1</span>#sec-break-statement-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-break-statement-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.9.2</span>#sec-break-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-static-semantics-containsundefinedbreaktarget": {"num": "8.2.2", "title": "#sec-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget", "html": "<emu-clause id=\"sec-static-semantics-containsundefinedbreaktarget\" oldids=\"sec-statement-semantics-static-semantics-containsundefinedbreaktarget,sec-block-static-semantics-containsundefinedbreaktarget,sec-if-statement-static-semantics-containsundefinedbreaktarget,sec-do-while-statement-static-semantics-containsundefinedbreaktarget,sec-while-statement-static-semantics-containsundefinedbreaktarget,sec-for-statement-static-semantics-containsundefinedbreaktarget,sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget,sec-break-statement-static-semantics-containsundefinedbreaktarget,sec-with-statement-static-semantics-containsundefinedbreaktarget,sec-switch-statement-static-semantics-containsundefinedbreaktarget,sec-labelled-statements-static-semantics-containsundefinedbreaktarget,sec-try-statement-static-semantics-containsundefinedbreaktarget,sec-function-definitions-static-semantics-containsundefinedbreaktarget,sec-module-semantics-static-semantics-containsundefinedbreaktarget\" type=\"sdo\" aoid=\"ContainsUndefinedBreakTarget\"><span id=\"sec-module-semantics-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-function-definitions-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-try-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-labelled-statements-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-switch-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-with-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-break-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-for-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-while-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-do-while-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-if-statement-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-block-static-semantics-containsundefinedbreaktarget\"></span><span id=\"sec-statement-semantics-static-semantics-containsundefinedbreaktarget\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-containsundefinedbreaktarget\">#sec-static-semantics-containsundefinedbreaktarget</span> Static Semantics: ContainsUndefinedBreakTarget</h1>\n      <p>With parameter <var>labelSet</var>.</p>\n      <emu-grammar><emu-production name=\"Statement\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8b0c0df0\"><emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"7338aabb\"><emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"1d7d329e\"><emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"aa6f7913\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"867b4090\"><emu-nt><a href=\"#prod-ThrowStatement\">ThrowStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"21212edb\"><emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"81ba5a4a\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"d6f37721\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0db4597a\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"16e86a13\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of the first <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of the second <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f6819570\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"24e70caa\">\n        <emu-t>do</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f7627bf3\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IterationStatement\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fc33bcf0\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"48e766b4\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"93c07e45\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IterationStatement\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bf521b70\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ecf18944\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"2590ad81\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"8ea6608b\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ee6f9a77\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"6f7c3304\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"9a146e5f\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7324ff96\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"b80b6675\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"BreakStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b65229e7\">\n        <emu-t>break</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"BreakStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"91c83ecb\">\n        <emu-t>break</emu-t>\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt> is not an element of <var>labelSet</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"23bd2456\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"515acffe\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"81ba5a4a\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"503b8396\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, then<ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is not present, return <emu-val>false</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"68374923\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c76d0d30\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6782073e\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"51b6efb5\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>label</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>.</li><li>Let <var>newLabelSet</var> be a copy of <var>labelSet</var> with <var>label</var> appended.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> with argument <var>newLabelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fa7a943c\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a8714e57\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"5ec68ab9\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1b19737c\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ddc13c36\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"75ddb725\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e0559377\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"298e81b0\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-static-semantics-containsduplicatelabels": {"num": "8.2.1", "title": "#sec-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels", "html": "<emu-clause id=\"sec-static-semantics-containsduplicatelabels\" oldids=\"sec-statement-semantics-static-semantics-containsduplicatelabels,sec-block-static-semantics-containsduplicatelabels,sec-if-statement-static-semantics-containsduplicatelabels,sec-do-while-statement-static-semantics-containsduplicatelabels,sec-while-statement-static-semantics-containsduplicatelabels,sec-for-statement-static-semantics-containsduplicatelabels,sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels,sec-with-statement-static-semantics-containsduplicatelabels,sec-switch-statement-static-semantics-containsduplicatelabels,sec-labelled-statements-static-semantics-containsduplicatelabels,sec-try-statement-static-semantics-containsduplicatelabels,sec-function-definitions-static-semantics-containsduplicatelabels,sec-module-semantics-static-semantics-containsduplicatelabels\" type=\"sdo\" aoid=\"ContainsDuplicateLabels\"><span id=\"sec-module-semantics-static-semantics-containsduplicatelabels\"></span><span id=\"sec-function-definitions-static-semantics-containsduplicatelabels\"></span><span id=\"sec-try-statement-static-semantics-containsduplicatelabels\"></span><span id=\"sec-labelled-statements-static-semantics-containsduplicatelabels\"></span><span id=\"sec-switch-statement-static-semantics-containsduplicatelabels\"></span><span id=\"sec-with-statement-static-semantics-containsduplicatelabels\"></span><span id=\"sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels\"></span><span id=\"sec-for-statement-static-semantics-containsduplicatelabels\"></span><span id=\"sec-while-statement-static-semantics-containsduplicatelabels\"></span><span id=\"sec-do-while-statement-static-semantics-containsduplicatelabels\"></span><span id=\"sec-if-statement-static-semantics-containsduplicatelabels\"></span><span id=\"sec-block-static-semantics-containsduplicatelabels\"></span><span id=\"sec-statement-semantics-static-semantics-containsduplicatelabels\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-static-semantics-containsduplicatelabels\">#sec-static-semantics-containsduplicatelabels</span> Static Semantics: ContainsDuplicateLabels</h1>\n      <p>With parameter <var>labelSet</var>.</p>\n      <emu-grammar><emu-production name=\"Statement\">\n    <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8b0c0df0\"><emu-nt><a href=\"#prod-VariableStatement\">VariableStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"7338aabb\"><emu-nt><a href=\"#prod-EmptyStatement\">EmptyStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"82c424b7\"><emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"1d7d329e\"><emu-nt><a href=\"#prod-ContinueStatement\">ContinueStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"ab8baff9\"><emu-nt><a href=\"#prod-BreakStatement\">BreakStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"aa6f7913\"><emu-nt><a href=\"#prod-ReturnStatement\">ReturnStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"867b4090\"><emu-nt><a href=\"#prod-ThrowStatement\">ThrowStatement</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"21212edb\"><emu-nt><a href=\"#prod-DebuggerStatement\">DebuggerStatement</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"Block\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"81ba5a4a\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"StatementListItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"d6f37721\"><emu-nt><a href=\"#prod-Declaration\">Declaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"StatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0db4597a\">\n        <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt>\n        <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicates</var> be <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"16e86a13\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>else</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicate</var> be <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of the first <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicate</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of the second <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IfStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f6819570\">\n        <emu-t>if</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"24e70caa\">\n        <emu-t>do</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f7627bf3\">\n        <emu-t>while</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IterationStatement\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fc33bcf0\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"48e766b4\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-VariableDeclarationList\">VariableDeclarationList</a></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"93c07e45\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"IterationStatement\">\n    <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bf521b70\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ecf18944\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"2590ad81\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"8ea6608b\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"ee6f9a77\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"6f7c3304\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"9a146e5f\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"7324ff96\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"b80b6675\">\n        <emu-t>for</emu-t>\n        <emu-t>await</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>\n        <emu-t>of</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>This section is extended by Annex <emu-xref href=\"#sec-initializers-in-forin-statement-heads\"><a href=\"#sec-initializers-in-forin-statement-heads\" class=\"excluded-xref\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"WithStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"23bd2456\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"SwitchStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"515acffe\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"81ba5a4a\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseBlock\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"503b8396\">\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt>\n        <emu-nt optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is present, then<ol><li>Let <var>hasDuplicates</var> be <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of the first <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Let <var>hasDuplicates</var> be <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> is not present, return <emu-val>false</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of the second <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClauses\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"68374923\">\n        <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt>\n        <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicates</var> be <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClauses\">CaseClauses</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"CaseClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-CaseClause\">CaseClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c76d0d30\">\n        <emu-t>case</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"DefaultClause\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-DefaultClause\">DefaultClause</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"6782073e\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If the <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> is present, return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"51b6efb5\">\n        <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>label</var> be the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt>.</li><li>If <var>label</var> is an element of <var>labelSet</var>, return <emu-val>true</emu-val>.</li><li>Let <var>newLabelSet</var> be a copy of <var>labelSet</var> with <var>label</var> appended.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> with argument <var>newLabelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"LabelledItem\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LabelledItem\">LabelledItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"fa7a943c\"><emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a8714e57\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicates</var> be <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"5ec68ab9\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicates</var> be <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"TryStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1b19737c\">\n        <emu-t>try</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n        <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt>\n        <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicates</var> be <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>hasDuplicates</var> be <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"Catch\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ddc13c36\">\n        <emu-t>catch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-CatchParameter\">CatchParameter</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItemList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"75ddb725\">\n        <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt>\n        <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>hasDuplicates</var> be <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItemList\">ModuleItemList</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"ModuleItem\">\n    <emu-nt><a href=\"#prod-ModuleItem\">ModuleItem</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e0559377\"><emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"298e81b0\"><emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-switch-statement": {"num": "14.12", "title": "#sec-switch-statement The switch Statement", "html": "<emu-clause id=\"sec-switch-statement\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-switch-statement\">#sec-switch-statement</span> The <code>switch</code> Statement</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"SwitchStatement\" params=\"Yield, Await, Return\" id=\"prod-SwitchStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-SwitchStatement\">SwitchStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"751972c0\">\n        <emu-t>switch</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-CaseBlock\">CaseBlock</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"CaseBlock\" params=\"Yield, Await, Return\" id=\"prod-CaseBlock\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-CaseBlock\">CaseBlock</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"57e1f602\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\" optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"d34b22b4\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\" optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-DefaultClause\">DefaultClause</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await, ?Return\" optional=\"\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"CaseClauses\" params=\"Yield, Await, Return\" id=\"prod-CaseClauses\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"5cf2554e\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-CaseClause\">CaseClause</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"f11e9d08\">\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-CaseClauses\">CaseClauses</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-CaseClause\">CaseClause</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"CaseClause\" params=\"Yield, Await, Return\" id=\"prod-CaseClause\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-CaseClause\">CaseClause</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ccfab6dd\">\n        <emu-t>case</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\" optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"DefaultClause\" params=\"Yield, Await, Return\" id=\"prod-DefaultClause\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-DefaultClause\">DefaultClause</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"74934b03\">\n        <emu-t>default</emu-t>\n        <emu-t>:</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\" optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n\n    <div id=\"excluded-sec-switch-statement-static-semantics-early-errors\"><h1><span class=\"secnum\">14.12.1</span>#sec-switch-statement-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-runtime-semantics-caseblockevaluation\"><h1><span class=\"secnum\">14.12.2</span>#sec-runtime-semantics-caseblockevaluation Runtime Semantics: CaseBlockEvaluation</h1>...</div><div id=\"excluded-sec-runtime-semantics-caseclauseisselected\"><h1><span class=\"secnum\">14.12.3</span>#sec-runtime-semantics-caseclauseisselected CaseClauseIsSelected ( C, input )</h1>...</div><div id=\"excluded-sec-switch-statement-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.12.4</span>#sec-switch-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-module-semantics": {"num": "16.2.1", "title": "#sec-module-semantics Module Semantics", "html": "<emu-clause id=\"sec-module-semantics\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-module-semantics\">#sec-module-semantics</span> Module Semantics</h1>\n\n      <div id=\"excluded-sec-module-semantics-static-semantics-early-errors\"><h1><span class=\"secnum\">16.2.1.1</span>#sec-module-semantics-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-exportedbindings\"><h1><span class=\"secnum\">16.2.1.2</span>#sec-module-semantics-static-semantics-exportedbindings Static Semantics: ExportedBindings</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-exportednames\"><h1><span class=\"secnum\">16.2.1.3</span>#sec-module-semantics-static-semantics-exportednames Static Semantics: ExportedNames</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-exportentries\"><h1><span class=\"secnum\">16.2.1.4</span>#sec-module-semantics-static-semantics-exportentries Static Semantics: ExportEntries</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-importentries\"><h1><span class=\"secnum\">16.2.1.5</span>#sec-module-semantics-static-semantics-importentries Static Semantics: ImportEntries</h1>...</div><div id=\"excluded-sec-importedlocalnames\"><h1><span class=\"secnum\">16.2.1.6</span>#sec-importedlocalnames Static Semantics: ImportedLocalNames ( importEntries )</h1>...</div><div id=\"excluded-sec-module-semantics-static-semantics-modulerequests\"><h1><span class=\"secnum\">16.2.1.7</span>#sec-module-semantics-static-semantics-modulerequests Static Semantics: ModuleRequests</h1>...</div><div id=\"excluded-sec-abstract-module-records\"><h1><span class=\"secnum\">16.2.1.8</span>#sec-abstract-module-records Abstract Module Records</h1>...</div><div id=\"excluded-sec-cyclic-module-records\"><h1><span class=\"secnum\">16.2.1.9</span>#sec-cyclic-module-records Cyclic Module Records</h1>...</div><div id=\"excluded-sec-source-text-module-records\"><h1><span class=\"secnum\">16.2.1.10</span>#sec-source-text-module-records Source Text Module Records</h1>...</div><div id=\"excluded-sec-hostresolveimportedmodule\"><h1><span class=\"secnum\">16.2.1.11</span>#sec-hostresolveimportedmodule HostResolveImportedModule ( referencingScriptOrModule, specifier )</h1>...</div><div id=\"excluded-sec-hostimportmoduledynamically\"><h1><span class=\"secnum\">16.2.1.12</span>#sec-hostimportmoduledynamically HostImportModuleDynamically ( referencingScriptOrModule, specifier, promiseCapability )</h1>...</div><div id=\"excluded-sec-finishdynamicimport\"><h1><span class=\"secnum\">16.2.1.13</span>#sec-finishdynamicimport FinishDynamicImport ( referencingScriptOrModule, specifier, promiseCapability, completion )</h1>...</div><div id=\"excluded-sec-getmodulenamespace\"><h1><span class=\"secnum\">16.2.1.14</span>#sec-getmodulenamespace GetModuleNamespace ( module )</h1>...</div><div id=\"excluded-sec-module-semantics-runtime-semantics-evaluation\"><h1><span class=\"secnum\">16.2.1.15</span>#sec-module-semantics-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n    "}, "sec-labelled-statements": {"num": "14.13", "title": "#sec-labelled-statements Labelled Statements", "html": "<emu-clause id=\"sec-labelled-statements\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-labelled-statements\">#sec-labelled-statements</span> Labelled Statements</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"LabelledStatement\" params=\"Yield, Await, Return\" id=\"prod-LabelledStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-LabelledStatement\">LabelledStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"be1c4a00\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-LabelledItem\">LabelledItem</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"LabelledItem\" params=\"Yield, Await, Return\" id=\"prod-LabelledItem\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-LabelledItem\">LabelledItem</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4843d33f\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"7743708d\"><emu-nt params=\"?Yield, ?Await, ~Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[?Yield, ?Await, ~Default]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>A <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> may be prefixed by a label. Labelled statements are only used in conjunction with labelled <code>break</code> and <code>continue</code> statements. ECMAScript has no <code>goto</code> statement. A <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> can be part of a <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt>, which itself can be part of a <emu-nt><a href=\"#prod-LabelledStatement\">LabelledStatement</a></emu-nt>, and so on. The labels introduced this way are collectively referred to as the &#8220;current label set&#8221; when describing the semantics of individual statements.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-labelled-statements-static-semantics-early-errors\"><h1><span class=\"secnum\">14.13.1</span>#sec-labelled-statements-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-islabelledfunction\"><h1><span class=\"secnum\">14.13.2</span>#sec-islabelledfunction Static Semantics: IsLabelledFunction ( stmt )</h1>...</div><div id=\"excluded-sec-labelled-statements-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.13.3</span>#sec-labelled-statements-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div><div id=\"excluded-sec-runtime-semantics-labelledevaluation\"><h1><span class=\"secnum\">14.13.4</span>#sec-runtime-semantics-labelledevaluation Runtime Semantics: LabelledEvaluation</h1>...</div></emu-clause>\n\n  "}, "sec-block": {"num": "14.2", "title": "#sec-block Block", "html": "<emu-clause id=\"sec-block\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-block\">#sec-block</span> Block</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"BlockStatement\" params=\"Yield, Await, Return\" id=\"prod-BlockStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-BlockStatement\">BlockStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cf0a5fc2\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Block\">Block</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"Block\" params=\"Yield, Await, Return\" id=\"prod-Block\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-Block\">Block</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"5228fd45\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\" optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"StatementList\" params=\"Yield, Await, Return\" id=\"prod-StatementList\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"39651bc0\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-StatementListItem\">StatementListItem</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"db572542\">\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-StatementListItem\">StatementListItem</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"StatementListItem\" params=\"Yield, Await, Return\" id=\"prod-StatementListItem\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-StatementListItem\">StatementListItem</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4843d33f\"><emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"31391311\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-Declaration\">Declaration</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n\n    <div id=\"excluded-sec-block-static-semantics-early-errors\"><h1><span class=\"secnum\">14.2.1</span>#sec-block-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-block-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.2.2</span>#sec-block-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div><div id=\"excluded-sec-blockdeclarationinstantiation\"><h1><span class=\"secnum\">14.2.3</span>#sec-blockdeclarationinstantiation BlockDeclarationInstantiation ( code, env )</h1>...</div></emu-clause>\n\n  "}, "sec-function-definitions-static-semantics-early-errors": {"num": "15.2.1", "title": "#sec-function-definitions-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-function-definitions-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions-static-semantics-early-errors\">#sec-function-definitions-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"81739a57\">\n        <emu-t>function</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b26bacea\">\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8379937e\">\n        <emu-t>function</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          If the source code matching <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, the Early Error rules for <emu-grammar><emu-production name=\"UniqueFormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0218c6f5\"><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar> are applied.\n        </li>\n        <li>\n          If <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is present and the source code matching <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, it is a Syntax Error if the <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> is <emu-val>\"eval\"</emu-val> or <emu-val>\"arguments\"</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"FunctionBodyContainsUseStrict\"><a href=\"#sec-static-semantics-functionbodycontainsusestrict\">FunctionBodyContainsUseStrict</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsSimpleParameterList\"><a href=\"#sec-static-semantics-issimpleparameterlist\">IsSimpleParameterList</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> is <emu-val>false</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if any element of the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> also occurs in the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of a <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> does not include identifiers bound using var or function declarations.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"FunctionBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"5cdf1a9f\"><emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> contains any duplicate entries.\n        </li>\n        <li>\n          It is a Syntax Error if any element of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> also occurs in the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> with argument &#171; &#187; is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> with argument &#171; &#187; is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt> with arguments &#171; &#187; and &#171; &#187; is <emu-val>true</emu-val>.\n        </li>\n      </ul>\n    </emu-clause>\n\n    "}, "sec-scripts-static-semantics-early-errors": {"num": "16.1.1", "title": "#sec-scripts-static-semantics-early-errors Static Semantics: Early Errors", "html": "<emu-clause id=\"sec-scripts-static-semantics-early-errors\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-scripts-static-semantics-early-errors\">#sec-scripts-static-semantics-early-errors</span> Static Semantics: Early Errors</h1>\n      <emu-grammar><emu-production name=\"Script\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b78f99cc\"><emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> contains any duplicate entries.\n        </li>\n        <li>\n          It is a Syntax Error if any element of the <emu-xref aoid=\"LexicallyDeclaredNames\"><a href=\"#sec-static-semantics-lexicallydeclarednames\">LexicallyDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> also occurs in the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt>.\n        </li>\n      </ul>\n      <emu-grammar><emu-production name=\"ScriptBody\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cf403a0c\"><emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> Contains <code>super</code> unless the source code containing <code>super</code> is eval code that is being processed by a <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref>. Additional <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules for <code>super</code> within <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> are defined in <emu-xref href=\"#sec-performeval\"><a href=\"#sec-performeval\" class=\"excluded-xref\" excluded-id=\"sec-performeval\">#sec-performeval</a></emu-xref>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> Contains <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt> unless the source code containing <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt> is eval code that is being processed by a <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref>. Additional <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> rules for <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt> in <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref> are defined in <emu-xref href=\"#sec-performeval\"><a href=\"#sec-performeval\" class=\"excluded-xref\" excluded-id=\"sec-performeval\">#sec-performeval</a></emu-xref>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument &#171; &#187; is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with argument &#171; &#187; is <emu-val>true</emu-val>.\n        </li>\n        <li>\n          It is a Syntax Error if <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> with arguments &#171; &#187; and &#171; &#187; is <emu-val>true</emu-val>.\n        </li>\n      </ul>\n    </emu-clause>\n\n    "}, "sec-for-in-iterator-objects": {"num": "14.7.5.9", "title": "#sec-for-in-iterator-objects For-In Iterator Objects", "html": "<emu-clause id=\"sec-for-in-iterator-objects\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-for-in-iterator-objects\">#sec-for-in-iterator-objects</span> For-In Iterator Objects</h1>\n        <p>A For-In Iterator is an object that represents a specific iteration over some specific object. For-In Iterator objects are never directly accessible to ECMAScript code; they exist solely to illustrate the behaviour of <emu-xref aoid=\"EnumerateObjectProperties\"><a href=\"#sec-enumerate-object-properties\">EnumerateObjectProperties</a></emu-xref>.</p>\n\n        <div id=\"excluded-sec-createforiniterator\"><h1><span class=\"secnum\">14.7.5.9.1</span>#sec-createforiniterator CreateForInIterator ( object )</h1>...</div><div id=\"excluded-sec-%foriniteratorprototype%-object\"><h1><span class=\"secnum\">14.7.5.9.2</span>#sec-%foriniteratorprototype%-object The %ForInIteratorPrototype% Object</h1>...</div><div id=\"excluded-sec-properties-of-for-in-iterator-instances\"><h1><span class=\"secnum\">14.7.5.9.3</span>#sec-properties-of-for-in-iterator-instances Properties of For-In Iterator Instances</h1>...</div></emu-clause>\n    "}, "sec-function-definitions": {"num": "15.2", "title": "#sec-function-definitions Function Definitions", "html": "<emu-clause id=\"sec-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions\">#sec-function-definitions</span> Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"FunctionDeclaration\" params=\"Yield, Await, Default\" id=\"prod-FunctionDeclaration\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"7c02f6b3\">\n        <emu-t>function</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"ff05b860\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionExpression\" id=\"prod-FunctionExpression\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1faafdcc\">\n        <emu-t>function</emu-t>\n        <emu-nt params=\"~Yield, ~Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionBody\" params=\"Yield, Await\" id=\"prod-FunctionBody\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"82527203\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"FunctionStatementList\" params=\"Yield, Await\" id=\"prod-FunctionStatementList\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2267baf8\"><emu-nt params=\"?Yield, ?Await, +Return\" optional=\"\"><a href=\"#prod-StatementList\">StatementList</a><emu-mods><emu-params>[?Yield, ?Await, +Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n\n    <div id=\"excluded-sec-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">15.2.1</span>#sec-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-contains\"><h1><span class=\"secnum\">15.2.2</span>#sec-function-definitions-static-semantics-contains Static Semantics: Contains</h1>...</div><div id=\"excluded-sec-static-semantics-functionbodycontainsusestrict\"><h1><span class=\"secnum\">15.2.3</span>#sec-static-semantics-functionbodycontainsusestrict Static Semantics: FunctionBodyContainsUseStrict</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-hasname\"><h1><span class=\"secnum\">15.2.4</span>#sec-function-definitions-static-semantics-hasname Static Semantics: HasName</h1>...</div><div id=\"excluded-sec-isanonymousfunctiondefinition\"><h1><span class=\"secnum\">15.2.5</span>#sec-isanonymousfunctiondefinition Static Semantics: IsAnonymousFunctionDefinition ( expr )</h1>...</div><div id=\"excluded-sec-function-definitions-static-semantics-isfunctiondefinition\"><h1><span class=\"secnum\">15.2.6</span>#sec-function-definitions-static-semantics-isfunctiondefinition Static Semantics: IsFunctionDefinition</h1>...</div><div id=\"excluded-sec-runtime-semantics-evaluatefunctionbody\"><h1><span class=\"secnum\">15.2.7</span>#sec-runtime-semantics-evaluatefunctionbody Runtime Semantics: EvaluateFunctionBody</h1>...</div><div id=\"excluded-sec-function-definitions-runtime-semantics-iteratorbindinginitialization\"><h1><span class=\"secnum\">15.2.8</span>#sec-function-definitions-runtime-semantics-iteratorbindinginitialization Runtime Semantics: IteratorBindingInitialization</h1>...</div><div id=\"excluded-sec-runtime-semantics-instantiateordinaryfunctionobject\"><h1><span class=\"secnum\">15.2.9</span>#sec-runtime-semantics-instantiateordinaryfunctionobject Runtime Semantics: InstantiateOrdinaryFunctionObject</h1>...</div><div id=\"excluded-sec-function-definitions-runtime-semantics-namedevaluation\"><h1><span class=\"secnum\">15.2.10</span>#sec-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation</h1>...</div><div id=\"excluded-sec-function-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">15.2.11</span>#sec-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-for-in-and-for-of-statements": {"num": "14.7.5", "title": "#sec-for-in-and-for-of-statements The for-in, for-of, and for-await-of Statements", "html": "<emu-clause id=\"sec-for-in-and-for-of-statements\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-for-in-and-for-of-statements\">#sec-for-in-and-for-of-statements</span> The <code>for</code>-<code>in</code>, <code>for</code>-<code>of</code>, and <code>for</code>-<code>await</code>-<code>of</code> Statements</h1>\n\n      <div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-early-errors\"><h1><span class=\"secnum\">14.7.5.1</span>#sec-for-in-and-for-of-statements-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-static-semantics-isdestructuring\"><h1><span class=\"secnum\">14.7.5.2</span>#sec-for-in-and-for-of-statements-static-semantics-isdestructuring Static Semantics: IsDestructuring</h1>...</div><div id=\"excluded-sec-runtime-semantics-fordeclarationbindinginitialization\"><h1><span class=\"secnum\">14.7.5.3</span>#sec-runtime-semantics-fordeclarationbindinginitialization Runtime Semantics: ForDeclarationBindingInitialization</h1>...</div><div id=\"excluded-sec-runtime-semantics-bindinginstantiation\"><h1><span class=\"secnum\">14.7.5.4</span>#sec-runtime-semantics-bindinginstantiation Runtime Semantics: BindingInstantiation</h1>...</div><div id=\"excluded-sec-runtime-semantics-forinofheadevaluation\"><h1><span class=\"secnum\">14.7.5.5</span>#sec-runtime-semantics-forinofheadevaluation ForIn/OfHeadEvaluation ( uninitializedBoundNames, expr, iterationKind )</h1>...</div><div id=\"excluded-sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\"><h1><span class=\"secnum\">14.7.5.6</span>#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset ForIn/OfBodyEvaluation ( lhs, stmt, iteratorRecord, iterationKind, lhsKind, labelSet [ , iteratorKind ] )</h1>...</div><div id=\"excluded-sec-for-in-and-for-of-statements-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.7.5.7</span>#sec-for-in-and-for-of-statements-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div><div id=\"excluded-sec-enumerate-object-properties\"><h1><span class=\"secnum\">14.7.5.8</span>#sec-enumerate-object-properties EnumerateObjectProperties ( O )</h1>...</div><div id=\"excluded-sec-for-in-iterator-objects\"><h1><span class=\"secnum\">14.7.5.9</span>#sec-for-in-iterator-objects For-In Iterator Objects</h1>...</div></emu-clause>\n  "}, "sec-moduleevaluation": {"num": "16.2.1.9.2", "title": "#sec-moduleevaluation Evaluate ( ) Concrete Method", "html": "<emu-clause id=\"sec-moduleevaluation\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-moduleevaluation\">#sec-moduleevaluation</span> Evaluate ( ) Concrete Method</h1>\n          <p>The Evaluate concrete method of a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> <var>module</var> takes no arguments. Evaluate transitions this module's [[Status]] from <emu-const>linked</emu-const> to <emu-const>evaluated</emu-const>. If execution results in an exception, that exception is recorded in the [[EvaluationError]] field and rethrown by future invocations of Evaluate. (Most of the work is done by the auxiliary function <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref>.) It performs the following steps when called:</p>\n\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This call to Evaluate is not happening at the same time as another call to Evaluate within the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>linked</emu-const> or <emu-const>evaluated</emu-const>.</li><li>Let <var>stack</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref>(<var>module</var>, <var>stack</var>, 0).</li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>For each <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> <var>m</var> of <var>stack</var>, do<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>m</var>.[[Status]] is <emu-const>evaluating</emu-const>.</li><li>Set <var>m</var>.[[Status]] to <emu-const>evaluated</emu-const>.</li><li>Set <var>m</var>.[[EvaluationError]] to <var>result</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>evaluated</emu-const> and <var>module</var>.[[EvaluationError]] is <var>result</var>.</li><li>Return <var>result</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>evaluated</emu-const> and <var>module</var>.[[EvaluationError]] is <emu-val>undefined</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>stack</var> is empty.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n\n          <div id=\"excluded-sec-innermoduleevaluation\"><h1><span class=\"secnum\">16.2.1.9.2.1</span>#sec-innermoduleevaluation InnerModuleEvaluation ( module, stack, index )</h1>...</div></emu-clause>\n\n        "}, "sec-for-statement": {"num": "14.7.4", "title": "#sec-for-statement The for Statement", "html": "<emu-clause id=\"sec-for-statement\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-for-statement\">#sec-for-statement</span> The <code>for</code> Statement</h1>\n\n      <div id=\"excluded-sec-for-statement-static-semantics-early-errors\"><h1><span class=\"secnum\">14.7.4.1</span>#sec-for-statement-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-forbodyevaluation\"><h1><span class=\"secnum\">14.7.4.2</span>#sec-forbodyevaluation ForBodyEvaluation ( test, increment, stmt, perIterationBindings, labelSet )</h1>...</div><div id=\"excluded-sec-createperiterationenvironment\"><h1><span class=\"secnum\">14.7.4.3</span>#sec-createperiterationenvironment CreatePerIterationEnvironment ( perIterationBindings )</h1>...</div></emu-clause>\n\n    "}, "sec-continue-statement": {"num": "14.8", "title": "#sec-continue-statement The continue Statement", "html": "<emu-clause id=\"sec-continue-statement\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-continue-statement\">#sec-continue-statement</span> The <code>continue</code> Statement</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"ContinueStatement\" params=\"Yield, Await\" id=\"prod-ContinueStatement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ContinueStatement\">ContinueStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e903cf81\">\n        <emu-t>continue</emu-t>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"14858b1f\">\n        <emu-t>continue</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>;</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n\n    <div id=\"excluded-sec-continue-statement-static-semantics-early-errors\"><h1><span class=\"secnum\">14.8.1</span>#sec-continue-statement-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-continue-statement-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.8.2</span>#sec-continue-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-initializers-in-forin-statement-heads": {"num": "B.3.6", "title": "#sec-initializers-in-forin-statement-heads Initializers in ForIn Statement Heads", "html": "<emu-annex id=\"sec-initializers-in-forin-statement-heads\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-initializers-in-forin-statement-heads\">#sec-initializers-in-forin-statement-heads</span> Initializers in ForIn Statement Heads</h1>\n      <p>The following augments the <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> production in <emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>:</p>\n      <emu-grammar type=\"definition\"><emu-production name=\"IterationStatement\" params=\"Yield, Await, Return\" id=\"prod-annexB-IterationStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a2e02ff2\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"~In, ?Yield, ?Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[~In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <p>This production only applies when parsing <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>.</p>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-containsduplicatelabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-containsduplicatelabels\">#sec-static-semantics-containsduplicatelabels</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsDuplicateLabels\"><a href=\"#sec-static-semantics-containsduplicatelabels\">ContainsDuplicateLabels</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-containsundefinedbreaktarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-containsundefinedbreaktarget\">#sec-static-semantics-containsundefinedbreaktarget</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedBreakTarget\"><a href=\"#sec-static-semantics-containsundefinedbreaktarget\">ContainsUndefinedBreakTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-containsundefinedcontinuetarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-containsundefinedcontinuetarget\">#sec-static-semantics-containsundefinedcontinuetarget</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"ContainsUndefinedContinueTarget\"><a href=\"#sec-static-semantics-containsundefinedcontinuetarget\">ContainsUndefinedContinueTarget</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> with arguments <var>iterationSet</var> and &#171; &#187;.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of IsDestructuring in <emu-xref href=\"#sec-for-in-and-for-of-statements-static-semantics-isdestructuring\"><a href=\"#sec-for-in-and-for-of-statements-static-semantics-isdestructuring\" class=\"excluded-xref\" excluded-id=\"sec-for-in-and-for-of-statements-static-semantics-isdestructuring\">#sec-for-in-and-for-of-statements-static-semantics-isdestructuring</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"BindingIdentifier\">\n    <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"06b6ace8\"><emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"857d4354\"><emu-t>await</emu-t></emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-vardeclarednames\"><a href=\"#sec-static-semantics-vardeclarednames\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-vardeclarednames\">#sec-static-semantics-vardeclarednames</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>names</var> be the <emu-xref aoid=\"BoundNames\"><a href=\"#sec-static-semantics-boundnames\">BoundNames</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the <emu-xref aoid=\"VarDeclaredNames\"><a href=\"#sec-static-semantics-vardeclarednames\">VarDeclaredNames</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>names</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> of <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> in <emu-xref href=\"#sec-static-semantics-varscopeddeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\" class=\"excluded-xref\" excluded-id=\"sec-static-semantics-varscopeddeclarations\">#sec-static-semantics-varscopeddeclarations</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>declarations</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose sole element is <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the <emu-xref aoid=\"VarScopedDeclarations\"><a href=\"#sec-static-semantics-varscopeddeclarations\">VarScopedDeclarations</a></emu-xref> of <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>.</li><li>Return <var>declarations</var>.</li></ol></emu-alg>\n      <p>The <emu-xref href=\"#sec-runtime-semantics\"><a href=\"#sec-runtime-semantics\">runtime semantics</a></emu-xref> of <emu-xref aoid=\"LoopEvaluation\"><a href=\"#sec-runtime-semantics-loopevaluation\">LoopEvaluation</a></emu-xref> in <emu-xref href=\"#sec-runtime-semantics-loopevaluation\"><a href=\"#sec-runtime-semantics-loopevaluation\" class=\"excluded-xref\" excluded-id=\"sec-runtime-semantics-loopevaluation\">#sec-runtime-semantics-loopevaluation</a></emu-xref> are augmented with the following:</p>\n      <emu-grammar><emu-production name=\"IterationStatement\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-annexB-IterationStatement\">IterationStatement</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b97d96ca\">\n        <emu-t>for</emu-t>\n        <emu-t>(</emu-t>\n        <emu-t>var</emu-t>\n        <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>\n        <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>\n        <emu-t>in</emu-t>\n        <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>bindingId</var> be <emu-xref aoid=\"StringValue\"><a href=\"#sec-static-semantics-stringvalue\">StringValue</a></emu-xref> of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be ?&#160;<emu-xref aoid=\"ResolveBinding\"><a href=\"#sec-resolvebinding\">ResolveBinding</a></emu-xref>(<var>bindingId</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be NamedEvaluation of <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> with argument <var>bindingId</var>.</li></ol></li><li>Else,<ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rhs</var>).</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lhs</var>, <var>value</var>).</li><li>Let <var>keyResult</var> be ? <emu-xref aoid=\"ForIn/OfHeadEvaluation\"><a href=\"#sec-runtime-semantics-forinofheadevaluation\">ForIn/OfHeadEvaluation</a></emu-xref>(&#171; &#187;, <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>, <emu-const>enumerate</emu-const>).</li><li>Return ? <emu-xref aoid=\"ForIn/OfBodyEvaluation\"><a href=\"#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset\">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>, <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>enumerate</emu-const>, <emu-const>varBinding</emu-const>, <var>labelSet</var>).</li></ol></emu-alg>\n    </emu-annex>\n\n    "}, "sec-with-statement": {"num": "14.11", "title": "#sec-with-statement The with Statement", "html": "<emu-clause id=\"sec-with-statement\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-with-statement\">#sec-with-statement</span> The <code>with</code> Statement</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"WithStatement\" params=\"Yield, Await, Return\" id=\"prod-WithStatement\">\n    <emu-nt params=\"Yield, Await, Return\"><a href=\"#prod-WithStatement\">WithStatement</a><emu-mods><emu-params>[Yield, Await, Return]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2ceedb70\">\n        <emu-t>with</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-nt params=\"?Yield, ?Await, ?Return\"><a href=\"#prod-Statement\">Statement</a><emu-mods><emu-params>[?Yield, ?Await, ?Return]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>The <code>with</code> statement adds an <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> for a computed object to the lexical environment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>. It then executes a statement using this augmented lexical environment. Finally, it restores the original lexical environment.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-with-statement-static-semantics-early-errors\"><h1><span class=\"secnum\">14.11.1</span>#sec-with-statement-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-with-statement-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.11.2</span>#sec-with-statement-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-syntax-directed-operations-labels": {"num": "8.2", "title": "#sec-syntax-directed-operations-labels Labels", "html": "<emu-clause id=\"sec-syntax-directed-operations-labels\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-syntax-directed-operations-labels\">#sec-syntax-directed-operations-labels</span> Labels</h1>\n\n    <div id=\"excluded-sec-static-semantics-containsduplicatelabels\"><h1><span class=\"secnum\">8.2.1</span>#sec-static-semantics-containsduplicatelabels Static Semantics: ContainsDuplicateLabels</h1>...</div><div id=\"excluded-sec-static-semantics-containsundefinedbreaktarget\"><h1><span class=\"secnum\">8.2.2</span>#sec-static-semantics-containsundefinedbreaktarget Static Semantics: ContainsUndefinedBreakTarget</h1>...</div><div id=\"excluded-sec-static-semantics-containsundefinedcontinuetarget\"><h1><span class=\"secnum\">8.2.3</span>#sec-static-semantics-containsundefinedcontinuetarget Static Semantics: ContainsUndefinedContinueTarget</h1>...</div></emu-clause>\n\n  "}, "sec-source-text-module-records": {"num": "16.2.1.10", "title": "#sec-source-text-module-records Source Text Module Records", "html": "<emu-clause id=\"sec-source-text-module-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-source-text-module-records\">#sec-source-text-module-records</span> Source Text Module Records</h1>\n\n        <p>A <dfn id=\"sourctextmodule-record\">Source Text Module Record</dfn> is used to represent information about a module that was defined from ECMAScript source text (<emu-xref href=\"#sec-ecmascript-language-source-code\"><a href=\"#sec-ecmascript-language-source-code\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-source-code\">#sec-ecmascript-language-source-code</a></emu-xref>) that was parsed using the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. Its fields contain digested information about the names that are imported by the module and its concrete methods use this digest to link, link, and evaluate the module.</p>\n\n        <p>A <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> can exist in a module graph with other subclasses of the abstract <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> type, and can participate in cycles with other subclasses of the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> type.</p>\n\n        <p>In addition to the fields defined in <emu-xref href=\"#table-cyclic-module-fields\"><a href=\"#table-cyclic-module-fields\" class=\"excluded-xref\" excluded-id=\"table-cyclic-module-fields\">#table-cyclic-module-fields</a></emu-xref>, Source Text Module Records have the additional fields listed in <emu-xref href=\"#table-additional-fields-of-source-text-module-records\"><a href=\"#table-additional-fields-of-source-text-module-records\" class=\"excluded-xref\" excluded-id=\"table-additional-fields-of-source-text-module-records\">#table-additional-fields-of-source-text-module-records</a></emu-xref>. Each of these fields is initially set in <emu-xref aoid=\"ParseModule\"><a href=\"#sec-parsemodule\">ParseModule</a></emu-xref>.</p>\n        <emu-table id=\"table-additional-fields-of-source-text-module-records\" caption=\"Additional Fields of Source Text Module Records\" oldids=\"table-38\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-additional-fields-of-source-text-module-records\">#table-additional-fields-of-source-text-module-records</span>: Additional Fields of Source Text Module Records</figcaption><span id=\"table-38\"></span>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              </th>\n              <th>\n                Value Type\n              </th>\n              <th>\n                Meaning\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[ECMAScriptCode]]\n              </td>\n              <td>\n                a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n              </td>\n              <td>\n                The result of parsing the source text of this module using <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Context]]\n              </td>\n              <td>\n                An ECMAScript <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n              </td>\n              <td>\n                The <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> associated with this module.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ImportMeta]]\n              </td>\n              <td>\n                Object\n              </td>\n              <td>\n                An object exposed through the <code>import.meta</code> meta property. It is <emu-const>empty</emu-const> until it is accessed by ECMAScript code.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ImportEntries]]\n              </td>\n              <td>\n                <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ImportEntry Records\n              </td>\n              <td>\n                A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ImportEntry records derived from the code of this module.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[LocalExportEntries]]\n              </td>\n              <td>\n                <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry Records\n              </td>\n              <td>\n                A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry records derived from the code of this module that correspond to declarations that occur within the module.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[IndirectExportEntries]]\n              </td>\n              <td>\n                <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry Records\n              </td>\n              <td>\n                A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry records derived from the code of this module that correspond to reexported imports that occur within the module or exports from <code>export * as namespace</code> declarations.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[StarExportEntries]]\n              </td>\n              <td>\n                <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry Records\n              </td>\n              <td>\n                A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ExportEntry records derived from the code of this module that correspond to <code>export *</code> declarations that occur within the module, not including <code>export * as namespace</code> declarations.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>An <dfn id=\"importentry-record\">ImportEntry Record</dfn> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> that digests information about a single declarative import. Each <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> has the fields defined in <emu-xref href=\"#table-importentry-record-fields\"><a href=\"#table-importentry-record-fields\" class=\"excluded-xref\" excluded-id=\"table-importentry-record-fields\">#table-importentry-record-fields</a></emu-xref>:</p>\n        <emu-table id=\"table-importentry-record-fields\" caption=\"ImportEntry Record Fields\" oldids=\"table-39\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-importentry-record-fields\">#table-importentry-record-fields</span>: <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> Fields</figcaption><span id=\"table-39\"></span>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              </th>\n              <th>\n                Value Type\n              </th>\n              <th>\n                Meaning\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[ModuleRequest]]\n              </td>\n              <td>\n                String\n              </td>\n              <td>\n                String value of the <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> of the <emu-nt><a href=\"#prod-ImportDeclaration\">ImportDeclaration</a></emu-nt>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ImportName]]\n              </td>\n              <td>\n                String\n              </td>\n              <td>\n                The name under which the desired binding is exported by the module identified by [[ModuleRequest]]. The value <emu-val>\"*\"</emu-val> indicates that the import request is for the target module's namespace object.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[LocalName]]\n              </td>\n              <td>\n                String\n              </td>\n              <td>\n                The name that is used to locally access the imported value from within the importing module.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p><emu-xref href=\"#table-import-forms-mapping-to-importentry-records\"><a href=\"#table-import-forms-mapping-to-importentry-records\" class=\"excluded-xref\" excluded-id=\"table-import-forms-mapping-to-importentry-records\">#table-import-forms-mapping-to-importentry-records</a></emu-xref> gives examples of ImportEntry records fields used to represent the syntactic import forms:</p>\n          <emu-table id=\"table-import-forms-mapping-to-importentry-records\" caption=\"Import Forms Mappings to ImportEntry Records\" informative=\"\" oldids=\"table-40\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-import-forms-mapping-to-importentry-records\">#table-import-forms-mapping-to-importentry-records</span> (Informative): Import Forms Mappings to ImportEntry Records</figcaption><span id=\"table-40\"></span>\n            <table>\n              <tbody>\n              <tr>\n                <th>\n                  Import Statement Form\n                </th>\n                <th>\n                  [[ModuleRequest]]\n                </th>\n                <th>\n                  [[ImportName]]\n                </th>\n                <th>\n                  [[LocalName]]\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  <code>import v from \"mod\";</code>\n                </td>\n                <td>\n                  <emu-val>\"mod\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"default\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"v\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>import * as ns from \"mod\";</code>\n                </td>\n                <td>\n                  <emu-val>\"mod\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"*\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"ns\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>import {x} from \"mod\";</code>\n                </td>\n                <td>\n                  <emu-val>\"mod\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>import {x as v} from \"mod\";</code>\n                </td>\n                <td>\n                  <emu-val>\"mod\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"v\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>import \"mod\";</code>\n                </td>\n                <td colspan=\"3\">\n                  An <emu-xref href=\"#importentry-record\"><a href=\"#importentry-record\">ImportEntry Record</a></emu-xref> is not created.\n                </td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </div></emu-note>\n        <p>An <dfn id=\"exportentry-record\">ExportEntry Record</dfn> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> that digests information about a single declarative export. Each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> has the fields defined in <emu-xref href=\"#table-exportentry-records\"><a href=\"#table-exportentry-records\" class=\"excluded-xref\" excluded-id=\"table-exportentry-records\">#table-exportentry-records</a></emu-xref>:</p>\n        <emu-table id=\"table-exportentry-records\" caption=\"ExportEntry Record Fields\" oldids=\"table-41\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-exportentry-records\">#table-exportentry-records</span>: <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> Fields</figcaption><span id=\"table-41\"></span>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              </th>\n              <th>\n                Value Type\n              </th>\n              <th>\n                Meaning\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[ExportName]]\n              </td>\n              <td>\n                String | null\n              </td>\n              <td>\n                The name used to export this binding by this module.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ModuleRequest]]\n              </td>\n              <td>\n                String | null\n              </td>\n              <td>\n                The String value of the <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> of the <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt>. <emu-val>null</emu-val> if the <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> does not have a <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ImportName]]\n              </td>\n              <td>\n                String | null\n              </td>\n              <td>\n                The name under which the desired binding is exported by the module identified by [[ModuleRequest]]. <emu-val>null</emu-val> if the <emu-nt><a href=\"#prod-ExportDeclaration\">ExportDeclaration</a></emu-nt> does not have a <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt>. <emu-val>\"*\"</emu-val> indicates that the export request is for all exported bindings.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[LocalName]]\n              </td>\n              <td>\n                String | null\n              </td>\n              <td>\n                The name that is used to locally access the exported value from within the importing module. <emu-val>null</emu-val> if the exported value is not locally accessible from within the module.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p><emu-xref href=\"#table-export-forms-mapping-to-exportentry-records\"><a href=\"#table-export-forms-mapping-to-exportentry-records\" class=\"excluded-xref\" excluded-id=\"table-export-forms-mapping-to-exportentry-records\">#table-export-forms-mapping-to-exportentry-records</a></emu-xref> gives examples of the ExportEntry record fields used to represent the syntactic export forms:</p>\n          <emu-table id=\"table-export-forms-mapping-to-exportentry-records\" caption=\"Export Forms Mappings to ExportEntry Records\" informative=\"\" oldids=\"table-42\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-export-forms-mapping-to-exportentry-records\">#table-export-forms-mapping-to-exportentry-records</span> (Informative): Export Forms Mappings to ExportEntry Records</figcaption><span id=\"table-42\"></span>\n            <table>\n              <tbody>\n              <tr>\n                <th>\n                  Export Statement Form\n                </th>\n                <th>\n                  [[ExportName]]\n                </th>\n                <th>\n                  [[ModuleRequest]]\n                </th>\n                <th>\n                  [[ImportName]]\n                </th>\n                <th>\n                  [[LocalName]]\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  <code>export var v;</code>\n                </td>\n                <td>\n                  <emu-val>\"v\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"v\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export default function f() {}</code>\n                </td>\n                <td>\n                  <emu-val>\"default\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"f\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export default function () {}</code>\n                </td>\n                <td>\n                  <emu-val>\"default\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"*default*\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export default 42;</code>\n                </td>\n                <td>\n                  <emu-val>\"default\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"*default*\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export {x};</code>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export {v as x};</code>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"v\"</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export {x} from \"mod\";</code>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"mod\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export {v as x} from \"mod\";</code>\n                </td>\n                <td>\n                  <emu-val>\"x\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"mod\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"v\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export * from \"mod\";</code>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"mod\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"*\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <code>export * as ns from \"mod\";</code>\n                </td>\n                <td>\n                  <emu-val>\"ns\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"mod\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>\"*\"</emu-val>\n                </td>\n                <td>\n                  <emu-val>null</emu-val>\n                </td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </div></emu-note>\n        <p>The following definitions specify the required concrete methods and other <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> for Source Text Module Records</p>\n\n        <div id=\"excluded-sec-parsemodule\"><h1><span class=\"secnum\">16.2.1.10.1</span>#sec-parsemodule ParseModule ( sourceText, realm, hostDefined )</h1>...</div><div id=\"excluded-sec-getexportednames\"><h1><span class=\"secnum\">16.2.1.10.2</span>#sec-getexportednames GetExportedNames ( [ exportStarSet ] ) Concrete Method</h1>...</div><div id=\"excluded-sec-resolveexport\"><h1><span class=\"secnum\">16.2.1.10.3</span>#sec-resolveexport ResolveExport ( exportName [ , resolveSet ] ) Concrete Method</h1>...</div><div id=\"excluded-sec-source-text-module-record-initialize-environment\"><h1><span class=\"secnum\">16.2.1.10.4</span>#sec-source-text-module-record-initialize-environment InitializeEnvironment ( ) Concrete Method</h1>...</div><div id=\"excluded-sec-source-text-module-record-execute-module\"><h1><span class=\"secnum\">16.2.1.10.5</span>#sec-source-text-module-record-execute-module ExecuteModule ( ) Concrete Method</h1>...</div></emu-clause>\n\n      "}}, "figData": {"table-module-record-fields": "Table 40", "table-abstract-methods-of-module-records": "Table 41", "table-cyclic-module-fields": "Table 42", "table-cyclic-module-methods": "Table 43", "table-additional-fields-of-source-text-module-records": "Table 44", "table-importentry-record-fields": "Table 45", "table-import-forms-mapping-to-importentry-records": "Table 46", "table-exportentry-records": "Table 47", "table-export-forms-mapping-to-exportentry-records": "Table 48"}}}