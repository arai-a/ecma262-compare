{"from": {"secList": ["sec-candidate-executions", "sec-example-cyclic-module-record-graphs", "sec-cyclic-module-records", "sec-memory-model-fundamentals", "sec-IsHTMLDDA-internal-slot-typeof", "sec-chosen-value-records", "sec-reference-record-specification-type", "sec-assignment-operators-runtime-semantics-evaluation", "sec-agent-event-records", "sec-tobigint", "sec-applystringornumericbinaryoperator", "sec-agents", "sec-expanded-years", "sec-jobcallback-records"], "secData": {"sec-candidate-executions": {"num": "29.4", "title": "#sec-candidate-executions Candidate Executions", "html": "<emu-clause id=\"sec-candidate-executions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-candidate-executions\">#sec-candidate-executions</span> Candidate Executions</h1>\n    <p>A <dfn variants=\"candidate executions\">candidate execution</dfn> of the evaluation of an <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> with the following fields.</p>\n    <emu-table id=\"table-candidate-execution-records\" caption=\"Candidate Execution Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-candidate-execution-records\">#table-candidate-execution-records</span>: Candidate Execution <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> Fields</figcaption>\n      <table>\n        <tbody>\n          <tr>\n            <th>Field Name</th>\n            <th>Value</th>\n            <th>Meaning</th>\n          </tr>\n          <tr>\n            <td>[[EventsRecords]]</td>\n            <td>A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-agent-event-records\"><a href=\"#sec-agent-event-records\">Agent Events Records</a></emu-xref>.</td>\n            <td>Maps an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> to <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Lists</a></emu-xref> of events appended during the evaluation.</td>\n          </tr>\n          <tr>\n            <td>[[ChosenValues]]</td>\n            <td>A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-chosen-value-records\"><a href=\"#sec-chosen-value-records\">Chosen Value Records</a></emu-xref>.</td>\n            <td>Maps <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> events to the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">byte values</a></emu-xref> chosen during the evaluation.</td>\n          </tr>\n          <tr>\n            <td>[[AgentOrder]]</td>\n            <td>An <emu-xref aoid=\"agent-order\"><a href=\"#sec-agent-order\">agent-order</a></emu-xref> <emu-xref href=\"#sec-set-and-relation-specification-type\"><a href=\"#sec-set-and-relation-specification-type\">Relation</a></emu-xref>.</td>\n            <td>Defined below.</td>\n          </tr>\n          <tr>\n            <td>[[ReadsBytesFrom]]</td>\n            <td>A <emu-xref aoid=\"reads-bytes-from\"><a href=\"#sec-reads-bytes-from\">reads-bytes-from</a></emu-xref> mathematical function.</td>\n            <td>Defined below.</td>\n          </tr>\n          <tr>\n            <td>[[ReadsFrom]]</td>\n            <td>A <emu-xref aoid=\"reads-from\"><a href=\"#sec-reads-from\">reads-from</a></emu-xref> <emu-xref href=\"#sec-set-and-relation-specification-type\"><a href=\"#sec-set-and-relation-specification-type\">Relation</a></emu-xref>.</td>\n            <td>Defined below.</td>\n          </tr>\n          <tr>\n            <td>[[HostSynchronizesWith]]</td>\n            <td>A <emu-xref aoid=\"host-synchronizes-with\"><a href=\"#sec-host-synchronizes-with\">host-synchronizes-with</a></emu-xref> <emu-xref href=\"#sec-set-and-relation-specification-type\"><a href=\"#sec-set-and-relation-specification-type\">Relation</a></emu-xref>.</td>\n            <td>Defined below.</td>\n          </tr>\n          <tr>\n            <td>[[SynchronizesWith]]</td>\n            <td>A <emu-xref aoid=\"synchronizes-with\"><a href=\"#sec-synchronizes-with\">synchronizes-with</a></emu-xref> <emu-xref href=\"#sec-set-and-relation-specification-type\"><a href=\"#sec-set-and-relation-specification-type\">Relation</a></emu-xref>.</td>\n            <td>Defined below.</td>\n          </tr>\n          <tr>\n            <td>[[HappensBefore]]</td>\n            <td>A <emu-xref aoid=\"happens-before\"><a href=\"#sec-happens-before\">happens-before</a></emu-xref> <emu-xref href=\"#sec-set-and-relation-specification-type\"><a href=\"#sec-set-and-relation-specification-type\">Relation</a></emu-xref>.</td>\n            <td>Defined below.</td>\n          </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <p>An <dfn variants=\"empty candidate executions\">empty candidate execution</dfn> is a candidate execution <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> whose fields are empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Lists</a></emu-xref> and Relations.</p>\n  </emu-clause>\n\n  "}, "sec-example-cyclic-module-record-graphs": {"num": "16.2.1.5.3", "title": "#sec-example-cyclic-module-record-graphs Example Cyclic Module Record Graphs", "html": "<emu-clause id=\"sec-example-cyclic-module-record-graphs\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-example-cyclic-module-record-graphs\">#sec-example-cyclic-module-record-graphs</span> Example Cyclic Module Record Graphs</h1>\n\n          <p>This non-normative section gives a series of examples of the linking and evaluation of a few common module graphs, with a specific focus on how errors can occur.</p>\n\n          <p>First consider the following simple module graph:</p>\n\n          <emu-figure id=\"figure-module-graph-simple\" caption=\"A simple module graph\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-simple\">#figure-module-graph-simple</span>: A simple module graph</figcaption>\n            <img alt=\"A module graph in which module A depends on module B, and module B depends on module C\" width=\"121\" height=\"211\" src=\"img/module-graph-simple.svg\">\n          </figure></emu-figure>\n\n          <p>Let's first assume that there are no error conditions. When a <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> first calls <var>A</var>.Link(), this will complete successfully by assumption, and recursively link modules <var>B</var> and <var>C</var> as well, such that <var>A</var>.[[Status]] = <var>B</var>.[[Status]] = <var>C</var>.[[Status]] = <emu-const>linked</emu-const>. This preparatory step can be performed at any time. Later, when the <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> is ready to incur any possible side effects of the modules, it can call <var>A</var>.Evaluate(), which will complete successfully, returning a Promise resolving to <emu-val>undefined</emu-val> (again by assumption), recursively having evaluated first <var>C</var> and then <var>B</var>. Each module's [[Status]] at this point will be <emu-const>evaluated</emu-const>.</p>\n          <p>Consider then cases involving linking errors. If <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> of <var>C</var> succeeds but, thereafter, fails for <var>B</var>, for example because it imports something that <var>C</var> does not provide, then the original <var>A</var>.Link() will fail, and both <var>A</var> and <var>B</var>'s [[Status]] remain <emu-const>unlinked</emu-const>. <var>C</var>'s [[Status]] has become <emu-const>linked</emu-const>, though.</p>\n\n          <p>Finally, consider a case involving evaluation errors. If <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> of <var>C</var> succeeds but, thereafter, fails for <var>B</var>, for example because <var>B</var> contains code that throws an exception, then the original <var>A</var>.Evaluate() will fail, returning a rejected Promise. The resulting exception will be recorded in both <var>A</var> and <var>B</var>'s [[EvaluationError]] fields, and their [[Status]] will become <emu-const>evaluated</emu-const>. <var>C</var> will also become <emu-const>evaluated</emu-const> but, in contrast to <var>A</var> and <var>B</var>, will remain without an [[EvaluationError]], as it successfully completed evaluation. Storing the exception ensures that any time a <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> tries to reuse <var>A</var> or <var>B</var> by calling their Evaluate() method, it will encounter the same exception. (<emu-xref href=\"#host\"><a href=\"#host\">Hosts</a></emu-xref> are not required to reuse <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Records</a></emu-xref>; similarly, <emu-xref href=\"#host\"><a href=\"#host\">hosts</a></emu-xref> are not required to expose the exception objects thrown by these methods. However, the specification enables such uses.)</p>\n\n          <p>The difference here between linking and evaluation errors is due to how evaluation must be only performed once, as it can cause side effects; it is thus important to remember whether evaluation has already been performed, even if unsuccessfully. (In the error case, it makes sense to also remember the exception because otherwise subsequent Evaluate() calls would have to synthesize a new one.) Linking, on the other hand, is side-effect-free, and thus even if it fails, it can be retried at a later time with no issues.</p>\n\n          <p>Now consider a different type of error condition:</p>\n\n          <emu-figure id=\"figure-module-graph-missing\" caption=\"A module graph with an unresolvable module\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-missing\">#figure-module-graph-missing</span>: A module graph with an unresolvable module</figcaption>\n            <img alt=\"A module graph in which module A depends on a missing (unresolvable) module, represented by ???\" width=\"121\" height=\"121\" src=\"img/module-graph-missing.svg\">\n          </figure></emu-figure>\n\n          <p>In this scenario, module <var>A</var> declares a dependency on some other module, but no <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> exists for that module, i.e. <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> throws an exception when asked for it. This could occur for a variety of reasons, such as the corresponding resource not existing, or the resource existing but <emu-xref aoid=\"ParseModule\"><a href=\"#sec-parsemodule\">ParseModule</a></emu-xref> throwing an exception when trying to parse the resulting source text. <emu-xref href=\"#host\"><a href=\"#host\">Hosts</a></emu-xref> can choose to expose the cause of failure via the exception they throw from <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>. In any case, this exception causes a linking failure, which as before results in <var>A</var>'s [[Status]] remaining <emu-const>unlinked</emu-const>.</p>\n\n          <p>Now, consider a module graph with a cycle:</p>\n\n          <emu-figure id=\"figure-module-graph-cycle\" caption=\"A cyclic module graph\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-cycle\">#figure-module-graph-cycle</span>: A cyclic module graph</figcaption>\n            <img alt=\"A module graph in which module A depends on module B and C, but module B also depends on module A\" width=\"181\" height=\"121\" src=\"img/module-graph-cycle.svg\">\n          </figure></emu-figure>\n\n          <p>Here we assume that the entry point is module <var>A</var>, so that the <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> proceeds by calling <var>A</var>.Link(), which performs <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>. This in turn calls <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>B</var>. Because of the cycle, this again triggers <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>, but at this point it is a no-op since <var>A</var>.[[Status]] is already <emu-const>linking</emu-const>. <var>B</var>.[[Status]] itself remains <emu-const>linking</emu-const> when control gets back to <var>A</var> and <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> is triggered on <var>C</var>. After this returns with <var>C</var>.[[Status]] being <emu-const>linked</emu-const>, both <var>A</var> and <var>B</var> transition from <emu-const>linking</emu-const> to <emu-const>linked</emu-const> together; this is by design, since they form a strongly connected component.</p>\n\n          <p>An analogous story occurs for the evaluation phase of a cyclic module graph, in the success case.</p>\n\n          <p>Now consider a case where <var>A</var> has an linking error; for example, it tries to import a binding from <var>C</var> that does not exist. In that case, the above steps still occur, including the early return from the second call to <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>. However, once we unwind back to the original <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>, it fails during InitializeEnvironment, namely right after <var>C</var>.ResolveExport(). The thrown <emu-val>SyntaxError</emu-val> exception propagates up to <var>A</var>.Link, which resets all modules that are currently on its <var>stack</var> (these are always exactly the modules that are still <emu-const>linking</emu-const>). Hence both <var>A</var> and <var>B</var> become <emu-const>unlinked</emu-const>. Note that <var>C</var> is left as <emu-const>linked</emu-const>.</p>\n\n          <p>Alternatively, consider a case where <var>A</var> has an evaluation error; for example, its source code throws an exception. In that case, the evaluation-time analog of the above steps still occurs, including the early return from the second call to <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>A</var>. However, once we unwind back to the original <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>A</var>, it fails by assumption. The exception thrown propagates up to <var>A</var>.Evaluate(), which records the error in all modules that are currently on its <var>stack</var> (i.e., the modules that are still <emu-const>evaluating</emu-const>) as well as via [[AsyncParentModules]], which form a chain for modules which contain or depend on top-level <code>await</code> through the whole dependency graph through the <emu-xref aoid=\"AsyncModuleExecutionRejected\"><a href=\"#sec-async-module-execution-rejected\">AsyncModuleExecutionRejected</a></emu-xref> algorithm. Hence both <var>A</var> and <var>B</var> become <emu-const>evaluated</emu-const> and the exception is recorded in both <var>A</var> and <var>B</var>'s [[EvaluationError]] fields, while <var>C</var> is left as <emu-const>evaluated</emu-const> with no [[EvaluationError]].</p>\n\n          <p>Lastly, consider a module graph with a cycle, where all modules complete asynchronously:</p>\n          <emu-figure id=\"figure-module-graph-cycle-async\" caption=\"An asynchronous cyclic module graph\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-cycle-async\">#figure-module-graph-cycle-async</span>: An asynchronous cyclic module graph</figcaption>\n            <img alt=\"A module graph in which module A depends on module B and C, module B depends on module D, module C depends on module D and E, and module D depends on module A\" width=\"241\" height=\"211\" src=\"img/module-graph-cycle-async.svg\">\n          </figure></emu-figure>\n          <p>Linking happens as before, and all modules end up with [[Status]] set to <emu-const>linked</emu-const>.</p>\n\n          <p>Calling <var>A</var>.Evaluate() calls <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>A</var>, <var>B</var>, and <var>D</var>, which all transition to <emu-const>evaluating</emu-const>. Then <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> is called on <var>A</var> again, which is a no-op because it is already <emu-const>evaluating</emu-const>. At this point, <var>D</var>.[[PendingAsyncDependencies]] is 0, so <emu-xref aoid=\"ExecuteAsyncModule\"><a href=\"#sec-execute-async-module\">ExecuteAsyncModule</a></emu-xref>(<var>D</var>) is called and we call <var>D</var>.ExecuteModule with a new PromiseCapability tracking the asynchronous execution of <var>D</var>. We unwind back to the <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>B</var>, setting <var>B</var>.[[PendingAsyncDependencies]] to 1 and <var>B</var>.[[AsyncEvaluation]] to <emu-val>true</emu-val>. We unwind back to the original <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>A</var>, setting <var>A</var>.[[PendingAsyncDependencies]] to 1. In the next iteration of the loop over <var>A</var>'s dependencies, we call <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>C</var> and thus on <var>D</var> (again a no-op) and <var>E</var>. As <var>E</var> has no dependencies and is not part of a cycle, we call <emu-xref aoid=\"ExecuteAsyncModule\"><a href=\"#sec-execute-async-module\">ExecuteAsyncModule</a></emu-xref>(<var>E</var>) in the same manner as <var>D</var> and <var>E</var> is immediately removed from the stack. We unwind once more to the original <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>A</var>, setting <var>C</var>.[[AsyncEvaluation]] to <emu-val>true</emu-val>. Now we finish the loop over <var>A</var>'s dependencies, set <var>A</var>.[[AsyncEvaluation]] to <emu-val>true</emu-val>, and remove the entire strongly connected component from the stack, transitioning all of the modules to <emu-const>evaluating-async</emu-const> at once. At this point, the fields of the modules are as given in <emu-xref href=\"#table-module-graph-cycle-async-fields-1\"><a href=\"#table-module-graph-cycle-async-fields-1\" class=\"excluded-xref\" excluded-id=\"table-module-graph-cycle-async-fields-1\">#table-module-graph-cycle-async-fields-1</a></emu-xref>.</p>\n\n          <emu-table id=\"table-module-graph-cycle-async-fields-1\" class=\"module-overflow\" caption=\"Module fields after the initial Evaluate() call\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-module-graph-cycle-async-fields-1\">#table-module-graph-cycle-async-fields-1</span>: Module fields after the initial Evaluate() call</figcaption>\n            <table>\n              <thead>\n                <tr>\n                  <th>Module</th>\n                  <th>[[DFSIndex]]</th>\n                  <th>[[DFSAncestorIndex]]</th>\n                  <th>[[Status]]</th>\n                  <th>[[AsyncEvaluation]]</th>\n                  <th>[[AsyncParentModules]]</th>\n                  <th>[[PendingAsyncDependencies]]</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <th><var>A</var></th>\n                  <td>0</td>\n                  <td>0</td>\n                  <td><emu-const>evaluating-async</emu-const></td>\n                  <td><emu-val>true</emu-val></td>\n                  <td>&#171; &#187;</td>\n                  <td>2 (<var>B</var> and <var>C</var>)</td>\n                </tr>\n                <tr>\n                  <th><var>B</var></th>\n                  <td>1</td>\n                  <td>0</td>\n                  <td><emu-const>evaluating-async</emu-const></td>\n                  <td><emu-val>true</emu-val></td>\n                  <td>&#171; <var>A</var> &#187;</td>\n                  <td>1 (<var>D</var>)</td>\n                </tr>\n                <tr>\n                  <th><var>C</var></th>\n                  <td>2</td>\n                  <td>0</td>\n                  <td><emu-const>evaluating-async</emu-const></td>\n                  <td><emu-val>true</emu-val></td>\n                  <td>&#171; <var>A</var> &#187;</td>\n                  <td>2 (<var>D</var> and <var>E</var>)</td>\n                </tr>\n                <tr>\n                  <th><var>D</var></th>\n                  <td>3</td>\n                  <td>0</td>\n                  <td><emu-const>evaluating-async</emu-const></td>\n                  <td><emu-val>true</emu-val></td>\n                  <td>&#171; <var>B</var>, <var>C</var> &#187;</td>\n                  <td>0</td>\n                </tr>\n                <tr>\n                  <th><var>E</var></th>\n                  <td>4</td>\n                  <td>4</td>\n                  <td><emu-const>evaluating-async</emu-const></td>\n                  <td><emu-val>true</emu-val></td>\n                  <td>&#171; <var>C</var> &#187;</td>\n                  <td>0</td>\n                </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n\n          <p>Let us assume that <var>E</var> finishes executing first. When that happens, <emu-xref aoid=\"AsyncModuleExecutionFulfilled\"><a href=\"#sec-async-module-execution-fulfilled\">AsyncModuleExecutionFulfilled</a></emu-xref> is called, <var>E</var>.[[Status]] is set to <emu-const>evaluated</emu-const> and <var>C</var>.[[PendingAsyncDependencies]] is decremented to become 1. The fields of the updated modules are as given in <emu-xref href=\"#table-module-graph-cycle-async-fields-2\"><a href=\"#table-module-graph-cycle-async-fields-2\" class=\"excluded-xref\" excluded-id=\"table-module-graph-cycle-async-fields-2\">#table-module-graph-cycle-async-fields-2</a></emu-xref>.</p>\n\n          <emu-table id=\"table-module-graph-cycle-async-fields-2\" class=\"module-overflow\" caption=\"Module fields after module _E_ finishes executing\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-module-graph-cycle-async-fields-2\">#table-module-graph-cycle-async-fields-2</span>: Module fields after module <var>E</var> finishes executing</figcaption>\n            <table>\n              <thead>\n                <tr>\n                  <th>Module</th>\n                  <th>[[DFSIndex]]</th>\n                  <th>[[DFSAncestorIndex]]</th>\n                  <th>[[Status]]</th>\n                  <th>[[AsyncEvaluation]]</th>\n                  <th>[[AsyncParentModules]]</th>\n                  <th>[[PendingAsyncDependencies]]</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <th><var>C</var></th>\n                  <td>2</td>\n                  <td>0</td>\n                  <td><emu-const>evaluating-async</emu-const></td>\n                  <td><emu-val>true</emu-val></td>\n                  <td>&#171; <var>A</var> &#187;</td>\n                  <td>1 (<var>D</var>)</td>\n                </tr>\n                <tr>\n                  <th><var>E</var></th>\n                  <td>4</td>\n                  <td>4</td>\n                  <td><emu-const>evaluated</emu-const></td>\n                  <td><emu-val>true</emu-val></td>\n                  <td>&#171; <var>C</var> &#187;</td>\n                  <td>0</td>\n                </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n\n          <p><var>D</var> is next to finish (as it was the only module that was still executing). When that happens, <emu-xref aoid=\"AsyncModuleExecutionFulfilled\"><a href=\"#sec-async-module-execution-fulfilled\">AsyncModuleExecutionFulfilled</a></emu-xref> is called again and <var>D</var>.[[Status]] is set to <emu-const>evaluated</emu-const>. Then <var>B</var>.[[PendingAsyncDependencies]] is decremented to become 0, <emu-xref aoid=\"ExecuteAsyncModule\"><a href=\"#sec-execute-async-module\">ExecuteAsyncModule</a></emu-xref> is called on <var>B</var>, and it starts executing. <var>C</var>.[[PendingAsyncDependencies]] is also decremented to become 0, and <var>C</var> starts executing (potentially in parallel to <var>B</var> if <var>B</var> contains an <code>await</code>). The fields of the updated modules are as given in <emu-xref href=\"#table-module-graph-cycle-async-fields-3\"><a href=\"#table-module-graph-cycle-async-fields-3\" class=\"excluded-xref\" excluded-id=\"table-module-graph-cycle-async-fields-3\">#table-module-graph-cycle-async-fields-3</a></emu-xref>.</p>\n\n          <emu-table id=\"table-module-graph-cycle-async-fields-3\" class=\"module-overflow\" caption=\"Module fields after module _D_ finishes executing\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-module-graph-cycle-async-fields-3\">#table-module-graph-cycle-async-fields-3</span>: Module fields after module <var>D</var> finishes executing</figcaption>\n            <table>\n              <thead>\n                <tr>\n                  <th>Module</th>\n                  <th>[[DFSIndex]]</th>\n                  <th>[[DFSAncestorIndex]]</th>\n                  <th>[[Status]]</th>\n                  <th>[[AsyncEvaluation]]</th>\n                  <th>[[AsyncParentModules]]</th>\n                  <th>[[PendingAsyncDependencies]]</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <th><var>B</var></th>\n                  <td>1</td>\n                  <td>0</td>\n                  <td><emu-const>evaluating-async</emu-const></td>\n                  <td><emu-val>true</emu-val></td>\n                  <td>&#171; <var>A</var> &#187;</td>\n                  <td>0</td>\n                </tr>\n                <tr>\n                  <th><var>C</var></th>\n                  <td>2</td>\n                  <td>0</td>\n                  <td><emu-const>evaluating-async</emu-const></td>\n                  <td><emu-val>true</emu-val></td>\n                  <td>&#171; <var>A</var> &#187;</td>\n                  <td>0</td>\n                </tr>\n                <tr>\n                  <th><var>D</var></th>\n                  <td>3</td>\n                  <td>0</td>\n                  <td><emu-const>evaluated</emu-const></td>\n                  <td><emu-val>true</emu-val></td>\n                  <td>&#171; <var>B</var>, <var>C</var> &#187;</td>\n                  <td>0</td>\n                </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n\n          <p>Let us assume that <var>C</var> finishes executing next. When that happens, <emu-xref aoid=\"AsyncModuleExecutionFulfilled\"><a href=\"#sec-async-module-execution-fulfilled\">AsyncModuleExecutionFulfilled</a></emu-xref> is called again, <var>C</var>.[[Status]] is set to <emu-const>evaluated</emu-const> and <var>A</var>.[[PendingAsyncDependencies]] is decremented to become 1. The fields of the updated modules are as given in <emu-xref href=\"#table-module-graph-cycle-async-fields-4\"><a href=\"#table-module-graph-cycle-async-fields-4\" class=\"excluded-xref\" excluded-id=\"table-module-graph-cycle-async-fields-4\">#table-module-graph-cycle-async-fields-4</a></emu-xref>.</p>\n\n          <emu-table id=\"table-module-graph-cycle-async-fields-4\" class=\"module-overflow\" caption=\"Module fields after module _C_ finishes executing\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-module-graph-cycle-async-fields-4\">#table-module-graph-cycle-async-fields-4</span>: Module fields after module <var>C</var> finishes executing</figcaption>\n            <table>\n              <thead>\n                <tr>\n                  <th>Module</th>\n                  <th>[[DFSIndex]]</th>\n                  <th>[[DFSAncestorIndex]]</th>\n                  <th>[[Status]]</th>\n                  <th>[[AsyncEvaluation]]</th>\n                  <th>[[AsyncParentModules]]</th>\n                  <th>[[PendingAsyncDependencies]]</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <th><var>A</var></th>\n                  <td>0</td>\n                  <td>0</td>\n                  <td><emu-const>evaluating-async</emu-const></td>\n                  <td><emu-val>true</emu-val></td>\n                  <td>&#171; &#187;</td>\n                  <td>1 (<var>B</var>)</td>\n                </tr>\n                <tr>\n                  <th><var>C</var></th>\n                  <td>2</td>\n                  <td>0</td>\n                  <td><emu-const>evaluated</emu-const></td>\n                  <td><emu-val>true</emu-val></td>\n                  <td>&#171; <var>A</var> &#187;</td>\n                  <td>0</td>\n                </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n\n          <p>Then, <var>B</var> finishes executing. When that happens, <emu-xref aoid=\"AsyncModuleExecutionFulfilled\"><a href=\"#sec-async-module-execution-fulfilled\">AsyncModuleExecutionFulfilled</a></emu-xref> is called again and <var>B</var>.[[Status]] is set to <emu-const>evaluated</emu-const>. <var>A</var>.[[PendingAsyncDependencies]] is decremented to become 0, so <emu-xref aoid=\"ExecuteAsyncModule\"><a href=\"#sec-execute-async-module\">ExecuteAsyncModule</a></emu-xref> is called and it starts executing. The fields of the updated modules are as given in <emu-xref href=\"#table-module-graph-cycle-async-fields-5\"><a href=\"#table-module-graph-cycle-async-fields-5\" class=\"excluded-xref\" excluded-id=\"table-module-graph-cycle-async-fields-5\">#table-module-graph-cycle-async-fields-5</a></emu-xref>.</p>\n\n          <emu-table id=\"table-module-graph-cycle-async-fields-5\" class=\"module-overflow\" caption=\"Module fields after module _B_ finishes executing\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-module-graph-cycle-async-fields-5\">#table-module-graph-cycle-async-fields-5</span>: Module fields after module <var>B</var> finishes executing</figcaption>\n            <table>\n              <thead>\n                <tr>\n                  <th>Module</th>\n                  <th>[[DFSIndex]]</th>\n                  <th>[[DFSAncestorIndex]]</th>\n                  <th>[[Status]]</th>\n                  <th>[[AsyncEvaluation]]</th>\n                  <th>[[AsyncParentModules]]</th>\n                  <th>[[PendingAsyncDependencies]]</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <th><var>A</var></th>\n                  <td>0</td>\n                  <td>0</td>\n                  <td><emu-const>evaluating-async</emu-const></td>\n                  <td><emu-val>true</emu-val></td>\n                  <td>&#171; &#187;</td>\n                  <td>0</td>\n                </tr>\n                <tr>\n                  <th><var>B</var></th>\n                  <td>1</td>\n                  <td>0</td>\n                  <td><emu-const>evaluated</emu-const></td>\n                  <td><emu-val>true</emu-val></td>\n                  <td>&#171; <var>A</var> &#187;</td>\n                  <td>0</td>\n                </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n\n          <p>Finally, <var>A</var> finishes executing. When that happens, <emu-xref aoid=\"AsyncModuleExecutionFulfilled\"><a href=\"#sec-async-module-execution-fulfilled\">AsyncModuleExecutionFulfilled</a></emu-xref> is called again and <var>A</var>.[[Status]] is set to <emu-const>evaluated</emu-const>. At this point, the Promise in <var>A</var>.[[TopLevelCapability]] (which was returned from <var>A</var>.Evaluate()) is resolved, and this concludes the handling of this module graph. The fields of the updated module are as given in <emu-xref href=\"#table-module-graph-cycle-async-fields-6\"><a href=\"#table-module-graph-cycle-async-fields-6\" class=\"excluded-xref\" excluded-id=\"table-module-graph-cycle-async-fields-6\">#table-module-graph-cycle-async-fields-6</a></emu-xref>.</p>\n\n          <emu-table id=\"table-module-graph-cycle-async-fields-6\" class=\"module-overflow\" caption=\"Module fields after module _A_ finishes executing\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-module-graph-cycle-async-fields-6\">#table-module-graph-cycle-async-fields-6</span>: Module fields after module <var>A</var> finishes executing</figcaption>\n            <table>\n              <thead>\n                <tr>\n                  <th>Module</th>\n                  <th>[[DFSIndex]]</th>\n                  <th>[[DFSAncestorIndex]]</th>\n                  <th>[[Status]]</th>\n                  <th>[[AsyncEvaluation]]</th>\n                  <th>[[AsyncParentModules]]</th>\n                  <th>[[PendingAsyncDependencies]]</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <th><var>A</var></th>\n                  <td>0</td>\n                  <td>0</td>\n                  <td><emu-const>evaluated</emu-const></td>\n                  <td><emu-val>true</emu-val></td>\n                  <td>&#171; &#187;</td>\n                  <td>0</td>\n                </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n\n          <p>Alternatively, consider a failure case where <var>C</var> fails execution and returns an error before <var>B</var> has finished executing. When that happens, <emu-xref aoid=\"AsyncModuleExecutionRejected\"><a href=\"#sec-async-module-execution-rejected\">AsyncModuleExecutionRejected</a></emu-xref> is called, which sets <var>C</var>.[[Status]] to <emu-const>evaluated</emu-const> and <var>C</var>.[[EvaluationError]] to the error. It then propagates this error to all of the AsyncParentModules by performing <emu-xref aoid=\"AsyncModuleExecutionRejected\"><a href=\"#sec-async-module-execution-rejected\">AsyncModuleExecutionRejected</a></emu-xref> on each of them. The fields of the updated modules are as given in <emu-xref href=\"#table-module-graph-cycle-async-fields-7\"><a href=\"#table-module-graph-cycle-async-fields-7\" class=\"excluded-xref\" excluded-id=\"table-module-graph-cycle-async-fields-7\">#table-module-graph-cycle-async-fields-7</a></emu-xref>.</p>\n\n          <emu-table id=\"table-module-graph-cycle-async-fields-7\" class=\"module-overflow\" caption=\"Module fields after module _C_ finishes with an error\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-module-graph-cycle-async-fields-7\">#table-module-graph-cycle-async-fields-7</span>: Module fields after module <var>C</var> finishes with an error</figcaption>\n            <table>\n              <thead>\n                <tr>\n                  <th>Module</th>\n                  <th>[[DFSIndex]]</th>\n                  <th>[[DFSAncestorIndex]]</th>\n                  <th>[[Status]]</th>\n                  <th>[[AsyncEvaluation]]</th>\n                  <th>[[AsyncParentModules]]</th>\n                  <th>[[PendingAsyncDependencies]]</th>\n                  <th>[[EvaluationError]]</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <th><var>A</var></th>\n                  <td>0</td>\n                  <td>0</td>\n                  <td><emu-const>evaluated</emu-const></td>\n                  <td><emu-val>true</emu-val></td>\n                  <td>&#171; &#187;</td>\n                  <td>1 (<var>B</var>)</td>\n                  <td><emu-const>empty</emu-const></td>\n                </tr>\n                <tr>\n                  <th><var>C</var></th>\n                  <td>2</td>\n                  <td>1</td>\n                  <td><emu-const>evaluated</emu-const></td>\n                  <td><emu-val>true</emu-val></td>\n                  <td>&#171; <var>A</var> &#187;</td>\n                  <th>0</th>\n                  <td><var>C</var>'s evaluation error</td>\n                </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n\n          <p><var>A</var> will be rejected with the same error as <var>C</var> since <var>C</var> will call <emu-xref aoid=\"AsyncModuleExecutionRejected\"><a href=\"#sec-async-module-execution-rejected\">AsyncModuleExecutionRejected</a></emu-xref> on <var>A</var> with <var>C</var>'s error. <var>A</var>.[[Status]] is set to <emu-const>evaluated</emu-const>. At this point the Promise in <var>A</var>.[[TopLevelCapability]] (which was returned from <var>A</var>.Evaluate()) is rejected. The fields of the updated module are as given in <emu-xref href=\"#table-module-graph-cycle-async-fields-8\"><a href=\"#table-module-graph-cycle-async-fields-8\" class=\"excluded-xref\" excluded-id=\"table-module-graph-cycle-async-fields-8\">#table-module-graph-cycle-async-fields-8</a></emu-xref>.</p>\n\n          <emu-table id=\"table-module-graph-cycle-async-fields-8\" class=\"module-overflow\" caption=\"Module fields after module _A_ is rejected\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-module-graph-cycle-async-fields-8\">#table-module-graph-cycle-async-fields-8</span>: Module fields after module <var>A</var> is rejected</figcaption>\n            <table>\n              <thead>\n                <tr>\n                  <th>Module</th>\n                  <th>[[DFSIndex]]</th>\n                  <th>[[DFSAncestorIndex]]</th>\n                  <th>[[Status]]</th>\n                  <th>[[AsyncEvaluation]]</th>\n                  <th>[[AsyncParentModules]]</th>\n                  <th>[[PendingAsyncDependencies]]</th>\n                  <th>[[EvaluationError]]</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <th><var>A</var></th>\n                  <td>0</td>\n                  <td>0</td>\n                  <td><emu-const>evaluated</emu-const></td>\n                  <td><emu-val>true</emu-val></td>\n                  <td>&#171; &#187;</td>\n                  <td>0</td>\n                  <td><var>C</var>'s Evaluation Error</td>\n                </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n\n          <p>Then, <var>B</var> finishes executing without an error. When that happens, <emu-xref aoid=\"AsyncModuleExecutionFulfilled\"><a href=\"#sec-async-module-execution-fulfilled\">AsyncModuleExecutionFulfilled</a></emu-xref> is called again and <var>B</var>.[[Status]] is set to <emu-const>evaluated</emu-const>. <emu-xref aoid=\"GatherAvailableAncestors\"><a href=\"#sec-gather-available-ancestors\">GatherAvailableAncestors</a></emu-xref> is called on <var>B</var>. However, <var>A</var>.[[CycleRoot]] is <var>A</var> which has an evaluation error, so it will not be added to the returned <var>sortedExecList</var> and <emu-xref aoid=\"AsyncModuleExecutionFulfilled\"><a href=\"#sec-async-module-execution-fulfilled\">AsyncModuleExecutionFulfilled</a></emu-xref> will return without further processing. Any future importer of <var>B</var> will resolve the rejection of <var>B</var>.[[CycleRoot]].[[EvaluationError]] from the evaluation error from <var>C</var> that was set on the cycle root <var>A</var>. The fields of the updated modules are as given in <emu-xref href=\"#table-module-graph-cycle-async-fields-9\"><a href=\"#table-module-graph-cycle-async-fields-9\" class=\"excluded-xref\" excluded-id=\"table-module-graph-cycle-async-fields-9\">#table-module-graph-cycle-async-fields-9</a></emu-xref>.</p>\n\n          <emu-table id=\"table-module-graph-cycle-async-fields-9\" class=\"module-overflow\" caption=\"Module fields after module _B_ finishes executing in an erroring graph\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-module-graph-cycle-async-fields-9\">#table-module-graph-cycle-async-fields-9</span>: Module fields after module <var>B</var> finishes executing in an erroring graph</figcaption>\n            <table>\n              <thead>\n                <tr>\n                  <th>Module</th>\n                  <th>[[DFSIndex]]</th>\n                  <th>[[DFSAncestorIndex]]</th>\n                  <th>[[Status]]</th>\n                  <th>[[AsyncEvaluation]]</th>\n                  <th>[[AsyncParentModules]]</th>\n                  <th>[[PendingAsyncDependencies]]</th>\n                  <th>[[EvaluationError]]</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <th><var>A</var></th>\n                  <td>0</td>\n                  <td>0</td>\n                  <td><emu-const>evaluated</emu-const></td>\n                  <td><emu-val>true</emu-val></td>\n                  <td>&#171; &#187;</td>\n                  <td>0</td>\n                  <td><var>C</var>'s Evaluation Error</td>\n                </tr>\n                <tr>\n                  <th><var>B</var></th>\n                  <td>1</td>\n                  <td>0</td>\n                  <td><emu-const>evaluated</emu-const></td>\n                  <td><emu-val>true</emu-val></td>\n                  <td>&#171; <var>A</var> &#187;</td>\n                  <td>0</td>\n                  <td><emu-const>empty</emu-const></td>\n                </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </emu-clause>\n      "}, "sec-cyclic-module-records": {"num": "16.2.1.5", "title": "#sec-cyclic-module-records Cyclic Module Records", "html": "<emu-clause id=\"sec-cyclic-module-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-cyclic-module-records\">#sec-cyclic-module-records</span> Cyclic Module Records</h1>\n        <p>A <dfn id=\"cyclic-module-record\" variants=\"Cyclic Module Records\">Cyclic Module Record</dfn> is used to represent information about a module that can participate in dependency cycles with other modules that are subclasses of the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> type. <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Records</a></emu-xref> that are not subclasses of the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> type must not participate in dependency cycles with <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Records</a></emu-xref>.</p>\n        <p>In addition to the fields defined in <emu-xref href=\"#table-module-record-fields\"><a href=\"#table-module-record-fields\" class=\"excluded-xref\" excluded-id=\"table-module-record-fields\">#table-module-record-fields</a></emu-xref> <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Records</a></emu-xref> have the additional fields listed in <emu-xref href=\"#table-cyclic-module-fields\"><a href=\"#table-cyclic-module-fields\" class=\"excluded-xref\" excluded-id=\"table-cyclic-module-fields\">#table-cyclic-module-fields</a></emu-xref></p>\n        <emu-table id=\"table-cyclic-module-fields\" caption=\"Additional Fields of Cyclic Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-cyclic-module-fields\">#table-cyclic-module-fields</span>: Additional Fields of <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Records</a></emu-xref></figcaption>\n          <table>\n            <tbody>\n              <tr>\n                <th>\n                  Field Name\n                </th>\n                <th>\n                  Value Type\n                </th>\n                <th>\n                  Meaning\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  [[Status]]\n                </td>\n                <td>\n                  <emu-const>unlinked</emu-const> | <emu-const>linking</emu-const> | <emu-const>linked</emu-const> | <emu-const>evaluating</emu-const> | <emu-const>evaluating-async</emu-const> | <emu-const>evaluated</emu-const>\n                </td>\n                <td>\n                  Initially <emu-const>unlinked</emu-const>. Transitions to <emu-const>linking</emu-const>, <emu-const>linked</emu-const>, <emu-const>evaluating</emu-const>, possibly <emu-const>evaluating-async</emu-const>, <emu-const>evaluated</emu-const> (in that order) as the module progresses throughout its lifecycle. <emu-const>evaluating-async</emu-const> indicates this module is queued to execute on completion of its asynchronous dependencies or it is a module whose [[HasTLA]] field is <emu-val>true</emu-val> that has been executed and is pending top-level completion.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[EvaluationError]]\n                </td>\n                <td>\n                  An <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> | <emu-const>empty</emu-const>\n                </td>\n                <td>\n                  A completion of type <emu-const>throw</emu-const> representing the exception that occurred during evaluation. <emu-val>undefined</emu-val> if no exception occurred or if [[Status]] is not <emu-const>evaluated</emu-const>.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[DFSIndex]]\n                </td>\n                <td>\n                  <emu-xref href=\"#integer\"><a href=\"#integer\">Integer</a></emu-xref> | <emu-const>empty</emu-const>\n                </td>\n                <td>\n                  Auxiliary field used during Link and Evaluate only. If [[Status]] is <emu-const>linking</emu-const> or <emu-const>evaluating</emu-const>, this non-negative number records the point at which the module was first visited during the depth-first traversal of the dependency graph.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[DFSAncestorIndex]]\n                </td>\n                <td>\n                  <emu-xref href=\"#integer\"><a href=\"#integer\">Integer</a></emu-xref> | <emu-const>empty</emu-const>\n                </td>\n                <td>\n                  Auxiliary field used during Link and Evaluate only. If [[Status]] is <emu-const>linking</emu-const> or <emu-const>evaluating</emu-const>, this is either the module's own [[DFSIndex]] or that of an \"earlier\" module in the same strongly connected component.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[RequestedModules]]\n                </td>\n                <td>\n                  <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of String\n                </td>\n                <td>\n                  A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of all the <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> strings used by the module represented by this record to request the importation of a module. The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is source code occurrence ordered.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[CycleRoot]]\n                </td>\n                <td>\n                  <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> | <emu-const>empty</emu-const>\n                </td>\n                <td>\n                  The first visited module of the cycle, the root DFS ancestor of the strongly connected component. For a module not in a cycle this would be the module itself. Once Evaluate has completed, a module's [[DFSAncestorIndex]] is equal to the [[DFSIndex]] of its [[CycleRoot]].\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[HasTLA]]\n                </td>\n                <td>\n                  Boolean\n                </td>\n                <td>\n                  Whether this module is individually asynchronous (for example, if it's a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> containing a top-level await). Having an asynchronous dependency does not mean this field is <emu-val>true</emu-val>. This field must not change after the module is parsed.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[AsyncEvaluation]]\n                </td>\n                <td>\n                  Boolean\n                </td>\n                <td>\n                  Whether this module is either itself asynchronous or has an asynchronous dependency. Note: The order in which this field is set is used to order queued executions, see <emu-xref href=\"#sec-async-module-execution-fulfilled\"><a href=\"#sec-async-module-execution-fulfilled\" class=\"excluded-xref\" excluded-id=\"sec-async-module-execution-fulfilled\">#sec-async-module-execution-fulfilled</a></emu-xref>.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[TopLevelCapability]]\n                </td>\n                <td>\n                  <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref> | <emu-const>empty</emu-const>\n                </td>\n                <td>\n                  If this module is the [[CycleRoot]] of some cycle, and Evaluate() was called on some module in that cycle, this field contains the <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref> for that entire evaluation. It is used to settle the Promise object that is returned from the Evaluate() abstract method. This field will be <emu-const>empty</emu-const> for any dependencies of that module, unless a top-level Evaluate() has been initiated for some of those dependencies.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[AsyncParentModules]]\n                </td>\n                <td>\n                  <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Records</a></emu-xref>\n                </td>\n                <td>\n                  If this module or a dependency has [[HasTLA]] <emu-val>true</emu-val>, and execution is in progress, this tracks the parent importers of this module for the top-level execution job. These parent modules will not start executing before this module has successfully completed execution.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[PendingAsyncDependencies]]\n                </td>\n                <td>\n                  <emu-xref href=\"#integer\"><a href=\"#integer\">Integer</a></emu-xref> | <emu-const>empty</emu-const>\n                </td>\n                <td>\n                  If this module has any asynchronous dependencies, this tracks the number of asynchronous dependency modules remaining to execute for this module. A module with asynchronous dependencies will be executed when this field reaches 0 and there are no execution errors.\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>In addition to the methods defined in <emu-xref href=\"#table-abstract-methods-of-module-records\"><a href=\"#table-abstract-methods-of-module-records\" class=\"excluded-xref\" excluded-id=\"table-abstract-methods-of-module-records\">#table-abstract-methods-of-module-records</a></emu-xref> <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Records</a></emu-xref> have the additional methods listed in <emu-xref href=\"#table-cyclic-module-methods\"><a href=\"#table-cyclic-module-methods\" class=\"excluded-xref\" excluded-id=\"table-cyclic-module-methods\">#table-cyclic-module-methods</a></emu-xref></p>\n        <emu-table id=\"table-cyclic-module-methods\" caption=\"Additional Abstract Methods of Cyclic Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-cyclic-module-methods\">#table-cyclic-module-methods</span>: Additional Abstract Methods of <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Records</a></emu-xref></figcaption>\n          <table>\n            <tbody>\n              <tr>\n                <th>\n                  Method\n                </th>\n                <th>\n                  Purpose\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  InitializeEnvironment()\n                </td>\n                <td>\n                  Initialize the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> of the module, including resolving all imported bindings, and create the module's <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  ExecuteModule( [ <var>promiseCapability</var> ] )\n                </td>\n                <td>\n                  Evaluate the module's code within its <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>. If this module has <emu-val>true</emu-val> in [[HasTLA]], then a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref> is passed as an argument, and the method is expected to resolve or reject the given capability. In this case, the method must not throw an exception, but instead reject the <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref> if necessary.\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n\n        <div id=\"excluded-sec-moduledeclarationlinking\"><h1><span class=\"secnum\">16.2.1.5.1</span>#sec-moduledeclarationlinking Link ( )</h1>...</div><div id=\"excluded-sec-moduleevaluation\"><h1><span class=\"secnum\">16.2.1.5.2</span>#sec-moduleevaluation Evaluate ( )</h1>...</div><div id=\"excluded-sec-example-cyclic-module-record-graphs\"><h1><span class=\"secnum\">16.2.1.5.3</span>#sec-example-cyclic-module-record-graphs Example Cyclic Module Record Graphs</h1>...</div></emu-clause>\n\n      "}, "sec-memory-model-fundamentals": {"num": "29.1", "title": "#sec-memory-model-fundamentals Memory Model Fundamentals", "html": "<emu-clause id=\"sec-memory-model-fundamentals\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-memory-model-fundamentals\">#sec-memory-model-fundamentals</span> Memory Model Fundamentals</h1>\n    <p>Shared memory accesses (reads and writes) are divided into two groups, atomic accesses and data accesses, defined below. Atomic accesses are sequentially consistent, i.e., there is a strict total ordering of events agreed upon by all <emu-xref href=\"#agent\"><a href=\"#agent\">agents</a></emu-xref> in an <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref>. Non-atomic accesses do not have a strict total ordering agreed upon by all <emu-xref href=\"#agent\"><a href=\"#agent\">agents</a></emu-xref>, i.e., unordered.</p>\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p>No orderings weaker than sequentially consistent and stronger than unordered, such as release-acquire, are supported.</p>\n    </div></emu-note>\n    <p>A <dfn variants=\"Shared Data Block events\">Shared Data Block event</dfn> is either a <dfn>ReadSharedMemory</dfn>, <dfn>WriteSharedMemory</dfn>, or <dfn>ReadModifyWriteSharedMemory</dfn> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>.</p>\n\n    <emu-table id=\"table-readsharedmemory-fields\" caption=\"ReadSharedMemory Event Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-readsharedmemory-fields\">#table-readsharedmemory-fields</span>: <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> Event Fields</figcaption>\n      <table>\n        <tbody>\n          <tr>\n            <th>Field Name</th>\n            <th>Value</th>\n            <th>Meaning</th>\n          </tr>\n          <tr>\n            <td>[[Order]]</td>\n            <td><emu-const>SeqCst</emu-const> | <emu-const>Unordered</emu-const></td>\n            <td>The weakest ordering guaranteed by the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> for the event.</td>\n          </tr>\n          <tr>\n            <td>[[NoTear]]</td>\n            <td>A Boolean</td>\n            <td>Whether this event is allowed to read from multiple write events on equal range as this event.</td>\n          </tr>\n          <tr>\n            <td>[[Block]]</td>\n            <td>A <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref></td>\n            <td>The block the event operates on.</td>\n          </tr>\n          <tr>\n            <td>[[ByteIndex]]</td>\n            <td>A non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The byte address of the read in [[Block]].</td>\n          </tr>\n          <tr>\n            <td>[[ElementSize]]</td>\n            <td>A non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The size of the read.</td>\n          </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <emu-table id=\"table-writesharedmemory-fields\" caption=\"WriteSharedMemory Event Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-writesharedmemory-fields\">#table-writesharedmemory-fields</span>: <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> Event Fields</figcaption>\n      <table>\n        <tbody>\n          <tr>\n            <th>Field Name</th>\n            <th>Value</th>\n            <th>Meaning</th>\n          </tr>\n          <tr>\n            <td>[[Order]]</td>\n            <td><emu-const>SeqCst</emu-const> | <emu-const>Unordered</emu-const> | <emu-const>Init</emu-const></td>\n            <td>The weakest ordering guaranteed by the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> for the event.</td>\n          </tr>\n          <tr>\n            <td>[[NoTear]]</td>\n            <td>A Boolean</td>\n            <td>Whether this event is allowed to be read from multiple read events with equal range as this event.</td>\n          </tr>\n          <tr>\n            <td>[[Block]]</td>\n            <td>A <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref></td>\n            <td>The block the event operates on.</td>\n          </tr>\n          <tr>\n            <td>[[ByteIndex]]</td>\n            <td>A non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The byte address of the write in [[Block]].</td>\n          </tr>\n          <tr>\n            <td>[[ElementSize]]</td>\n            <td>A non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The size of the write.</td>\n          </tr>\n          <tr>\n            <td>[[Payload]]</td>\n            <td>A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref></td>\n            <td>The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">byte values</a></emu-xref> to be read by other events.</td>\n          </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <emu-table id=\"table-rmwsharedmemory-fields\" caption=\"ReadModifyWriteSharedMemory Event Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-rmwsharedmemory-fields\">#table-rmwsharedmemory-fields</span>: <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> Event Fields</figcaption>\n      <table>\n        <tbody>\n          <tr>\n            <th>Field Name</th>\n            <th>Value</th>\n            <th>Meaning</th>\n          </tr>\n          <tr>\n            <td>[[Order]]</td>\n            <td><emu-const>SeqCst</emu-const></td>\n            <td>Read-modify-write events are always sequentially consistent.</td>\n          </tr>\n          <tr>\n            <td>[[NoTear]]</td>\n            <td><emu-val>true</emu-val></td>\n            <td>Read-modify-write events cannot tear.</td>\n          </tr>\n          <tr>\n            <td>[[Block]]</td>\n            <td>A <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref></td>\n            <td>The block the event operates on.</td>\n          </tr>\n          <tr>\n            <td>[[ByteIndex]]</td>\n            <td>A non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The byte address of the read-modify-write in [[Block]].</td>\n          </tr>\n          <tr>\n            <td>[[ElementSize]]</td>\n            <td>A non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The size of the read-modify-write.</td>\n          </tr>\n          <tr>\n            <td>[[Payload]]</td>\n            <td>A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref></td>\n            <td>The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">byte values</a></emu-xref> to be passed to [[ModifyOp]].</td>\n          </tr>\n          <tr>\n            <td>[[ModifyOp]]</td>\n            <td>A <emu-xref href=\"#sec-arraybuffer-notation\"><a href=\"#sec-arraybuffer-notation\">read-modify-write modification function</a></emu-xref></td>\n            <td>An abstract closure that returns a modified <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">byte values</a></emu-xref> from a read <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">byte values</a></emu-xref> and [[Payload]].</td>\n          </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <p>These events are introduced by <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> or by methods on the Atomics object.</p>\n    <p>Some operations may also introduce <dfn>Synchronize</dfn> events. A <dfn variants=\"Synchronize events\">Synchronize event</dfn> has no fields, and exists purely to directly constrain the permitted orderings of other events.</p>\n    <p>In addition to <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref> and Synchronize events, there are <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref>-specific events.</p>\n    <p>Let the range of a ReadSharedMemory, WriteSharedMemory, or ReadModifyWriteSharedMemory event be the Set of contiguous <emu-xref href=\"#integer\"><a href=\"#integer\">integers</a></emu-xref> from its [[ByteIndex]] to [[ByteIndex]] + [[ElementSize]] - 1. Two events' ranges are equal when the events have the same [[Block]], and the ranges are element-wise equal. Two events' ranges are overlapping when the events have the same [[Block]], the ranges are not equal and their intersection is non-empty. Two events' ranges are disjoint when the events do not have the same [[Block]] or their ranges are neither equal nor overlapping.</p>\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>Examples of <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref>-specific synchronizing events that should be accounted for are: sending a SharedArrayBuffer from one <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> to another (e.g., by <code>postMessage</code> in a browser), starting and stopping <emu-xref href=\"#agent\"><a href=\"#agent\">agents</a></emu-xref>, and communicating within the <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref> via channels other than shared memory. It is assumed those events are appended to <emu-xref aoid=\"agent-order\"><a href=\"#sec-agent-order\">agent-order</a></emu-xref> during evaluation like the other SharedArrayBuffer events.</p>\n    </div></emu-note>\n    <p>Events are ordered within <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate executions</a></emu-xref> by the relations defined below.</p>\n  </emu-clause>\n\n  "}, "sec-IsHTMLDDA-internal-slot-typeof": {"num": "B.3.6.3", "title": "#sec-IsHTMLDDA-internal-slot-typeof Changes to the typeof Operator", "html": "<emu-annex id=\"sec-IsHTMLDDA-internal-slot-typeof\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-IsHTMLDDA-internal-slot-typeof\">#sec-IsHTMLDDA-internal-slot-typeof</span> Changes to the <code>typeof</code> Operator</h1>\n        <p>The following table entry is inserted into <emu-xref href=\"#table-typeof-operator-results\"><a href=\"#table-typeof-operator-results\" class=\"excluded-xref\" excluded-id=\"table-typeof-operator-results\">#table-typeof-operator-results</a></emu-xref> immediately preceding the entry for \"Object (implements [[Call]])\":</p>\n        <emu-table><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-noid-2\">#table-noid-2</span>: \n            Additional <emu-xref href=\"#sec-typeof-operator\"><a href=\"#sec-typeof-operator\"><code>typeof</code></a></emu-xref> Operator Results\n          </figcaption>\n          \n          <table>\n            <tbody>\n              <tr>\n                <th>\n                  Type of <var>val</var>\n                </th>\n                <th>\n                  Result\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  Object (has an <emu-xref href=\"#sec-IsHTMLDDA-internal-slot\"><a href=\"#sec-IsHTMLDDA-internal-slot\">[[IsHTMLDDA]] internal slot</a></emu-xref>)\n                </td>\n                <td>\n                  <emu-val>\"undefined\"</emu-val>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-annex>\n    "}, "sec-chosen-value-records": {"num": "29.3", "title": "#sec-chosen-value-records Chosen Value Records", "html": "<emu-clause id=\"sec-chosen-value-records\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-chosen-value-records\">#sec-chosen-value-records</span> Chosen Value Records</h1>\n    <p>A <dfn variants=\"Chosen Value Records\">Chosen Value Record</dfn> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> with the following fields.</p>\n    <emu-table id=\"table-chosen-value-records\" caption=\"Chosen Value Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-chosen-value-records\">#table-chosen-value-records</span>: <emu-xref href=\"#sec-chosen-value-records\"><a href=\"#sec-chosen-value-records\">Chosen Value Record</a></emu-xref> Fields</figcaption>\n      <table>\n        <tbody>\n          <tr>\n            <th>Field Name</th>\n            <th>Value</th>\n            <th>Meaning</th>\n          </tr>\n          <tr>\n            <td>[[Event]]</td>\n            <td>A <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">Shared Data Block event</a></emu-xref></td>\n            <td>The <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> event that was introduced for this chosen value.</td>\n          </tr>\n          <tr>\n            <td>[[ChosenValue]]</td>\n            <td>A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">byte values</a></emu-xref></td>\n            <td>The bytes that were nondeterministically chosen during evaluation.</td>\n          </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n  </emu-clause>\n\n  "}, "sec-reference-record-specification-type": {"num": "6.2.4", "title": "#sec-reference-record-specification-type The Reference Record Specification Type", "html": "<emu-clause id=\"sec-reference-record-specification-type\" oldids=\"sec-reference-specification-type\"><span id=\"sec-reference-specification-type\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-reference-record-specification-type\">#sec-reference-record-specification-type</span> The Reference Record Specification Type</h1>\n      <p>The <dfn variants=\"Reference Records\">Reference Record</dfn> type is used to explain the behaviour of such operators as <code>delete</code>, <code>typeof</code>, the assignment operators, the <code>super</code> <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\">keyword</a></emu-xref> and other language features. For example, the left-hand operand of an assignment is expected to produce a Reference Record.</p>\n      <p>A Reference Record is a resolved name or property binding; its fields are defined by <emu-xref href=\"#table-reference-record-fields\"><a href=\"#table-reference-record-fields\" class=\"excluded-xref\" excluded-id=\"table-reference-record-fields\">#table-reference-record-fields</a></emu-xref>.</p>\n\n      <emu-table id=\"table-reference-record-fields\" caption=\"Reference Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-reference-record-fields\">#table-reference-record-fields</span>: <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref> Fields</figcaption>\n        <table>\n          <tbody>\n            <tr>\n              <th>Field Name</th>\n              <th>Value</th>\n              <th>Meaning</th>\n            </tr>\n            <tr>\n              <td oldids=\"sec-getbase,ao-getbase\"><span id=\"ao-getbase\"></span><span id=\"sec-getbase\"></span>[[Base]]</td>\n              <td>\n                One of:\n                <ul>\n                  <li>\n                    any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>,\n                  </li>\n                  <li>\n                    an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, or\n                  </li>\n                  <li>\n                    <emu-const>unresolvable</emu-const>.\n                  </li>\n                </ul>\n              </td>\n              <td>The value or <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> which holds the binding. A [[Base]] of <emu-const>unresolvable</emu-const> indicates that the binding could not be resolved.</td>\n            </tr>\n            <tr>\n              <td oldids=\"sec-getreferencedname,ao-getreferencedname\"><span id=\"ao-getreferencedname\"></span><span id=\"sec-getreferencedname\"></span>[[ReferencedName]]</td>\n              <td>String, Symbol, or <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref></td>\n              <td>The name of the binding. Always a String if [[Base]] value is an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</td>\n            </tr>\n            <tr>\n              <td oldids=\"sec-isstrictreference,ao-isstrictreference\"><span id=\"ao-isstrictreference\"></span><span id=\"sec-isstrictreference\"></span>[[Strict]]</td>\n              <td>Boolean</td>\n              <td><emu-val>true</emu-val> if the <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref> originated in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, <emu-val>false</emu-val> otherwise.</td>\n            </tr>\n            <tr>\n              <td>[[ThisValue]]</td>\n              <td>any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> or <emu-const>empty</emu-const></td>\n              <td>If not <emu-const>empty</emu-const>, the <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref> represents a property binding that was expressed using the <code>super</code> <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\">keyword</a></emu-xref>; it is called a <dfn id=\"super-reference-record\" oldids=\"super-reference\" variants=\"Super Reference Records\"><span id=\"super-reference\"></span>Super Reference Record</dfn> and its [[Base]] value will never be an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. In that case, the [[ThisValue]] field holds the <emu-val>this</emu-val> value at the time the <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref> was created.</td>\n            </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n\n      <p>The following <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> are used in this specification to operate upon Reference Records:</p>\n\n      <div id=\"excluded-sec-ispropertyreference\"><h1><span class=\"secnum\">6.2.4.1</span>#sec-ispropertyreference IsPropertyReference ( V )</h1>...</div><div id=\"excluded-sec-isunresolvablereference\"><h1><span class=\"secnum\">6.2.4.2</span>#sec-isunresolvablereference IsUnresolvableReference ( V )</h1>...</div><div id=\"excluded-sec-issuperreference\"><h1><span class=\"secnum\">6.2.4.3</span>#sec-issuperreference IsSuperReference ( V )</h1>...</div><div id=\"excluded-sec-isprivatereference\"><h1><span class=\"secnum\">6.2.4.4</span>#sec-isprivatereference IsPrivateReference ( V )</h1>...</div><div id=\"excluded-sec-getvalue\"><h1><span class=\"secnum\">6.2.4.5</span>#sec-getvalue GetValue ( V )</h1>...</div><div id=\"excluded-sec-putvalue\"><h1><span class=\"secnum\">6.2.4.6</span>#sec-putvalue PutValue ( V, W )</h1>...</div><div id=\"excluded-sec-getthisvalue\"><h1><span class=\"secnum\">6.2.4.7</span>#sec-getthisvalue GetThisValue ( V )</h1>...</div><div id=\"excluded-sec-initializereferencedbinding\"><h1><span class=\"secnum\">6.2.4.8</span>#sec-initializereferencedbinding InitializeReferencedBinding ( V, W )</h1>...</div><div id=\"excluded-sec-makeprivatereference\"><h1><span class=\"secnum\">6.2.4.9</span>#sec-makeprivatereference MakePrivateReference ( baseValue, privateIdentifier )</h1>...</div></emu-clause>\n\n    "}, "sec-assignment-operators-runtime-semantics-evaluation": {"num": "13.15.2", "title": "#sec-assignment-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-assignment-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-assignment-operators-runtime-semantics-evaluation\">#sec-assignment-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ijpo4eaq\">\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>=</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is neither an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>lref</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) and <emu-xref aoid=\"IsIdentifierRef\"><a href=\"#sec-static-semantics-isidentifierref\">IsIdentifierRef</a></emu-xref> of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> are both <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>lref</var>.[[ReferencedName]].</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li id=\"step-assignmentexpression-evaluation-simple-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></li><li>Let <var>assignmentPattern</var> be the <emu-nt><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Perform ? <emu-xref aoid=\"DestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-destructuringassignmentevaluation\">DestructuringAssignmentEvaluation</a></emu-xref> of <var>assignmentPattern</var> using <var>rval</var> as the argument.</li><li>Return <var>rval</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xzqhr---\">\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li id=\"step-assignmentexpression-evaluation-compound-getvalue\">Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>assignmentOpText</var> be the source text matched by <emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt>.</li><li>Let <var>opText</var> be the sequence of Unicode code points associated with <var>assignmentOpText</var> in the following table:\n          <figure>\n            <table class=\"lightweight-table\">\n              <tbody>\n                <tr><th> <var>assignmentOpText</var> </th><th> <var>opText</var>       </th></tr>\n                <tr><td> <code>**=</code>              </td><td> <code>**</code>           </td></tr>\n                <tr><td> <code>*=</code>               </td><td> <code>*</code>            </td></tr>\n                <tr><td> <code>/=</code>               </td><td> <code>/</code>            </td></tr>\n                <tr><td> <code>%=</code>               </td><td> <code>%</code>            </td></tr>\n                <tr><td> <code>+=</code>               </td><td> <code>+</code>            </td></tr>\n                <tr><td> <code>-=</code>               </td><td> <code>-</code>            </td></tr>\n                <tr><td> <code>&lt;&lt;=</code>        </td><td> <code>&lt;&lt;</code>     </td></tr>\n                <tr><td> <code>&gt;&gt;=</code>        </td><td> <code>&gt;&gt;</code>     </td></tr>\n                <tr><td> <code>&gt;&gt;&gt;=</code>    </td><td> <code>&gt;&gt;&gt;</code> </td></tr>\n                <tr><td> <code>&amp;=</code>           </td><td> <code>&amp;</code>        </td></tr>\n                <tr><td> <code>^=</code>               </td><td> <code>^</code>            </td></tr>\n                <tr><td> <code>|=</code>               </td><td> <code>|</code>            </td></tr>\n              </tbody>\n            </table>\n          </figure></li><li>Let <var>r</var> be <emu-xref aoid=\"ApplyStringOrNumericBinaryOperator\"><a href=\"#sec-applystringornumericbinaryoperator\">ApplyStringOrNumericBinaryOperator</a></emu-xref>(<var>lval</var>, <var>opText</var>, <var>rval</var>).</li><li id=\"step-assignmentexpression-evaluation-compound-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>r</var>).</li><li>Return <var>r</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"devkzibl\">\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>&amp;&amp;=</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li id=\"step-assignmentexpression-evaluation-lgcl-and-getvalue\">Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>lbool</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(<var>lval</var>).</li><li>If <var>lbool</var> is <emu-val>false</emu-val>, return <var>lval</var>.</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and <emu-xref aoid=\"IsIdentifierRef\"><a href=\"#sec-static-semantics-isidentifierref\">IsIdentifierRef</a></emu-xref> of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>lref</var>.[[ReferencedName]].</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li id=\"step-assignmentexpression-evaluation-lgcl-and-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dt1frwiy\">\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>||=</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li id=\"step-assignmentexpression-evaluation-lgcl-or-getvalue\">Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>lbool</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(<var>lval</var>).</li><li>If <var>lbool</var> is <emu-val>true</emu-val>, return <var>lval</var>.</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and <emu-xref aoid=\"IsIdentifierRef\"><a href=\"#sec-static-semantics-isidentifierref\">IsIdentifierRef</a></emu-xref> of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>lref</var>.[[ReferencedName]].</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li id=\"step-assignmentexpression-evaluation-lgcl-or-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbifpqxa\">\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>??=</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li id=\"step-assignmentexpression-evaluation-lgcl-nullish-getvalue\">Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>If <var>lval</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, return <var>lval</var>.</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and <emu-xref aoid=\"IsIdentifierRef\"><a href=\"#sec-static-semantics-isidentifierref\">IsIdentifierRef</a></emu-xref> of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>lref</var>.[[ReferencedName]].</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li id=\"step-assignmentexpression-evaluation-lgcl-nullish-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When this expression occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, it is a runtime error if <var>lref</var> in step <emu-xref href=\"#step-assignmentexpression-evaluation-simple-putvalue\"><a href=\"#step-assignmentexpression-evaluation-simple-putvalue\">1.e</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-compound-getvalue\"><a href=\"#step-assignmentexpression-evaluation-compound-getvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-compound-getvalue\">#step-assignmentexpression-evaluation-compound-getvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-and-getvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-and-getvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-and-getvalue\">#step-assignmentexpression-evaluation-lgcl-and-getvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-or-getvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-or-getvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-or-getvalue\">#step-assignmentexpression-evaluation-lgcl-or-getvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-nullish-getvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-nullish-getvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-nullish-getvalue\">#step-assignmentexpression-evaluation-lgcl-nullish-getvalue</a></emu-xref> is an unresolvable reference. If it is, a <emu-val>ReferenceError</emu-val> exception is thrown. Additionally, it is a runtime error if the <var>lref</var> in step <emu-xref href=\"#step-assignmentexpression-evaluation-compound-putvalue\"><a href=\"#step-assignmentexpression-evaluation-compound-putvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-compound-putvalue\">#step-assignmentexpression-evaluation-compound-putvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-and-putvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-and-putvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-and-putvalue\">#step-assignmentexpression-evaluation-lgcl-and-putvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-or-putvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-or-putvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-or-putvalue\">#step-assignmentexpression-evaluation-lgcl-or-putvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-nullish-putvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-nullish-putvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-nullish-putvalue\">#step-assignmentexpression-evaluation-lgcl-nullish-putvalue</a></emu-xref> is a reference to a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> with the attribute value { [[Writable]]: <emu-val>false</emu-val> }, to an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> with the attribute value { [[Set]]: <emu-val>undefined</emu-val> }, or to a non-existent property of an object for which the <emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref> predicate returns the value <emu-val>false</emu-val>. In these cases a <emu-val>TypeError</emu-val> exception is thrown.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-agent-event-records": {"num": "29.2", "title": "#sec-agent-event-records Agent Events Records", "html": "<emu-clause id=\"sec-agent-event-records\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-agent-event-records\">#sec-agent-event-records</span> Agent Events Records</h1>\n    <p>An <dfn variants=\"Agent Events Records\">Agent Events Record</dfn> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> with the following fields.</p>\n    <emu-table id=\"table-agent-events-records\" caption=\"Agent Events Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-agent-events-records\">#table-agent-events-records</span>: <emu-xref href=\"#sec-agent-event-records\"><a href=\"#sec-agent-event-records\">Agent Events Record</a></emu-xref> Fields</figcaption>\n      <table>\n        <tbody>\n          <tr>\n            <th>Field Name</th>\n            <th>Value</th>\n            <th>Meaning</th>\n          </tr>\n          <tr>\n            <td>[[AgentSignifier]]</td>\n            <td>A value that admits equality testing</td>\n            <td>The <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> whose evaluation resulted in this ordering.</td>\n          </tr>\n          <tr>\n            <td>[[EventList]]</td>\n            <td>A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of events</td>\n            <td>Events are appended to the list during evaluation.</td>\n          </tr>\n          <tr>\n            <td>[[AgentSynchronizesWith]]</td>\n            <td>A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of pairs of <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">Synchronize events</a></emu-xref></td>\n            <td><emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">Synchronize</a></emu-xref> relationships introduced by the operational semantics.</td>\n          </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n  </emu-clause>\n\n  "}, "sec-tobigint": {"num": "7.1.13", "title": "#sec-tobigint ToBigInt ( argument )", "html": "<emu-clause id=\"sec-tobigint\" type=\"abstract operation\" aoid=\"ToBigInt\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-tobigint\">#sec-tobigint</span> ToBigInt ( <var>argument</var> )</h1>\n      <p>The abstract operation ToBigInt takes argument <var>argument</var>. It converts <var>argument</var> to a BigInt value, or throws if an implicit conversion from Number would be required. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>prim</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>argument</var>, <emu-const>number</emu-const>).</li><li>Return the value that <var>prim</var> corresponds to in <emu-xref href=\"#table-tobigint\"><a href=\"#table-tobigint\" class=\"excluded-xref\" excluded-id=\"table-tobigint\">#table-tobigint</a></emu-xref>.</li></ol></emu-alg>\n      <emu-table id=\"table-tobigint\" caption=\"BigInt Conversions\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-tobigint\">#table-tobigint</span>: BigInt Conversions</figcaption>\n        <table>\n          <tbody>\n            <tr>\n              <th>\n                Argument Type\n              </th>\n              <th>\n                Result\n              </th>\n            </tr>\n            <tr>\n              <td>\n                Undefined\n              </td>\n              <td>\n                Throw a <emu-val>TypeError</emu-val> exception.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Null\n              </td>\n              <td>\n                Throw a <emu-val>TypeError</emu-val> exception.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Boolean\n              </td>\n              <td>\n                Return <code>1n</code> if <var>prim</var> is <emu-val>true</emu-val> and <code>0n</code> if <var>prim</var> is <emu-val>false</emu-val>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                BigInt\n              </td>\n              <td>\n                Return <var>prim</var>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Number\n              </td>\n              <td>\n                Throw a <emu-val>TypeError</emu-val> exception.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                String\n              </td>\n              <td>\n                <emu-alg><ol><li>Let <var>n</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>prim</var>).</li><li>If <var>n</var> is <emu-val>undefined</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Return <var>n</var>.</li></ol></emu-alg>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                Symbol\n              </td>\n              <td>\n                Throw a <emu-val>TypeError</emu-val> exception.\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n    </emu-clause>\n\n    "}, "sec-applystringornumericbinaryoperator": {"num": "13.15.3", "title": "#sec-applystringornumericbinaryoperator ApplyStringOrNumericBinaryOperator ( lval, opText, rval )", "html": "<emu-clause id=\"sec-applystringornumericbinaryoperator\" type=\"abstract operation\" aoid=\"ApplyStringOrNumericBinaryOperator\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-applystringornumericbinaryoperator\">#sec-applystringornumericbinaryoperator</span> ApplyStringOrNumericBinaryOperator ( <var>lval</var>, <var>opText</var>, <var>rval</var> )</h1>\n      <p>The abstract operation ApplyStringOrNumericBinaryOperator takes arguments <var>lval</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>opText</var> (a sequence of Unicode code points), and <var>rval</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>opText</var> is present in the table in step <emu-xref href=\"#step-applystringornumericbinaryoperator-operations-table\"><a href=\"#step-applystringornumericbinaryoperator-operations-table\" class=\"excluded-xref\" excluded-id=\"step-applystringornumericbinaryoperator-operations-table\">#step-applystringornumericbinaryoperator-operations-table</a></emu-xref>.</li><li>If <var>opText</var> is <code>+</code>, then<ol><li id=\"step-binary-op-toprimitive-lval\">Let <var>lprim</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>lval</var>).</li><li id=\"step-binary-op-toprimitive-rval\">Let <var>rprim</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>rval</var>).</li><li id=\"step-binary-op-string-check\">If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lprim</var>) is String or <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rprim</var>) is String, then<ol><li>Let <var>lstr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>lprim</var>).</li><li>Let <var>rstr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>rprim</var>).</li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>lstr</var> and <var>rstr</var>.</li></ol></li><li>Set <var>lval</var> to <var>lprim</var>.</li><li>Set <var>rval</var> to <var>rprim</var>.</li></ol></li><li>NOTE: At this point, it must be a numeric operation.</li><li>Let <var>lnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>lval</var>).</li><li>Let <var>rnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>rval</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rnum</var>), throw a <emu-val>TypeError</emu-val> exception.</li><li id=\"step-applystringornumericbinaryoperator-operations-table\">Let <var>operation</var> be the abstract operation associated with <var>opText</var> and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>) in the following table:\n          <figure>\n            <table class=\"lightweight-table\">\n              <tbody>\n                <tr><th> <var>opText</var>       </th><th> <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>) </th><th> <var>operation</var>                </th></tr>\n                <tr><td> <code>**</code>           </td><td> Number       </td><td> <emu-xref aoid=\"Number::exponentiate\"><a href=\"#sec-numeric-types-number-exponentiate\">Number::exponentiate</a></emu-xref>       </td></tr>\n                <tr><td> <code>**</code>           </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::exponentiate\"><a href=\"#sec-numeric-types-bigint-exponentiate\">BigInt::exponentiate</a></emu-xref>       </td></tr>\n                <tr><td> <code>*</code>            </td><td> Number       </td><td> <emu-xref aoid=\"Number::multiply\"><a href=\"#sec-numeric-types-number-multiply\">Number::multiply</a></emu-xref>           </td></tr>\n                <tr><td> <code>*</code>            </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::multiply\"><a href=\"#sec-numeric-types-bigint-multiply\">BigInt::multiply</a></emu-xref>           </td></tr>\n                <tr><td> <code>/</code>            </td><td> Number       </td><td> <emu-xref aoid=\"Number::divide\"><a href=\"#sec-numeric-types-number-divide\">Number::divide</a></emu-xref>             </td></tr>\n                <tr><td> <code>/</code>            </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::divide\"><a href=\"#sec-numeric-types-bigint-divide\">BigInt::divide</a></emu-xref>             </td></tr>\n                <tr><td> <code>%</code>            </td><td> Number       </td><td> <emu-xref aoid=\"Number::remainder\"><a href=\"#sec-numeric-types-number-remainder\">Number::remainder</a></emu-xref>          </td></tr>\n                <tr><td> <code>%</code>            </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::remainder\"><a href=\"#sec-numeric-types-bigint-remainder\">BigInt::remainder</a></emu-xref>          </td></tr>\n                <tr><td> <code>+</code>            </td><td> Number       </td><td> <emu-xref aoid=\"Number::add\"><a href=\"#sec-numeric-types-number-add\">Number::add</a></emu-xref>                </td></tr>\n                <tr><td> <code>+</code>            </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::add\"><a href=\"#sec-numeric-types-bigint-add\">BigInt::add</a></emu-xref>                </td></tr>\n                <tr><td> <code>-</code>            </td><td> Number       </td><td> <emu-xref aoid=\"Number::subtract\"><a href=\"#sec-numeric-types-number-subtract\">Number::subtract</a></emu-xref>           </td></tr>\n                <tr><td> <code>-</code>            </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::subtract\"><a href=\"#sec-numeric-types-bigint-subtract\">BigInt::subtract</a></emu-xref>           </td></tr>\n                <tr><td> <code>&lt;&lt;</code>     </td><td> Number       </td><td> <emu-xref aoid=\"Number::leftShift\"><a href=\"#sec-numeric-types-number-leftShift\">Number::leftShift</a></emu-xref>          </td></tr>\n                <tr><td> <code>&lt;&lt;</code>     </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::leftShift\"><a href=\"#sec-numeric-types-bigint-leftShift\">BigInt::leftShift</a></emu-xref>          </td></tr>\n                <tr><td> <code>&gt;&gt;</code>     </td><td> Number       </td><td> <emu-xref aoid=\"Number::signedRightShift\"><a href=\"#sec-numeric-types-number-signedRightShift\">Number::signedRightShift</a></emu-xref>   </td></tr>\n                <tr><td> <code>&gt;&gt;</code>     </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::signedRightShift\"><a href=\"#sec-numeric-types-bigint-signedRightShift\">BigInt::signedRightShift</a></emu-xref>   </td></tr>\n                <tr><td> <code>&gt;&gt;&gt;</code> </td><td> Number       </td><td> <emu-xref aoid=\"Number::unsignedRightShift\"><a href=\"#sec-numeric-types-number-unsignedRightShift\">Number::unsignedRightShift</a></emu-xref> </td></tr>\n                <tr><td> <code>&gt;&gt;&gt;</code> </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::unsignedRightShift\"><a href=\"#sec-numeric-types-bigint-unsignedRightShift\">BigInt::unsignedRightShift</a></emu-xref> </td></tr>\n                <tr><td> <code>&amp;</code>        </td><td> Number       </td><td> <emu-xref aoid=\"Number::bitwiseAND\"><a href=\"#sec-numeric-types-number-bitwiseAND\">Number::bitwiseAND</a></emu-xref>         </td></tr>\n                <tr><td> <code>&amp;</code>        </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::bitwiseAND\"><a href=\"#sec-numeric-types-bigint-bitwiseAND\">BigInt::bitwiseAND</a></emu-xref>         </td></tr>\n                <tr><td> <code>^</code>            </td><td> Number       </td><td> <emu-xref aoid=\"Number::bitwiseXOR\"><a href=\"#sec-numeric-types-number-bitwiseXOR\">Number::bitwiseXOR</a></emu-xref>         </td></tr>\n                <tr><td> <code>^</code>            </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::bitwiseXOR\"><a href=\"#sec-numeric-types-bigint-bitwiseXOR\">BigInt::bitwiseXOR</a></emu-xref>         </td></tr>\n                <tr><td> <code>|</code>            </td><td> Number       </td><td> <emu-xref aoid=\"Number::bitwiseOR\"><a href=\"#sec-numeric-types-number-bitwiseOR\">Number::bitwiseOR</a></emu-xref>          </td></tr>\n                <tr><td> <code>|</code>            </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::bitwiseOR\"><a href=\"#sec-numeric-types-bigint-bitwiseOR\">BigInt::bitwiseOR</a></emu-xref>          </td></tr>\n              </tbody>\n            </table>\n          </figure></li><li>Return ? <var>operation</var>(<var>lnum</var>, <var>rnum</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>No hint is provided in the calls to <emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref> in steps <emu-xref href=\"#step-binary-op-toprimitive-lval\"><a href=\"#step-binary-op-toprimitive-lval\">2.a</a></emu-xref> and <emu-xref href=\"#step-binary-op-toprimitive-rval\"><a href=\"#step-binary-op-toprimitive-rval\">2.b</a></emu-xref>. All standard objects except Dates handle the absence of a hint as if <emu-const>number</emu-const> were given; Dates handle the absence of a hint as if <emu-const>string</emu-const> were given. <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">Exotic objects</a></emu-xref> may handle the absence of a hint in some other manner.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>Step <emu-xref href=\"#step-binary-op-string-check\"><a href=\"#step-binary-op-string-check\">2.c</a></emu-xref> differs from step <emu-xref href=\"#step-arc-string-check\"><a href=\"#step-arc-string-check\" class=\"excluded-xref\" excluded-id=\"step-arc-string-check\">#step-arc-string-check</a></emu-xref> of the <emu-xref aoid=\"IsLessThan\"><a href=\"#sec-islessthan\">IsLessThan</a></emu-xref> algorithm, by using the logical-or operation instead of the logical-and operation.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-agents": {"num": "9.7", "title": "#sec-agents Agents", "html": "<emu-clause id=\"sec-agents\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-agents\">#sec-agents</span> Agents</h1>\n\n    <p>An <dfn id=\"agent\" variants=\"agents\">agent</dfn> comprises a set of ECMAScript <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution contexts</a></emu-xref>, an <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>, a <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>, an <dfn id=\"agent-record\" variants=\"Agent Records\">Agent Record</dfn>, and an <dfn id=\"executing-thread\" variants=\"executing threads\">executing thread</dfn>. Except for the <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref>, the constituents of an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> belong exclusively to that <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>.</p>\n    <p>An <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> executes a job on the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution contexts</a></emu-xref> independently of other <emu-xref href=\"#agent\"><a href=\"#agent\">agents</a></emu-xref>, except that an <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> may be used as the <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> by multiple <emu-xref href=\"#agent\"><a href=\"#agent\">agents</a></emu-xref>, provided none of the <emu-xref href=\"#agent\"><a href=\"#agent\">agents</a></emu-xref> sharing the thread have an <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref> whose [[CanBlock]] property is <emu-val>true</emu-val>.</p>\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p>Some web browsers share a single <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> across multiple unrelated tabs of a browser window, for example.</p>\n    </div></emu-note>\n    <p>While an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> executes jobs, the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is the <dfn id=\"surrounding-agent\" variants=\"surrounding agents\">surrounding agent</dfn> for the code in those jobs. The code uses the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref> to access the specification-level execution objects held within the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>: the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>, the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>, and the <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>'s fields.</p>\n    <emu-table id=\"table-agent-record\" caption=\"Agent Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-agent-record\">#table-agent-record</span>: <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref> Fields</figcaption>\n      <table>\n        <tbody>\n          <tr>\n            <th>Field Name</th>\n            <th>Value</th>\n            <th>Meaning</th>\n          </tr>\n          <tr>\n            <td>[[LittleEndian]]</td>\n            <td>Boolean</td>\n            <td>The default value computed for the <em>isLittleEndian</em> parameter when it is needed by the algorithms <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref> and <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>. The choice is <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> and should be the alternative that is most efficient for the implementation. Once the value has been observed it cannot change.</td>\n          </tr>\n          <tr>\n            <td>[[CanBlock]]</td>\n            <td>Boolean</td>\n            <td>Determines whether the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> can block or not.</td>\n          </tr>\n          <tr>\n            <td>[[Signifier]]</td>\n            <td>Any globally-unique value</td>\n            <td>Uniquely identifies the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> within its <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref>.</td>\n          </tr>\n          <tr>\n            <td>[[IsLockFree1]]</td>\n            <td>Boolean</td>\n            <td><emu-val>true</emu-val> if atomic operations on one-<emu-not-ref>byte values</emu-not-ref> are lock-free, <emu-val>false</emu-val> otherwise.</td>\n          </tr>\n          <tr>\n            <td>[[IsLockFree2]]</td>\n            <td>Boolean</td>\n            <td><emu-val>true</emu-val> if atomic operations on two-<emu-not-ref>byte values</emu-not-ref> are lock-free, <emu-val>false</emu-val> otherwise.</td>\n          </tr>\n          <tr>\n            <td>[[IsLockFree8]]</td>\n            <td>Boolean</td>\n            <td><emu-val>true</emu-val> if atomic operations on eight-<emu-not-ref>byte values</emu-not-ref> are lock-free, <emu-val>false</emu-val> otherwise.</td>\n          </tr>\n          <tr>\n            <td>[[CandidateExecution]]</td>\n            <td>A <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref></td>\n            <td>See the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>.</td>\n          </tr>\n          <tr>\n            <td>[[KeptAlive]]</td>\n            <td><emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of objects</td>\n            <td>Initially a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>, representing the list of objects to be kept alive until the end of the current <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref></td>\n          </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <p>Once the values of [[Signifier]], [[IsLockFree1]], and [[IsLockFree2]] have been observed by any <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> in the <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref> they cannot change.</p>\n\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>The values of [[IsLockFree1]] and [[IsLockFree2]] are not necessarily determined by the hardware, but may also reflect implementation choices that can vary over time and between ECMAScript implementations.</p>\n\n      <p>There is no [[IsLockFree4]] property: 4-byte atomic operations are always lock-free.</p>\n\n      <p>In practice, if an atomic operation is implemented with any type of lock the operation is not lock-free. Lock-free does not imply wait-free: there is no upper bound on how many machine steps may be required to complete a lock-free atomic operation.</p>\n\n      <p>That an atomic access of size <em>n</em> is lock-free does not imply anything about the (perceived) atomicity of non-atomic accesses of size <em>n</em>, specifically, non-atomic accesses may still be performed as a sequence of several separate memory accesses. See <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> and <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> for details.</p>\n    </div></emu-note>\n\n    <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n      <p>An <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is a specification mechanism and need not correspond to any particular artefact of an ECMAScript implementation.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-agentsignifier\"><h1><span class=\"secnum\">9.7.1</span>#sec-agentsignifier AgentSignifier ( )</h1>...</div><div id=\"excluded-sec-agentcansuspend\"><h1><span class=\"secnum\">9.7.2</span>#sec-agentcansuspend AgentCanSuspend ( )</h1>...</div></emu-clause>\n\n  "}, "sec-expanded-years": {"num": "21.4.1.15.1", "title": "#sec-expanded-years Expanded Years", "html": "<emu-clause id=\"sec-expanded-years\" oldids=\"sec-extended-years\"><span id=\"sec-extended-years\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-expanded-years\">#sec-expanded-years</span> Expanded Years</h1>\n          <p><emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Covering</a></emu-xref> the full <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> range of approximately 273,790 years forward or backward from 1 January 1970 (<emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\" class=\"excluded-xref\" excluded-id=\"sec-time-values-and-time-range\">#sec-time-values-and-time-range</a></emu-xref>) requires representing years before 0 or after 9999. ISO 8601 permits expansion of the year representation, but only by mutual agreement of the partners in information interchange. In the simplified ECMAScript format, such an expanded year representation shall have 6 digits and is always prefixed with a + or - sign. The year 0 is considered positive and hence prefixed with a + sign. Strings matching the <emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\">Date Time String Format</a></emu-xref> with expanded years representing instants in time outside the range of a <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> are treated as unrecognizable by <emu-xref href=\"#sec-date.parse\"><a href=\"#sec-date.parse\"><code>Date.parse</code></a></emu-xref> and cause that function to return <emu-val>NaN</emu-val> without falling back to implementation-specific behaviour or heuristics.</p>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>Examples of date-<emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time values</a></emu-xref> with expanded years:</p>\n            <figure>\n              <table class=\"lightweight-table\">\n                <tbody>\n                  <tr>\n                    <td>-271821-04-20T00:00:00Z</td>\n                    <td>271822 B.C.</td>\n                  </tr>\n                  <tr>\n                    <td>-000001-01-01T00:00:00Z</td>\n                    <td>2 B.C.</td>\n                  </tr>\n                  <tr>\n                    <td>+000000-01-01T00:00:00Z</td>\n                    <td>1 B.C.</td>\n                  </tr>\n                  <tr>\n                    <td>+000001-01-01T00:00:00Z</td>\n                    <td>1 A.D.</td>\n                  </tr>\n                  <tr>\n                    <td>+001970-01-01T00:00:00Z</td>\n                    <td>1970 A.D.</td>\n                  </tr>\n                  <tr>\n                    <td>+002009-12-15T00:00:00Z</td>\n                    <td>2009 A.D.</td>\n                  </tr>\n                  <tr>\n                    <td>+275760-09-13T00:00:00Z</td>\n                    <td>275760 A.D.</td>\n                  </tr>\n                </tbody>\n              </table>\n            </figure>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-jobcallback-records": {"num": "9.5.1", "title": "#sec-jobcallback-records JobCallback Records", "html": "<emu-clause id=\"sec-jobcallback-records\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-jobcallback-records\">#sec-jobcallback-records</span> JobCallback Records</h1>\n      <p>A <dfn variants=\"JobCallback Records\">JobCallback Record</dfn> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> value used to store a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> and a <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> value. <emu-xref href=\"#function-object\"><a href=\"#function-object\">Function objects</a></emu-xref> that are invoked via a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> enqueued by the <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> may have additional <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> context. To propagate the state, <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closures</a></emu-xref> should not capture and call <emu-xref href=\"#function-object\"><a href=\"#function-object\">function objects</a></emu-xref> directly. Instead, use <emu-xref aoid=\"HostMakeJobCallback\"><a href=\"#sec-hostmakejobcallback\">HostMakeJobCallback</a></emu-xref> and <emu-xref aoid=\"HostCallJobCallback\"><a href=\"#sec-hostcalljobcallback\">HostCallJobCallback</a></emu-xref>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The WHATWG HTML specification (<a href=\"https://html.spec.whatwg.org/\">https://html.spec.whatwg.org/</a>), for example, uses the <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> value to propagate the incumbent settings object for Promise callbacks.</p>\n      </div></emu-note>\n      <p>JobCallback Records have the fields listed in <emu-xref href=\"#table-jobcallback-records\"><a href=\"#table-jobcallback-records\" class=\"excluded-xref\" excluded-id=\"table-jobcallback-records\">#table-jobcallback-records</a></emu-xref>.</p>\n      <emu-table id=\"table-jobcallback-records\" caption=\"JobCallback Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-jobcallback-records\">#table-jobcallback-records</span>: <emu-xref href=\"#sec-jobcallback-records\"><a href=\"#sec-jobcallback-records\">JobCallback Record</a></emu-xref> Fields</figcaption>\n        <table>\n          <tbody>\n            <tr>\n              <th>\n                Field Name\n              </th>\n              <th>\n                Value\n              </th>\n              <th>\n                Meaning\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[Callback]]\n              </td>\n              <td>\n                A <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>\n              </td>\n              <td>\n                The function to invoke when the <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> is invoked.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[HostDefined]]\n              </td>\n              <td>\n                Any, default value is <emu-const>empty</emu-const>.\n              </td>\n              <td>\n                Field reserved for use by <emu-xref href=\"#host\"><a href=\"#host\">hosts</a></emu-xref>.\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n    </emu-clause>\n\n    "}}, "figData": {"figure-module-graph-simple": "Figure 2", "figure-module-graph-missing": "Figure 3", "figure-module-graph-cycle": "Figure 4", "figure-module-graph-cycle-async": "Figure 5", "table-reference-record-fields": "Table 10", "table-tobigint": "Table 16", "table-jobcallback-records": "Table 32", "table-agent-record": "Table 33", "table-typeof-operator-results": "Table 42", "table-module-record-fields": "Table 45", "table-abstract-methods-of-module-records": "Table 46", "table-cyclic-module-fields": "Table 47", "table-cyclic-module-methods": "Table 48", "table-module-graph-cycle-async-fields-1": "Table 49", "table-module-graph-cycle-async-fields-2": "Table 50", "table-module-graph-cycle-async-fields-3": "Table 51", "table-module-graph-cycle-async-fields-4": "Table 52", "table-module-graph-cycle-async-fields-5": "Table 53", "table-module-graph-cycle-async-fields-6": "Table 54", "table-module-graph-cycle-async-fields-7": "Table 55", "table-module-graph-cycle-async-fields-8": "Table 56", "table-module-graph-cycle-async-fields-9": "Table 57", "table-readsharedmemory-fields": "Table 88", "table-writesharedmemory-fields": "Table 89", "table-rmwsharedmemory-fields": "Table 90", "table-agent-events-records": "Table 91", "table-chosen-value-records": "Table 92", "table-candidate-execution-records": "Table 93", "table-noid-2": "Table 95"}}, "to": {"secList": ["sec-candidate-executions", "sec-example-cyclic-module-record-graphs", "sec-cyclic-module-records", "sec-memory-model-fundamentals", "sec-IsHTMLDDA-internal-slot-typeof", "sec-chosen-value-records", "sec-reference-record-specification-type", "sec-assignment-operators-runtime-semantics-evaluation", "sec-agent-event-records", "sec-tobigint", "sec-applystringornumericbinaryoperator", "sec-agents", "sec-expanded-years", "sec-jobcallback-records"], "secData": {"sec-candidate-executions": {"num": "29.4", "title": "#sec-candidate-executions Candidate Executions", "html": "<emu-clause id=\"sec-candidate-executions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-candidate-executions\">#sec-candidate-executions</span> Candidate Executions</h1>\n    <p>A <dfn variants=\"candidate executions\">candidate execution</dfn> of the evaluation of an <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> with the following fields.</p>\n    <emu-table id=\"table-candidate-execution-records\" caption=\"Candidate Execution Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-candidate-execution-records\">#table-candidate-execution-records</span>: Candidate Execution <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> Fields</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>Field Name</th>\n          <th>Value</th>\n          <th>Meaning</th>\n        </tr>\n        <tr>\n          <td>[[EventsRecords]]</td>\n          <td>A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-agent-event-records\"><a href=\"#sec-agent-event-records\">Agent Events Records</a></emu-xref>.</td>\n          <td>Maps an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> to <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Lists</a></emu-xref> of events appended during the evaluation.</td>\n        </tr>\n        <tr>\n          <td>[[ChosenValues]]</td>\n          <td>A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-chosen-value-records\"><a href=\"#sec-chosen-value-records\">Chosen Value Records</a></emu-xref>.</td>\n          <td>Maps <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> events to the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">byte values</a></emu-xref> chosen during the evaluation.</td>\n        </tr>\n        <tr>\n          <td>[[AgentOrder]]</td>\n          <td>An <emu-xref aoid=\"agent-order\"><a href=\"#sec-agent-order\">agent-order</a></emu-xref> <emu-xref href=\"#sec-set-and-relation-specification-type\"><a href=\"#sec-set-and-relation-specification-type\">Relation</a></emu-xref>.</td>\n          <td>Defined below.</td>\n        </tr>\n        <tr>\n          <td>[[ReadsBytesFrom]]</td>\n          <td>A <emu-xref aoid=\"reads-bytes-from\"><a href=\"#sec-reads-bytes-from\">reads-bytes-from</a></emu-xref> mathematical function.</td>\n          <td>Defined below.</td>\n        </tr>\n        <tr>\n          <td>[[ReadsFrom]]</td>\n          <td>A <emu-xref aoid=\"reads-from\"><a href=\"#sec-reads-from\">reads-from</a></emu-xref> <emu-xref href=\"#sec-set-and-relation-specification-type\"><a href=\"#sec-set-and-relation-specification-type\">Relation</a></emu-xref>.</td>\n          <td>Defined below.</td>\n        </tr>\n        <tr>\n          <td>[[HostSynchronizesWith]]</td>\n          <td>A <emu-xref aoid=\"host-synchronizes-with\"><a href=\"#sec-host-synchronizes-with\">host-synchronizes-with</a></emu-xref> <emu-xref href=\"#sec-set-and-relation-specification-type\"><a href=\"#sec-set-and-relation-specification-type\">Relation</a></emu-xref>.</td>\n          <td>Defined below.</td>\n        </tr>\n        <tr>\n          <td>[[SynchronizesWith]]</td>\n          <td>A <emu-xref aoid=\"synchronizes-with\"><a href=\"#sec-synchronizes-with\">synchronizes-with</a></emu-xref> <emu-xref href=\"#sec-set-and-relation-specification-type\"><a href=\"#sec-set-and-relation-specification-type\">Relation</a></emu-xref>.</td>\n          <td>Defined below.</td>\n        </tr>\n        <tr>\n          <td>[[HappensBefore]]</td>\n          <td>A <emu-xref aoid=\"happens-before\"><a href=\"#sec-happens-before\">happens-before</a></emu-xref> <emu-xref href=\"#sec-set-and-relation-specification-type\"><a href=\"#sec-set-and-relation-specification-type\">Relation</a></emu-xref>.</td>\n          <td>Defined below.</td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <p>An <dfn variants=\"empty candidate executions\">empty candidate execution</dfn> is a candidate execution <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> whose fields are empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Lists</a></emu-xref> and Relations.</p>\n  </emu-clause>\n\n  "}, "sec-example-cyclic-module-record-graphs": {"num": "16.2.1.5.3", "title": "#sec-example-cyclic-module-record-graphs Example Cyclic Module Record Graphs", "html": "<emu-clause id=\"sec-example-cyclic-module-record-graphs\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-example-cyclic-module-record-graphs\">#sec-example-cyclic-module-record-graphs</span> Example Cyclic Module Record Graphs</h1>\n\n          <p>This non-normative section gives a series of examples of the linking and evaluation of a few common module graphs, with a specific focus on how errors can occur.</p>\n\n          <p>First consider the following simple module graph:</p>\n\n          <emu-figure id=\"figure-module-graph-simple\" caption=\"A simple module graph\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-simple\">#figure-module-graph-simple</span>: A simple module graph</figcaption>\n            <img alt=\"A module graph in which module A depends on module B, and module B depends on module C\" width=\"121\" height=\"211\" src=\"img/module-graph-simple.svg\">\n          </figure></emu-figure>\n\n          <p>Let's first assume that there are no error conditions. When a <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> first calls <var>A</var>.Link(), this will complete successfully by assumption, and recursively link modules <var>B</var> and <var>C</var> as well, such that <var>A</var>.[[Status]] = <var>B</var>.[[Status]] = <var>C</var>.[[Status]] = <emu-const>linked</emu-const>. This preparatory step can be performed at any time. Later, when the <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> is ready to incur any possible side effects of the modules, it can call <var>A</var>.Evaluate(), which will complete successfully, returning a Promise resolving to <emu-val>undefined</emu-val> (again by assumption), recursively having evaluated first <var>C</var> and then <var>B</var>. Each module's [[Status]] at this point will be <emu-const>evaluated</emu-const>.</p>\n          <p>Consider then cases involving linking errors. If <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> of <var>C</var> succeeds but, thereafter, fails for <var>B</var>, for example because it imports something that <var>C</var> does not provide, then the original <var>A</var>.Link() will fail, and both <var>A</var> and <var>B</var>'s [[Status]] remain <emu-const>unlinked</emu-const>. <var>C</var>'s [[Status]] has become <emu-const>linked</emu-const>, though.</p>\n\n          <p>Finally, consider a case involving evaluation errors. If <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> of <var>C</var> succeeds but, thereafter, fails for <var>B</var>, for example because <var>B</var> contains code that throws an exception, then the original <var>A</var>.Evaluate() will fail, returning a rejected Promise. The resulting exception will be recorded in both <var>A</var> and <var>B</var>'s [[EvaluationError]] fields, and their [[Status]] will become <emu-const>evaluated</emu-const>. <var>C</var> will also become <emu-const>evaluated</emu-const> but, in contrast to <var>A</var> and <var>B</var>, will remain without an [[EvaluationError]], as it successfully completed evaluation. Storing the exception ensures that any time a <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> tries to reuse <var>A</var> or <var>B</var> by calling their Evaluate() method, it will encounter the same exception. (<emu-xref href=\"#host\"><a href=\"#host\">Hosts</a></emu-xref> are not required to reuse <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Records</a></emu-xref>; similarly, <emu-xref href=\"#host\"><a href=\"#host\">hosts</a></emu-xref> are not required to expose the exception objects thrown by these methods. However, the specification enables such uses.)</p>\n\n          <p>The difference here between linking and evaluation errors is due to how evaluation must be only performed once, as it can cause side effects; it is thus important to remember whether evaluation has already been performed, even if unsuccessfully. (In the error case, it makes sense to also remember the exception because otherwise subsequent Evaluate() calls would have to synthesize a new one.) Linking, on the other hand, is side-effect-free, and thus even if it fails, it can be retried at a later time with no issues.</p>\n\n          <p>Now consider a different type of error condition:</p>\n\n          <emu-figure id=\"figure-module-graph-missing\" caption=\"A module graph with an unresolvable module\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-missing\">#figure-module-graph-missing</span>: A module graph with an unresolvable module</figcaption>\n            <img alt=\"A module graph in which module A depends on a missing (unresolvable) module, represented by ???\" width=\"121\" height=\"121\" src=\"img/module-graph-missing.svg\">\n          </figure></emu-figure>\n\n          <p>In this scenario, module <var>A</var> declares a dependency on some other module, but no <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> exists for that module, i.e. <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> throws an exception when asked for it. This could occur for a variety of reasons, such as the corresponding resource not existing, or the resource existing but <emu-xref aoid=\"ParseModule\"><a href=\"#sec-parsemodule\">ParseModule</a></emu-xref> throwing an exception when trying to parse the resulting source text. <emu-xref href=\"#host\"><a href=\"#host\">Hosts</a></emu-xref> can choose to expose the cause of failure via the exception they throw from <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>. In any case, this exception causes a linking failure, which as before results in <var>A</var>'s [[Status]] remaining <emu-const>unlinked</emu-const>.</p>\n\n          <p>Now, consider a module graph with a cycle:</p>\n\n          <emu-figure id=\"figure-module-graph-cycle\" caption=\"A cyclic module graph\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-cycle\">#figure-module-graph-cycle</span>: A cyclic module graph</figcaption>\n            <img alt=\"A module graph in which module A depends on module B and C, but module B also depends on module A\" width=\"181\" height=\"121\" src=\"img/module-graph-cycle.svg\">\n          </figure></emu-figure>\n\n          <p>Here we assume that the entry point is module <var>A</var>, so that the <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> proceeds by calling <var>A</var>.Link(), which performs <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>. This in turn calls <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>B</var>. Because of the cycle, this again triggers <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>, but at this point it is a no-op since <var>A</var>.[[Status]] is already <emu-const>linking</emu-const>. <var>B</var>.[[Status]] itself remains <emu-const>linking</emu-const> when control gets back to <var>A</var> and <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> is triggered on <var>C</var>. After this returns with <var>C</var>.[[Status]] being <emu-const>linked</emu-const>, both <var>A</var> and <var>B</var> transition from <emu-const>linking</emu-const> to <emu-const>linked</emu-const> together; this is by design, since they form a strongly connected component.</p>\n\n          <p>An analogous story occurs for the evaluation phase of a cyclic module graph, in the success case.</p>\n\n          <p>Now consider a case where <var>A</var> has an linking error; for example, it tries to import a binding from <var>C</var> that does not exist. In that case, the above steps still occur, including the early return from the second call to <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>. However, once we unwind back to the original <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>, it fails during InitializeEnvironment, namely right after <var>C</var>.ResolveExport(). The thrown <emu-val>SyntaxError</emu-val> exception propagates up to <var>A</var>.Link, which resets all modules that are currently on its <var>stack</var> (these are always exactly the modules that are still <emu-const>linking</emu-const>). Hence both <var>A</var> and <var>B</var> become <emu-const>unlinked</emu-const>. Note that <var>C</var> is left as <emu-const>linked</emu-const>.</p>\n\n          <p>Alternatively, consider a case where <var>A</var> has an evaluation error; for example, its source code throws an exception. In that case, the evaluation-time analog of the above steps still occurs, including the early return from the second call to <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>A</var>. However, once we unwind back to the original <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>A</var>, it fails by assumption. The exception thrown propagates up to <var>A</var>.Evaluate(), which records the error in all modules that are currently on its <var>stack</var> (i.e., the modules that are still <emu-const>evaluating</emu-const>) as well as via [[AsyncParentModules]], which form a chain for modules which contain or depend on top-level <code>await</code> through the whole dependency graph through the <emu-xref aoid=\"AsyncModuleExecutionRejected\"><a href=\"#sec-async-module-execution-rejected\">AsyncModuleExecutionRejected</a></emu-xref> algorithm. Hence both <var>A</var> and <var>B</var> become <emu-const>evaluated</emu-const> and the exception is recorded in both <var>A</var> and <var>B</var>'s [[EvaluationError]] fields, while <var>C</var> is left as <emu-const>evaluated</emu-const> with no [[EvaluationError]].</p>\n\n          <p>Lastly, consider a module graph with a cycle, where all modules complete asynchronously:</p>\n          <emu-figure id=\"figure-module-graph-cycle-async\" caption=\"An asynchronous cyclic module graph\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-cycle-async\">#figure-module-graph-cycle-async</span>: An asynchronous cyclic module graph</figcaption>\n            <img alt=\"A module graph in which module A depends on module B and C, module B depends on module D, module C depends on module D and E, and module D depends on module A\" width=\"241\" height=\"211\" src=\"img/module-graph-cycle-async.svg\">\n          </figure></emu-figure>\n          <p>Linking happens as before, and all modules end up with [[Status]] set to <emu-const>linked</emu-const>.</p>\n\n          <p>Calling <var>A</var>.Evaluate() calls <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>A</var>, <var>B</var>, and <var>D</var>, which all transition to <emu-const>evaluating</emu-const>. Then <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> is called on <var>A</var> again, which is a no-op because it is already <emu-const>evaluating</emu-const>. At this point, <var>D</var>.[[PendingAsyncDependencies]] is 0, so <emu-xref aoid=\"ExecuteAsyncModule\"><a href=\"#sec-execute-async-module\">ExecuteAsyncModule</a></emu-xref>(<var>D</var>) is called and we call <var>D</var>.ExecuteModule with a new PromiseCapability tracking the asynchronous execution of <var>D</var>. We unwind back to the <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>B</var>, setting <var>B</var>.[[PendingAsyncDependencies]] to 1 and <var>B</var>.[[AsyncEvaluation]] to <emu-val>true</emu-val>. We unwind back to the original <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>A</var>, setting <var>A</var>.[[PendingAsyncDependencies]] to 1. In the next iteration of the loop over <var>A</var>'s dependencies, we call <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>C</var> and thus on <var>D</var> (again a no-op) and <var>E</var>. As <var>E</var> has no dependencies and is not part of a cycle, we call <emu-xref aoid=\"ExecuteAsyncModule\"><a href=\"#sec-execute-async-module\">ExecuteAsyncModule</a></emu-xref>(<var>E</var>) in the same manner as <var>D</var> and <var>E</var> is immediately removed from the stack. We unwind once more to the original <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>A</var>, setting <var>C</var>.[[AsyncEvaluation]] to <emu-val>true</emu-val>. Now we finish the loop over <var>A</var>'s dependencies, set <var>A</var>.[[AsyncEvaluation]] to <emu-val>true</emu-val>, and remove the entire strongly connected component from the stack, transitioning all of the modules to <emu-const>evaluating-async</emu-const> at once. At this point, the fields of the modules are as given in <emu-xref href=\"#table-module-graph-cycle-async-fields-1\"><a href=\"#table-module-graph-cycle-async-fields-1\" class=\"excluded-xref\" excluded-id=\"table-module-graph-cycle-async-fields-1\">#table-module-graph-cycle-async-fields-1</a></emu-xref>.</p>\n\n          <emu-table id=\"table-module-graph-cycle-async-fields-1\" class=\"module-overflow\" caption=\"Module fields after the initial Evaluate() call\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-module-graph-cycle-async-fields-1\">#table-module-graph-cycle-async-fields-1</span>: Module fields after the initial Evaluate() call</figcaption>\n            <table>\n              <thead>\n                <tr>\n                  <th>Module</th>\n                  <th>[[DFSIndex]]</th>\n                  <th>[[DFSAncestorIndex]]</th>\n                  <th>[[Status]]</th>\n                  <th>[[AsyncEvaluation]]</th>\n                  <th>[[AsyncParentModules]]</th>\n                  <th>[[PendingAsyncDependencies]]</th>\n                </tr>\n              </thead>\n              <tbody>\n              <tr>\n                <th><var>A</var></th>\n                <td>0</td>\n                <td>0</td>\n                <td><emu-const>evaluating-async</emu-const></td>\n                <td><emu-val>true</emu-val></td>\n                <td>&#171; &#187;</td>\n                <td>2 (<var>B</var> and <var>C</var>)</td>\n              </tr>\n              <tr>\n                <th><var>B</var></th>\n                <td>1</td>\n                <td>0</td>\n                <td><emu-const>evaluating-async</emu-const></td>\n                <td><emu-val>true</emu-val></td>\n                <td>&#171; <var>A</var> &#187;</td>\n                <td>1 (<var>D</var>)</td>\n              </tr>\n              <tr>\n                <th><var>C</var></th>\n                <td>2</td>\n                <td>0</td>\n                <td><emu-const>evaluating-async</emu-const></td>\n                <td><emu-val>true</emu-val></td>\n                <td>&#171; <var>A</var> &#187;</td>\n                <td>2 (<var>D</var> and <var>E</var>)</td>\n              </tr>\n              <tr>\n                <th><var>D</var></th>\n                <td>3</td>\n                <td>0</td>\n                <td><emu-const>evaluating-async</emu-const></td>\n                <td><emu-val>true</emu-val></td>\n                <td>&#171; <var>B</var>, <var>C</var> &#187;</td>\n                <td>0</td>\n              </tr>\n              <tr>\n                <th><var>E</var></th>\n                <td>4</td>\n                <td>4</td>\n                <td><emu-const>evaluating-async</emu-const></td>\n                <td><emu-val>true</emu-val></td>\n                <td>&#171; <var>C</var> &#187;</td>\n                <td>0</td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n\n          <p>Let us assume that <var>E</var> finishes executing first. When that happens, <emu-xref aoid=\"AsyncModuleExecutionFulfilled\"><a href=\"#sec-async-module-execution-fulfilled\">AsyncModuleExecutionFulfilled</a></emu-xref> is called, <var>E</var>.[[Status]] is set to <emu-const>evaluated</emu-const> and <var>C</var>.[[PendingAsyncDependencies]] is decremented to become 1. The fields of the updated modules are as given in <emu-xref href=\"#table-module-graph-cycle-async-fields-2\"><a href=\"#table-module-graph-cycle-async-fields-2\" class=\"excluded-xref\" excluded-id=\"table-module-graph-cycle-async-fields-2\">#table-module-graph-cycle-async-fields-2</a></emu-xref>.</p>\n\n          <emu-table id=\"table-module-graph-cycle-async-fields-2\" class=\"module-overflow\" caption=\"Module fields after module _E_ finishes executing\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-module-graph-cycle-async-fields-2\">#table-module-graph-cycle-async-fields-2</span>: Module fields after module <var>E</var> finishes executing</figcaption>\n            <table>\n              <thead>\n                <tr>\n                  <th>Module</th>\n                  <th>[[DFSIndex]]</th>\n                  <th>[[DFSAncestorIndex]]</th>\n                  <th>[[Status]]</th>\n                  <th>[[AsyncEvaluation]]</th>\n                  <th>[[AsyncParentModules]]</th>\n                  <th>[[PendingAsyncDependencies]]</th>\n                </tr>\n              </thead>\n              <tbody>\n              <tr>\n                <th><var>C</var></th>\n                <td>2</td>\n                <td>0</td>\n                <td><emu-const>evaluating-async</emu-const></td>\n                <td><emu-val>true</emu-val></td>\n                <td>&#171; <var>A</var> &#187;</td>\n                <td>1 (<var>D</var>)</td>\n              </tr>\n              <tr>\n                <th><var>E</var></th>\n                <td>4</td>\n                <td>4</td>\n                <td><emu-const>evaluated</emu-const></td>\n                <td><emu-val>true</emu-val></td>\n                <td>&#171; <var>C</var> &#187;</td>\n                <td>0</td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n\n          <p><var>D</var> is next to finish (as it was the only module that was still executing). When that happens, <emu-xref aoid=\"AsyncModuleExecutionFulfilled\"><a href=\"#sec-async-module-execution-fulfilled\">AsyncModuleExecutionFulfilled</a></emu-xref> is called again and <var>D</var>.[[Status]] is set to <emu-const>evaluated</emu-const>. Then <var>B</var>.[[PendingAsyncDependencies]] is decremented to become 0, <emu-xref aoid=\"ExecuteAsyncModule\"><a href=\"#sec-execute-async-module\">ExecuteAsyncModule</a></emu-xref> is called on <var>B</var>, and it starts executing. <var>C</var>.[[PendingAsyncDependencies]] is also decremented to become 0, and <var>C</var> starts executing (potentially in parallel to <var>B</var> if <var>B</var> contains an <code>await</code>). The fields of the updated modules are as given in <emu-xref href=\"#table-module-graph-cycle-async-fields-3\"><a href=\"#table-module-graph-cycle-async-fields-3\" class=\"excluded-xref\" excluded-id=\"table-module-graph-cycle-async-fields-3\">#table-module-graph-cycle-async-fields-3</a></emu-xref>.</p>\n\n          <emu-table id=\"table-module-graph-cycle-async-fields-3\" class=\"module-overflow\" caption=\"Module fields after module _D_ finishes executing\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-module-graph-cycle-async-fields-3\">#table-module-graph-cycle-async-fields-3</span>: Module fields after module <var>D</var> finishes executing</figcaption>\n            <table>\n              <thead>\n                <tr>\n                  <th>Module</th>\n                  <th>[[DFSIndex]]</th>\n                  <th>[[DFSAncestorIndex]]</th>\n                  <th>[[Status]]</th>\n                  <th>[[AsyncEvaluation]]</th>\n                  <th>[[AsyncParentModules]]</th>\n                  <th>[[PendingAsyncDependencies]]</th>\n                </tr>\n              </thead>\n              <tbody>\n              <tr>\n                <th><var>B</var></th>\n                <td>1</td>\n                <td>0</td>\n                <td><emu-const>evaluating-async</emu-const></td>\n                <td><emu-val>true</emu-val></td>\n                <td>&#171; <var>A</var> &#187;</td>\n                <td>0</td>\n              </tr>\n              <tr>\n                <th><var>C</var></th>\n                <td>2</td>\n                <td>0</td>\n                <td><emu-const>evaluating-async</emu-const></td>\n                <td><emu-val>true</emu-val></td>\n                <td>&#171; <var>A</var> &#187;</td>\n                <td>0</td>\n              </tr>\n              <tr>\n                <th><var>D</var></th>\n                <td>3</td>\n                <td>0</td>\n                <td><emu-const>evaluated</emu-const></td>\n                <td><emu-val>true</emu-val></td>\n                <td>&#171; <var>B</var>, <var>C</var> &#187;</td>\n                <td>0</td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n\n          <p>Let us assume that <var>C</var> finishes executing next. When that happens, <emu-xref aoid=\"AsyncModuleExecutionFulfilled\"><a href=\"#sec-async-module-execution-fulfilled\">AsyncModuleExecutionFulfilled</a></emu-xref> is called again, <var>C</var>.[[Status]] is set to <emu-const>evaluated</emu-const> and <var>A</var>.[[PendingAsyncDependencies]] is decremented to become 1. The fields of the updated modules are as given in <emu-xref href=\"#table-module-graph-cycle-async-fields-4\"><a href=\"#table-module-graph-cycle-async-fields-4\" class=\"excluded-xref\" excluded-id=\"table-module-graph-cycle-async-fields-4\">#table-module-graph-cycle-async-fields-4</a></emu-xref>.</p>\n\n          <emu-table id=\"table-module-graph-cycle-async-fields-4\" class=\"module-overflow\" caption=\"Module fields after module _C_ finishes executing\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-module-graph-cycle-async-fields-4\">#table-module-graph-cycle-async-fields-4</span>: Module fields after module <var>C</var> finishes executing</figcaption>\n            <table>\n              <thead>\n                <tr>\n                  <th>Module</th>\n                  <th>[[DFSIndex]]</th>\n                  <th>[[DFSAncestorIndex]]</th>\n                  <th>[[Status]]</th>\n                  <th>[[AsyncEvaluation]]</th>\n                  <th>[[AsyncParentModules]]</th>\n                  <th>[[PendingAsyncDependencies]]</th>\n                </tr>\n              </thead>\n              <tbody>\n              <tr>\n                <th><var>A</var></th>\n                <td>0</td>\n                <td>0</td>\n                <td><emu-const>evaluating-async</emu-const></td>\n                <td><emu-val>true</emu-val></td>\n                <td>&#171; &#187;</td>\n                <td>1 (<var>B</var>)</td>\n              </tr>\n              <tr>\n                <th><var>C</var></th>\n                <td>2</td>\n                <td>0</td>\n                <td><emu-const>evaluated</emu-const></td>\n                <td><emu-val>true</emu-val></td>\n                <td>&#171; <var>A</var> &#187;</td>\n                <td>0</td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n\n          <p>Then, <var>B</var> finishes executing. When that happens, <emu-xref aoid=\"AsyncModuleExecutionFulfilled\"><a href=\"#sec-async-module-execution-fulfilled\">AsyncModuleExecutionFulfilled</a></emu-xref> is called again and <var>B</var>.[[Status]] is set to <emu-const>evaluated</emu-const>. <var>A</var>.[[PendingAsyncDependencies]] is decremented to become 0, so <emu-xref aoid=\"ExecuteAsyncModule\"><a href=\"#sec-execute-async-module\">ExecuteAsyncModule</a></emu-xref> is called and it starts executing. The fields of the updated modules are as given in <emu-xref href=\"#table-module-graph-cycle-async-fields-5\"><a href=\"#table-module-graph-cycle-async-fields-5\" class=\"excluded-xref\" excluded-id=\"table-module-graph-cycle-async-fields-5\">#table-module-graph-cycle-async-fields-5</a></emu-xref>.</p>\n\n          <emu-table id=\"table-module-graph-cycle-async-fields-5\" class=\"module-overflow\" caption=\"Module fields after module _B_ finishes executing\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-module-graph-cycle-async-fields-5\">#table-module-graph-cycle-async-fields-5</span>: Module fields after module <var>B</var> finishes executing</figcaption>\n            <table>\n              <thead>\n                <tr>\n                  <th>Module</th>\n                  <th>[[DFSIndex]]</th>\n                  <th>[[DFSAncestorIndex]]</th>\n                  <th>[[Status]]</th>\n                  <th>[[AsyncEvaluation]]</th>\n                  <th>[[AsyncParentModules]]</th>\n                  <th>[[PendingAsyncDependencies]]</th>\n                </tr>\n              </thead>\n              <tbody>\n              <tr>\n                <th><var>A</var></th>\n                <td>0</td>\n                <td>0</td>\n                <td><emu-const>evaluating-async</emu-const></td>\n                <td><emu-val>true</emu-val></td>\n                <td>&#171; &#187;</td>\n                <td>0</td>\n              </tr>\n              <tr>\n                <th><var>B</var></th>\n                <td>1</td>\n                <td>0</td>\n                <td><emu-const>evaluated</emu-const></td>\n                <td><emu-val>true</emu-val></td>\n                <td>&#171; <var>A</var> &#187;</td>\n                <td>0</td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n\n          <p>Finally, <var>A</var> finishes executing. When that happens, <emu-xref aoid=\"AsyncModuleExecutionFulfilled\"><a href=\"#sec-async-module-execution-fulfilled\">AsyncModuleExecutionFulfilled</a></emu-xref> is called again and <var>A</var>.[[Status]] is set to <emu-const>evaluated</emu-const>. At this point, the Promise in <var>A</var>.[[TopLevelCapability]] (which was returned from <var>A</var>.Evaluate()) is resolved, and this concludes the handling of this module graph. The fields of the updated module are as given in <emu-xref href=\"#table-module-graph-cycle-async-fields-6\"><a href=\"#table-module-graph-cycle-async-fields-6\" class=\"excluded-xref\" excluded-id=\"table-module-graph-cycle-async-fields-6\">#table-module-graph-cycle-async-fields-6</a></emu-xref>.</p>\n\n          <emu-table id=\"table-module-graph-cycle-async-fields-6\" class=\"module-overflow\" caption=\"Module fields after module _A_ finishes executing\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-module-graph-cycle-async-fields-6\">#table-module-graph-cycle-async-fields-6</span>: Module fields after module <var>A</var> finishes executing</figcaption>\n            <table>\n              <thead>\n                <tr>\n                  <th>Module</th>\n                  <th>[[DFSIndex]]</th>\n                  <th>[[DFSAncestorIndex]]</th>\n                  <th>[[Status]]</th>\n                  <th>[[AsyncEvaluation]]</th>\n                  <th>[[AsyncParentModules]]</th>\n                  <th>[[PendingAsyncDependencies]]</th>\n                </tr>\n              </thead>\n              <tbody>\n              <tr>\n                <th><var>A</var></th>\n                <td>0</td>\n                <td>0</td>\n                <td><emu-const>evaluated</emu-const></td>\n                <td><emu-val>true</emu-val></td>\n                <td>&#171; &#187;</td>\n                <td>0</td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n\n          <p>Alternatively, consider a failure case where <var>C</var> fails execution and returns an error before <var>B</var> has finished executing. When that happens, <emu-xref aoid=\"AsyncModuleExecutionRejected\"><a href=\"#sec-async-module-execution-rejected\">AsyncModuleExecutionRejected</a></emu-xref> is called, which sets <var>C</var>.[[Status]] to <emu-const>evaluated</emu-const> and <var>C</var>.[[EvaluationError]] to the error. It then propagates this error to all of the AsyncParentModules by performing <emu-xref aoid=\"AsyncModuleExecutionRejected\"><a href=\"#sec-async-module-execution-rejected\">AsyncModuleExecutionRejected</a></emu-xref> on each of them. The fields of the updated modules are as given in <emu-xref href=\"#table-module-graph-cycle-async-fields-7\"><a href=\"#table-module-graph-cycle-async-fields-7\" class=\"excluded-xref\" excluded-id=\"table-module-graph-cycle-async-fields-7\">#table-module-graph-cycle-async-fields-7</a></emu-xref>.</p>\n\n          <emu-table id=\"table-module-graph-cycle-async-fields-7\" class=\"module-overflow\" caption=\"Module fields after module _C_ finishes with an error\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-module-graph-cycle-async-fields-7\">#table-module-graph-cycle-async-fields-7</span>: Module fields after module <var>C</var> finishes with an error</figcaption>\n            <table>\n              <thead>\n                <tr>\n                  <th>Module</th>\n                  <th>[[DFSIndex]]</th>\n                  <th>[[DFSAncestorIndex]]</th>\n                  <th>[[Status]]</th>\n                  <th>[[AsyncEvaluation]]</th>\n                  <th>[[AsyncParentModules]]</th>\n                  <th>[[PendingAsyncDependencies]]</th>\n                  <th>[[EvaluationError]]</th>\n                </tr>\n              </thead>\n              <tbody>\n              <tr>\n                <th><var>A</var></th>\n                <td>0</td>\n                <td>0</td>\n                <td><emu-const>evaluated</emu-const></td>\n                <td><emu-val>true</emu-val></td>\n                <td>&#171; &#187;</td>\n                <td>1 (<var>B</var>)</td>\n                <td><emu-const>empty</emu-const></td>\n              </tr>\n              <tr>\n                <th><var>C</var></th>\n                <td>2</td>\n                <td>1</td>\n                <td><emu-const>evaluated</emu-const></td>\n                <td><emu-val>true</emu-val></td>\n                <td>&#171; <var>A</var> &#187;</td>\n                <th>0</th>\n                <td><var>C</var>'s evaluation error</td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n\n          <p><var>A</var> will be rejected with the same error as <var>C</var> since <var>C</var> will call <emu-xref aoid=\"AsyncModuleExecutionRejected\"><a href=\"#sec-async-module-execution-rejected\">AsyncModuleExecutionRejected</a></emu-xref> on <var>A</var> with <var>C</var>'s error. <var>A</var>.[[Status]] is set to <emu-const>evaluated</emu-const>. At this point the Promise in <var>A</var>.[[TopLevelCapability]] (which was returned from <var>A</var>.Evaluate()) is rejected. The fields of the updated module are as given in <emu-xref href=\"#table-module-graph-cycle-async-fields-8\"><a href=\"#table-module-graph-cycle-async-fields-8\" class=\"excluded-xref\" excluded-id=\"table-module-graph-cycle-async-fields-8\">#table-module-graph-cycle-async-fields-8</a></emu-xref>.</p>\n\n          <emu-table id=\"table-module-graph-cycle-async-fields-8\" class=\"module-overflow\" caption=\"Module fields after module _A_ is rejected\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-module-graph-cycle-async-fields-8\">#table-module-graph-cycle-async-fields-8</span>: Module fields after module <var>A</var> is rejected</figcaption>\n            <table>\n              <thead>\n                <tr>\n                  <th>Module</th>\n                  <th>[[DFSIndex]]</th>\n                  <th>[[DFSAncestorIndex]]</th>\n                  <th>[[Status]]</th>\n                  <th>[[AsyncEvaluation]]</th>\n                  <th>[[AsyncParentModules]]</th>\n                  <th>[[PendingAsyncDependencies]]</th>\n                  <th>[[EvaluationError]]</th>\n                </tr>\n              </thead>\n              <tbody>\n              <tr>\n                <th><var>A</var></th>\n                <td>0</td>\n                <td>0</td>\n                <td><emu-const>evaluated</emu-const></td>\n                <td><emu-val>true</emu-val></td>\n                <td>&#171; &#187;</td>\n                <td>0</td>\n                <td><var>C</var>'s Evaluation Error</td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n\n          <p>Then, <var>B</var> finishes executing without an error. When that happens, <emu-xref aoid=\"AsyncModuleExecutionFulfilled\"><a href=\"#sec-async-module-execution-fulfilled\">AsyncModuleExecutionFulfilled</a></emu-xref> is called again and <var>B</var>.[[Status]] is set to <emu-const>evaluated</emu-const>. <emu-xref aoid=\"GatherAvailableAncestors\"><a href=\"#sec-gather-available-ancestors\">GatherAvailableAncestors</a></emu-xref> is called on <var>B</var>. However, <var>A</var>.[[CycleRoot]] is <var>A</var> which has an evaluation error, so it will not be added to the returned <var>sortedExecList</var> and <emu-xref aoid=\"AsyncModuleExecutionFulfilled\"><a href=\"#sec-async-module-execution-fulfilled\">AsyncModuleExecutionFulfilled</a></emu-xref> will return without further processing. Any future importer of <var>B</var> will resolve the rejection of <var>B</var>.[[CycleRoot]].[[EvaluationError]] from the evaluation error from <var>C</var> that was set on the cycle root <var>A</var>. The fields of the updated modules are as given in <emu-xref href=\"#table-module-graph-cycle-async-fields-9\"><a href=\"#table-module-graph-cycle-async-fields-9\" class=\"excluded-xref\" excluded-id=\"table-module-graph-cycle-async-fields-9\">#table-module-graph-cycle-async-fields-9</a></emu-xref>.</p>\n\n          <emu-table id=\"table-module-graph-cycle-async-fields-9\" class=\"module-overflow\" caption=\"Module fields after module _B_ finishes executing in an erroring graph\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-module-graph-cycle-async-fields-9\">#table-module-graph-cycle-async-fields-9</span>: Module fields after module <var>B</var> finishes executing in an erroring graph</figcaption>\n            <table>\n              <thead>\n                <tr>\n                  <th>Module</th>\n                  <th>[[DFSIndex]]</th>\n                  <th>[[DFSAncestorIndex]]</th>\n                  <th>[[Status]]</th>\n                  <th>[[AsyncEvaluation]]</th>\n                  <th>[[AsyncParentModules]]</th>\n                  <th>[[PendingAsyncDependencies]]</th>\n                  <th>[[EvaluationError]]</th>\n                </tr>\n              </thead>\n              <tbody>\n              <tr>\n                <th><var>A</var></th>\n                <td>0</td>\n                <td>0</td>\n                <td><emu-const>evaluated</emu-const></td>\n                <td><emu-val>true</emu-val></td>\n                <td>&#171; &#187;</td>\n                <td>0</td>\n                <td><var>C</var>'s Evaluation Error</td>\n              </tr>\n              <tr>\n                <th><var>B</var></th>\n                <td>1</td>\n                <td>0</td>\n                <td><emu-const>evaluated</emu-const></td>\n                <td><emu-val>true</emu-val></td>\n                <td>&#171; <var>A</var> &#187;</td>\n                <td>0</td>\n                <td><emu-const>empty</emu-const></td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </emu-clause>\n      "}, "sec-cyclic-module-records": {"num": "16.2.1.5", "title": "#sec-cyclic-module-records Cyclic Module Records", "html": "<emu-clause id=\"sec-cyclic-module-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-cyclic-module-records\">#sec-cyclic-module-records</span> Cyclic Module Records</h1>\n        <p>A <dfn id=\"cyclic-module-record\" variants=\"Cyclic Module Records\">Cyclic Module Record</dfn> is used to represent information about a module that can participate in dependency cycles with other modules that are subclasses of the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> type. <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Records</a></emu-xref> that are not subclasses of the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> type must not participate in dependency cycles with <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Records</a></emu-xref>.</p>\n        <p>In addition to the fields defined in <emu-xref href=\"#table-module-record-fields\"><a href=\"#table-module-record-fields\" class=\"excluded-xref\" excluded-id=\"table-module-record-fields\">#table-module-record-fields</a></emu-xref> <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Records</a></emu-xref> have the additional fields listed in <emu-xref href=\"#table-cyclic-module-fields\"><a href=\"#table-cyclic-module-fields\" class=\"excluded-xref\" excluded-id=\"table-cyclic-module-fields\">#table-cyclic-module-fields</a></emu-xref></p>\n        <emu-table id=\"table-cyclic-module-fields\" caption=\"Additional Fields of Cyclic Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-cyclic-module-fields\">#table-cyclic-module-fields</span>: Additional Fields of <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Records</a></emu-xref></figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              </th>\n              <th>\n                Value Type\n              </th>\n              <th>\n                Meaning\n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[Status]]\n              </td>\n              <td>\n                <emu-const>unlinked</emu-const> | <emu-const>linking</emu-const> | <emu-const>linked</emu-const> | <emu-const>evaluating</emu-const> | <emu-const>evaluating-async</emu-const> | <emu-const>evaluated</emu-const>\n              </td>\n              <td>\n                Initially <emu-const>unlinked</emu-const>. Transitions to <emu-const>linking</emu-const>, <emu-const>linked</emu-const>, <emu-const>evaluating</emu-const>, possibly <emu-const>evaluating-async</emu-const>, <emu-const>evaluated</emu-const> (in that order) as the module progresses throughout its lifecycle. <emu-const>evaluating-async</emu-const> indicates this module is queued to execute on completion of its asynchronous dependencies or it is a module whose [[HasTLA]] field is <emu-val>true</emu-val> that has been executed and is pending top-level completion.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[EvaluationError]]\n              </td>\n              <td>\n                An <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> | <emu-const>empty</emu-const>\n              </td>\n              <td>\n                A completion of type <emu-const>throw</emu-const> representing the exception that occurred during evaluation. <emu-val>undefined</emu-val> if no exception occurred or if [[Status]] is not <emu-const>evaluated</emu-const>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[DFSIndex]]\n              </td>\n              <td>\n                <emu-xref href=\"#integer\"><a href=\"#integer\">Integer</a></emu-xref> | <emu-const>empty</emu-const>\n              </td>\n              <td>\n                Auxiliary field used during Link and Evaluate only. If [[Status]] is <emu-const>linking</emu-const> or <emu-const>evaluating</emu-const>, this non-negative number records the point at which the module was first visited during the depth-first traversal of the dependency graph.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[DFSAncestorIndex]]\n              </td>\n              <td>\n                <emu-xref href=\"#integer\"><a href=\"#integer\">Integer</a></emu-xref> | <emu-const>empty</emu-const>\n              </td>\n              <td>\n                Auxiliary field used during Link and Evaluate only. If [[Status]] is <emu-const>linking</emu-const> or <emu-const>evaluating</emu-const>, this is either the module's own [[DFSIndex]] or that of an \"earlier\" module in the same strongly connected component.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[RequestedModules]]\n              </td>\n              <td>\n                <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of String\n              </td>\n              <td>\n                A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of all the <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> strings used by the module represented by this record to request the importation of a module. The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is source code occurrence ordered.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[CycleRoot]]\n              </td>\n              <td>\n                <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> | <emu-const>empty</emu-const>\n              </td>\n              <td>\n                The first visited module of the cycle, the root DFS ancestor of the strongly connected component. For a module not in a cycle this would be the module itself. Once Evaluate has completed, a module's [[DFSAncestorIndex]] is equal to the [[DFSIndex]] of its [[CycleRoot]].\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[HasTLA]]\n              </td>\n              <td>\n                Boolean\n              </td>\n              <td>\n                Whether this module is individually asynchronous (for example, if it's a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> containing a top-level await). Having an asynchronous dependency does not mean this field is <emu-val>true</emu-val>. This field must not change after the module is parsed.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[AsyncEvaluation]]\n              </td>\n              <td>\n                Boolean\n              </td>\n              <td>\n                Whether this module is either itself asynchronous or has an asynchronous dependency. Note: The order in which this field is set is used to order queued executions, see <emu-xref href=\"#sec-async-module-execution-fulfilled\"><a href=\"#sec-async-module-execution-fulfilled\" class=\"excluded-xref\" excluded-id=\"sec-async-module-execution-fulfilled\">#sec-async-module-execution-fulfilled</a></emu-xref>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[TopLevelCapability]]\n              </td>\n              <td>\n                <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref> | <emu-const>empty</emu-const>\n              </td>\n              <td>\n                If this module is the [[CycleRoot]] of some cycle, and Evaluate() was called on some module in that cycle, this field contains the <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref> for that entire evaluation. It is used to settle the Promise object that is returned from the Evaluate() abstract method. This field will be <emu-const>empty</emu-const> for any dependencies of that module, unless a top-level Evaluate() has been initiated for some of those dependencies.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[AsyncParentModules]]\n              </td>\n              <td>\n                <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Records</a></emu-xref>\n              </td>\n              <td>\n                If this module or a dependency has [[HasTLA]] <emu-val>true</emu-val>, and execution is in progress, this tracks the parent importers of this module for the top-level execution job. These parent modules will not start executing before this module has successfully completed execution.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[PendingAsyncDependencies]]\n              </td>\n              <td>\n                <emu-xref href=\"#integer\"><a href=\"#integer\">Integer</a></emu-xref> | <emu-const>empty</emu-const>\n              </td>\n              <td>\n                If this module has any asynchronous dependencies, this tracks the number of asynchronous dependency modules remaining to execute for this module. A module with asynchronous dependencies will be executed when this field reaches 0 and there are no execution errors.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>In addition to the methods defined in <emu-xref href=\"#table-abstract-methods-of-module-records\"><a href=\"#table-abstract-methods-of-module-records\" class=\"excluded-xref\" excluded-id=\"table-abstract-methods-of-module-records\">#table-abstract-methods-of-module-records</a></emu-xref> <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Records</a></emu-xref> have the additional methods listed in <emu-xref href=\"#table-cyclic-module-methods\"><a href=\"#table-cyclic-module-methods\" class=\"excluded-xref\" excluded-id=\"table-cyclic-module-methods\">#table-cyclic-module-methods</a></emu-xref></p>\n        <emu-table id=\"table-cyclic-module-methods\" caption=\"Additional Abstract Methods of Cyclic Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-cyclic-module-methods\">#table-cyclic-module-methods</span>: Additional Abstract Methods of <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Records</a></emu-xref></figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Method\n              </th>\n              <th>\n                Purpose\n              </th>\n            </tr>\n            <tr>\n              <td>\n                InitializeEnvironment()\n              </td>\n              <td>\n                Initialize the <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> of the module, including resolving all imported bindings, and create the module's <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                ExecuteModule( [ <var>promiseCapability</var> ] )\n              </td>\n              <td>\n                Evaluate the module's code within its <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>. If this module has <emu-val>true</emu-val> in [[HasTLA]], then a <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref> is passed as an argument, and the method is expected to resolve or reject the given capability. In this case, the method must not throw an exception, but instead reject the <emu-xref href=\"#sec-promisecapability-records\"><a href=\"#sec-promisecapability-records\">PromiseCapability Record</a></emu-xref> if necessary.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n\n        <div id=\"excluded-sec-moduledeclarationlinking\"><h1><span class=\"secnum\">16.2.1.5.1</span>#sec-moduledeclarationlinking Link ( )</h1>...</div><div id=\"excluded-sec-moduleevaluation\"><h1><span class=\"secnum\">16.2.1.5.2</span>#sec-moduleevaluation Evaluate ( )</h1>...</div><div id=\"excluded-sec-example-cyclic-module-record-graphs\"><h1><span class=\"secnum\">16.2.1.5.3</span>#sec-example-cyclic-module-record-graphs Example Cyclic Module Record Graphs</h1>...</div></emu-clause>\n\n      "}, "sec-memory-model-fundamentals": {"num": "29.1", "title": "#sec-memory-model-fundamentals Memory Model Fundamentals", "html": "<emu-clause id=\"sec-memory-model-fundamentals\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-memory-model-fundamentals\">#sec-memory-model-fundamentals</span> Memory Model Fundamentals</h1>\n    <p>Shared memory accesses (reads and writes) are divided into two groups, atomic accesses and data accesses, defined below. Atomic accesses are sequentially consistent, i.e., there is a strict total ordering of events agreed upon by all <emu-xref href=\"#agent\"><a href=\"#agent\">agents</a></emu-xref> in an <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref>. Non-atomic accesses do not have a strict total ordering agreed upon by all <emu-xref href=\"#agent\"><a href=\"#agent\">agents</a></emu-xref>, i.e., unordered.</p>\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p>No orderings weaker than sequentially consistent and stronger than unordered, such as release-acquire, are supported.</p>\n    </div></emu-note>\n    <p>A <dfn variants=\"Shared Data Block events\">Shared Data Block event</dfn> is either a <dfn>ReadSharedMemory</dfn>, <dfn>WriteSharedMemory</dfn>, or <dfn>ReadModifyWriteSharedMemory</dfn> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>.</p>\n\n    <emu-table id=\"table-readsharedmemory-fields\" caption=\"ReadSharedMemory Event Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-readsharedmemory-fields\">#table-readsharedmemory-fields</span>: <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> Event Fields</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>Field Name</th>\n          <th>Value</th>\n          <th>Meaning</th>\n        </tr>\n        <tr>\n          <td>[[Order]]</td>\n          <td><emu-const>SeqCst</emu-const> | <emu-const>Unordered</emu-const></td>\n          <td>The weakest ordering guaranteed by the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> for the event.</td>\n        </tr>\n        <tr>\n          <td>[[NoTear]]</td>\n          <td>A Boolean</td>\n          <td>Whether this event is allowed to read from multiple write events on equal range as this event.</td>\n        </tr>\n        <tr>\n          <td>[[Block]]</td>\n          <td>A <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref></td>\n          <td>The block the event operates on.</td>\n        </tr>\n        <tr>\n          <td>[[ByteIndex]]</td>\n          <td>A non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n          <td>The byte address of the read in [[Block]].</td>\n        </tr>\n        <tr>\n          <td>[[ElementSize]]</td>\n          <td>A non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n          <td>The size of the read.</td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <emu-table id=\"table-writesharedmemory-fields\" caption=\"WriteSharedMemory Event Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-writesharedmemory-fields\">#table-writesharedmemory-fields</span>: <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> Event Fields</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>Field Name</th>\n          <th>Value</th>\n          <th>Meaning</th>\n        </tr>\n        <tr>\n          <td>[[Order]]</td>\n          <td><emu-const>SeqCst</emu-const> | <emu-const>Unordered</emu-const> | <emu-const>Init</emu-const></td>\n          <td>The weakest ordering guaranteed by the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> for the event.</td>\n        </tr>\n        <tr>\n          <td>[[NoTear]]</td>\n          <td>A Boolean</td>\n          <td>Whether this event is allowed to be read from multiple read events with equal range as this event.</td>\n        </tr>\n        <tr>\n          <td>[[Block]]</td>\n          <td>A <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref></td>\n          <td>The block the event operates on.</td>\n        </tr>\n        <tr>\n          <td>[[ByteIndex]]</td>\n          <td>A non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n          <td>The byte address of the write in [[Block]].</td>\n        </tr>\n        <tr>\n          <td>[[ElementSize]]</td>\n          <td>A non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n          <td>The size of the write.</td>\n        </tr>\n        <tr>\n          <td>[[Payload]]</td>\n          <td>A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref></td>\n          <td>The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">byte values</a></emu-xref> to be read by other events.</td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <emu-table id=\"table-rmwsharedmemory-fields\" caption=\"ReadModifyWriteSharedMemory Event Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-rmwsharedmemory-fields\">#table-rmwsharedmemory-fields</span>: <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> Event Fields</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>Field Name</th>\n          <th>Value</th>\n          <th>Meaning</th>\n        </tr>\n        <tr>\n          <td>[[Order]]</td>\n          <td><emu-const>SeqCst</emu-const></td>\n          <td>Read-modify-write events are always sequentially consistent.</td>\n        </tr>\n        <tr>\n          <td>[[NoTear]]</td>\n          <td><emu-val>true</emu-val></td>\n          <td>Read-modify-write events cannot tear.</td>\n        </tr>\n        <tr>\n          <td>[[Block]]</td>\n          <td>A <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref></td>\n          <td>The block the event operates on.</td>\n        </tr>\n        <tr>\n          <td>[[ByteIndex]]</td>\n          <td>A non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n          <td>The byte address of the read-modify-write in [[Block]].</td>\n        </tr>\n        <tr>\n          <td>[[ElementSize]]</td>\n          <td>A non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n          <td>The size of the read-modify-write.</td>\n        </tr>\n        <tr>\n          <td>[[Payload]]</td>\n          <td>A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref></td>\n          <td>The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">byte values</a></emu-xref> to be passed to [[ModifyOp]].</td>\n        </tr>\n        <tr>\n          <td>[[ModifyOp]]</td>\n          <td>A <emu-xref href=\"#sec-arraybuffer-notation\"><a href=\"#sec-arraybuffer-notation\">read-modify-write modification function</a></emu-xref></td>\n          <td>An abstract closure that returns a modified <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">byte values</a></emu-xref> from a read <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">byte values</a></emu-xref> and [[Payload]].</td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <p>These events are introduced by <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> or by methods on the Atomics object.</p>\n    <p>Some operations may also introduce <dfn>Synchronize</dfn> events. A <dfn variants=\"Synchronize events\">Synchronize event</dfn> has no fields, and exists purely to directly constrain the permitted orderings of other events.</p>\n    <p>In addition to <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref> and Synchronize events, there are <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref>-specific events.</p>\n    <p>Let the range of a ReadSharedMemory, WriteSharedMemory, or ReadModifyWriteSharedMemory event be the Set of contiguous <emu-xref href=\"#integer\"><a href=\"#integer\">integers</a></emu-xref> from its [[ByteIndex]] to [[ByteIndex]] + [[ElementSize]] - 1. Two events' ranges are equal when the events have the same [[Block]], and the ranges are element-wise equal. Two events' ranges are overlapping when the events have the same [[Block]], the ranges are not equal and their intersection is non-empty. Two events' ranges are disjoint when the events do not have the same [[Block]] or their ranges are neither equal nor overlapping.</p>\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>Examples of <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref>-specific synchronizing events that should be accounted for are: sending a SharedArrayBuffer from one <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> to another (e.g., by <code>postMessage</code> in a browser), starting and stopping <emu-xref href=\"#agent\"><a href=\"#agent\">agents</a></emu-xref>, and communicating within the <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref> via channels other than shared memory. It is assumed those events are appended to <emu-xref aoid=\"agent-order\"><a href=\"#sec-agent-order\">agent-order</a></emu-xref> during evaluation like the other SharedArrayBuffer events.</p>\n    </div></emu-note>\n    <p>Events are ordered within <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate executions</a></emu-xref> by the relations defined below.</p>\n  </emu-clause>\n\n  "}, "sec-IsHTMLDDA-internal-slot-typeof": {"num": "B.3.6.3", "title": "#sec-IsHTMLDDA-internal-slot-typeof Changes to the typeof Operator", "html": "<emu-annex id=\"sec-IsHTMLDDA-internal-slot-typeof\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-IsHTMLDDA-internal-slot-typeof\">#sec-IsHTMLDDA-internal-slot-typeof</span> Changes to the <code>typeof</code> Operator</h1>\n        <p>The following table entry is inserted into <emu-xref href=\"#table-typeof-operator-results\"><a href=\"#table-typeof-operator-results\" class=\"excluded-xref\" excluded-id=\"table-typeof-operator-results\">#table-typeof-operator-results</a></emu-xref> immediately preceding the entry for \"Object (implements [[Call]])\":</p>\n        <emu-table><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-noid-2\">#table-noid-2</span>: \n            Additional <emu-xref href=\"#sec-typeof-operator\"><a href=\"#sec-typeof-operator\"><code>typeof</code></a></emu-xref> Operator Results\n          </figcaption>\n          \n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Type of <var>val</var>\n              </th>\n              <th>\n                Result\n              </th>\n            </tr>\n            <tr>\n              <td>\n                Object (has an <emu-xref href=\"#sec-IsHTMLDDA-internal-slot\"><a href=\"#sec-IsHTMLDDA-internal-slot\">[[IsHTMLDDA]] internal slot</a></emu-xref>)\n              </td>\n              <td>\n                <emu-val>\"undefined\"</emu-val>\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-annex>\n    "}, "sec-chosen-value-records": {"num": "29.3", "title": "#sec-chosen-value-records Chosen Value Records", "html": "<emu-clause id=\"sec-chosen-value-records\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-chosen-value-records\">#sec-chosen-value-records</span> Chosen Value Records</h1>\n    <p>A <dfn variants=\"Chosen Value Records\">Chosen Value Record</dfn> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> with the following fields.</p>\n    <emu-table id=\"table-chosen-value-records\" caption=\"Chosen Value Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-chosen-value-records\">#table-chosen-value-records</span>: <emu-xref href=\"#sec-chosen-value-records\"><a href=\"#sec-chosen-value-records\">Chosen Value Record</a></emu-xref> Fields</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>Field Name</th>\n          <th>Value</th>\n          <th>Meaning</th>\n        </tr>\n        <tr>\n          <td>[[Event]]</td>\n          <td>A <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">Shared Data Block event</a></emu-xref></td>\n          <td>The <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> event that was introduced for this chosen value.</td>\n        </tr>\n        <tr>\n          <td>[[ChosenValue]]</td>\n          <td>A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">byte values</a></emu-xref></td>\n          <td>The bytes that were nondeterministically chosen during evaluation.</td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n  </emu-clause>\n\n  "}, "sec-reference-record-specification-type": {"num": "6.2.4", "title": "#sec-reference-record-specification-type The Reference Record Specification Type", "html": "<emu-clause id=\"sec-reference-record-specification-type\" oldids=\"sec-reference-specification-type\"><span id=\"sec-reference-specification-type\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-reference-record-specification-type\">#sec-reference-record-specification-type</span> The Reference Record Specification Type</h1>\n      <p>The <dfn variants=\"Reference Records\">Reference Record</dfn> type is used to explain the behaviour of such operators as <code>delete</code>, <code>typeof</code>, the assignment operators, the <code>super</code> <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\">keyword</a></emu-xref> and other language features. For example, the left-hand operand of an assignment is expected to produce a Reference Record.</p>\n      <p>A Reference Record is a resolved name or property binding; its fields are defined by <emu-xref href=\"#table-reference-record-fields\"><a href=\"#table-reference-record-fields\" class=\"excluded-xref\" excluded-id=\"table-reference-record-fields\">#table-reference-record-fields</a></emu-xref>.</p>\n\n      <emu-table id=\"table-reference-record-fields\" caption=\"Reference Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-reference-record-fields\">#table-reference-record-fields</span>: <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref> Fields</figcaption>\n        <table>\n          <tbody>\n          <tr>\n            <th>Field Name</th>\n            <th>Value</th>\n            <th>Meaning</th>\n          </tr>\n          <tr>\n            <td oldids=\"sec-getbase,ao-getbase\"><span id=\"ao-getbase\"></span><span id=\"sec-getbase\"></span>[[Base]]</td>\n            <td>\n              One of:\n              <ul>\n                <li>\n                  any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>,\n                </li>\n                <li>\n                  an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>, or\n                </li>\n                <li>\n                  <emu-const>unresolvable</emu-const>.\n                </li>\n              </ul>\n            </td>\n            <td>The value or <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> which holds the binding. A [[Base]] of <emu-const>unresolvable</emu-const> indicates that the binding could not be resolved.</td>\n          </tr>\n          <tr>\n            <td oldids=\"sec-getreferencedname,ao-getreferencedname\"><span id=\"ao-getreferencedname\"></span><span id=\"sec-getreferencedname\"></span>[[ReferencedName]]</td>\n            <td>String, Symbol, or <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref></td>\n            <td>The name of the binding. Always a String if [[Base]] value is an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</td>\n          </tr>\n          <tr>\n            <td oldids=\"sec-isstrictreference,ao-isstrictreference\"><span id=\"ao-isstrictreference\"></span><span id=\"sec-isstrictreference\"></span>[[Strict]]</td>\n            <td>Boolean</td>\n            <td><emu-val>true</emu-val> if the <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref> originated in <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, <emu-val>false</emu-val> otherwise.</td>\n          </tr>\n          <tr>\n            <td>[[ThisValue]]</td>\n            <td>any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> or <emu-const>empty</emu-const></td>\n            <td>If not <emu-const>empty</emu-const>, the <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref> represents a property binding that was expressed using the <code>super</code> <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\">keyword</a></emu-xref>; it is called a <dfn id=\"super-reference-record\" oldids=\"super-reference\" variants=\"Super Reference Records\"><span id=\"super-reference\"></span>Super Reference Record</dfn> and its [[Base]] value will never be an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. In that case, the [[ThisValue]] field holds the <emu-val>this</emu-val> value at the time the <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref> was created.</td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n\n      <p>The following <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> are used in this specification to operate upon Reference Records:</p>\n\n      <div id=\"excluded-sec-ispropertyreference\"><h1><span class=\"secnum\">6.2.4.1</span>#sec-ispropertyreference IsPropertyReference ( V )</h1>...</div><div id=\"excluded-sec-isunresolvablereference\"><h1><span class=\"secnum\">6.2.4.2</span>#sec-isunresolvablereference IsUnresolvableReference ( V )</h1>...</div><div id=\"excluded-sec-issuperreference\"><h1><span class=\"secnum\">6.2.4.3</span>#sec-issuperreference IsSuperReference ( V )</h1>...</div><div id=\"excluded-sec-isprivatereference\"><h1><span class=\"secnum\">6.2.4.4</span>#sec-isprivatereference IsPrivateReference ( V )</h1>...</div><div id=\"excluded-sec-getvalue\"><h1><span class=\"secnum\">6.2.4.5</span>#sec-getvalue GetValue ( V )</h1>...</div><div id=\"excluded-sec-putvalue\"><h1><span class=\"secnum\">6.2.4.6</span>#sec-putvalue PutValue ( V, W )</h1>...</div><div id=\"excluded-sec-getthisvalue\"><h1><span class=\"secnum\">6.2.4.7</span>#sec-getthisvalue GetThisValue ( V )</h1>...</div><div id=\"excluded-sec-initializereferencedbinding\"><h1><span class=\"secnum\">6.2.4.8</span>#sec-initializereferencedbinding InitializeReferencedBinding ( V, W )</h1>...</div><div id=\"excluded-sec-makeprivatereference\"><h1><span class=\"secnum\">6.2.4.9</span>#sec-makeprivatereference MakePrivateReference ( baseValue, privateIdentifier )</h1>...</div></emu-clause>\n\n    "}, "sec-assignment-operators-runtime-semantics-evaluation": {"num": "13.15.2", "title": "#sec-assignment-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-assignment-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-assignment-operators-runtime-semantics-evaluation\">#sec-assignment-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ijpo4eaq\">\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>=</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>If <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is neither an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>lref</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) and <emu-xref aoid=\"IsIdentifierRef\"><a href=\"#sec-static-semantics-isidentifierref\">IsIdentifierRef</a></emu-xref> of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> are both <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>lref</var>.[[ReferencedName]].</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li id=\"step-assignmentexpression-evaluation-simple-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></li><li>Let <var>assignmentPattern</var> be the <emu-nt><a href=\"#prod-AssignmentPattern\">AssignmentPattern</a></emu-nt> that is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">covered</a></emu-xref> by <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Perform ? <emu-xref aoid=\"DestructuringAssignmentEvaluation\"><a href=\"#sec-runtime-semantics-destructuringassignmentevaluation\">DestructuringAssignmentEvaluation</a></emu-xref> of <var>assignmentPattern</var> using <var>rval</var> as the argument.</li><li>Return <var>rval</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"xzqhr---\">\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li id=\"step-assignmentexpression-evaluation-compound-getvalue\">Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>assignmentOpText</var> be the source text matched by <emu-nt><a href=\"#prod-AssignmentOperator\">AssignmentOperator</a></emu-nt>.</li><li>Let <var>opText</var> be the sequence of Unicode code points associated with <var>assignmentOpText</var> in the following table:\n          <figure>\n            <table class=\"lightweight-table\">\n              <tbody><tr><th> <var>assignmentOpText</var> </th><th> <var>opText</var>       </th></tr>\n              <tr><td> <code>**=</code>              </td><td> <code>**</code>           </td></tr>\n              <tr><td> <code>*=</code>               </td><td> <code>*</code>            </td></tr>\n              <tr><td> <code>/=</code>               </td><td> <code>/</code>            </td></tr>\n              <tr><td> <code>%=</code>               </td><td> <code>%</code>            </td></tr>\n              <tr><td> <code>+=</code>               </td><td> <code>+</code>            </td></tr>\n              <tr><td> <code>-=</code>               </td><td> <code>-</code>            </td></tr>\n              <tr><td> <code>&lt;&lt;=</code>        </td><td> <code>&lt;&lt;</code>     </td></tr>\n              <tr><td> <code>&gt;&gt;=</code>        </td><td> <code>&gt;&gt;</code>     </td></tr>\n              <tr><td> <code>&gt;&gt;&gt;=</code>    </td><td> <code>&gt;&gt;&gt;</code> </td></tr>\n              <tr><td> <code>&amp;=</code>           </td><td> <code>&amp;</code>        </td></tr>\n              <tr><td> <code>^=</code>               </td><td> <code>^</code>            </td></tr>\n              <tr><td> <code>|=</code>               </td><td> <code>|</code>            </td></tr>\n            </tbody></table>\n          </figure></li><li>Let <var>r</var> be <emu-xref aoid=\"ApplyStringOrNumericBinaryOperator\"><a href=\"#sec-applystringornumericbinaryoperator\">ApplyStringOrNumericBinaryOperator</a></emu-xref>(<var>lval</var>, <var>opText</var>, <var>rval</var>).</li><li id=\"step-assignmentexpression-evaluation-compound-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>r</var>).</li><li>Return <var>r</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"devkzibl\">\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>&amp;&amp;=</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li id=\"step-assignmentexpression-evaluation-lgcl-and-getvalue\">Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>lbool</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(<var>lval</var>).</li><li>If <var>lbool</var> is <emu-val>false</emu-val>, return <var>lval</var>.</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and <emu-xref aoid=\"IsIdentifierRef\"><a href=\"#sec-static-semantics-isidentifierref\">IsIdentifierRef</a></emu-xref> of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>lref</var>.[[ReferencedName]].</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li id=\"step-assignmentexpression-evaluation-lgcl-and-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dt1frwiy\">\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>||=</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li id=\"step-assignmentexpression-evaluation-lgcl-or-getvalue\">Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>lbool</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(<var>lval</var>).</li><li>If <var>lbool</var> is <emu-val>true</emu-val>, return <var>lval</var>.</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and <emu-xref aoid=\"IsIdentifierRef\"><a href=\"#sec-static-semantics-isidentifierref\">IsIdentifierRef</a></emu-xref> of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>lref</var>.[[ReferencedName]].</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li id=\"step-assignmentexpression-evaluation-lgcl-or-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AssignmentExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dbifpqxa\">\n        <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>\n        <emu-t>??=</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</li><li id=\"step-assignmentexpression-evaluation-lgcl-nullish-getvalue\">Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>If <var>lval</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, return <var>lval</var>.</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and <emu-xref aoid=\"IsIdentifierRef\"><a href=\"#sec-static-semantics-isidentifierref\">IsIdentifierRef</a></emu-xref> of <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt> is <emu-val>true</emu-val>, then<ol><li>Let <var>rval</var> be <emu-xref aoid=\"NamedEvaluation\"><a href=\"#sec-runtime-semantics-namedevaluation\">NamedEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>lref</var>.[[ReferencedName]].</li></ol></li><li>Else,<ol><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li></ol></li><li id=\"step-assignmentexpression-evaluation-lgcl-nullish-putvalue\">Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When this expression occurs within <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, it is a runtime error if <var>lref</var> in step <emu-xref href=\"#step-assignmentexpression-evaluation-simple-putvalue\"><a href=\"#step-assignmentexpression-evaluation-simple-putvalue\">1.e</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-compound-getvalue\"><a href=\"#step-assignmentexpression-evaluation-compound-getvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-compound-getvalue\">#step-assignmentexpression-evaluation-compound-getvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-and-getvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-and-getvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-and-getvalue\">#step-assignmentexpression-evaluation-lgcl-and-getvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-or-getvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-or-getvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-or-getvalue\">#step-assignmentexpression-evaluation-lgcl-or-getvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-nullish-getvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-nullish-getvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-nullish-getvalue\">#step-assignmentexpression-evaluation-lgcl-nullish-getvalue</a></emu-xref> is an unresolvable reference. If it is, a <emu-val>ReferenceError</emu-val> exception is thrown. Additionally, it is a runtime error if the <var>lref</var> in step <emu-xref href=\"#step-assignmentexpression-evaluation-compound-putvalue\"><a href=\"#step-assignmentexpression-evaluation-compound-putvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-compound-putvalue\">#step-assignmentexpression-evaluation-compound-putvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-and-putvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-and-putvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-and-putvalue\">#step-assignmentexpression-evaluation-lgcl-and-putvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-or-putvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-or-putvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-or-putvalue\">#step-assignmentexpression-evaluation-lgcl-or-putvalue</a></emu-xref>, <emu-xref href=\"#step-assignmentexpression-evaluation-lgcl-nullish-putvalue\"><a href=\"#step-assignmentexpression-evaluation-lgcl-nullish-putvalue\" class=\"excluded-xref\" excluded-id=\"step-assignmentexpression-evaluation-lgcl-nullish-putvalue\">#step-assignmentexpression-evaluation-lgcl-nullish-putvalue</a></emu-xref> is a reference to a <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> with the attribute value { [[Writable]]: <emu-val>false</emu-val> }, to an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> with the attribute value { [[Set]]: <emu-val>undefined</emu-val> }, or to a non-existent property of an object for which the <emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref> predicate returns the value <emu-val>false</emu-val>. In these cases a <emu-val>TypeError</emu-val> exception is thrown.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-agent-event-records": {"num": "29.2", "title": "#sec-agent-event-records Agent Events Records", "html": "<emu-clause id=\"sec-agent-event-records\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-agent-event-records\">#sec-agent-event-records</span> Agent Events Records</h1>\n    <p>An <dfn variants=\"Agent Events Records\">Agent Events Record</dfn> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> with the following fields.</p>\n    <emu-table id=\"table-agent-events-records\" caption=\"Agent Events Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-agent-events-records\">#table-agent-events-records</span>: <emu-xref href=\"#sec-agent-event-records\"><a href=\"#sec-agent-event-records\">Agent Events Record</a></emu-xref> Fields</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>Field Name</th>\n          <th>Value</th>\n          <th>Meaning</th>\n        </tr>\n        <tr>\n          <td>[[AgentSignifier]]</td>\n          <td>A value that admits equality testing</td>\n          <td>The <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> whose evaluation resulted in this ordering.</td>\n        </tr>\n        <tr>\n          <td>[[EventList]]</td>\n          <td>A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of events</td>\n          <td>Events are appended to the list during evaluation.</td>\n        </tr>\n        <tr>\n          <td>[[AgentSynchronizesWith]]</td>\n          <td>A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of pairs of <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">Synchronize events</a></emu-xref></td>\n          <td><emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">Synchronize</a></emu-xref> relationships introduced by the operational semantics.</td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n  </emu-clause>\n\n  "}, "sec-tobigint": {"num": "7.1.13", "title": "#sec-tobigint ToBigInt ( argument )", "html": "<emu-clause id=\"sec-tobigint\" type=\"abstract operation\" aoid=\"ToBigInt\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-tobigint\">#sec-tobigint</span> ToBigInt ( <var>argument</var> )</h1>\n      <p>The abstract operation ToBigInt takes argument <var>argument</var>. It converts <var>argument</var> to a BigInt value, or throws if an implicit conversion from Number would be required. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>prim</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>argument</var>, <emu-const>number</emu-const>).</li><li>Return the value that <var>prim</var> corresponds to in <emu-xref href=\"#table-tobigint\"><a href=\"#table-tobigint\" class=\"excluded-xref\" excluded-id=\"table-tobigint\">#table-tobigint</a></emu-xref>.</li></ol></emu-alg>\n      <emu-table id=\"table-tobigint\" caption=\"BigInt Conversions\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-tobigint\">#table-tobigint</span>: BigInt Conversions</figcaption>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Argument Type\n            </th>\n            <th>\n              Result\n            </th>\n          </tr>\n          <tr>\n            <td>\n              Undefined\n            </td>\n            <td>\n              Throw a <emu-val>TypeError</emu-val> exception.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Null\n            </td>\n            <td>\n              Throw a <emu-val>TypeError</emu-val> exception.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Boolean\n            </td>\n            <td>\n              Return <code>1n</code> if <var>prim</var> is <emu-val>true</emu-val> and <code>0n</code> if <var>prim</var> is <emu-val>false</emu-val>.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              BigInt\n            </td>\n            <td>\n              Return <var>prim</var>.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Number\n            </td>\n            <td>\n              Throw a <emu-val>TypeError</emu-val> exception.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              String\n            </td>\n            <td>\n              <emu-alg><ol><li>Let <var>n</var> be !&#160;<emu-xref aoid=\"StringToBigInt\"><a href=\"#sec-stringtobigint\">StringToBigInt</a></emu-xref>(<var>prim</var>).</li><li>If <var>n</var> is <emu-val>undefined</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Return <var>n</var>.</li></ol></emu-alg>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              Symbol\n            </td>\n            <td>\n              Throw a <emu-val>TypeError</emu-val> exception.\n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n    </emu-clause>\n\n    "}, "sec-applystringornumericbinaryoperator": {"num": "13.15.3", "title": "#sec-applystringornumericbinaryoperator ApplyStringOrNumericBinaryOperator ( lval, opText, rval )", "html": "<emu-clause id=\"sec-applystringornumericbinaryoperator\" type=\"abstract operation\" aoid=\"ApplyStringOrNumericBinaryOperator\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-applystringornumericbinaryoperator\">#sec-applystringornumericbinaryoperator</span> ApplyStringOrNumericBinaryOperator ( <var>lval</var>, <var>opText</var>, <var>rval</var> )</h1>\n      <p>The abstract operation ApplyStringOrNumericBinaryOperator takes arguments <var>lval</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>), <var>opText</var> (a sequence of Unicode code points), and <var>rval</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>opText</var> is present in the table in step <emu-xref href=\"#step-applystringornumericbinaryoperator-operations-table\"><a href=\"#step-applystringornumericbinaryoperator-operations-table\" class=\"excluded-xref\" excluded-id=\"step-applystringornumericbinaryoperator-operations-table\">#step-applystringornumericbinaryoperator-operations-table</a></emu-xref>.</li><li>If <var>opText</var> is <code>+</code>, then<ol><li id=\"step-binary-op-toprimitive-lval\">Let <var>lprim</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>lval</var>).</li><li id=\"step-binary-op-toprimitive-rval\">Let <var>rprim</var> be ?&#160;<emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref>(<var>rval</var>).</li><li id=\"step-binary-op-string-check\">If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lprim</var>) is String or <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rprim</var>) is String, then<ol><li>Let <var>lstr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>lprim</var>).</li><li>Let <var>rstr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>rprim</var>).</li><li>Return the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <var>lstr</var> and <var>rstr</var>.</li></ol></li><li>Set <var>lval</var> to <var>lprim</var>.</li><li>Set <var>rval</var> to <var>rprim</var>.</li></ol></li><li>NOTE: At this point, it must be a numeric operation.</li><li>Let <var>lnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>lval</var>).</li><li>Let <var>rnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>rval</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rnum</var>), throw a <emu-val>TypeError</emu-val> exception.</li><li id=\"step-applystringornumericbinaryoperator-operations-table\">Let <var>operation</var> be the abstract operation associated with <var>opText</var> and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>) in the following table:\n          <figure>\n            <table class=\"lightweight-table\">\n              <tbody><tr><th> <var>opText</var>       </th><th> <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>) </th><th> <var>operation</var>                </th></tr>\n              <tr><td> <code>**</code>           </td><td> Number       </td><td> <emu-xref aoid=\"Number::exponentiate\"><a href=\"#sec-numeric-types-number-exponentiate\">Number::exponentiate</a></emu-xref>       </td></tr>\n              <tr><td> <code>**</code>           </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::exponentiate\"><a href=\"#sec-numeric-types-bigint-exponentiate\">BigInt::exponentiate</a></emu-xref>       </td></tr>\n              <tr><td> <code>*</code>            </td><td> Number       </td><td> <emu-xref aoid=\"Number::multiply\"><a href=\"#sec-numeric-types-number-multiply\">Number::multiply</a></emu-xref>           </td></tr>\n              <tr><td> <code>*</code>            </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::multiply\"><a href=\"#sec-numeric-types-bigint-multiply\">BigInt::multiply</a></emu-xref>           </td></tr>\n              <tr><td> <code>/</code>            </td><td> Number       </td><td> <emu-xref aoid=\"Number::divide\"><a href=\"#sec-numeric-types-number-divide\">Number::divide</a></emu-xref>             </td></tr>\n              <tr><td> <code>/</code>            </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::divide\"><a href=\"#sec-numeric-types-bigint-divide\">BigInt::divide</a></emu-xref>             </td></tr>\n              <tr><td> <code>%</code>            </td><td> Number       </td><td> <emu-xref aoid=\"Number::remainder\"><a href=\"#sec-numeric-types-number-remainder\">Number::remainder</a></emu-xref>          </td></tr>\n              <tr><td> <code>%</code>            </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::remainder\"><a href=\"#sec-numeric-types-bigint-remainder\">BigInt::remainder</a></emu-xref>          </td></tr>\n              <tr><td> <code>+</code>            </td><td> Number       </td><td> <emu-xref aoid=\"Number::add\"><a href=\"#sec-numeric-types-number-add\">Number::add</a></emu-xref>                </td></tr>\n              <tr><td> <code>+</code>            </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::add\"><a href=\"#sec-numeric-types-bigint-add\">BigInt::add</a></emu-xref>                </td></tr>\n              <tr><td> <code>-</code>            </td><td> Number       </td><td> <emu-xref aoid=\"Number::subtract\"><a href=\"#sec-numeric-types-number-subtract\">Number::subtract</a></emu-xref>           </td></tr>\n              <tr><td> <code>-</code>            </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::subtract\"><a href=\"#sec-numeric-types-bigint-subtract\">BigInt::subtract</a></emu-xref>           </td></tr>\n              <tr><td> <code>&lt;&lt;</code>     </td><td> Number       </td><td> <emu-xref aoid=\"Number::leftShift\"><a href=\"#sec-numeric-types-number-leftShift\">Number::leftShift</a></emu-xref>          </td></tr>\n              <tr><td> <code>&lt;&lt;</code>     </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::leftShift\"><a href=\"#sec-numeric-types-bigint-leftShift\">BigInt::leftShift</a></emu-xref>          </td></tr>\n              <tr><td> <code>&gt;&gt;</code>     </td><td> Number       </td><td> <emu-xref aoid=\"Number::signedRightShift\"><a href=\"#sec-numeric-types-number-signedRightShift\">Number::signedRightShift</a></emu-xref>   </td></tr>\n              <tr><td> <code>&gt;&gt;</code>     </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::signedRightShift\"><a href=\"#sec-numeric-types-bigint-signedRightShift\">BigInt::signedRightShift</a></emu-xref>   </td></tr>\n              <tr><td> <code>&gt;&gt;&gt;</code> </td><td> Number       </td><td> <emu-xref aoid=\"Number::unsignedRightShift\"><a href=\"#sec-numeric-types-number-unsignedRightShift\">Number::unsignedRightShift</a></emu-xref> </td></tr>\n              <tr><td> <code>&gt;&gt;&gt;</code> </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::unsignedRightShift\"><a href=\"#sec-numeric-types-bigint-unsignedRightShift\">BigInt::unsignedRightShift</a></emu-xref> </td></tr>\n              <tr><td> <code>&amp;</code>        </td><td> Number       </td><td> <emu-xref aoid=\"Number::bitwiseAND\"><a href=\"#sec-numeric-types-number-bitwiseAND\">Number::bitwiseAND</a></emu-xref>         </td></tr>\n              <tr><td> <code>&amp;</code>        </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::bitwiseAND\"><a href=\"#sec-numeric-types-bigint-bitwiseAND\">BigInt::bitwiseAND</a></emu-xref>         </td></tr>\n              <tr><td> <code>^</code>            </td><td> Number       </td><td> <emu-xref aoid=\"Number::bitwiseXOR\"><a href=\"#sec-numeric-types-number-bitwiseXOR\">Number::bitwiseXOR</a></emu-xref>         </td></tr>\n              <tr><td> <code>^</code>            </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::bitwiseXOR\"><a href=\"#sec-numeric-types-bigint-bitwiseXOR\">BigInt::bitwiseXOR</a></emu-xref>         </td></tr>\n              <tr><td> <code>|</code>            </td><td> Number       </td><td> <emu-xref aoid=\"Number::bitwiseOR\"><a href=\"#sec-numeric-types-number-bitwiseOR\">Number::bitwiseOR</a></emu-xref>          </td></tr>\n              <tr><td> <code>|</code>            </td><td> BigInt       </td><td> <emu-xref aoid=\"BigInt::bitwiseOR\"><a href=\"#sec-numeric-types-bigint-bitwiseOR\">BigInt::bitwiseOR</a></emu-xref>          </td></tr>\n            </tbody></table>\n          </figure></li><li>Return ? <var>operation</var>(<var>lnum</var>, <var>rnum</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>No hint is provided in the calls to <emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref> in steps <emu-xref href=\"#step-binary-op-toprimitive-lval\"><a href=\"#step-binary-op-toprimitive-lval\">2.a</a></emu-xref> and <emu-xref href=\"#step-binary-op-toprimitive-rval\"><a href=\"#step-binary-op-toprimitive-rval\">2.b</a></emu-xref>. All standard objects except Dates handle the absence of a hint as if <emu-const>number</emu-const> were given; Dates handle the absence of a hint as if <emu-const>string</emu-const> were given. <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">Exotic objects</a></emu-xref> may handle the absence of a hint in some other manner.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>Step <emu-xref href=\"#step-binary-op-string-check\"><a href=\"#step-binary-op-string-check\">2.c</a></emu-xref> differs from step <emu-xref href=\"#step-arc-string-check\"><a href=\"#step-arc-string-check\" class=\"excluded-xref\" excluded-id=\"step-arc-string-check\">#step-arc-string-check</a></emu-xref> of the <emu-xref aoid=\"IsLessThan\"><a href=\"#sec-islessthan\">IsLessThan</a></emu-xref> algorithm, by using the logical-or operation instead of the logical-and operation.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-agents": {"num": "9.7", "title": "#sec-agents Agents", "html": "<emu-clause id=\"sec-agents\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-agents\">#sec-agents</span> Agents</h1>\n\n    <p>An <dfn id=\"agent\" variants=\"agents\">agent</dfn> comprises a set of ECMAScript <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution contexts</a></emu-xref>, an <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>, a <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>, an <dfn id=\"agent-record\" variants=\"Agent Records\">Agent Record</dfn>, and an <dfn id=\"executing-thread\" variants=\"executing threads\">executing thread</dfn>. Except for the <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref>, the constituents of an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> belong exclusively to that <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>.</p>\n    <p>An <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> executes a job on the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution contexts</a></emu-xref> independently of other <emu-xref href=\"#agent\"><a href=\"#agent\">agents</a></emu-xref>, except that an <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> may be used as the <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> by multiple <emu-xref href=\"#agent\"><a href=\"#agent\">agents</a></emu-xref>, provided none of the <emu-xref href=\"#agent\"><a href=\"#agent\">agents</a></emu-xref> sharing the thread have an <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref> whose [[CanBlock]] property is <emu-val>true</emu-val>.</p>\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p>Some web browsers share a single <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> across multiple unrelated tabs of a browser window, for example.</p>\n    </div></emu-note>\n    <p>While an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>'s <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> executes jobs, the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is the <dfn id=\"surrounding-agent\" variants=\"surrounding agents\">surrounding agent</dfn> for the code in those jobs. The code uses the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref> to access the specification-level execution objects held within the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>: the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>, the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>, and the <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>'s fields.</p>\n    <emu-table id=\"table-agent-record\" caption=\"Agent Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-agent-record\">#table-agent-record</span>: <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref> Fields</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>Field Name</th>\n          <th>Value</th>\n          <th>Meaning</th>\n        </tr>\n        <tr>\n          <td>[[LittleEndian]]</td>\n          <td>Boolean</td>\n          <td>The default value computed for the <em>isLittleEndian</em> parameter when it is needed by the algorithms <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref> and <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>. The choice is <emu-xref href=\"#implementation-defined\"><a href=\"#implementation-defined\">implementation-defined</a></emu-xref> and should be the alternative that is most efficient for the implementation. Once the value has been observed it cannot change.</td>\n        </tr>\n        <tr>\n          <td>[[CanBlock]]</td>\n          <td>Boolean</td>\n          <td>Determines whether the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> can block or not.</td>\n        </tr>\n        <tr>\n          <td>[[Signifier]]</td>\n          <td>Any globally-unique value</td>\n          <td>Uniquely identifies the <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> within its <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref>.</td>\n        </tr>\n        <tr>\n          <td>[[IsLockFree1]]</td>\n          <td>Boolean</td>\n          <td><emu-val>true</emu-val> if atomic operations on one-<emu-not-ref>byte values</emu-not-ref> are lock-free, <emu-val>false</emu-val> otherwise.</td>\n        </tr>\n        <tr>\n          <td>[[IsLockFree2]]</td>\n          <td>Boolean</td>\n          <td><emu-val>true</emu-val> if atomic operations on two-<emu-not-ref>byte values</emu-not-ref> are lock-free, <emu-val>false</emu-val> otherwise.</td>\n        </tr>\n        <tr>\n          <td>[[IsLockFree8]]</td>\n          <td>Boolean</td>\n          <td><emu-val>true</emu-val> if atomic operations on eight-<emu-not-ref>byte values</emu-not-ref> are lock-free, <emu-val>false</emu-val> otherwise.</td>\n        </tr>\n        <tr>\n          <td>[[CandidateExecution]]</td>\n          <td>A <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref></td>\n          <td>See the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>.</td>\n        </tr>\n        <tr>\n          <td>[[KeptAlive]]</td>\n          <td><emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of objects</td>\n          <td>Initially a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>, representing the list of objects to be kept alive until the end of the current <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref></td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <p>Once the values of [[Signifier]], [[IsLockFree1]], and [[IsLockFree2]] have been observed by any <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> in the <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref> they cannot change.</p>\n\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>The values of [[IsLockFree1]] and [[IsLockFree2]] are not necessarily determined by the hardware, but may also reflect implementation choices that can vary over time and between ECMAScript implementations.</p>\n\n      <p>There is no [[IsLockFree4]] property: 4-byte atomic operations are always lock-free.</p>\n\n      <p>In practice, if an atomic operation is implemented with any type of lock the operation is not lock-free. Lock-free does not imply wait-free: there is no upper bound on how many machine steps may be required to complete a lock-free atomic operation.</p>\n\n      <p>That an atomic access of size <em>n</em> is lock-free does not imply anything about the (perceived) atomicity of non-atomic accesses of size <em>n</em>, specifically, non-atomic accesses may still be performed as a sequence of several separate memory accesses. See <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> and <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> for details.</p>\n    </div></emu-note>\n\n    <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n      <p>An <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is a specification mechanism and need not correspond to any particular artefact of an ECMAScript implementation.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-agentsignifier\"><h1><span class=\"secnum\">9.7.1</span>#sec-agentsignifier AgentSignifier ( )</h1>...</div><div id=\"excluded-sec-agentcansuspend\"><h1><span class=\"secnum\">9.7.2</span>#sec-agentcansuspend AgentCanSuspend ( )</h1>...</div></emu-clause>\n\n  "}, "sec-expanded-years": {"num": "21.4.1.15.1", "title": "#sec-expanded-years Expanded Years", "html": "<emu-clause id=\"sec-expanded-years\" oldids=\"sec-extended-years\"><span id=\"sec-extended-years\"></span>\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-expanded-years\">#sec-expanded-years</span> Expanded Years</h1>\n          <p><emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Covering</a></emu-xref> the full <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> range of approximately 273,790 years forward or backward from 1 January 1970 (<emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\" class=\"excluded-xref\" excluded-id=\"sec-time-values-and-time-range\">#sec-time-values-and-time-range</a></emu-xref>) requires representing years before 0 or after 9999. ISO 8601 permits expansion of the year representation, but only by mutual agreement of the partners in information interchange. In the simplified ECMAScript format, such an expanded year representation shall have 6 digits and is always prefixed with a + or - sign. The year 0 is considered positive and hence prefixed with a + sign. Strings matching the <emu-xref href=\"#sec-date-time-string-format\"><a href=\"#sec-date-time-string-format\">Date Time String Format</a></emu-xref> with expanded years representing instants in time outside the range of a <emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time value</a></emu-xref> are treated as unrecognizable by <emu-xref href=\"#sec-date.parse\"><a href=\"#sec-date.parse\"><code>Date.parse</code></a></emu-xref> and cause that function to return <emu-val>NaN</emu-val> without falling back to implementation-specific behaviour or heuristics.</p>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>Examples of date-<emu-xref href=\"#sec-time-values-and-time-range\"><a href=\"#sec-time-values-and-time-range\">time values</a></emu-xref> with expanded years:</p>\n            <figure>\n              <table class=\"lightweight-table\">\n                <tbody>\n                <tr>\n                  <td>-271821-04-20T00:00:00Z</td>\n                  <td>271822 B.C.</td>\n                </tr>\n                <tr>\n                  <td>-000001-01-01T00:00:00Z</td>\n                  <td>2 B.C.</td>\n                </tr>\n                <tr>\n                  <td>+000000-01-01T00:00:00Z</td>\n                  <td>1 B.C.</td>\n                </tr>\n                <tr>\n                  <td>+000001-01-01T00:00:00Z</td>\n                  <td>1 A.D.</td>\n                </tr>\n                <tr>\n                  <td>+001970-01-01T00:00:00Z</td>\n                  <td>1970 A.D.</td>\n                </tr>\n                <tr>\n                  <td>+002009-12-15T00:00:00Z</td>\n                  <td>2009 A.D.</td>\n                </tr>\n                <tr>\n                  <td>+275760-09-13T00:00:00Z</td>\n                  <td>275760 A.D.</td>\n                </tr>\n                </tbody>\n              </table>\n            </figure>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-jobcallback-records": {"num": "9.5.1", "title": "#sec-jobcallback-records JobCallback Records", "html": "<emu-clause id=\"sec-jobcallback-records\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-jobcallback-records\">#sec-jobcallback-records</span> JobCallback Records</h1>\n      <p>A <dfn variants=\"JobCallback Records\">JobCallback Record</dfn> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> value used to store a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> and a <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> value. <emu-xref href=\"#function-object\"><a href=\"#function-object\">Function objects</a></emu-xref> that are invoked via a <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> enqueued by the <emu-xref href=\"#host\"><a href=\"#host\">host</a></emu-xref> may have additional <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> context. To propagate the state, <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closures</a></emu-xref> should not capture and call <emu-xref href=\"#function-object\"><a href=\"#function-object\">function objects</a></emu-xref> directly. Instead, use <emu-xref aoid=\"HostMakeJobCallback\"><a href=\"#sec-hostmakejobcallback\">HostMakeJobCallback</a></emu-xref> and <emu-xref aoid=\"HostCallJobCallback\"><a href=\"#sec-hostcalljobcallback\">HostCallJobCallback</a></emu-xref>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The WHATWG HTML specification (<a href=\"https://html.spec.whatwg.org/\">https://html.spec.whatwg.org/</a>), for example, uses the <emu-xref href=\"#host-defined\"><a href=\"#host-defined\">host-defined</a></emu-xref> value to propagate the incumbent settings object for Promise callbacks.</p>\n      </div></emu-note>\n      <p>JobCallback Records have the fields listed in <emu-xref href=\"#table-jobcallback-records\"><a href=\"#table-jobcallback-records\" class=\"excluded-xref\" excluded-id=\"table-jobcallback-records\">#table-jobcallback-records</a></emu-xref>.</p>\n      <emu-table id=\"table-jobcallback-records\" caption=\"JobCallback Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-jobcallback-records\">#table-jobcallback-records</span>: <emu-xref href=\"#sec-jobcallback-records\"><a href=\"#sec-jobcallback-records\">JobCallback Record</a></emu-xref> Fields</figcaption>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Field Name\n            </th>\n            <th>\n              Value\n            </th>\n            <th>\n              Meaning\n            </th>\n          </tr>\n          <tr>\n            <td>\n              [[Callback]]\n            </td>\n            <td>\n              A <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>\n            </td>\n            <td>\n              The function to invoke when the <emu-xref href=\"#job\"><a href=\"#job\">Job</a></emu-xref> is invoked.\n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[HostDefined]]\n            </td>\n            <td>\n              Any, default value is <emu-const>empty</emu-const>.\n            </td>\n            <td>\n              Field reserved for use by <emu-xref href=\"#host\"><a href=\"#host\">hosts</a></emu-xref>.\n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n    </emu-clause>\n\n    "}}, "figData": {"figure-module-graph-simple": "Figure 2", "figure-module-graph-missing": "Figure 3", "figure-module-graph-cycle": "Figure 4", "figure-module-graph-cycle-async": "Figure 5", "table-reference-record-fields": "Table 10", "table-tobigint": "Table 16", "table-jobcallback-records": "Table 32", "table-agent-record": "Table 33", "table-typeof-operator-results": "Table 42", "table-module-record-fields": "Table 45", "table-abstract-methods-of-module-records": "Table 46", "table-cyclic-module-fields": "Table 47", "table-cyclic-module-methods": "Table 48", "table-module-graph-cycle-async-fields-1": "Table 49", "table-module-graph-cycle-async-fields-2": "Table 50", "table-module-graph-cycle-async-fields-3": "Table 51", "table-module-graph-cycle-async-fields-4": "Table 52", "table-module-graph-cycle-async-fields-5": "Table 53", "table-module-graph-cycle-async-fields-6": "Table 54", "table-module-graph-cycle-async-fields-7": "Table 55", "table-module-graph-cycle-async-fields-8": "Table 56", "table-module-graph-cycle-async-fields-9": "Table 57", "table-readsharedmemory-fields": "Table 88", "table-writesharedmemory-fields": "Table 89", "table-rmwsharedmemory-fields": "Table 90", "table-agent-events-records": "Table 91", "table-chosen-value-records": "Table 92", "table-candidate-execution-records": "Table 93", "table-noid-2": "Table 95"}}}