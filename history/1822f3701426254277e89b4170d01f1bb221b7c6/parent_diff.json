{"from": {"secList": ["sec-tointegerorinfinity"], "secData": {"sec-tointegerorinfinity": {"num": "7.1.5", "title": "#sec-tointegerorinfinity ToIntegerOrInfinity ( argument )", "html": "<emu-clause id=\"sec-tointegerorinfinity\" type=\"abstract operation\" oldids=\"sec-tointeger\" aoid=\"ToIntegerOrInfinity\"><span id=\"sec-tointeger\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-tointegerorinfinity\">#sec-tointegerorinfinity</span> ToIntegerOrInfinity ( <var>argument</var> )</h1>\n      <p>The abstract operation ToIntegerOrInfinity takes argument <var>argument</var>. It converts <var>argument</var> to an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, +&#8734;, or -&#8734;. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>number</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>argument</var>).</li><li>If <var>number</var> is <emu-val>NaN</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, or <emu-val>-0</emu-val><sub>&#120125;</sub>, return 0.</li><li>If <var>number</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, return +&#8734;.</li><li>If <var>number</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, return -&#8734;.</li><li>Let <var>integer</var> be <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>(<emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>number</var>))).</li><li>If <var>number</var> &lt; <emu-val>+0</emu-val><sub>&#120125;</sub>, set <var>integer</var> to -<var>integer</var>.</li><li>Return <var>integer</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {}}, "to": {"secList": ["sec-tointegerorinfinity"], "secData": {"sec-tointegerorinfinity": {"num": "7.1.5", "title": "#sec-tointegerorinfinity ToIntegerOrInfinity ( argument )", "html": "<emu-clause id=\"sec-tointegerorinfinity\" type=\"abstract operation\" oldids=\"sec-tointeger\" aoid=\"ToIntegerOrInfinity\"><span id=\"sec-tointeger\"></span>\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-tointegerorinfinity\">#sec-tointegerorinfinity</span> ToIntegerOrInfinity ( <var>argument</var> )</h1>\n      <p>The abstract operation ToIntegerOrInfinity takes argument <var>argument</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It converts <var>argument</var> to an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> representing its <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> with fractional part truncated, or to +&#8734; or -&#8734; when that <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> is infinite. It performs the following steps when called:</p>\n      <emu-alg><ol><li>Let <var>number</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>argument</var>).</li><li>If <var>number</var> is <emu-val>NaN</emu-val>, <emu-val>+0</emu-val><sub>&#120125;</sub>, or <emu-val>-0</emu-val><sub>&#120125;</sub>, return 0.</li><li>If <var>number</var> is <emu-val>+&#8734;</emu-val><sub>&#120125;</sub>, return +&#8734;.</li><li>If <var>number</var> is <emu-val>-&#8734;</emu-val><sub>&#120125;</sub>, return -&#8734;.</li><li>Let <var>integer</var> be <emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref>(<emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>number</var>))).</li><li>If <var>number</var> &lt; <emu-val>+0</emu-val><sub>&#120125;</sub>, set <var>integer</var> to -<var>integer</var>.</li><li>Return <var>integer</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {}}}