{"from": {"secList": ["sec-json-@@tostringtag", "sec-get-set-@@species", "sec-%stringiteratorprototype%-@@tostringtag", "sec-generatorfunction.prototype-@@tostringtag", "sec-symbol.search", "sec-array.prototype-@@unscopables", "sec-isregexp", "sec-%regexpstringiteratorprototype%-@@tostringtag", "sec-get-map-@@species", "sec-symbol.tostringtag", "sec-promise.prototype-@@tostringtag", "sec-get-%typedarray%-@@species", "sec-weakmap.prototype-@@tostringtag", "sec-get-arraybuffer-@@species", "sec-get-regexp-@@species", "sec-bigint.prototype-@@tostringtag", "sec-array.from", "sec-symbol.hasinstance", "sec-createunmappedargumentsobject", "sec-map.prototype-@@iterator", "sec-array.prototype-@@iterator", "sec-set.prototype-@@tostringtag", "sec-arrayspeciescreate", "sec-toprimitive", "sec-speciesconstructor", "sec-get-promise-@@species", "sec-arraybuffer.prototype-@@tostringtag", "sec-symbol.replace", "sec-well-known-symbols", "sec-symbol.matchall", "sec-sharedarraybuffer.prototype.toString", "sec-symbol.split", "sec-instanceofoperator", "sec-createmappedargumentsobject", "sec-@@tostringtag", "sec-object-environment-records-hasbinding-n", "sec-get-array-@@species", "sec-add-entries-from-iterable", "sec-weakset.prototype-@@tostringtag", "sec-async-function-prototype-properties-toStringTag", "sec-typedarray-object", "sec-map-iterable", "sec-math-@@tostringtag", "sec-dataview.prototype-@@tostringtag", "sec-string.prototype.replace", "sec-%typedarray%.prototype-@@iterator", "sec-generator.prototype-@@tostringtag", "sec-symbol.prototype-@@tostringtag", "sec-map.prototype-@@tostringtag", "sec-%setiteratorprototype%-@@tostringtag", "sec-symbol.match", "sec-symbol.unscopables", "sec-regexp.prototype-@@match", "sec-string.prototype.matchall", "sec-string.prototype.match", "sec-symbol.asynciterator", "sec-%mapiteratorprototype%-@@tostringtag", "sec-symbol.toprimitive", "sec-symbol.iterator", "sec-%arrayiteratorprototype%-@@tostringtag", "sec-object.prototype.tostring", "sec-%typedarray%.from", "sec-string.prototype.search", "sec-string.prototype.split", "sec-set.prototype-@@iterator", "sec-weakmap-iterable", "sec-asyncgeneratorfunction-prototype-tostringtag", "sec-symbol.isconcatspreadable", "sec-getiterator", "sec-asyncgenerator-prototype-tostringtag", "sec-symbol.species", "sec-isconcatspreadable", "sec-atomics-@@tostringtag"], "secData": {"sec-json-@@tostringtag": {"num": "24.5.3", "title": "#sec-json-@@tostringtag JSON [ @@toStringTag ]", "html": "<emu-clause id=\"sec-json-@@tostringtag\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-json-@@tostringtag\">#sec-json-@@tostringtag</span> JSON [ @@toStringTag ]</h1>\n      <p>The initial value of the @@toStringTag property is the String value <emu-val>\"JSON\"</emu-val>.</p>\n      <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n    </emu-clause>\n  "}, "sec-get-set-@@species": {"num": "23.2.2.2", "title": "#sec-get-set-@@species get Set [ @@species ]", "html": "<emu-clause id=\"sec-get-set-@@species\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-set-@@species\">#sec-get-set-@@species</span> get Set [ @@species ]</h1>\n        <p><code>Set[@@species]</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Return the <emu-val>this</emu-val> value.</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"get [Symbol.species]\"</emu-val>.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Methods that create derived collection objects should call @@species to determine the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to use to create the derived objects. Subclass <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> may over-ride @@species to change the default <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> assignment.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-%stringiteratorprototype%-@@tostringtag": {"num": "21.1.5.2.2", "title": "#sec-%stringiteratorprototype%-@@tostringtag %StringIteratorPrototype% [ @@toStringTag ]", "html": "<emu-clause id=\"sec-%stringiteratorprototype%-@@tostringtag\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%stringiteratorprototype%-@@tostringtag\">#sec-%stringiteratorprototype%-@@tostringtag</span> %StringIteratorPrototype% [ @@toStringTag ]</h1>\n          <p>The initial value of the @@toStringTag property is the String value <emu-val>\"String Iterator\"</emu-val>.</p>\n          <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n        </emu-clause>\n      "}, "sec-generatorfunction.prototype-@@tostringtag": {"num": "25.2.3.3", "title": "#sec-generatorfunction.prototype-@@tostringtag GeneratorFunction.prototype [ @@toStringTag ]", "html": "<emu-clause id=\"sec-generatorfunction.prototype-@@tostringtag\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorfunction.prototype-@@tostringtag\">#sec-generatorfunction.prototype-@@tostringtag</span> GeneratorFunction.prototype [ @@toStringTag ]</h1>\n        <p>The initial value of the @@toStringTag property is the String value <emu-val>\"GeneratorFunction\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-symbol.search": {"num": "19.4.2.11", "title": "#sec-symbol.search Symbol.search", "html": "<emu-clause id=\"sec-symbol.search\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-symbol.search\">#sec-symbol.search</span> Symbol.search</h1>\n        <p>The initial value of <code>Symbol.search</code> is the well-known symbol @@search (<emu-xref href=\"#table-1\"><a href=\"#table-1\" class=\"excluded-xref\" excluded-id=\"table-1\">#table-1</a></emu-xref>).</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-array.prototype-@@unscopables": {"num": "22.1.3.34", "title": "#sec-array.prototype-@@unscopables Array.prototype [ @@unscopables ]", "html": "<emu-clause id=\"sec-array.prototype-@@unscopables\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype-@@unscopables\">#sec-array.prototype-@@unscopables</span> Array.prototype [ @@unscopables ]</h1>\n        <p>The initial value of the @@unscopables <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> is an object created by the following steps:</p>\n        <emu-alg><ol><li>Let <var>unscopableList</var> be <emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-val>null</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"copyWithin\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"entries\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"fill\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"find\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"findIndex\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"flat\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"flatMap\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"includes\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"keys\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"values\"</emu-val>, <emu-val>true</emu-val>).</li><li>Return <var>unscopableList</var>.</li></ol></emu-alg>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The own property names of this object are property names that were not included as standard properties of <code>Array.prototype</code> prior to the ECMAScript 2015 specification. These names are ignored for <code>with</code> statement binding purposes in order to preserve the behaviour of existing code that might use one of these names as a binding in an outer scope that is shadowed by a <code>with</code> statement whose binding object is an Array object.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-isregexp": {"num": "7.2.9", "title": "#sec-isregexp IsRegExp ( argument )", "html": "<emu-clause id=\"sec-isregexp\" aoid=\"IsRegExp\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isregexp\">#sec-isregexp</span> IsRegExp ( <var>argument</var> )</h1>\n      <p>The abstract operation IsRegExp takes argument <var>argument</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>argument</var>) is not Object, return <emu-val>false</emu-val>.</li><li>Let <var>matcher</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>argument</var>, @@match).</li><li>If <var>matcher</var> is not <emu-val>undefined</emu-val>, return !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(<var>matcher</var>).</li><li>If <var>argument</var> has a [[RegExpMatcher]] internal slot, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-%regexpstringiteratorprototype%-@@tostringtag": {"num": "21.2.7.1.2", "title": "#sec-%regexpstringiteratorprototype%-@@tostringtag %RegExpStringIteratorPrototype% [ @@toStringTag ]", "html": "<emu-clause id=\"sec-%regexpstringiteratorprototype%-@@tostringtag\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%regexpstringiteratorprototype%-@@tostringtag\">#sec-%regexpstringiteratorprototype%-@@tostringtag</span> %RegExpStringIteratorPrototype% [ @@toStringTag ]</h1>\n          <p>The initial value of the @@toStringTag property is the String value <emu-val>\"RegExp String Iterator\"</emu-val>.</p>\n          <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n        </emu-clause>\n      "}, "sec-get-map-@@species": {"num": "23.1.2.2", "title": "#sec-get-map-@@species get Map [ @@species ]", "html": "<emu-clause id=\"sec-get-map-@@species\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-map-@@species\">#sec-get-map-@@species</span> get Map [ @@species ]</h1>\n        <p><code>Map[@@species]</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Return the <emu-val>this</emu-val> value.</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"get [Symbol.species]\"</emu-val>.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Methods that create derived collection objects should call @@species to determine the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to use to create the derived objects. Subclass <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> may over-ride @@species to change the default <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> assignment.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-symbol.tostringtag": {"num": "19.4.2.15", "title": "#sec-symbol.tostringtag Symbol.toStringTag", "html": "<emu-clause id=\"sec-symbol.tostringtag\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-symbol.tostringtag\">#sec-symbol.tostringtag</span> Symbol.toStringTag</h1>\n        <p>The initial value of <code>Symbol.toStringTag</code> is the well-known symbol @@toStringTag (<emu-xref href=\"#table-1\"><a href=\"#table-1\" class=\"excluded-xref\" excluded-id=\"table-1\">#table-1</a></emu-xref>).</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-promise.prototype-@@tostringtag": {"num": "25.6.5.5", "title": "#sec-promise.prototype-@@tostringtag Promise.prototype [ @@toStringTag ]", "html": "<emu-clause id=\"sec-promise.prototype-@@tostringtag\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promise.prototype-@@tostringtag\">#sec-promise.prototype-@@tostringtag</span> Promise.prototype [ @@toStringTag ]</h1>\n        <p>The initial value of the @@toStringTag property is the String value <emu-val>\"Promise\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-get-%typedarray%-@@species": {"num": "22.2.2.4", "title": "#sec-get-%typedarray%-@@species get %TypedArray% [ @@species ]", "html": "<emu-clause id=\"sec-get-%typedarray%-@@species\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-%typedarray%-@@species\">#sec-get-%typedarray%-@@species</span> get %TypedArray% [ @@species ]</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>[@@species]</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Return the <emu-val>this</emu-val> value.</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"get [Symbol.species]\"</emu-val>.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><emu-xref href=\"#sec-properties-of-the-%typedarrayprototype%-object\"><a href=\"#sec-properties-of-the-%typedarrayprototype%-object\">%TypedArray.prototype%</a></emu-xref> methods normally use their <emu-val>this</emu-val> value's <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create a derived object. However, a subclass <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> may over-ride that default behaviour by redefining its @@species property.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-weakmap.prototype-@@tostringtag": {"num": "23.3.3.6", "title": "#sec-weakmap.prototype-@@tostringtag WeakMap.prototype [ @@toStringTag ]", "html": "<emu-clause id=\"sec-weakmap.prototype-@@tostringtag\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakmap.prototype-@@tostringtag\">#sec-weakmap.prototype-@@tostringtag</span> WeakMap.prototype [ @@toStringTag ]</h1>\n        <p>The initial value of the @@toStringTag property is the String value <emu-val>\"WeakMap\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-get-arraybuffer-@@species": {"num": "24.1.4.3", "title": "#sec-get-arraybuffer-@@species get ArrayBuffer [ @@species ]", "html": "<emu-clause id=\"sec-get-arraybuffer-@@species\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-arraybuffer-@@species\">#sec-get-arraybuffer-@@species</span> get ArrayBuffer [ @@species ]</h1>\n        <p><code>ArrayBuffer[@@species]</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Return the <emu-val>this</emu-val> value.</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"get [Symbol.species]\"</emu-val>.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>ArrayBuffer prototype methods normally use their <emu-val>this</emu-val> value's <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create a derived object. However, a subclass <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> may over-ride that default behaviour by redefining its @@species property.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-get-regexp-@@species": {"num": "21.2.4.2", "title": "#sec-get-regexp-@@species get RegExp [ @@species ]", "html": "<emu-clause id=\"sec-get-regexp-@@species\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-regexp-@@species\">#sec-get-regexp-@@species</span> get RegExp [ @@species ]</h1>\n        <p><code>RegExp[@@species]</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Return the <emu-val>this</emu-val> value.</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"get [Symbol.species]\"</emu-val>.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>RegExp prototype methods normally use their <emu-val>this</emu-val> value's <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create a derived object. However, a subclass <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> may over-ride that default behaviour by redefining its @@species property.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-bigint.prototype-@@tostringtag": {"num": "20.2.3.5", "title": "#sec-bigint.prototype-@@tostringtag BigInt.prototype [ @@toStringTag ]", "html": "<emu-clause id=\"sec-bigint.prototype-@@tostringtag\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bigint.prototype-@@tostringtag\">#sec-bigint.prototype-@@tostringtag</span> BigInt.prototype [ @@toStringTag ]</h1>\n        <p>The initial value of the @@toStringTag property is the String value <emu-val>\"BigInt\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-array.from": {"num": "22.1.2.1", "title": "#sec-array.from Array.from ( items [ , mapfn [ , thisArg ] ] )", "html": "<emu-clause id=\"sec-array.from\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.from\">#sec-array.from</span> Array.from ( <var>items</var> [ , <var>mapfn</var> [ , <var>thisArg</var> ] ] )</h1>\n        <p>When the <code>from</code> method is called with argument <var>items</var> and optional arguments <var>mapfn</var> and <var>thisArg</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>C</var> be the <emu-val>this</emu-val> value.</li><li>If <var>mapfn</var> is <emu-val>undefined</emu-val>, let <var>mapping</var> be <emu-val>false</emu-val>.</li><li>Else,<ol><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>mapfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>mapping</var> be <emu-val>true</emu-val>.</li></ol></li><li>Let <var>usingIterator</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>items</var>, @@iterator).</li><li>If <var>usingIterator</var> is not <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>C</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>C</var>).</li></ol></li><li>Else,<ol><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li></ol></li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>items</var>, <emu-const>sync</emu-const>, <var>usingIterator</var>).</li><li>Let <var>k</var> be 0.</li><li>Repeat,<ol><li>If <var>k</var> &#8805; 2<sup>53</sup> - 1, then<ol><li>Let <var>error</var> be <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(a newly created <emu-val>TypeError</emu-val> object).</li><li>Return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>error</var>).</li></ol></li><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>k</var>, <emu-val>true</emu-val>).</li><li>Return <var>A</var>.</li></ol></li><li>Let <var>nextValue</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>mapping</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>mappedValue</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>mapfn</var>, <var>thisArg</var>, &#171; <var>nextValue</var>, <var>k</var> &#187;).</li><li>If <var>mappedValue</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>mappedValue</var>).</li><li>Set <var>mappedValue</var> to <var>mappedValue</var>.[[Value]].</li></ol></li><li>Else, let <var>mappedValue</var> be <var>nextValue</var>.</li><li>Let <var>defineStatus</var> be <emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <var>Pk</var>, <var>mappedValue</var>).</li><li>If <var>defineStatus</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>defineStatus</var>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li></ol></li><li>NOTE: <var>items</var> is not an Iterable so assume it is an <emu-xref href=\"#sec-lengthofarraylike\"><a href=\"#sec-lengthofarraylike\">array-like object</a></emu-xref>.</li><li>Let <var>arrayLike</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>items</var>).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>arrayLike</var>).</li><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>C</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>C</var>, &#171; <var>len</var> &#187;).</li></ol></li><li>Else,<ol><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(<var>len</var>).</li></ol></li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>arrayLike</var>, <var>Pk</var>).</li><li>If <var>mapping</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>mappedValue</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>mapfn</var>, <var>thisArg</var>, &#171; <var>kValue</var>, <var>k</var> &#187;).</li></ol></li><li>Else, let <var>mappedValue</var> be <var>kValue</var>.</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <var>Pk</var>, <var>mappedValue</var>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>len</var>, <emu-val>true</emu-val>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>from</code> function is an intentionally generic factory method; it does not require that its <emu-val>this</emu-val> value be the Array <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. Therefore it can be transferred to or inherited by any other constructors that may be called with a single numeric argument.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-symbol.hasinstance": {"num": "19.4.2.3", "title": "#sec-symbol.hasinstance Symbol.hasInstance", "html": "<emu-clause id=\"sec-symbol.hasinstance\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-symbol.hasinstance\">#sec-symbol.hasinstance</span> Symbol.hasInstance</h1>\n        <p>The initial value of <code>Symbol.hasInstance</code> is the well-known symbol @@hasInstance (<emu-xref href=\"#table-1\"><a href=\"#table-1\" class=\"excluded-xref\" excluded-id=\"table-1\">#table-1</a></emu-xref>).</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-createunmappedargumentsobject": {"num": "9.4.4.6", "title": "#sec-createunmappedargumentsobject CreateUnmappedArgumentsObject ( argumentsList )", "html": "<emu-clause id=\"sec-createunmappedargumentsobject\" aoid=\"CreateUnmappedArgumentsObject\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createunmappedargumentsobject\">#sec-createunmappedargumentsobject</span> CreateUnmappedArgumentsObject ( <var>argumentsList</var> )</h1>\n        <p>The abstract operation CreateUnmappedArgumentsObject takes argument <var>argumentsList</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>len</var> be the number of elements in <var>argumentsList</var>.</li><li>Let <var>obj</var> be <emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(%Object.prototype%, &#171; [[ParameterMap]] &#187;).</li><li>Set <var>obj</var>.[[ParameterMap]] to <emu-val>undefined</emu-val>.</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-val>\"length\"</emu-val>, PropertyDescriptor { [[Value]]: <var>len</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }).</li><li>Let <var>index</var> be 0.</li><li>Repeat, while <var>index</var> &lt; <var>len</var>,<ol><li>Let <var>val</var> be <var>argumentsList</var>[<var>index</var>].</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>obj</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>index</var>), <var>val</var>).</li><li>Set <var>index</var> to <var>index</var> + 1.</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>obj</var>, @@iterator, PropertyDescriptor { [[Value]]: %Array.prototype.values%, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-val>\"callee\"</emu-val>, PropertyDescriptor { [[Get]]: <emu-xref href=\"#sec-%throwtypeerror%\"><a href=\"#sec-%throwtypeerror%\">%ThrowTypeError%</a></emu-xref>, [[Set]]: <emu-xref href=\"#sec-%throwtypeerror%\"><a href=\"#sec-%throwtypeerror%\">%ThrowTypeError%</a></emu-xref>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return <var>obj</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-map.prototype-@@iterator": {"num": "23.1.3.12", "title": "#sec-map.prototype-@@iterator Map.prototype [ @@iterator ] ( )", "html": "<emu-clause id=\"sec-map.prototype-@@iterator\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype-@@iterator\">#sec-map.prototype-@@iterator</span> Map.prototype [ @@iterator ] ( )</h1>\n        <p>The initial value of the @@iterator property is the same <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> as the initial value of the <emu-val>\"entries\"</emu-val> property.</p>\n      </emu-clause>\n\n      "}, "sec-array.prototype-@@iterator": {"num": "22.1.3.33", "title": "#sec-array.prototype-@@iterator Array.prototype [ @@iterator ] ( )", "html": "<emu-clause id=\"sec-array.prototype-@@iterator\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype-@@iterator\">#sec-array.prototype-@@iterator</span> Array.prototype [ @@iterator ] ( )</h1>\n        <p>The initial value of the @@iterator property is the same <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> as the initial value of the <code>Array.prototype.values</code> property.</p>\n      </emu-clause>\n\n      "}, "sec-set.prototype-@@tostringtag": {"num": "23.2.3.12", "title": "#sec-set.prototype-@@tostringtag Set.prototype [ @@toStringTag ]", "html": "<emu-clause id=\"sec-set.prototype-@@tostringtag\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set.prototype-@@tostringtag\">#sec-set.prototype-@@tostringtag</span> Set.prototype [ @@toStringTag ]</h1>\n        <p>The initial value of the @@toStringTag property is the String value <emu-val>\"Set\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-arrayspeciescreate": {"num": "9.4.2.3", "title": "#sec-arrayspeciescreate ArraySpeciesCreate ( originalArray, length )", "html": "<emu-clause id=\"sec-arrayspeciescreate\" aoid=\"ArraySpeciesCreate\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arrayspeciescreate\">#sec-arrayspeciescreate</span> ArraySpeciesCreate ( <var>originalArray</var>, <var>length</var> )</h1>\n        <p>The abstract operation ArraySpeciesCreate takes arguments <var>originalArray</var> and <var>length</var>. It is used to specify the creation of a new Array object using a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function that is derived from <var>originalArray</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsNonNegativeInteger\"><a href=\"#sec-isnonnegativeinteger\">IsNonNegativeInteger</a></emu-xref>(<var>length</var>) is <emu-val>true</emu-val>.</li><li>If <var>length</var> is <emu-val>-0</emu-val>, set <var>length</var> to <emu-val>+0</emu-val>.</li><li>Let <var>isArray</var> be ?&#160;<emu-xref aoid=\"IsArray\"><a href=\"#sec-isarray\">IsArray</a></emu-xref>(<var>originalArray</var>).</li><li>If <var>isArray</var> is <emu-val>false</emu-val>, return ?&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(<var>length</var>).</li><li>Let <var>C</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>originalArray</var>, <emu-val>\"constructor\"</emu-val>).</li><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>C</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>thisRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Let <var>realmC</var> be ?&#160;<emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref>(<var>C</var>).</li><li>If <var>thisRealm</var> and <var>realmC</var> are not the same <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>, then<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>C</var>, <var>realmC</var>.[[Intrinsics]].[[<emu-xref href=\"#sec-array-constructor\"><a href=\"#sec-array-constructor\">%Array%</a></emu-xref>]]) is <emu-val>true</emu-val>, set <var>C</var> to <emu-val>undefined</emu-val>.</li></ol></li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>C</var>) is Object, then<ol><li>Set <var>C</var> to ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>C</var>, @@species).</li><li>If <var>C</var> is <emu-val>null</emu-val>, set <var>C</var> to <emu-val>undefined</emu-val>.</li></ol></li><li>If <var>C</var> is <emu-val>undefined</emu-val>, return ?&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(<var>length</var>).</li><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>C</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>C</var>, &#171; <var>length</var> &#187;).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>If <var>originalArray</var> was created using the standard built-in Array <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> for a <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> that is not the <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>, then a new Array is created using the <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>. This maintains compatibility with Web browsers that have historically had that behaviour for the <code>Array.prototype</code> methods that now are defined using ArraySpeciesCreate.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-toprimitive": {"num": "7.1.1", "title": "#sec-toprimitive ToPrimitive ( input [ , PreferredType ] )", "html": "<emu-clause id=\"sec-toprimitive\" aoid=\"ToPrimitive\" oldids=\"table-9\">\n      <span id=\"table-9\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-toprimitive\">#sec-toprimitive</span> ToPrimitive ( <var>input</var> [ , <var>PreferredType</var> ] )</h1>\n      <p>The abstract operation ToPrimitive takes argument <var>input</var> and optional argument <var>PreferredType</var>. It converts its <var>input</var> argument to a non-Object type. If an object is capable of converting to more than one primitive type, it may use the optional hint <var>PreferredType</var> to favour that type. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>input</var> is an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>input</var>) is Object, then<ol><li>If <var>PreferredType</var> is not present, let <var>hint</var> be <emu-val>\"default\"</emu-val>.</li><li>Else if <var>PreferredType</var> is hint String, let <var>hint</var> be <emu-val>\"string\"</emu-val>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>PreferredType</var> is hint Number.</li><li>Let <var>hint</var> be <emu-val>\"number\"</emu-val>.</li></ol></li><li>Let <var>exoticToPrim</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>input</var>, @@toPrimitive).</li><li>If <var>exoticToPrim</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>exoticToPrim</var>, <var>input</var>, &#171; <var>hint</var> &#187;).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is not Object, return <var>result</var>.</li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>If <var>hint</var> is <emu-val>\"default\"</emu-val>, set <var>hint</var> to <emu-val>\"number\"</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"OrdinaryToPrimitive\"><a href=\"#sec-ordinarytoprimitive\">OrdinaryToPrimitive</a></emu-xref>(<var>input</var>, <var>hint</var>).</li></ol></li><li>Return <var>input</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When ToPrimitive is called with no hint, then it generally behaves as if the hint were Number. However, objects may over-ride this behaviour by defining a @@toPrimitive method. Of the objects defined in this specification only Date objects (see <emu-xref href=\"#sec-date.prototype-@@toprimitive\"><a href=\"#sec-date.prototype-@@toprimitive\" class=\"excluded-xref\" excluded-id=\"sec-date.prototype-@@toprimitive\">#sec-date.prototype-@@toprimitive</a></emu-xref>) and Symbol objects (see <emu-xref href=\"#sec-symbol.prototype-@@toprimitive\"><a href=\"#sec-symbol.prototype-@@toprimitive\" class=\"excluded-xref\" excluded-id=\"sec-symbol.prototype-@@toprimitive\">#sec-symbol.prototype-@@toprimitive</a></emu-xref>) over-ride the default ToPrimitive behaviour. Date objects treat no hint as if the hint were String.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-ordinarytoprimitive\"><h1><span class=\"secnum\">7.1.1.1</span>#sec-ordinarytoprimitive OrdinaryToPrimitive ( O, hint )</h1>...</div></emu-clause>\n\n    "}, "sec-speciesconstructor": {"num": "7.3.22", "title": "#sec-speciesconstructor SpeciesConstructor ( O, defaultConstructor )", "html": "<emu-clause id=\"sec-speciesconstructor\" aoid=\"SpeciesConstructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-speciesconstructor\">#sec-speciesconstructor</span> SpeciesConstructor ( <var>O</var>, <var>defaultConstructor</var> )</h1>\n      <p>The abstract operation SpeciesConstructor takes arguments <var>O</var> (an Object) and <var>defaultConstructor</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>). It is used to retrieve the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> that should be used to create new objects that are derived from <var>O</var>. <var>defaultConstructor</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to use if a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> @@species property cannot be found starting from <var>O</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Let <var>C</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <emu-val>\"constructor\"</emu-val>).</li><li>If <var>C</var> is <emu-val>undefined</emu-val>, return <var>defaultConstructor</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>C</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>C</var>, @@species).</li><li>If <var>S</var> is either <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, return <var>defaultConstructor</var>.</li><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>S</var>) is <emu-val>true</emu-val>, return <var>S</var>.</li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-get-promise-@@species": {"num": "25.6.4.7", "title": "#sec-get-promise-@@species get Promise [ @@species ]", "html": "<emu-clause id=\"sec-get-promise-@@species\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-promise-@@species\">#sec-get-promise-@@species</span> get Promise [ @@species ]</h1>\n        <p><code>Promise[@@species]</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Return the <emu-val>this</emu-val> value.</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"get [Symbol.species]\"</emu-val>.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Promise prototype methods normally use their <emu-val>this</emu-val> value's <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create a derived object. However, a subclass <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> may over-ride that default behaviour by redefining its @@species property.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-arraybuffer.prototype-@@tostringtag": {"num": "24.1.5.4", "title": "#sec-arraybuffer.prototype-@@tostringtag ArrayBuffer.prototype [ @@toStringTag ]", "html": "<emu-clause id=\"sec-arraybuffer.prototype-@@tostringtag\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arraybuffer.prototype-@@tostringtag\">#sec-arraybuffer.prototype-@@tostringtag</span> ArrayBuffer.prototype [ @@toStringTag ]</h1>\n        <p>The initial value of the @@toStringTag property is the String value <emu-val>\"ArrayBuffer\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-symbol.replace": {"num": "19.4.2.10", "title": "#sec-symbol.replace Symbol.replace", "html": "<emu-clause id=\"sec-symbol.replace\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-symbol.replace\">#sec-symbol.replace</span> Symbol.replace</h1>\n        <p>The initial value of <code>Symbol.replace</code> is the well-known symbol @@replace (<emu-xref href=\"#table-1\"><a href=\"#table-1\" class=\"excluded-xref\" excluded-id=\"table-1\">#table-1</a></emu-xref>).</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-well-known-symbols": {"num": "6.1.5.1", "title": "#sec-well-known-symbols Well-Known Symbols", "html": "<emu-clause id=\"sec-well-known-symbols\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-well-known-symbols\">#sec-well-known-symbols</span> Well-Known Symbols</h1>\n        <p>Well-known symbols are built-in Symbol values that are explicitly referenced by algorithms of this specification. They are typically used as the keys of properties whose values serve as extension points of a specification algorithm. Unless otherwise specified, well-known symbols values are shared by all realms (<emu-xref href=\"#sec-code-realms\"><a href=\"#sec-code-realms\" class=\"excluded-xref\" excluded-id=\"sec-code-realms\">#sec-code-realms</a></emu-xref>).</p>\n        <p>Within this specification a well-known symbol is referred to by using a notation of the form @@name, where &#8220;name&#8221; is one of the values listed in <emu-xref href=\"#table-1\"><a href=\"#table-1\" class=\"excluded-xref\" excluded-id=\"table-1\">#table-1</a></emu-xref>.</p>\n        <emu-table id=\"table-1\" caption=\"Well-known Symbols\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-1\">#table-1</span>: Well-known Symbols</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Specification Name\n              </th>\n              <th>\n                [[Description]]\n              </th>\n              <th>\n                Value and Purpose\n              </th>\n            </tr>\n            <tr>\n              <td>\n                @@asyncIterator\n              </td>\n              <td>\n                <emu-val>\"Symbol.asyncIterator\"</emu-val>\n              </td>\n              <td>\n                A method that returns the default AsyncIterator for an object. Called by the semantics of the <code>for</code>-<code>await</code>-<code>of</code> statement.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                @@hasInstance\n              </td>\n              <td>\n                <emu-val>\"Symbol.hasInstance\"</emu-val>\n              </td>\n              <td>\n                A method that determines if a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> object recognizes an object as one of the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>'s instances. Called by the semantics of the <code>instanceof</code> operator.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                @@isConcatSpreadable\n              </td>\n              <td>\n                <emu-val>\"Symbol.isConcatSpreadable\"</emu-val>\n              </td>\n              <td>\n                A Boolean valued property that if true indicates that an object should be flattened to its array elements by <emu-xref href=\"#sec-array.prototype.concat\"><a href=\"#sec-array.prototype.concat\"><code>Array.prototype.concat</code></a></emu-xref>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                @@iterator\n              </td>\n              <td>\n                <emu-val>\"Symbol.iterator\"</emu-val>\n              </td>\n              <td>\n                A method that returns the default Iterator for an object. Called by the semantics of the for-of statement.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                @@match\n              </td>\n              <td>\n                <emu-val>\"Symbol.match\"</emu-val>\n              </td>\n              <td>\n                A regular expression method that matches the regular expression against a string. Called by the <emu-xref href=\"#sec-string.prototype.match\"><a href=\"#sec-string.prototype.match\"><code>String.prototype.match</code></a></emu-xref> method.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                @@matchAll\n              </td>\n              <td>\n                <emu-val>\"Symbol.matchAll\"</emu-val>\n              </td>\n              <td>\n                A regular expression method that returns an iterator, that yields matches of the regular expression against a string. Called by the <emu-xref href=\"#sec-string.prototype.matchall\"><a href=\"#sec-string.prototype.matchall\"><code>String.prototype.matchAll</code></a></emu-xref> method.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                @@replace\n              </td>\n              <td>\n                <emu-val>\"Symbol.replace\"</emu-val>\n              </td>\n              <td>\n                A regular expression method that replaces matched substrings of a string. Called by the <emu-xref href=\"#sec-string.prototype.replace\"><a href=\"#sec-string.prototype.replace\"><code>String.prototype.replace</code></a></emu-xref> method.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                @@search\n              </td>\n              <td>\n                <emu-val>\"Symbol.search\"</emu-val>\n              </td>\n              <td>\n                A regular expression method that returns the index within a string that matches the regular expression. Called by the <emu-xref href=\"#sec-string.prototype.search\"><a href=\"#sec-string.prototype.search\"><code>String.prototype.search</code></a></emu-xref> method.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                @@species\n              </td>\n              <td>\n                <emu-val>\"Symbol.species\"</emu-val>\n              </td>\n              <td>\n                A function valued property that is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function that is used to create derived objects.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                @@split\n              </td>\n              <td>\n                <emu-val>\"Symbol.split\"</emu-val>\n              </td>\n              <td>\n                A regular expression method that splits a string at the indices that match the regular expression. Called by the <emu-xref href=\"#sec-string.prototype.split\"><a href=\"#sec-string.prototype.split\"><code>String.prototype.split</code></a></emu-xref> method.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                @@toPrimitive\n              </td>\n              <td>\n                <emu-val>\"Symbol.toPrimitive\"</emu-val>\n              </td>\n              <td>\n                A method that converts an object to a corresponding primitive value. Called by the <emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref> abstract operation.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                @@toStringTag\n              </td>\n              <td>\n                <emu-val>\"Symbol.toStringTag\"</emu-val>\n              </td>\n              <td>\n                A String valued property that is used in the creation of the default string description of an object. Accessed by the built-in method <emu-xref href=\"#sec-object.prototype.tostring\"><a href=\"#sec-object.prototype.tostring\"><code>Object.prototype.toString</code></a></emu-xref>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                @@unscopables\n              </td>\n              <td>\n                <emu-val>\"Symbol.unscopables\"</emu-val>\n              </td>\n              <td>\n                An object valued property whose own and inherited property names are property names that are excluded from the <code>with</code> environment bindings of the associated object.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n    "}, "sec-symbol.matchall": {"num": "19.4.2.8", "title": "#sec-symbol.matchall Symbol.matchAll", "html": "<emu-clause id=\"sec-symbol.matchall\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-symbol.matchall\">#sec-symbol.matchall</span> Symbol.matchAll</h1>\n        <p>The initial value of <code>Symbol.matchAll</code> is the well-known symbol @@matchAll (<emu-xref href=\"#table-2\"><a href=\"#table-2\" class=\"excluded-xref\" excluded-id=\"table-2\">#table-2</a></emu-xref>).</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-sharedarraybuffer.prototype.toString": {"num": "24.2.4.4", "title": "#sec-sharedarraybuffer.prototype.toString SharedArrayBuffer.prototype [ @@toStringTag ]", "html": "<emu-clause id=\"sec-sharedarraybuffer.prototype.toString\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-sharedarraybuffer.prototype.toString\">#sec-sharedarraybuffer.prototype.toString</span> SharedArrayBuffer.prototype [ @@toStringTag ]</h1>\n        <p>The initial value of the @@toStringTag property is the String value <emu-val>\"SharedArrayBuffer\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-symbol.split": {"num": "19.4.2.13", "title": "#sec-symbol.split Symbol.split", "html": "<emu-clause id=\"sec-symbol.split\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-symbol.split\">#sec-symbol.split</span> Symbol.split</h1>\n        <p>The initial value of <code>Symbol.split</code> is the well-known symbol @@split (<emu-xref href=\"#table-1\"><a href=\"#table-1\" class=\"excluded-xref\" excluded-id=\"table-1\">#table-1</a></emu-xref>).</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-instanceofoperator": {"num": "12.10.4", "title": "#sec-instanceofoperator Runtime Semantics: InstanceofOperator ( V, target )", "html": "<emu-clause id=\"sec-instanceofoperator\" aoid=\"InstanceofOperator\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-instanceofoperator\">#sec-instanceofoperator</span> Runtime Semantics: InstanceofOperator ( <var>V</var>, <var>target</var> )</h1>\n      <p>The abstract operation InstanceofOperator takes arguments <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>target</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It implements the generic algorithm for determining if <var>V</var> is an instance of <var>target</var> either by consulting <var>target</var>'s @@hasInstance method or, if absent, determining whether the value of <var>target</var>'s <emu-val>\"prototype\"</emu-val> property is present in <var>V</var>'s prototype chain. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>target</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>instOfHandler</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>target</var>, @@hasInstance).</li><li>If <var>instOfHandler</var> is not <emu-val>undefined</emu-val>, then<ol><li>Return !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>instOfHandler</var>, <var>target</var>, &#171; <var>V</var> &#187;)).</li></ol></li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>target</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return ?&#160;<emu-xref aoid=\"OrdinaryHasInstance\"><a href=\"#sec-ordinaryhasinstance\">OrdinaryHasInstance</a></emu-xref>(<var>target</var>, <var>V</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Steps 4 and 5 provide compatibility with previous editions of ECMAScript that did not use a @@hasInstance method to define the <code>instanceof</code> operator semantics. If an object does not define or inherit @@hasInstance it uses the default <code>instanceof</code> semantics.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-createmappedargumentsobject": {"num": "9.4.4.7", "title": "#sec-createmappedargumentsobject CreateMappedArgumentsObject ( func, formals, argumentsList, env )", "html": "<emu-clause id=\"sec-createmappedargumentsobject\" aoid=\"CreateMappedArgumentsObject\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createmappedargumentsobject\">#sec-createmappedargumentsobject</span> CreateMappedArgumentsObject ( <var>func</var>, <var>formals</var>, <var>argumentsList</var>, <var>env</var> )</h1>\n        <p>The abstract operation CreateMappedArgumentsObject takes arguments <var>func</var> (an Object), <var>formals</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>argumentsList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>), and <var>env</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>formals</var> does not contain a rest parameter, any binding patterns, or any initializers. It may contain duplicate identifiers.</li><li>Let <var>len</var> be the number of elements in <var>argumentsList</var>.</li><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"MakeBasicObject\"><a href=\"#sec-makebasicobject\">MakeBasicObject</a></emu-xref>(&#171; [[Prototype]], [[Extensible]], [[ParameterMap]] &#187;).</li><li>Set <var>obj</var>.[[GetOwnProperty]] as specified in <emu-xref href=\"#sec-arguments-exotic-objects-getownproperty-p\"><a href=\"#sec-arguments-exotic-objects-getownproperty-p\" class=\"excluded-xref\" excluded-id=\"sec-arguments-exotic-objects-getownproperty-p\">#sec-arguments-exotic-objects-getownproperty-p</a></emu-xref>.</li><li>Set <var>obj</var>.[[DefineOwnProperty]] as specified in <emu-xref href=\"#sec-arguments-exotic-objects-defineownproperty-p-desc\"><a href=\"#sec-arguments-exotic-objects-defineownproperty-p-desc\" class=\"excluded-xref\" excluded-id=\"sec-arguments-exotic-objects-defineownproperty-p-desc\">#sec-arguments-exotic-objects-defineownproperty-p-desc</a></emu-xref>.</li><li>Set <var>obj</var>.[[Get]] as specified in <emu-xref href=\"#sec-arguments-exotic-objects-get-p-receiver\"><a href=\"#sec-arguments-exotic-objects-get-p-receiver\" class=\"excluded-xref\" excluded-id=\"sec-arguments-exotic-objects-get-p-receiver\">#sec-arguments-exotic-objects-get-p-receiver</a></emu-xref>.</li><li>Set <var>obj</var>.[[Set]] as specified in <emu-xref href=\"#sec-arguments-exotic-objects-set-p-v-receiver\"><a href=\"#sec-arguments-exotic-objects-set-p-v-receiver\" class=\"excluded-xref\" excluded-id=\"sec-arguments-exotic-objects-set-p-v-receiver\">#sec-arguments-exotic-objects-set-p-v-receiver</a></emu-xref>.</li><li>Set <var>obj</var>.[[Delete]] as specified in <emu-xref href=\"#sec-arguments-exotic-objects-delete-p\"><a href=\"#sec-arguments-exotic-objects-delete-p\" class=\"excluded-xref\" excluded-id=\"sec-arguments-exotic-objects-delete-p\">#sec-arguments-exotic-objects-delete-p</a></emu-xref>.</li><li>Set <var>obj</var>.[[Prototype]] to %Object.prototype%.</li><li>Let <var>map</var> be <emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-val>null</emu-val>).</li><li>Set <var>obj</var>.[[ParameterMap]] to <var>map</var>.</li><li>Let <var>parameterNames</var> be the BoundNames of <var>formals</var>.</li><li>Let <var>numberOfParameters</var> be the number of elements in <var>parameterNames</var>.</li><li>Let <var>index</var> be 0.</li><li>Repeat, while <var>index</var> &lt; <var>len</var>,<ol><li>Let <var>val</var> be <var>argumentsList</var>[<var>index</var>].</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>obj</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>index</var>), <var>val</var>).</li><li>Set <var>index</var> to <var>index</var> + 1.</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-val>\"length\"</emu-val>, PropertyDescriptor { [[Value]]: <var>len</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }).</li><li>Let <var>mappedNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>index</var> be <var>numberOfParameters</var> - 1.</li><li>Repeat, while <var>index</var> &#8805; 0,<ol><li>Let <var>name</var> be <var>parameterNames</var>[<var>index</var>].</li><li>If <var>name</var> is not an element of <var>mappedNames</var>, then<ol><li>Add <var>name</var> as an element of the list <var>mappedNames</var>.</li><li>If <var>index</var> &lt; <var>len</var>, then<ol><li>Let <var>g</var> be <emu-xref aoid=\"MakeArgGetter\"><a href=\"#sec-makearggetter\">MakeArgGetter</a></emu-xref>(<var>name</var>, <var>env</var>).</li><li>Let <var>p</var> be <emu-xref aoid=\"MakeArgSetter\"><a href=\"#sec-makeargsetter\">MakeArgSetter</a></emu-xref>(<var>name</var>, <var>env</var>).</li><li>Perform <var>map</var>.[[DefineOwnProperty]](! <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>index</var>), PropertyDescriptor { [[Set]]: <var>p</var>, [[Get]]: <var>g</var>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }).</li></ol></li></ol></li><li>Set <var>index</var> to <var>index</var> - 1.</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>obj</var>, @@iterator, PropertyDescriptor { [[Value]]: %Array.prototype.values%, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-val>\"callee\"</emu-val>, PropertyDescriptor { [[Value]]: <var>func</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }).</li><li>Return <var>obj</var>.</li></ol></emu-alg>\n\n        <div id=\"excluded-sec-makearggetter\"><h1><span class=\"secnum\">9.4.4.7.1</span>#sec-makearggetter MakeArgGetter ( name, env )</h1>...</div><div id=\"excluded-sec-makeargsetter\"><h1><span class=\"secnum\">9.4.4.7.2</span>#sec-makeargsetter MakeArgSetter ( name, env )</h1>...</div></emu-clause>\n    "}, "sec-@@tostringtag": {"num": "26.3.1", "title": "#sec-@@tostringtag @@toStringTag", "html": "<emu-clause id=\"sec-@@tostringtag\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-@@tostringtag\">#sec-@@tostringtag</span> @@toStringTag</h1>\n      <p>The initial value of the @@toStringTag property is the String value <emu-val>\"Module\"</emu-val>.</p>\n      <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n    </emu-clause>\n  "}, "sec-object-environment-records-hasbinding-n": {"num": "8.1.1.2.1", "title": "#sec-object-environment-records-hasbinding-n HasBinding ( N )", "html": "<emu-clause id=\"sec-object-environment-records-hasbinding-n\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records-hasbinding-n\">#sec-object-environment-records-hasbinding-n</span> HasBinding ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method HasBinding for object Environment Records determines if its associated binding object has a property whose name is the value of the argument <var>N</var>:</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>bindings</var> be the binding object for <var>envRec</var>.</li><li>Let <var>foundBinding</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>bindings</var>, <var>N</var>).</li><li>If <var>foundBinding</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If the <var>withEnvironment</var> flag of <var>envRec</var> is <emu-val>false</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>unscopables</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>bindings</var>, @@unscopables).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>unscopables</var>) is Object, then<ol><li>Let <var>blocked</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>unscopables</var>, <var>N</var>)).</li><li>If <var>blocked</var> is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-get-array-@@species": {"num": "22.1.2.5", "title": "#sec-get-array-@@species get Array [ @@species ]", "html": "<emu-clause id=\"sec-get-array-@@species\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-array-@@species\">#sec-get-array-@@species</span> get Array [ @@species ]</h1>\n        <p><code>Array[@@species]</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Return the <emu-val>this</emu-val> value.</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"get [Symbol.species]\"</emu-val>.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Array prototype methods normally use their <emu-val>this</emu-val> value's <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create a derived object. However, a subclass <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> may over-ride that default behaviour by redefining its @@species property.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-add-entries-from-iterable": {"num": "23.1.1.2", "title": "#sec-add-entries-from-iterable AddEntriesFromIterable ( target, iterable, adder )", "html": "<emu-clause id=\"sec-add-entries-from-iterable\" aoid=\"AddEntriesFromIterable\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-add-entries-from-iterable\">#sec-add-entries-from-iterable</span> AddEntriesFromIterable ( <var>target</var>, <var>iterable</var>, <var>adder</var> )</h1>\n        <p>The abstract operation AddEntriesFromIterable takes arguments <var>target</var>, <var>iterable</var>, and <var>adder</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>). <var>adder</var> will be invoked, with <var>target</var> as the receiver. It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>adder</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iterable</var> is present, and is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>.</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>iterable</var>).</li><li>Repeat,<ol><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, return <var>target</var>.</li><li>Let <var>nextItem</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nextItem</var>) is not Object, then<ol><li>Let <var>error</var> be <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(a newly created <emu-val>TypeError</emu-val> object).</li><li>Return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>error</var>).</li></ol></li><li>Let <var>k</var> be <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>nextItem</var>, <emu-val>\"0\"</emu-val>).</li><li>If <var>k</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>k</var>).</li><li>Let <var>v</var> be <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>nextItem</var>, <emu-val>\"1\"</emu-val>).</li><li>If <var>v</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>v</var>).</li><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>adder</var>, <var>target</var>, &#171; <var>k</var>.[[Value]], <var>v</var>.[[Value]] &#187;).</li><li>If <var>status</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>status</var>).</li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The parameter <var>iterable</var> is expected to be an object that implements an @@iterator method that returns an iterator object that produces a two element <emu-xref href=\"#sec-lengthofarraylike\"><a href=\"#sec-lengthofarraylike\">array-like object</a></emu-xref> whose first element is a value that will be used as a Map key and whose second element is the value to associate with that key.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-weakset.prototype-@@tostringtag": {"num": "23.4.3.5", "title": "#sec-weakset.prototype-@@tostringtag WeakSet.prototype [ @@toStringTag ]", "html": "<emu-clause id=\"sec-weakset.prototype-@@tostringtag\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakset.prototype-@@tostringtag\">#sec-weakset.prototype-@@tostringtag</span> WeakSet.prototype [ @@toStringTag ]</h1>\n        <p>The initial value of the @@toStringTag property is the String value <emu-val>\"WeakSet\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-async-function-prototype-properties-toStringTag": {"num": "25.7.3.2", "title": "#sec-async-function-prototype-properties-toStringTag AsyncFunction.prototype [ @@toStringTag ]", "html": "<emu-clause id=\"sec-async-function-prototype-properties-toStringTag\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-prototype-properties-toStringTag\">#sec-async-function-prototype-properties-toStringTag</span> AsyncFunction.prototype [ @@toStringTag ]</h1>\n\n        <p>The initial value of the @@toStringTag property is the String value <emu-val>\"AsyncFunction\"</emu-val>.</p>\n\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-typedarray-object": {"num": "22.2.4.4", "title": "#sec-typedarray-object TypedArray ( object )", "html": "<emu-clause id=\"sec-typedarray-object\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-typedarray-object\">#sec-typedarray-object</span> <var>TypedArray</var> ( <var>object</var> )</h1>\n        <p>This description applies only if the <var>TypedArray</var> function is called with at least one argument and the Type of the first argument is Object and that object does not have either a [[TypedArrayName]] or an [[ArrayBufferData]] internal slot.</p>\n        <p><var>TypedArray</var> called with argument <var>object</var> performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>object</var>) is Object and <var>object</var> does not have either a [[TypedArrayName]] or an [[ArrayBufferData]] internal slot.</li><li>If NewTarget is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorName</var> be the String value of the <emu-xref href=\"#constructor\"><a href=\"#constructor\">Constructor</a></emu-xref> Name value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for this <var>TypedArray</var> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</li><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"AllocateTypedArray\"><a href=\"#sec-allocatetypedarray\">AllocateTypedArray</a></emu-xref>(<var>constructorName</var>, NewTarget, <code>\"%<var>TypedArray</var>.prototype%\"</code>).</li><li>Let <var>usingIterator</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>object</var>, @@iterator).</li><li>If <var>usingIterator</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>values</var> be ?&#160;<emu-xref aoid=\"IterableToList\"><a href=\"#sec-iterabletolist\">IterableToList</a></emu-xref>(<var>object</var>, <var>usingIterator</var>).</li><li>Let <var>len</var> be the number of elements in <var>values</var>.</li><li>Perform ?&#160;<emu-xref aoid=\"AllocateTypedArrayBuffer\"><a href=\"#sec-allocatetypedarraybuffer\">AllocateTypedArrayBuffer</a></emu-xref>(<var>O</var>, <var>len</var>).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kValue</var> be the first element of <var>values</var> and remove that element from <var>values</var>.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>Pk</var>, <var>kValue</var>, <emu-val>true</emu-val>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>values</var> is now an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return <var>O</var>.</li></ol></li><li>NOTE: <var>object</var> is not an Iterable so assume it is already an <emu-xref href=\"#sec-lengthofarraylike\"><a href=\"#sec-lengthofarraylike\">array-like object</a></emu-xref>.</li><li>Let <var>arrayLike</var> be <var>object</var>.</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>arrayLike</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"AllocateTypedArrayBuffer\"><a href=\"#sec-allocatetypedarraybuffer\">AllocateTypedArrayBuffer</a></emu-xref>(<var>O</var>, <var>len</var>).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>arrayLike</var>, <var>Pk</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>Pk</var>, <var>kValue</var>, <emu-val>true</emu-val>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <var>O</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-map-iterable": {"num": "23.1.1.1", "title": "#sec-map-iterable Map ( [ iterable ] )", "html": "<emu-clause id=\"sec-map-iterable\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map-iterable\">#sec-map-iterable</span> Map ( [ <var>iterable</var> ] )</h1>\n        <p>When the <code>Map</code> function is called with optional argument <var>iterable</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>If NewTarget is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>map</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(NewTarget, <emu-val>\"%Map.prototype%\"</emu-val>, &#171; [[MapData]] &#187;).</li><li>Set <var>map</var>.[[MapData]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>If <var>iterable</var> is either <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, return <var>map</var>.</li><li>Let <var>adder</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>map</var>, <emu-val>\"set\"</emu-val>).</li><li>Return ?&#160;<emu-xref aoid=\"AddEntriesFromIterable\"><a href=\"#sec-add-entries-from-iterable\">AddEntriesFromIterable</a></emu-xref>(<var>map</var>, <var>iterable</var>, <var>adder</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>If the parameter <var>iterable</var> is present, it is expected to be an object that implements an @@iterator method that returns an iterator object that produces a two element <emu-xref href=\"#sec-lengthofarraylike\"><a href=\"#sec-lengthofarraylike\">array-like object</a></emu-xref> whose first element is a value that will be used as a Map key and whose second element is the value to associate with that key.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-math-@@tostringtag": {"num": "20.3.1.9", "title": "#sec-math-@@tostringtag Math [ @@toStringTag ]", "html": "<emu-clause id=\"sec-math-@@tostringtag\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math-@@tostringtag\">#sec-math-@@tostringtag</span> Math [ @@toStringTag ]</h1>\n        <p>The initial value of the @@toStringTag property is the String value <emu-val>\"Math\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-dataview.prototype-@@tostringtag": {"num": "24.3.4.25", "title": "#sec-dataview.prototype-@@tostringtag DataView.prototype [ @@toStringTag ]", "html": "<emu-clause id=\"sec-dataview.prototype-@@tostringtag\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype-@@tostringtag\">#sec-dataview.prototype-@@tostringtag</span> DataView.prototype [ @@toStringTag ]</h1>\n        <p>The initial value of the @@toStringTag property is the String value <emu-val>\"DataView\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-string.prototype.replace": {"num": "21.1.3.17", "title": "#sec-string.prototype.replace String.prototype.replace ( searchValue, replaceValue )", "html": "<emu-clause id=\"sec-string.prototype.replace\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.replace\">#sec-string.prototype.replace</span> String.prototype.replace ( <var>searchValue</var>, <var>replaceValue</var> )</h1>\n        <p>When the <code>replace</code> method is called with arguments <var>searchValue</var> and <var>replaceValue</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>searchValue</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, then<ol><li>Let <var>replacer</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>searchValue</var>, @@replace).</li><li>If <var>replacer</var> is not <emu-val>undefined</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>replacer</var>, <var>searchValue</var>, &#171; <var>O</var>, <var>replaceValue</var> &#187;).</li></ol></li></ol></li><li>Let <var>string</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>searchString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>searchValue</var>).</li><li>Let <var>functionalReplace</var> be <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>replaceValue</var>).</li><li>If <var>functionalReplace</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>replaceValue</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>replaceValue</var>).</li></ol></li><li>Search <var>string</var> for the first occurrence of <var>searchString</var> and let <var>pos</var> be the index within <var>string</var> of the first code unit of the matched substring and let <var>matched</var> be <var>searchString</var>. If no occurrences of <var>searchString</var> were found, return <var>string</var>.</li><li>If <var>functionalReplace</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>replValue</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>replaceValue</var>, <emu-val>undefined</emu-val>, &#171; <var>matched</var>, <var>pos</var>, <var>string</var> &#187;).</li><li>Let <var>replStr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>replValue</var>).</li></ol></li><li>Else,<ol><li>Let <var>captures</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>replStr</var> be !&#160;<emu-xref aoid=\"GetSubstitution\"><a href=\"#sec-getsubstitution\">GetSubstitution</a></emu-xref>(<var>matched</var>, <var>string</var>, <var>pos</var>, <var>captures</var>, <emu-val>undefined</emu-val>, <var>replaceValue</var>).</li></ol></li><li>Let <var>tailPos</var> be <var>pos</var> + the number of code units in <var>matched</var>.</li><li>Let <var>newString</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the first <var>pos</var> code units of <var>string</var>, <var>replStr</var>, and the trailing substring of <var>string</var> starting at index <var>tailPos</var>. If <var>pos</var> is 0, the first element of the concatenation will be the empty String.</li><li>Return <var>newString</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>replace</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-getsubstitution\"><h1><span class=\"secnum\">21.1.3.17.1</span>#sec-getsubstitution Runtime Semantics: GetSubstitution ( matched, str, position, captures, namedCaptures, replacement )</h1>...</div></emu-clause>\n\n      "}, "sec-%typedarray%.prototype-@@iterator": {"num": "22.2.3.31", "title": "#sec-%typedarray%.prototype-@@iterator %TypedArray%.prototype [ @@iterator ] ( )", "html": "<emu-clause id=\"sec-%typedarray%.prototype-@@iterator\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype-@@iterator\">#sec-%typedarray%.prototype-@@iterator</span> %TypedArray%.prototype [ @@iterator ] ( )</h1>\n        <p>The initial value of the @@iterator property is the same <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> as the initial value of the <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.values</code> property.</p>\n      </emu-clause>\n\n      "}, "sec-generator.prototype-@@tostringtag": {"num": "25.4.1.5", "title": "#sec-generator.prototype-@@tostringtag Generator.prototype [ @@toStringTag ]", "html": "<emu-clause id=\"sec-generator.prototype-@@tostringtag\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator.prototype-@@tostringtag\">#sec-generator.prototype-@@tostringtag</span> Generator.prototype [ @@toStringTag ]</h1>\n        <p>The initial value of the @@toStringTag property is the String value <emu-val>\"Generator\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-symbol.prototype-@@tostringtag": {"num": "19.4.3.6", "title": "#sec-symbol.prototype-@@tostringtag Symbol.prototype [ @@toStringTag ]", "html": "<emu-clause id=\"sec-symbol.prototype-@@tostringtag\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-symbol.prototype-@@tostringtag\">#sec-symbol.prototype-@@tostringtag</span> Symbol.prototype [ @@toStringTag ]</h1>\n        <p>The initial value of the @@toStringTag property is the String value <emu-val>\"Symbol\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-map.prototype-@@tostringtag": {"num": "23.1.3.13", "title": "#sec-map.prototype-@@tostringtag Map.prototype [ @@toStringTag ]", "html": "<emu-clause id=\"sec-map.prototype-@@tostringtag\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype-@@tostringtag\">#sec-map.prototype-@@tostringtag</span> Map.prototype [ @@toStringTag ]</h1>\n        <p>The initial value of the @@toStringTag property is the String value <emu-val>\"Map\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-%setiteratorprototype%-@@tostringtag": {"num": "23.2.5.2.2", "title": "#sec-%setiteratorprototype%-@@tostringtag %SetIteratorPrototype% [ @@toStringTag ]", "html": "<emu-clause id=\"sec-%setiteratorprototype%-@@tostringtag\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%setiteratorprototype%-@@tostringtag\">#sec-%setiteratorprototype%-@@tostringtag</span> %SetIteratorPrototype% [ @@toStringTag ]</h1>\n          <p>The initial value of the @@toStringTag property is the String value <emu-val>\"Set Iterator\"</emu-val>.</p>\n          <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n        </emu-clause>\n      "}, "sec-symbol.match": {"num": "19.4.2.7", "title": "#sec-symbol.match Symbol.match", "html": "<emu-clause id=\"sec-symbol.match\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-symbol.match\">#sec-symbol.match</span> Symbol.match</h1>\n        <p>The initial value of <code>Symbol.match</code> is the well-known symbol @@match (<emu-xref href=\"#table-1\"><a href=\"#table-1\" class=\"excluded-xref\" excluded-id=\"table-1\">#table-1</a></emu-xref>).</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-symbol.unscopables": {"num": "19.4.2.16", "title": "#sec-symbol.unscopables Symbol.unscopables", "html": "<emu-clause id=\"sec-symbol.unscopables\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-symbol.unscopables\">#sec-symbol.unscopables</span> Symbol.unscopables</h1>\n        <p>The initial value of <code>Symbol.unscopables</code> is the well-known symbol @@unscopables (<emu-xref href=\"#table-1\"><a href=\"#table-1\" class=\"excluded-xref\" excluded-id=\"table-1\">#table-1</a></emu-xref>).</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-regexp.prototype-@@match": {"num": "21.2.5.7", "title": "#sec-regexp.prototype-@@match RegExp.prototype [ @@match ] ( string )", "html": "<emu-clause id=\"sec-regexp.prototype-@@match\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp.prototype-@@match\">#sec-regexp.prototype-@@match</span> RegExp.prototype [ @@match ] ( <var>string</var> )</h1>\n        <p>When the <code>@@match</code> method is called with argument <var>string</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>rx</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rx</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Let <var>global</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>rx</var>, <emu-val>\"global\"</emu-val>)).</li><li>If <var>global</var> is <emu-val>false</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"RegExpExec\"><a href=\"#sec-regexpexec\">RegExpExec</a></emu-xref>(<var>rx</var>, <var>S</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>global</var> is <emu-val>true</emu-val>.</li><li>Let <var>fullUnicode</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>rx</var>, <emu-val>\"unicode\"</emu-val>)).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>rx</var>, <emu-val>\"lastIndex\"</emu-val>, 0, <emu-val>true</emu-val>).</li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>n</var> be 0.</li><li>Repeat,<ol><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"RegExpExec\"><a href=\"#sec-regexpexec\">RegExpExec</a></emu-xref>(<var>rx</var>, <var>S</var>).</li><li>If <var>result</var> is <emu-val>null</emu-val>, then<ol><li>If <var>n</var> = 0, return <emu-val>null</emu-val>.</li><li>Return <var>A</var>.</li></ol></li><li>Else,<ol><li>Let <var>matchStr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>result</var>, <emu-val>\"0\"</emu-val>)).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>n</var>), <var>matchStr</var>).</li><li>If <var>matchStr</var> is the empty String, then<ol><li>Let <var>thisIndex</var> be ?&#160;<emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>rx</var>, <emu-val>\"lastIndex\"</emu-val>)).</li><li>Let <var>nextIndex</var> be <emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>thisIndex</var>, <var>fullUnicode</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>rx</var>, <emu-val>\"lastIndex\"</emu-val>, <var>nextIndex</var>, <emu-val>true</emu-val>).</li></ol></li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li></ol></li></ol></li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"[Symbol.match]\"</emu-val>.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The @@match property is used by the <emu-xref aoid=\"IsRegExp\"><a href=\"#sec-isregexp\">IsRegExp</a></emu-xref> abstract operation to identify objects that have the basic behaviour of regular expressions. The absence of a @@match property or the existence of such a property whose value does not Boolean coerce to <emu-val>true</emu-val> indicates that the object is not intended to be used as a regular expression object.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-string.prototype.matchall": {"num": "21.1.3.12", "title": "#sec-string.prototype.matchall String.prototype.matchAll ( regexp )", "html": "<emu-clause id=\"sec-string.prototype.matchall\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.matchall\">#sec-string.prototype.matchall</span> String.prototype.matchAll ( <var>regexp</var> )</h1>\n        <p>Performs a regular expression match of the String representing the <emu-val>this</emu-val> value against <var>regexp</var> and returns an iterator. Each iteration result's value is an Array object containing the results of the match, or <emu-val>null</emu-val> if the String did not match.</p>\n        <p>When the <code>matchAll</code> method is called, the following steps are taken:</p>\n\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>regexp</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, then<ol><li>Let <var>isRegExp</var> be ?&#160;<emu-xref aoid=\"IsRegExp\"><a href=\"#sec-isregexp\">IsRegExp</a></emu-xref>(<var>regexp</var>).</li><li>If <var>isRegExp</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>flags</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>regexp</var>, <emu-val>\"flags\"</emu-val>).</li><li>Perform ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<var>flags</var>).</li><li>If ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>flags</var>) does not contain <emu-val>\"g\"</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Let <var>matcher</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>regexp</var>, @@matchAll).</li><li>If <var>matcher</var> is not <emu-val>undefined</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>matcher</var>, <var>regexp</var>, &#171; <var>O</var> &#187;).</li></ol></li></ol></li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>rx</var> be ?&#160;<emu-xref aoid=\"RegExpCreate\"><a href=\"#sec-regexpcreate\">RegExpCreate</a></emu-xref>(<var>regexp</var>, <emu-val>\"g\"</emu-val>).</li><li>Return ?&#160;<emu-xref aoid=\"Invoke\"><a href=\"#sec-invoke\">Invoke</a></emu-xref>(<var>rx</var>, @@matchAll, &#171; <var>S</var> &#187;).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">The <code>matchAll</code> function is intentionally generic, it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">Similarly to <code>String.prototype.split</code>, <code>String.prototype.matchAll</code> is designed to typically act without mutating its inputs.</div></emu-note>\n      </emu-clause>\n\n      "}, "sec-string.prototype.match": {"num": "21.1.3.11", "title": "#sec-string.prototype.match String.prototype.match ( regexp )", "html": "<emu-clause id=\"sec-string.prototype.match\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.match\">#sec-string.prototype.match</span> String.prototype.match ( <var>regexp</var> )</h1>\n        <p>When the <code>match</code> method is called with argument <var>regexp</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>regexp</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, then<ol><li>Let <var>matcher</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>regexp</var>, @@match).</li><li>If <var>matcher</var> is not <emu-val>undefined</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>matcher</var>, <var>regexp</var>, &#171; <var>O</var> &#187;).</li></ol></li></ol></li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>rx</var> be ?&#160;<emu-xref aoid=\"RegExpCreate\"><a href=\"#sec-regexpcreate\">RegExpCreate</a></emu-xref>(<var>regexp</var>, <emu-val>undefined</emu-val>).</li><li>Return ?&#160;<emu-xref aoid=\"Invoke\"><a href=\"#sec-invoke\">Invoke</a></emu-xref>(<var>rx</var>, @@match, &#171; <var>S</var> &#187;).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>match</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-symbol.asynciterator": {"num": "19.4.2.1", "title": "#sec-symbol.asynciterator Symbol.asyncIterator", "html": "<emu-clause id=\"sec-symbol.asynciterator\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-symbol.asynciterator\">#sec-symbol.asynciterator</span> Symbol.asyncIterator</h1>\n        <p>The initial value of <code>Symbol.asyncIterator</code> is the well known symbol @@asyncIterator (<emu-xref href=\"#table-1\"><a href=\"#table-1\" class=\"excluded-xref\" excluded-id=\"table-1\">#table-1</a></emu-xref>).</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-%mapiteratorprototype%-@@tostringtag": {"num": "23.1.5.2.2", "title": "#sec-%mapiteratorprototype%-@@tostringtag %MapIteratorPrototype% [ @@toStringTag ]", "html": "<emu-clause id=\"sec-%mapiteratorprototype%-@@tostringtag\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%mapiteratorprototype%-@@tostringtag\">#sec-%mapiteratorprototype%-@@tostringtag</span> %MapIteratorPrototype% [ @@toStringTag ]</h1>\n          <p>The initial value of the @@toStringTag property is the String value <emu-val>\"Map Iterator\"</emu-val>.</p>\n          <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n        </emu-clause>\n      "}, "sec-symbol.toprimitive": {"num": "19.4.2.14", "title": "#sec-symbol.toprimitive Symbol.toPrimitive", "html": "<emu-clause id=\"sec-symbol.toprimitive\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-symbol.toprimitive\">#sec-symbol.toprimitive</span> Symbol.toPrimitive</h1>\n        <p>The initial value of <code>Symbol.toPrimitive</code> is the well-known symbol @@toPrimitive (<emu-xref href=\"#table-1\"><a href=\"#table-1\" class=\"excluded-xref\" excluded-id=\"table-1\">#table-1</a></emu-xref>).</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-symbol.iterator": {"num": "19.4.2.5", "title": "#sec-symbol.iterator Symbol.iterator", "html": "<emu-clause id=\"sec-symbol.iterator\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-symbol.iterator\">#sec-symbol.iterator</span> Symbol.iterator</h1>\n        <p>The initial value of <code>Symbol.iterator</code> is the well-known symbol @@iterator (<emu-xref href=\"#table-1\"><a href=\"#table-1\" class=\"excluded-xref\" excluded-id=\"table-1\">#table-1</a></emu-xref>).</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-%arrayiteratorprototype%-@@tostringtag": {"num": "22.1.5.2.2", "title": "#sec-%arrayiteratorprototype%-@@tostringtag %ArrayIteratorPrototype% [ @@toStringTag ]", "html": "<emu-clause id=\"sec-%arrayiteratorprototype%-@@tostringtag\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%arrayiteratorprototype%-@@tostringtag\">#sec-%arrayiteratorprototype%-@@tostringtag</span> %ArrayIteratorPrototype% [ @@toStringTag ]</h1>\n          <p>The initial value of the @@toStringTag property is the String value <emu-val>\"Array Iterator\"</emu-val>.</p>\n          <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n        </emu-clause>\n      "}, "sec-object.prototype.tostring": {"num": "19.1.3.6", "title": "#sec-object.prototype.tostring Object.prototype.toString ( )", "html": "<emu-clause id=\"sec-object.prototype.tostring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.prototype.tostring\">#sec-object.prototype.tostring</span> Object.prototype.toString ( )</h1>\n        <p>When the <code>toString</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>If the <emu-val>this</emu-val> value is <emu-val>undefined</emu-val>, return <emu-val>\"[object Undefined]\"</emu-val>.</li><li>If the <emu-val>this</emu-val> value is <emu-val>null</emu-val>, return <emu-val>\"[object Null]\"</emu-val>.</li><li>Let <var>O</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>isArray</var> be ?&#160;<emu-xref aoid=\"IsArray\"><a href=\"#sec-isarray\">IsArray</a></emu-xref>(<var>O</var>).</li><li>If <var>isArray</var> is <emu-val>true</emu-val>, let <var>builtinTag</var> be <emu-val>\"Array\"</emu-val>.</li><li>Else if <var>O</var> has a [[ParameterMap]] internal slot, let <var>builtinTag</var> be <emu-val>\"Arguments\"</emu-val>.</li><li>Else if <var>O</var> has a [[Call]] internal method, let <var>builtinTag</var> be <emu-val>\"Function\"</emu-val>.</li><li>Else if <var>O</var> has an [[ErrorData]] internal slot, let <var>builtinTag</var> be <emu-val>\"Error\"</emu-val>.</li><li>Else if <var>O</var> has a [[BooleanData]] internal slot, let <var>builtinTag</var> be <emu-val>\"Boolean\"</emu-val>.</li><li>Else if <var>O</var> has a [[NumberData]] internal slot, let <var>builtinTag</var> be <emu-val>\"Number\"</emu-val>.</li><li>Else if <var>O</var> has a [[StringData]] internal slot, let <var>builtinTag</var> be <emu-val>\"String\"</emu-val>.</li><li>Else if <var>O</var> has a [[DateValue]] internal slot, let <var>builtinTag</var> be <emu-val>\"Date\"</emu-val>.</li><li>Else if <var>O</var> has a [[RegExpMatcher]] internal slot, let <var>builtinTag</var> be <emu-val>\"RegExp\"</emu-val>.</li><li>Else, let <var>builtinTag</var> be <emu-val>\"Object\"</emu-val>.</li><li>Let <var>tag</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, @@toStringTag).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>tag</var>) is not String, set <var>tag</var> to <var>builtinTag</var>.</li><li>Return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <emu-val>\"[object \"</emu-val>, <var>tag</var>, and <emu-val>\"]\"</emu-val>.</li></ol></emu-alg>\n        <p>This function is the <dfn>%ObjProto_toString%</dfn> intrinsic object.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Historically, this function was occasionally used to access the String value of the [[Class]] internal slot that was used in previous editions of this specification as a nominal type tag for various built-in objects. The above definition of <code>toString</code> preserves compatibility for legacy code that uses <code>toString</code> as a test for those specific kinds of built-in objects. It does not provide a reliable type testing mechanism for other kinds of built-in or program defined objects. In addition, programs can use @@toStringTag in ways that will invalidate the reliability of such legacy type tests.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.from": {"num": "22.2.2.1", "title": "#sec-%typedarray%.from %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )", "html": "<emu-clause id=\"sec-%typedarray%.from\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.from\">#sec-%typedarray%.from</span> %TypedArray%.from ( <var>source</var> [ , <var>mapfn</var> [ , <var>thisArg</var> ] ] )</h1>\n        <p>When the <code>from</code> method is called with argument <var>source</var>, and optional arguments <var>mapfn</var> and <var>thisArg</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>C</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>C</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>mapfn</var> is <emu-val>undefined</emu-val>, let <var>mapping</var> be <emu-val>false</emu-val>.</li><li>Else,<ol><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>mapfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>mapping</var> be <emu-val>true</emu-val>.</li></ol></li><li>Let <var>usingIterator</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>source</var>, @@iterator).</li><li>If <var>usingIterator</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>values</var> be ?&#160;<emu-xref aoid=\"IterableToList\"><a href=\"#sec-iterabletolist\">IterableToList</a></emu-xref>(<var>source</var>, <var>usingIterator</var>).</li><li>Let <var>len</var> be the number of elements in <var>values</var>.</li><li>Let <var>targetObj</var> be ?&#160;<emu-xref aoid=\"TypedArrayCreate\"><a href=\"#typedarray-create\">TypedArrayCreate</a></emu-xref>(<var>C</var>, &#171; <var>len</var> &#187;).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kValue</var> be the first element of <var>values</var> and remove that element from <var>values</var>.</li><li>If <var>mapping</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>mappedValue</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>mapfn</var>, <var>thisArg</var>, &#171; <var>kValue</var>, <var>k</var> &#187;).</li></ol></li><li>Else, let <var>mappedValue</var> be <var>kValue</var>.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>targetObj</var>, <var>Pk</var>, <var>mappedValue</var>, <emu-val>true</emu-val>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>values</var> is now an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return <var>targetObj</var>.</li></ol></li><li>NOTE: <var>source</var> is not an Iterable so assume it is already an <emu-xref href=\"#sec-lengthofarraylike\"><a href=\"#sec-lengthofarraylike\">array-like object</a></emu-xref>.</li><li>Let <var>arrayLike</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>source</var>).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>arrayLike</var>).</li><li>Let <var>targetObj</var> be ?&#160;<emu-xref aoid=\"TypedArrayCreate\"><a href=\"#typedarray-create\">TypedArrayCreate</a></emu-xref>(<var>C</var>, &#171; <var>len</var> &#187;).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>arrayLike</var>, <var>Pk</var>).</li><li>If <var>mapping</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>mappedValue</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>mapfn</var>, <var>thisArg</var>, &#171; <var>kValue</var>, <var>k</var> &#187;).</li></ol></li><li>Else, let <var>mappedValue</var> be <var>kValue</var>.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>targetObj</var>, <var>Pk</var>, <var>mappedValue</var>, <emu-val>true</emu-val>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <var>targetObj</var>.</li></ol></emu-alg>\n\n        <div id=\"excluded-sec-iterabletolist\"><h1><span class=\"secnum\">22.2.2.1.1</span>#sec-iterabletolist Runtime Semantics: IterableToList ( items, method )</h1>...</div></emu-clause>\n\n      "}, "sec-string.prototype.search": {"num": "21.1.3.18", "title": "#sec-string.prototype.search String.prototype.search ( regexp )", "html": "<emu-clause id=\"sec-string.prototype.search\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.search\">#sec-string.prototype.search</span> String.prototype.search ( <var>regexp</var> )</h1>\n        <p>When the <code>search</code> method is called with argument <var>regexp</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>regexp</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, then<ol><li>Let <var>searcher</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>regexp</var>, @@search).</li><li>If <var>searcher</var> is not <emu-val>undefined</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>searcher</var>, <var>regexp</var>, &#171; <var>O</var> &#187;).</li></ol></li></ol></li><li>Let <var>string</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>rx</var> be ?&#160;<emu-xref aoid=\"RegExpCreate\"><a href=\"#sec-regexpcreate\">RegExpCreate</a></emu-xref>(<var>regexp</var>, <emu-val>undefined</emu-val>).</li><li>Return ?&#160;<emu-xref aoid=\"Invoke\"><a href=\"#sec-invoke\">Invoke</a></emu-xref>(<var>rx</var>, @@search, &#171; <var>string</var> &#187;).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>search</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-string.prototype.split": {"num": "21.1.3.20", "title": "#sec-string.prototype.split String.prototype.split ( separator, limit )", "html": "<emu-clause id=\"sec-string.prototype.split\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.split\">#sec-string.prototype.split</span> String.prototype.split ( <var>separator</var>, <var>limit</var> )</h1>\n        <p>Returns an Array object into which substrings of the result of converting this object to a String have been stored. The substrings are determined by searching from left to right for occurrences of <var>separator</var>; these occurrences are not part of any substring in the returned array, but serve to divide up the String value. The value of <var>separator</var> may be a String of any length or it may be an object, such as a RegExp, that has a @@split method.</p>\n        <p>When the <code>split</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>separator</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, then<ol><li>Let <var>splitter</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>separator</var>, @@split).</li><li>If <var>splitter</var> is not <emu-val>undefined</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>splitter</var>, <var>separator</var>, &#171; <var>O</var>, <var>limit</var> &#187;).</li></ol></li></ol></li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>lengthA</var> be 0.</li><li>If <var>limit</var> is <emu-val>undefined</emu-val>, let <var>lim</var> be 2<sup>32</sup> - 1; else let <var>lim</var> be ?&#160;<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>limit</var>).</li><li>Let <var>R</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>separator</var>).</li><li>If <var>lim</var> = 0, return <var>A</var>.</li><li>If <var>separator</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"0\"</emu-val>, <var>S</var>).</li><li>Return <var>A</var>.</li></ol></li><li>Let <var>s</var> be the length of <var>S</var>.</li><li>If <var>s</var> = 0, then<ol><li>Let <var>z</var> be <emu-xref aoid=\"SplitMatch\"><a href=\"#sec-splitmatch\">SplitMatch</a></emu-xref>(<var>S</var>, 0, <var>R</var>).</li><li>If <var>z</var> is not <emu-val>false</emu-val>, return <var>A</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"0\"</emu-val>, <var>S</var>).</li><li>Return <var>A</var>.</li></ol></li><li>Let <var>p</var> be 0.</li><li>Let <var>q</var> be <var>p</var>.</li><li>Repeat, while <var>q</var> &#8800; <var>s</var>,<ol><li>Let <var>e</var> be <emu-xref aoid=\"SplitMatch\"><a href=\"#sec-splitmatch\">SplitMatch</a></emu-xref>(<var>S</var>, <var>q</var>, <var>R</var>).</li><li>If <var>e</var> is <emu-val>false</emu-val>, set <var>q</var> to <var>q</var> + 1.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>e</var> is an <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> &#8804; <var>s</var>.</li><li>If <var>e</var> = <var>p</var>, set <var>q</var> to <var>q</var> + 1.</li><li>Else,<ol><li>Let <var>T</var> be the String value equal to the substring of <var>S</var> consisting of the code units at indices <var>p</var> (inclusive) through <var>q</var> (exclusive).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>lengthA</var>), <var>T</var>).</li><li>Set <var>lengthA</var> to <var>lengthA</var> + 1.</li><li>If <var>lengthA</var> = <var>lim</var>, return <var>A</var>.</li><li>Set <var>p</var> to <var>e</var>.</li><li>Set <var>q</var> to <var>p</var>.</li></ol></li></ol></li></ol></li><li>Let <var>T</var> be the String value equal to the substring of <var>S</var> consisting of the code units at indices <var>p</var> (inclusive) through <var>s</var> (exclusive).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>lengthA</var>), <var>T</var>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The value of <var>separator</var> may be an empty String. In this case, <var>separator</var> does not match the empty substring at the beginning or end of the input String, nor does it match the empty substring at the end of the previous separator match. If <var>separator</var> is the empty String, the String is split up into individual code unit elements; the length of the result array equals the length of the String, and each substring contains one code unit.</p>\n          <p>If the <emu-val>this</emu-val> value is (or converts to) the empty String, the result depends on whether <var>separator</var> can match the empty String. If it can, the result array contains no elements. Otherwise, the result array contains one element, which is the empty String.</p>\n          <p>If <var>separator</var> is <emu-val>undefined</emu-val>, then the result array contains just one String, which is the <emu-val>this</emu-val> value (converted to a String). If <var>limit</var> is not <emu-val>undefined</emu-val>, then the output array is truncated so that it contains no more than <var>limit</var> elements.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>split</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-splitmatch\"><h1><span class=\"secnum\">21.1.3.20.1</span>#sec-splitmatch Runtime Semantics: SplitMatch ( S, q, R )</h1>...</div></emu-clause>\n\n      "}, "sec-set.prototype-@@iterator": {"num": "23.2.3.11", "title": "#sec-set.prototype-@@iterator Set.prototype [ @@iterator ] ( )", "html": "<emu-clause id=\"sec-set.prototype-@@iterator\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set.prototype-@@iterator\">#sec-set.prototype-@@iterator</span> Set.prototype [ @@iterator ] ( )</h1>\n        <p>The initial value of the @@iterator property is the same <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> as the initial value of the <emu-val>\"values\"</emu-val> property.</p>\n      </emu-clause>\n\n      "}, "sec-weakmap-iterable": {"num": "23.3.1.1", "title": "#sec-weakmap-iterable WeakMap ( [ iterable ] )", "html": "<emu-clause id=\"sec-weakmap-iterable\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakmap-iterable\">#sec-weakmap-iterable</span> WeakMap ( [ <var>iterable</var> ] )</h1>\n        <p>When the <code>WeakMap</code> function is called with optional argument <var>iterable</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>If NewTarget is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>map</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(NewTarget, <emu-val>\"%WeakMap.prototype%\"</emu-val>, &#171; [[WeakMapData]] &#187;).</li><li>Set <var>map</var>.[[WeakMapData]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>If <var>iterable</var> is either <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, return <var>map</var>.</li><li>Let <var>adder</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>map</var>, <emu-val>\"set\"</emu-val>).</li><li>Return ?&#160;<emu-xref aoid=\"AddEntriesFromIterable\"><a href=\"#sec-add-entries-from-iterable\">AddEntriesFromIterable</a></emu-xref>(<var>map</var>, <var>iterable</var>, <var>adder</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>If the parameter <var>iterable</var> is present, it is expected to be an object that implements an @@iterator method that returns an iterator object that produces a two element <emu-xref href=\"#sec-lengthofarraylike\"><a href=\"#sec-lengthofarraylike\">array-like object</a></emu-xref> whose first element is a value that will be used as a WeakMap key and whose second element is the value to associate with that key.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-asyncgeneratorfunction-prototype-tostringtag": {"num": "25.3.3.3", "title": "#sec-asyncgeneratorfunction-prototype-tostringtag AsyncGeneratorFunction.prototype [ @@toStringTag ]", "html": "<emu-clause id=\"sec-asyncgeneratorfunction-prototype-tostringtag\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorfunction-prototype-tostringtag\">#sec-asyncgeneratorfunction-prototype-tostringtag</span> AsyncGeneratorFunction.prototype [ @@toStringTag ]</h1>\n        <p>The initial value of the @@toStringTag property is the String value <emu-val>\"AsyncGeneratorFunction\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-symbol.isconcatspreadable": {"num": "19.4.2.4", "title": "#sec-symbol.isconcatspreadable Symbol.isConcatSpreadable", "html": "<emu-clause id=\"sec-symbol.isconcatspreadable\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-symbol.isconcatspreadable\">#sec-symbol.isconcatspreadable</span> Symbol.isConcatSpreadable</h1>\n        <p>The initial value of <code>Symbol.isConcatSpreadable</code> is the well-known symbol @@isConcatSpreadable (<emu-xref href=\"#table-1\"><a href=\"#table-1\" class=\"excluded-xref\" excluded-id=\"table-1\">#table-1</a></emu-xref>).</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-getiterator": {"num": "7.4.1", "title": "#sec-getiterator GetIterator ( obj [ , hint [ , method ] ] )", "html": "<emu-clause id=\"sec-getiterator\" aoid=\"GetIterator\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getiterator\">#sec-getiterator</span> GetIterator ( <var>obj</var> [ , <var>hint</var> [ , <var>method</var> ] ] )</h1>\n      <p>The abstract operation GetIterator takes argument <var>obj</var> and optional arguments <var>hint</var> and <var>method</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>hint</var> is not present, set <var>hint</var> to <emu-const>sync</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>hint</var> is either <emu-const>sync</emu-const> or <emu-const>async</emu-const>.</li><li>If <var>method</var> is not present, then<ol><li>If <var>hint</var> is <emu-const>async</emu-const>, then<ol><li>Set <var>method</var> to ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>obj</var>, @@asyncIterator).</li><li>If <var>method</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>syncMethod</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>obj</var>, @@iterator).</li><li>Let <var>syncIteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>obj</var>, <emu-const>sync</emu-const>, <var>syncMethod</var>).</li><li>Return !&#160;<emu-xref aoid=\"CreateAsyncFromSyncIterator\"><a href=\"#sec-createasyncfromsynciterator\">CreateAsyncFromSyncIterator</a></emu-xref>(<var>syncIteratorRecord</var>).</li></ol></li></ol></li><li>Otherwise, set <var>method</var> to ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>obj</var>, @@iterator).</li></ol></li><li>Let <var>iterator</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>method</var>, <var>obj</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>iterator</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>nextMethod</var> be ?&#160;<emu-xref aoid=\"GetV\"><a href=\"#sec-getv\">GetV</a></emu-xref>(<var>iterator</var>, <emu-val>\"next\"</emu-val>).</li><li>Let <var>iteratorRecord</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Iterator]]: <var>iterator</var>, [[NextMethod]]: <var>nextMethod</var>, [[Done]]: <emu-val>false</emu-val> }.</li><li>Return <var>iteratorRecord</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-asyncgenerator-prototype-tostringtag": {"num": "25.5.1.5", "title": "#sec-asyncgenerator-prototype-tostringtag AsyncGenerator.prototype [ @@toStringTag ]", "html": "<emu-clause id=\"sec-asyncgenerator-prototype-tostringtag\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-prototype-tostringtag\">#sec-asyncgenerator-prototype-tostringtag</span> AsyncGenerator.prototype [ @@toStringTag ]</h1>\n        <p>The initial value of the @@toStringTag property is the String value <emu-val>\"AsyncGenerator\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-symbol.species": {"num": "19.4.2.12", "title": "#sec-symbol.species Symbol.species", "html": "<emu-clause id=\"sec-symbol.species\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-symbol.species\">#sec-symbol.species</span> Symbol.species</h1>\n        <p>The initial value of <code>Symbol.species</code> is the well-known symbol @@species (<emu-xref href=\"#table-1\"><a href=\"#table-1\" class=\"excluded-xref\" excluded-id=\"table-1\">#table-1</a></emu-xref>).</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-isconcatspreadable": {"num": "22.1.3.1.1", "title": "#sec-isconcatspreadable Runtime Semantics: IsConcatSpreadable ( O )", "html": "<emu-clause id=\"sec-isconcatspreadable\" aoid=\"IsConcatSpreadable\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isconcatspreadable\">#sec-isconcatspreadable</span> Runtime Semantics: IsConcatSpreadable ( <var>O</var> )</h1>\n          <p>The abstract operation IsConcatSpreadable takes argument <var>O</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, return <emu-val>false</emu-val>.</li><li>Let <var>spreadable</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, @@isConcatSpreadable).</li><li>If <var>spreadable</var> is not <emu-val>undefined</emu-val>, return !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(<var>spreadable</var>).</li><li>Return ?&#160;<emu-xref aoid=\"IsArray\"><a href=\"#sec-isarray\">IsArray</a></emu-xref>(<var>O</var>).</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-atomics-@@tostringtag": {"num": "24.4.14", "title": "#sec-atomics-@@tostringtag Atomics [ @@toStringTag ]", "html": "<emu-clause id=\"sec-atomics-@@tostringtag\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics-@@tostringtag\">#sec-atomics-@@tostringtag</span> Atomics [ @@toStringTag ]</h1>\n      <p>The initial value of the @@toStringTag property is the String value <emu-val>\"Atomics\"</emu-val>.</p>\n      <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n    </emu-clause>\n  "}}, "figData": {"table-1": "Table 1", "table-2": "Table 3", "table-the-typedarray-constructors": "Table 61"}}, "to": {"secList": ["sec-json-@@tostringtag", "sec-get-set-@@species", "sec-%stringiteratorprototype%-@@tostringtag", "sec-generatorfunction.prototype-@@tostringtag", "sec-symbol.search", "sec-array.prototype-@@unscopables", "sec-isregexp", "sec-%regexpstringiteratorprototype%-@@tostringtag", "sec-get-map-@@species", "sec-symbol.tostringtag", "sec-promise.prototype-@@tostringtag", "sec-get-%typedarray%-@@species", "sec-weakmap.prototype-@@tostringtag", "sec-get-arraybuffer-@@species", "sec-get-regexp-@@species", "sec-bigint.prototype-@@tostringtag", "sec-array.from", "sec-symbol.hasinstance", "sec-createunmappedargumentsobject", "sec-map.prototype-@@iterator", "sec-array.prototype-@@iterator", "sec-set.prototype-@@tostringtag", "sec-arrayspeciescreate", "sec-toprimitive", "sec-speciesconstructor", "sec-get-promise-@@species", "sec-arraybuffer.prototype-@@tostringtag", "sec-symbol.replace", "sec-well-known-symbols", "sec-symbol.matchall", "sec-sharedarraybuffer.prototype.toString", "sec-symbol.split", "sec-instanceofoperator", "sec-createmappedargumentsobject", "sec-@@tostringtag", "sec-object-environment-records-hasbinding-n", "sec-get-array-@@species", "sec-add-entries-from-iterable", "sec-weakset.prototype-@@tostringtag", "sec-async-function-prototype-properties-toStringTag", "sec-typedarray-object", "sec-map-iterable", "sec-math-@@tostringtag", "sec-dataview.prototype-@@tostringtag", "sec-string.prototype.replace", "sec-%typedarray%.prototype-@@iterator", "sec-generator.prototype-@@tostringtag", "sec-symbol.prototype-@@tostringtag", "sec-map.prototype-@@tostringtag", "sec-%setiteratorprototype%-@@tostringtag", "sec-symbol.match", "sec-symbol.unscopables", "sec-regexp.prototype-@@match", "sec-string.prototype.matchall", "sec-string.prototype.match", "sec-symbol.asynciterator", "sec-%mapiteratorprototype%-@@tostringtag", "sec-symbol.toprimitive", "sec-symbol.iterator", "sec-%arrayiteratorprototype%-@@tostringtag", "sec-object.prototype.tostring", "sec-%typedarray%.from", "sec-string.prototype.search", "sec-string.prototype.split", "sec-set.prototype-@@iterator", "sec-weakmap-iterable", "sec-asyncgeneratorfunction-prototype-tostringtag", "sec-symbol.isconcatspreadable", "sec-getiterator", "sec-asyncgenerator-prototype-tostringtag", "sec-symbol.species", "sec-isconcatspreadable", "sec-atomics-@@tostringtag"], "secData": {"sec-json-@@tostringtag": {"num": "24.5.3", "title": "#sec-json-@@tostringtag JSON [ @@toStringTag ]", "html": "<emu-clause id=\"sec-json-@@tostringtag\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-json-@@tostringtag\">#sec-json-@@tostringtag</span> JSON [ @@toStringTag ]</h1>\n      <p>The initial value of the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toStringTag</a></emu-xref> property is the String value <emu-val>\"JSON\"</emu-val>.</p>\n      <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n    </emu-clause>\n  "}, "sec-get-set-@@species": {"num": "23.2.2.2", "title": "#sec-get-set-@@species get Set [ @@species ]", "html": "<emu-clause id=\"sec-get-set-@@species\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-set-@@species\">#sec-get-set-@@species</span> get Set [ @@species ]</h1>\n        <p><code>Set[@@species]</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Return the <emu-val>this</emu-val> value.</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"get [Symbol.species]\"</emu-val>.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Methods that create derived collection objects should call <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@species</a></emu-xref> to determine the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to use to create the derived objects. Subclass <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> may over-ride <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@species</a></emu-xref> to change the default <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> assignment.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-%stringiteratorprototype%-@@tostringtag": {"num": "21.1.5.2.2", "title": "#sec-%stringiteratorprototype%-@@tostringtag %StringIteratorPrototype% [ @@toStringTag ]", "html": "<emu-clause id=\"sec-%stringiteratorprototype%-@@tostringtag\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%stringiteratorprototype%-@@tostringtag\">#sec-%stringiteratorprototype%-@@tostringtag</span> %StringIteratorPrototype% [ @@toStringTag ]</h1>\n          <p>The initial value of the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toStringTag</a></emu-xref> property is the String value <emu-val>\"String Iterator\"</emu-val>.</p>\n          <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n        </emu-clause>\n      "}, "sec-generatorfunction.prototype-@@tostringtag": {"num": "25.2.3.3", "title": "#sec-generatorfunction.prototype-@@tostringtag GeneratorFunction.prototype [ @@toStringTag ]", "html": "<emu-clause id=\"sec-generatorfunction.prototype-@@tostringtag\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorfunction.prototype-@@tostringtag\">#sec-generatorfunction.prototype-@@tostringtag</span> GeneratorFunction.prototype [ @@toStringTag ]</h1>\n        <p>The initial value of the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toStringTag</a></emu-xref> property is the String value <emu-val>\"GeneratorFunction\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-symbol.search": {"num": "19.4.2.11", "title": "#sec-symbol.search Symbol.search", "html": "<emu-clause id=\"sec-symbol.search\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-symbol.search\">#sec-symbol.search</span> Symbol.search</h1>\n        <p>The initial value of <code>Symbol.search</code> is the well-known symbol <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@search</a></emu-xref> (<emu-xref href=\"#table-1\"><a href=\"#table-1\" class=\"excluded-xref\" excluded-id=\"table-1\">#table-1</a></emu-xref>).</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-array.prototype-@@unscopables": {"num": "22.1.3.34", "title": "#sec-array.prototype-@@unscopables Array.prototype [ @@unscopables ]", "html": "<emu-clause id=\"sec-array.prototype-@@unscopables\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype-@@unscopables\">#sec-array.prototype-@@unscopables</span> Array.prototype [ @@unscopables ]</h1>\n        <p>The initial value of the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@unscopables</a></emu-xref> <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">data property</a></emu-xref> is an object created by the following steps:</p>\n        <emu-alg><ol><li>Let <var>unscopableList</var> be <emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-val>null</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"copyWithin\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"entries\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"fill\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"find\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"findIndex\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"flat\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"flatMap\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"includes\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"keys\"</emu-val>, <emu-val>true</emu-val>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>unscopableList</var>, <emu-val>\"values\"</emu-val>, <emu-val>true</emu-val>).</li><li>Return <var>unscopableList</var>.</li></ol></emu-alg>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The own property names of this object are property names that were not included as standard properties of <code>Array.prototype</code> prior to the ECMAScript 2015 specification. These names are ignored for <code>with</code> statement binding purposes in order to preserve the behaviour of existing code that might use one of these names as a binding in an outer scope that is shadowed by a <code>with</code> statement whose binding object is an Array object.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-isregexp": {"num": "7.2.9", "title": "#sec-isregexp IsRegExp ( argument )", "html": "<emu-clause id=\"sec-isregexp\" aoid=\"IsRegExp\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isregexp\">#sec-isregexp</span> IsRegExp ( <var>argument</var> )</h1>\n      <p>The abstract operation IsRegExp takes argument <var>argument</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>argument</var>) is not Object, return <emu-val>false</emu-val>.</li><li>Let <var>matcher</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>argument</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@match</a></emu-xref>).</li><li>If <var>matcher</var> is not <emu-val>undefined</emu-val>, return !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(<var>matcher</var>).</li><li>If <var>argument</var> has a [[RegExpMatcher]] internal slot, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-%regexpstringiteratorprototype%-@@tostringtag": {"num": "21.2.7.1.2", "title": "#sec-%regexpstringiteratorprototype%-@@tostringtag %RegExpStringIteratorPrototype% [ @@toStringTag ]", "html": "<emu-clause id=\"sec-%regexpstringiteratorprototype%-@@tostringtag\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%regexpstringiteratorprototype%-@@tostringtag\">#sec-%regexpstringiteratorprototype%-@@tostringtag</span> %RegExpStringIteratorPrototype% [ @@toStringTag ]</h1>\n          <p>The initial value of the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toStringTag</a></emu-xref> property is the String value <emu-val>\"RegExp String Iterator\"</emu-val>.</p>\n          <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n        </emu-clause>\n      "}, "sec-get-map-@@species": {"num": "23.1.2.2", "title": "#sec-get-map-@@species get Map [ @@species ]", "html": "<emu-clause id=\"sec-get-map-@@species\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-map-@@species\">#sec-get-map-@@species</span> get Map [ @@species ]</h1>\n        <p><code>Map[@@species]</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Return the <emu-val>this</emu-val> value.</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"get [Symbol.species]\"</emu-val>.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Methods that create derived collection objects should call <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@species</a></emu-xref> to determine the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to use to create the derived objects. Subclass <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> may over-ride <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@species</a></emu-xref> to change the default <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> assignment.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-symbol.tostringtag": {"num": "19.4.2.15", "title": "#sec-symbol.tostringtag Symbol.toStringTag", "html": "<emu-clause id=\"sec-symbol.tostringtag\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-symbol.tostringtag\">#sec-symbol.tostringtag</span> Symbol.toStringTag</h1>\n        <p>The initial value of <code>Symbol.toStringTag</code> is the well-known symbol <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toStringTag</a></emu-xref> (<emu-xref href=\"#table-1\"><a href=\"#table-1\" class=\"excluded-xref\" excluded-id=\"table-1\">#table-1</a></emu-xref>).</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-promise.prototype-@@tostringtag": {"num": "25.6.5.5", "title": "#sec-promise.prototype-@@tostringtag Promise.prototype [ @@toStringTag ]", "html": "<emu-clause id=\"sec-promise.prototype-@@tostringtag\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promise.prototype-@@tostringtag\">#sec-promise.prototype-@@tostringtag</span> Promise.prototype [ @@toStringTag ]</h1>\n        <p>The initial value of the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toStringTag</a></emu-xref> property is the String value <emu-val>\"Promise\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-get-%typedarray%-@@species": {"num": "22.2.2.4", "title": "#sec-get-%typedarray%-@@species get %TypedArray% [ @@species ]", "html": "<emu-clause id=\"sec-get-%typedarray%-@@species\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-%typedarray%-@@species\">#sec-get-%typedarray%-@@species</span> get %TypedArray% [ @@species ]</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>[@@species]</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Return the <emu-val>this</emu-val> value.</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"get [Symbol.species]\"</emu-val>.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><emu-xref href=\"#sec-properties-of-the-%typedarrayprototype%-object\"><a href=\"#sec-properties-of-the-%typedarrayprototype%-object\">%TypedArray.prototype%</a></emu-xref> methods normally use their <emu-val>this</emu-val> value's <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create a derived object. However, a subclass <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> may over-ride that default behaviour by redefining its <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@species</a></emu-xref> property.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-weakmap.prototype-@@tostringtag": {"num": "23.3.3.6", "title": "#sec-weakmap.prototype-@@tostringtag WeakMap.prototype [ @@toStringTag ]", "html": "<emu-clause id=\"sec-weakmap.prototype-@@tostringtag\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakmap.prototype-@@tostringtag\">#sec-weakmap.prototype-@@tostringtag</span> WeakMap.prototype [ @@toStringTag ]</h1>\n        <p>The initial value of the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toStringTag</a></emu-xref> property is the String value <emu-val>\"WeakMap\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-get-arraybuffer-@@species": {"num": "24.1.4.3", "title": "#sec-get-arraybuffer-@@species get ArrayBuffer [ @@species ]", "html": "<emu-clause id=\"sec-get-arraybuffer-@@species\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-arraybuffer-@@species\">#sec-get-arraybuffer-@@species</span> get ArrayBuffer [ @@species ]</h1>\n        <p><code>ArrayBuffer[@@species]</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Return the <emu-val>this</emu-val> value.</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"get [Symbol.species]\"</emu-val>.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>ArrayBuffer prototype methods normally use their <emu-val>this</emu-val> value's <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create a derived object. However, a subclass <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> may over-ride that default behaviour by redefining its <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@species</a></emu-xref> property.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-get-regexp-@@species": {"num": "21.2.4.2", "title": "#sec-get-regexp-@@species get RegExp [ @@species ]", "html": "<emu-clause id=\"sec-get-regexp-@@species\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-regexp-@@species\">#sec-get-regexp-@@species</span> get RegExp [ @@species ]</h1>\n        <p><code>RegExp[@@species]</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Return the <emu-val>this</emu-val> value.</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"get [Symbol.species]\"</emu-val>.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>RegExp prototype methods normally use their <emu-val>this</emu-val> value's <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create a derived object. However, a subclass <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> may over-ride that default behaviour by redefining its <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@species</a></emu-xref> property.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-bigint.prototype-@@tostringtag": {"num": "20.2.3.5", "title": "#sec-bigint.prototype-@@tostringtag BigInt.prototype [ @@toStringTag ]", "html": "<emu-clause id=\"sec-bigint.prototype-@@tostringtag\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bigint.prototype-@@tostringtag\">#sec-bigint.prototype-@@tostringtag</span> BigInt.prototype [ @@toStringTag ]</h1>\n        <p>The initial value of the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toStringTag</a></emu-xref> property is the String value <emu-val>\"BigInt\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-array.from": {"num": "22.1.2.1", "title": "#sec-array.from Array.from ( items [ , mapfn [ , thisArg ] ] )", "html": "<emu-clause id=\"sec-array.from\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.from\">#sec-array.from</span> Array.from ( <var>items</var> [ , <var>mapfn</var> [ , <var>thisArg</var> ] ] )</h1>\n        <p>When the <code>from</code> method is called with argument <var>items</var> and optional arguments <var>mapfn</var> and <var>thisArg</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>C</var> be the <emu-val>this</emu-val> value.</li><li>If <var>mapfn</var> is <emu-val>undefined</emu-val>, let <var>mapping</var> be <emu-val>false</emu-val>.</li><li>Else,<ol><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>mapfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>mapping</var> be <emu-val>true</emu-val>.</li></ol></li><li>Let <var>usingIterator</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>items</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@iterator</a></emu-xref>).</li><li>If <var>usingIterator</var> is not <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>C</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>C</var>).</li></ol></li><li>Else,<ol><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li></ol></li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>items</var>, <emu-const>sync</emu-const>, <var>usingIterator</var>).</li><li>Let <var>k</var> be 0.</li><li>Repeat,<ol><li>If <var>k</var> &#8805; 2<sup>53</sup> - 1, then<ol><li>Let <var>error</var> be <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(a newly created <emu-val>TypeError</emu-val> object).</li><li>Return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>error</var>).</li></ol></li><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>k</var>, <emu-val>true</emu-val>).</li><li>Return <var>A</var>.</li></ol></li><li>Let <var>nextValue</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>mapping</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>mappedValue</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>mapfn</var>, <var>thisArg</var>, &#171; <var>nextValue</var>, <var>k</var> &#187;).</li><li>If <var>mappedValue</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>mappedValue</var>).</li><li>Set <var>mappedValue</var> to <var>mappedValue</var>.[[Value]].</li></ol></li><li>Else, let <var>mappedValue</var> be <var>nextValue</var>.</li><li>Let <var>defineStatus</var> be <emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <var>Pk</var>, <var>mappedValue</var>).</li><li>If <var>defineStatus</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>defineStatus</var>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li></ol></li><li>NOTE: <var>items</var> is not an Iterable so assume it is an <emu-xref href=\"#sec-lengthofarraylike\"><a href=\"#sec-lengthofarraylike\">array-like object</a></emu-xref>.</li><li>Let <var>arrayLike</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>items</var>).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>arrayLike</var>).</li><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>C</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>C</var>, &#171; <var>len</var> &#187;).</li></ol></li><li>Else,<ol><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(<var>len</var>).</li></ol></li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>arrayLike</var>, <var>Pk</var>).</li><li>If <var>mapping</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>mappedValue</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>mapfn</var>, <var>thisArg</var>, &#171; <var>kValue</var>, <var>k</var> &#187;).</li></ol></li><li>Else, let <var>mappedValue</var> be <var>kValue</var>.</li><li>Perform ?&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <var>Pk</var>, <var>mappedValue</var>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>A</var>, <emu-val>\"length\"</emu-val>, <var>len</var>, <emu-val>true</emu-val>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>from</code> function is an intentionally generic factory method; it does not require that its <emu-val>this</emu-val> value be the Array <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. Therefore it can be transferred to or inherited by any other constructors that may be called with a single numeric argument.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-symbol.hasinstance": {"num": "19.4.2.3", "title": "#sec-symbol.hasinstance Symbol.hasInstance", "html": "<emu-clause id=\"sec-symbol.hasinstance\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-symbol.hasinstance\">#sec-symbol.hasinstance</span> Symbol.hasInstance</h1>\n        <p>The initial value of <code>Symbol.hasInstance</code> is the well-known symbol <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@hasInstance</a></emu-xref> (<emu-xref href=\"#table-1\"><a href=\"#table-1\" class=\"excluded-xref\" excluded-id=\"table-1\">#table-1</a></emu-xref>).</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-createunmappedargumentsobject": {"num": "9.4.4.6", "title": "#sec-createunmappedargumentsobject CreateUnmappedArgumentsObject ( argumentsList )", "html": "<emu-clause id=\"sec-createunmappedargumentsobject\" aoid=\"CreateUnmappedArgumentsObject\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createunmappedargumentsobject\">#sec-createunmappedargumentsobject</span> CreateUnmappedArgumentsObject ( <var>argumentsList</var> )</h1>\n        <p>The abstract operation CreateUnmappedArgumentsObject takes argument <var>argumentsList</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li>Let <var>len</var> be the number of elements in <var>argumentsList</var>.</li><li>Let <var>obj</var> be <emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(%Object.prototype%, &#171; [[ParameterMap]] &#187;).</li><li>Set <var>obj</var>.[[ParameterMap]] to <emu-val>undefined</emu-val>.</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-val>\"length\"</emu-val>, PropertyDescriptor { [[Value]]: <var>len</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }).</li><li>Let <var>index</var> be 0.</li><li>Repeat, while <var>index</var> &lt; <var>len</var>,<ol><li>Let <var>val</var> be <var>argumentsList</var>[<var>index</var>].</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>obj</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>index</var>), <var>val</var>).</li><li>Set <var>index</var> to <var>index</var> + 1.</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@iterator</a></emu-xref>, PropertyDescriptor { [[Value]]: %Array.prototype.values%, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-val>\"callee\"</emu-val>, PropertyDescriptor { [[Get]]: <emu-xref href=\"#sec-%throwtypeerror%\"><a href=\"#sec-%throwtypeerror%\">%ThrowTypeError%</a></emu-xref>, [[Set]]: <emu-xref href=\"#sec-%throwtypeerror%\"><a href=\"#sec-%throwtypeerror%\">%ThrowTypeError%</a></emu-xref>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return <var>obj</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-map.prototype-@@iterator": {"num": "23.1.3.12", "title": "#sec-map.prototype-@@iterator Map.prototype [ @@iterator ] ( )", "html": "<emu-clause id=\"sec-map.prototype-@@iterator\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype-@@iterator\">#sec-map.prototype-@@iterator</span> Map.prototype [ @@iterator ] ( )</h1>\n        <p>The initial value of the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@iterator</a></emu-xref> property is the same <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> as the initial value of the <emu-val>\"entries\"</emu-val> property.</p>\n      </emu-clause>\n\n      "}, "sec-array.prototype-@@iterator": {"num": "22.1.3.33", "title": "#sec-array.prototype-@@iterator Array.prototype [ @@iterator ] ( )", "html": "<emu-clause id=\"sec-array.prototype-@@iterator\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype-@@iterator\">#sec-array.prototype-@@iterator</span> Array.prototype [ @@iterator ] ( )</h1>\n        <p>The initial value of the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@iterator</a></emu-xref> property is the same <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> as the initial value of the <code>Array.prototype.values</code> property.</p>\n      </emu-clause>\n\n      "}, "sec-set.prototype-@@tostringtag": {"num": "23.2.3.12", "title": "#sec-set.prototype-@@tostringtag Set.prototype [ @@toStringTag ]", "html": "<emu-clause id=\"sec-set.prototype-@@tostringtag\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set.prototype-@@tostringtag\">#sec-set.prototype-@@tostringtag</span> Set.prototype [ @@toStringTag ]</h1>\n        <p>The initial value of the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toStringTag</a></emu-xref> property is the String value <emu-val>\"Set\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-arrayspeciescreate": {"num": "9.4.2.3", "title": "#sec-arrayspeciescreate ArraySpeciesCreate ( originalArray, length )", "html": "<emu-clause id=\"sec-arrayspeciescreate\" aoid=\"ArraySpeciesCreate\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arrayspeciescreate\">#sec-arrayspeciescreate</span> ArraySpeciesCreate ( <var>originalArray</var>, <var>length</var> )</h1>\n        <p>The abstract operation ArraySpeciesCreate takes arguments <var>originalArray</var> and <var>length</var>. It is used to specify the creation of a new Array object using a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function that is derived from <var>originalArray</var>. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: !&#160;<emu-xref aoid=\"IsNonNegativeInteger\"><a href=\"#sec-isnonnegativeinteger\">IsNonNegativeInteger</a></emu-xref>(<var>length</var>) is <emu-val>true</emu-val>.</li><li>If <var>length</var> is <emu-val>-0</emu-val>, set <var>length</var> to <emu-val>+0</emu-val>.</li><li>Let <var>isArray</var> be ?&#160;<emu-xref aoid=\"IsArray\"><a href=\"#sec-isarray\">IsArray</a></emu-xref>(<var>originalArray</var>).</li><li>If <var>isArray</var> is <emu-val>false</emu-val>, return ?&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(<var>length</var>).</li><li>Let <var>C</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>originalArray</var>, <emu-val>\"constructor\"</emu-val>).</li><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>C</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>thisRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Let <var>realmC</var> be ?&#160;<emu-xref aoid=\"GetFunctionRealm\"><a href=\"#sec-getfunctionrealm\">GetFunctionRealm</a></emu-xref>(<var>C</var>).</li><li>If <var>thisRealm</var> and <var>realmC</var> are not the same <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>, then<ol><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>C</var>, <var>realmC</var>.[[Intrinsics]].[[<emu-xref href=\"#sec-array-constructor\"><a href=\"#sec-array-constructor\">%Array%</a></emu-xref>]]) is <emu-val>true</emu-val>, set <var>C</var> to <emu-val>undefined</emu-val>.</li></ol></li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>C</var>) is Object, then<ol><li>Set <var>C</var> to ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>C</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@species</a></emu-xref>).</li><li>If <var>C</var> is <emu-val>null</emu-val>, set <var>C</var> to <emu-val>undefined</emu-val>.</li></ol></li><li>If <var>C</var> is <emu-val>undefined</emu-val>, return ?&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(<var>length</var>).</li><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>C</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return ?&#160;<emu-xref aoid=\"Construct\"><a href=\"#sec-construct\">Construct</a></emu-xref>(<var>C</var>, &#171; <var>length</var> &#187;).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>If <var>originalArray</var> was created using the standard built-in Array <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> for a <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> that is not the <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>, then a new Array is created using the <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>. This maintains compatibility with Web browsers that have historically had that behaviour for the <code>Array.prototype</code> methods that now are defined using ArraySpeciesCreate.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-toprimitive": {"num": "7.1.1", "title": "#sec-toprimitive ToPrimitive ( input [ , PreferredType ] )", "html": "<emu-clause id=\"sec-toprimitive\" aoid=\"ToPrimitive\" oldids=\"table-9\">\n      <span id=\"table-9\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-toprimitive\">#sec-toprimitive</span> ToPrimitive ( <var>input</var> [ , <var>PreferredType</var> ] )</h1>\n      <p>The abstract operation ToPrimitive takes argument <var>input</var> and optional argument <var>PreferredType</var>. It converts its <var>input</var> argument to a non-Object type. If an object is capable of converting to more than one primitive type, it may use the optional hint <var>PreferredType</var> to favour that type. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>input</var> is an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>input</var>) is Object, then<ol><li>If <var>PreferredType</var> is not present, let <var>hint</var> be <emu-val>\"default\"</emu-val>.</li><li>Else if <var>PreferredType</var> is hint String, let <var>hint</var> be <emu-val>\"string\"</emu-val>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>PreferredType</var> is hint Number.</li><li>Let <var>hint</var> be <emu-val>\"number\"</emu-val>.</li></ol></li><li>Let <var>exoticToPrim</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>input</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toPrimitive</a></emu-xref>).</li><li>If <var>exoticToPrim</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>exoticToPrim</var>, <var>input</var>, &#171; <var>hint</var> &#187;).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>) is not Object, return <var>result</var>.</li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>If <var>hint</var> is <emu-val>\"default\"</emu-val>, set <var>hint</var> to <emu-val>\"number\"</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"OrdinaryToPrimitive\"><a href=\"#sec-ordinarytoprimitive\">OrdinaryToPrimitive</a></emu-xref>(<var>input</var>, <var>hint</var>).</li></ol></li><li>Return <var>input</var>.</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When ToPrimitive is called with no hint, then it generally behaves as if the hint were Number. However, objects may over-ride this behaviour by defining a <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toPrimitive</a></emu-xref> method. Of the objects defined in this specification only Date objects (see <emu-xref href=\"#sec-date.prototype-@@toprimitive\"><a href=\"#sec-date.prototype-@@toprimitive\" class=\"excluded-xref\" excluded-id=\"sec-date.prototype-@@toprimitive\">#sec-date.prototype-@@toprimitive</a></emu-xref>) and Symbol objects (see <emu-xref href=\"#sec-symbol.prototype-@@toprimitive\"><a href=\"#sec-symbol.prototype-@@toprimitive\" class=\"excluded-xref\" excluded-id=\"sec-symbol.prototype-@@toprimitive\">#sec-symbol.prototype-@@toprimitive</a></emu-xref>) over-ride the default ToPrimitive behaviour. Date objects treat no hint as if the hint were String.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-ordinarytoprimitive\"><h1><span class=\"secnum\">7.1.1.1</span>#sec-ordinarytoprimitive OrdinaryToPrimitive ( O, hint )</h1>...</div></emu-clause>\n\n    "}, "sec-speciesconstructor": {"num": "7.3.22", "title": "#sec-speciesconstructor SpeciesConstructor ( O, defaultConstructor )", "html": "<emu-clause id=\"sec-speciesconstructor\" aoid=\"SpeciesConstructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-speciesconstructor\">#sec-speciesconstructor</span> SpeciesConstructor ( <var>O</var>, <var>defaultConstructor</var> )</h1>\n      <p>The abstract operation SpeciesConstructor takes arguments <var>O</var> (an Object) and <var>defaultConstructor</var> (a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>). It is used to retrieve the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> that should be used to create new objects that are derived from <var>O</var>. <var>defaultConstructor</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to use if a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@species</a></emu-xref> property cannot be found starting from <var>O</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Let <var>C</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <emu-val>\"constructor\"</emu-val>).</li><li>If <var>C</var> is <emu-val>undefined</emu-val>, return <var>defaultConstructor</var>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>C</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>C</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@species</a></emu-xref>).</li><li>If <var>S</var> is either <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, return <var>defaultConstructor</var>.</li><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>S</var>) is <emu-val>true</emu-val>, return <var>S</var>.</li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-get-promise-@@species": {"num": "25.6.4.7", "title": "#sec-get-promise-@@species get Promise [ @@species ]", "html": "<emu-clause id=\"sec-get-promise-@@species\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-promise-@@species\">#sec-get-promise-@@species</span> get Promise [ @@species ]</h1>\n        <p><code>Promise[@@species]</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Return the <emu-val>this</emu-val> value.</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"get [Symbol.species]\"</emu-val>.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Promise prototype methods normally use their <emu-val>this</emu-val> value's <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create a derived object. However, a subclass <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> may over-ride that default behaviour by redefining its <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@species</a></emu-xref> property.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-arraybuffer.prototype-@@tostringtag": {"num": "24.1.5.4", "title": "#sec-arraybuffer.prototype-@@tostringtag ArrayBuffer.prototype [ @@toStringTag ]", "html": "<emu-clause id=\"sec-arraybuffer.prototype-@@tostringtag\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arraybuffer.prototype-@@tostringtag\">#sec-arraybuffer.prototype-@@tostringtag</span> ArrayBuffer.prototype [ @@toStringTag ]</h1>\n        <p>The initial value of the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toStringTag</a></emu-xref> property is the String value <emu-val>\"ArrayBuffer\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-symbol.replace": {"num": "19.4.2.10", "title": "#sec-symbol.replace Symbol.replace", "html": "<emu-clause id=\"sec-symbol.replace\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-symbol.replace\">#sec-symbol.replace</span> Symbol.replace</h1>\n        <p>The initial value of <code>Symbol.replace</code> is the well-known symbol <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@replace</a></emu-xref> (<emu-xref href=\"#table-1\"><a href=\"#table-1\" class=\"excluded-xref\" excluded-id=\"table-1\">#table-1</a></emu-xref>).</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-well-known-symbols": {"num": "6.1.5.1", "title": "#sec-well-known-symbols Well-Known Symbols", "html": "<emu-clause id=\"sec-well-known-symbols\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-well-known-symbols\">#sec-well-known-symbols</span> Well-Known Symbols</h1>\n        <p>Well-known symbols are built-in Symbol values that are explicitly referenced by algorithms of this specification. They are typically used as the keys of properties whose values serve as extension points of a specification algorithm. Unless otherwise specified, well-known symbols values are shared by all realms (<emu-xref href=\"#sec-code-realms\"><a href=\"#sec-code-realms\" class=\"excluded-xref\" excluded-id=\"sec-code-realms\">#sec-code-realms</a></emu-xref>).</p>\n        <p>Within this specification a well-known symbol is referred to by using a notation of the form @@name, where &#8220;name&#8221; is one of the values listed in <emu-xref href=\"#table-1\"><a href=\"#table-1\" class=\"excluded-xref\" excluded-id=\"table-1\">#table-1</a></emu-xref>.</p>\n        <emu-table id=\"table-1\" caption=\"Well-known Symbols\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-1\">#table-1</span>: Well-known Symbols</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Specification Name\n              </th>\n              <th>\n                [[Description]]\n              </th>\n              <th>\n                Value and Purpose\n              </th>\n            </tr>\n            <tr>\n              <td>\n                <dfn>@@asyncIterator</dfn>\n              </td>\n              <td>\n                <emu-val>\"Symbol.asyncIterator\"</emu-val>\n              </td>\n              <td>\n                A method that returns the default AsyncIterator for an object. Called by the semantics of the <code>for</code>-<code>await</code>-<code>of</code> statement.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <dfn>@@hasInstance</dfn>\n              </td>\n              <td>\n                <emu-val>\"Symbol.hasInstance\"</emu-val>\n              </td>\n              <td>\n                A method that determines if a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> object recognizes an object as one of the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>'s instances. Called by the semantics of the <code>instanceof</code> operator.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <dfn>@@isConcatSpreadable</dfn>\n              </td>\n              <td>\n                <emu-val>\"Symbol.isConcatSpreadable\"</emu-val>\n              </td>\n              <td>\n                A Boolean valued property that if true indicates that an object should be flattened to its array elements by <emu-xref href=\"#sec-array.prototype.concat\"><a href=\"#sec-array.prototype.concat\"><code>Array.prototype.concat</code></a></emu-xref>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <dfn>@@iterator</dfn>\n              </td>\n              <td>\n                <emu-val>\"Symbol.iterator\"</emu-val>\n              </td>\n              <td>\n                A method that returns the default Iterator for an object. Called by the semantics of the for-of statement.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <dfn>@@match</dfn>\n              </td>\n              <td>\n                <emu-val>\"Symbol.match\"</emu-val>\n              </td>\n              <td>\n                A regular expression method that matches the regular expression against a string. Called by the <emu-xref href=\"#sec-string.prototype.match\"><a href=\"#sec-string.prototype.match\"><code>String.prototype.match</code></a></emu-xref> method.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <dfn>@@matchAll</dfn>\n              </td>\n              <td>\n                <emu-val>\"Symbol.matchAll\"</emu-val>\n              </td>\n              <td>\n                A regular expression method that returns an iterator, that yields matches of the regular expression against a string. Called by the <emu-xref href=\"#sec-string.prototype.matchall\"><a href=\"#sec-string.prototype.matchall\"><code>String.prototype.matchAll</code></a></emu-xref> method.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <dfn>@@replace</dfn>\n              </td>\n              <td>\n                <emu-val>\"Symbol.replace\"</emu-val>\n              </td>\n              <td>\n                A regular expression method that replaces matched substrings of a string. Called by the <emu-xref href=\"#sec-string.prototype.replace\"><a href=\"#sec-string.prototype.replace\"><code>String.prototype.replace</code></a></emu-xref> method.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <dfn>@@search</dfn>\n              </td>\n              <td>\n                <emu-val>\"Symbol.search\"</emu-val>\n              </td>\n              <td>\n                A regular expression method that returns the index within a string that matches the regular expression. Called by the <emu-xref href=\"#sec-string.prototype.search\"><a href=\"#sec-string.prototype.search\"><code>String.prototype.search</code></a></emu-xref> method.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <dfn>@@species</dfn>\n              </td>\n              <td>\n                <emu-val>\"Symbol.species\"</emu-val>\n              </td>\n              <td>\n                A function valued property that is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function that is used to create derived objects.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <dfn>@@split</dfn>\n              </td>\n              <td>\n                <emu-val>\"Symbol.split\"</emu-val>\n              </td>\n              <td>\n                A regular expression method that splits a string at the indices that match the regular expression. Called by the <emu-xref href=\"#sec-string.prototype.split\"><a href=\"#sec-string.prototype.split\"><code>String.prototype.split</code></a></emu-xref> method.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <dfn>@@toPrimitive</dfn>\n              </td>\n              <td>\n                <emu-val>\"Symbol.toPrimitive\"</emu-val>\n              </td>\n              <td>\n                A method that converts an object to a corresponding primitive value. Called by the <emu-xref aoid=\"ToPrimitive\"><a href=\"#sec-toprimitive\">ToPrimitive</a></emu-xref> abstract operation.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <dfn>@@toStringTag</dfn>\n              </td>\n              <td>\n                <emu-val>\"Symbol.toStringTag\"</emu-val>\n              </td>\n              <td>\n                A String valued property that is used in the creation of the default string description of an object. Accessed by the built-in method <emu-xref href=\"#sec-object.prototype.tostring\"><a href=\"#sec-object.prototype.tostring\"><code>Object.prototype.toString</code></a></emu-xref>.\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <dfn>@@unscopables</dfn>\n              </td>\n              <td>\n                <emu-val>\"Symbol.unscopables\"</emu-val>\n              </td>\n              <td>\n                An object valued property whose own and inherited property names are property names that are excluded from the <code>with</code> environment bindings of the associated object.\n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n    "}, "sec-symbol.matchall": {"num": "19.4.2.8", "title": "#sec-symbol.matchall Symbol.matchAll", "html": "<emu-clause id=\"sec-symbol.matchall\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-symbol.matchall\">#sec-symbol.matchall</span> Symbol.matchAll</h1>\n        <p>The initial value of <code>Symbol.matchAll</code> is the well-known symbol <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@matchAll</a></emu-xref> (<emu-xref href=\"#table-1\"><a href=\"#table-1\" class=\"excluded-xref\" excluded-id=\"table-1\">#table-1</a></emu-xref>).</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-sharedarraybuffer.prototype.toString": {"num": "24.2.4.4", "title": "#sec-sharedarraybuffer.prototype.toString SharedArrayBuffer.prototype [ @@toStringTag ]", "html": "<emu-clause id=\"sec-sharedarraybuffer.prototype.toString\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-sharedarraybuffer.prototype.toString\">#sec-sharedarraybuffer.prototype.toString</span> SharedArrayBuffer.prototype [ @@toStringTag ]</h1>\n        <p>The initial value of the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toStringTag</a></emu-xref> property is the String value <emu-val>\"SharedArrayBuffer\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-symbol.split": {"num": "19.4.2.13", "title": "#sec-symbol.split Symbol.split", "html": "<emu-clause id=\"sec-symbol.split\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-symbol.split\">#sec-symbol.split</span> Symbol.split</h1>\n        <p>The initial value of <code>Symbol.split</code> is the well-known symbol <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@split</a></emu-xref> (<emu-xref href=\"#table-1\"><a href=\"#table-1\" class=\"excluded-xref\" excluded-id=\"table-1\">#table-1</a></emu-xref>).</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-instanceofoperator": {"num": "12.10.4", "title": "#sec-instanceofoperator Runtime Semantics: InstanceofOperator ( V, target )", "html": "<emu-clause id=\"sec-instanceofoperator\" aoid=\"InstanceofOperator\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-instanceofoperator\">#sec-instanceofoperator</span> Runtime Semantics: InstanceofOperator ( <var>V</var>, <var>target</var> )</h1>\n      <p>The abstract operation InstanceofOperator takes arguments <var>V</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>) and <var>target</var> (an <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref>). It implements the generic algorithm for determining if <var>V</var> is an instance of <var>target</var> either by consulting <var>target</var>'s <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@hasInstance</a></emu-xref> method or, if absent, determining whether the value of <var>target</var>'s <emu-val>\"prototype\"</emu-val> property is present in <var>V</var>'s prototype chain. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>target</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>instOfHandler</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>target</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@hasInstance</a></emu-xref>).</li><li>If <var>instOfHandler</var> is not <emu-val>undefined</emu-val>, then<ol><li>Return !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>instOfHandler</var>, <var>target</var>, &#171; <var>V</var> &#187;)).</li></ol></li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>target</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return ?&#160;<emu-xref aoid=\"OrdinaryHasInstance\"><a href=\"#sec-ordinaryhasinstance\">OrdinaryHasInstance</a></emu-xref>(<var>target</var>, <var>V</var>).</li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Steps 4 and 5 provide compatibility with previous editions of ECMAScript that did not use a <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@hasInstance</a></emu-xref> method to define the <code>instanceof</code> operator semantics. If an object does not define or inherit <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@hasInstance</a></emu-xref> it uses the default <code>instanceof</code> semantics.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-createmappedargumentsobject": {"num": "9.4.4.7", "title": "#sec-createmappedargumentsobject CreateMappedArgumentsObject ( func, formals, argumentsList, env )", "html": "<emu-clause id=\"sec-createmappedargumentsobject\" aoid=\"CreateMappedArgumentsObject\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createmappedargumentsobject\">#sec-createmappedargumentsobject</span> CreateMappedArgumentsObject ( <var>func</var>, <var>formals</var>, <var>argumentsList</var>, <var>env</var> )</h1>\n        <p>The abstract operation CreateMappedArgumentsObject takes arguments <var>func</var> (an Object), <var>formals</var> (a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>), <var>argumentsList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>), and <var>env</var> (an <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>). It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>formals</var> does not contain a rest parameter, any binding patterns, or any initializers. It may contain duplicate identifiers.</li><li>Let <var>len</var> be the number of elements in <var>argumentsList</var>.</li><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"MakeBasicObject\"><a href=\"#sec-makebasicobject\">MakeBasicObject</a></emu-xref>(&#171; [[Prototype]], [[Extensible]], [[ParameterMap]] &#187;).</li><li>Set <var>obj</var>.[[GetOwnProperty]] as specified in <emu-xref href=\"#sec-arguments-exotic-objects-getownproperty-p\"><a href=\"#sec-arguments-exotic-objects-getownproperty-p\" class=\"excluded-xref\" excluded-id=\"sec-arguments-exotic-objects-getownproperty-p\">#sec-arguments-exotic-objects-getownproperty-p</a></emu-xref>.</li><li>Set <var>obj</var>.[[DefineOwnProperty]] as specified in <emu-xref href=\"#sec-arguments-exotic-objects-defineownproperty-p-desc\"><a href=\"#sec-arguments-exotic-objects-defineownproperty-p-desc\" class=\"excluded-xref\" excluded-id=\"sec-arguments-exotic-objects-defineownproperty-p-desc\">#sec-arguments-exotic-objects-defineownproperty-p-desc</a></emu-xref>.</li><li>Set <var>obj</var>.[[Get]] as specified in <emu-xref href=\"#sec-arguments-exotic-objects-get-p-receiver\"><a href=\"#sec-arguments-exotic-objects-get-p-receiver\" class=\"excluded-xref\" excluded-id=\"sec-arguments-exotic-objects-get-p-receiver\">#sec-arguments-exotic-objects-get-p-receiver</a></emu-xref>.</li><li>Set <var>obj</var>.[[Set]] as specified in <emu-xref href=\"#sec-arguments-exotic-objects-set-p-v-receiver\"><a href=\"#sec-arguments-exotic-objects-set-p-v-receiver\" class=\"excluded-xref\" excluded-id=\"sec-arguments-exotic-objects-set-p-v-receiver\">#sec-arguments-exotic-objects-set-p-v-receiver</a></emu-xref>.</li><li>Set <var>obj</var>.[[Delete]] as specified in <emu-xref href=\"#sec-arguments-exotic-objects-delete-p\"><a href=\"#sec-arguments-exotic-objects-delete-p\" class=\"excluded-xref\" excluded-id=\"sec-arguments-exotic-objects-delete-p\">#sec-arguments-exotic-objects-delete-p</a></emu-xref>.</li><li>Set <var>obj</var>.[[Prototype]] to %Object.prototype%.</li><li>Let <var>map</var> be <emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-val>null</emu-val>).</li><li>Set <var>obj</var>.[[ParameterMap]] to <var>map</var>.</li><li>Let <var>parameterNames</var> be the BoundNames of <var>formals</var>.</li><li>Let <var>numberOfParameters</var> be the number of elements in <var>parameterNames</var>.</li><li>Let <var>index</var> be 0.</li><li>Repeat, while <var>index</var> &lt; <var>len</var>,<ol><li>Let <var>val</var> be <var>argumentsList</var>[<var>index</var>].</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>obj</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>index</var>), <var>val</var>).</li><li>Set <var>index</var> to <var>index</var> + 1.</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-val>\"length\"</emu-val>, PropertyDescriptor { [[Value]]: <var>len</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }).</li><li>Let <var>mappedNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>index</var> be <var>numberOfParameters</var> - 1.</li><li>Repeat, while <var>index</var> &#8805; 0,<ol><li>Let <var>name</var> be <var>parameterNames</var>[<var>index</var>].</li><li>If <var>name</var> is not an element of <var>mappedNames</var>, then<ol><li>Add <var>name</var> as an element of the list <var>mappedNames</var>.</li><li>If <var>index</var> &lt; <var>len</var>, then<ol><li>Let <var>g</var> be <emu-xref aoid=\"MakeArgGetter\"><a href=\"#sec-makearggetter\">MakeArgGetter</a></emu-xref>(<var>name</var>, <var>env</var>).</li><li>Let <var>p</var> be <emu-xref aoid=\"MakeArgSetter\"><a href=\"#sec-makeargsetter\">MakeArgSetter</a></emu-xref>(<var>name</var>, <var>env</var>).</li><li>Perform <var>map</var>.[[DefineOwnProperty]](! <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>index</var>), PropertyDescriptor { [[Set]]: <var>p</var>, [[Get]]: <var>g</var>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }).</li></ol></li></ol></li><li>Set <var>index</var> to <var>index</var> - 1.</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@iterator</a></emu-xref>, PropertyDescriptor { [[Value]]: %Array.prototype.values%, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>obj</var>, <emu-val>\"callee\"</emu-val>, PropertyDescriptor { [[Value]]: <var>func</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }).</li><li>Return <var>obj</var>.</li></ol></emu-alg>\n\n        <div id=\"excluded-sec-makearggetter\"><h1><span class=\"secnum\">9.4.4.7.1</span>#sec-makearggetter MakeArgGetter ( name, env )</h1>...</div><div id=\"excluded-sec-makeargsetter\"><h1><span class=\"secnum\">9.4.4.7.2</span>#sec-makeargsetter MakeArgSetter ( name, env )</h1>...</div></emu-clause>\n    "}, "sec-@@tostringtag": {"num": "26.3.1", "title": "#sec-@@tostringtag @@toStringTag", "html": "<emu-clause id=\"sec-@@tostringtag\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-@@tostringtag\">#sec-@@tostringtag</span> @@toStringTag</h1>\n      <p>The initial value of the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toStringTag</a></emu-xref> property is the String value <emu-val>\"Module\"</emu-val>.</p>\n      <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n    </emu-clause>\n  "}, "sec-object-environment-records-hasbinding-n": {"num": "8.1.1.2.1", "title": "#sec-object-environment-records-hasbinding-n HasBinding ( N )", "html": "<emu-clause id=\"sec-object-environment-records-hasbinding-n\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-environment-records-hasbinding-n\">#sec-object-environment-records-hasbinding-n</span> HasBinding ( <var>N</var> )</h1>\n          <p>The concrete <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> method HasBinding for object Environment Records determines if its associated binding object has a property whose name is the value of the argument <var>N</var>:</p>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-object-environment-records\"><a href=\"#sec-object-environment-records\">object Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>bindings</var> be the binding object for <var>envRec</var>.</li><li>Let <var>foundBinding</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>bindings</var>, <var>N</var>).</li><li>If <var>foundBinding</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If the <var>withEnvironment</var> flag of <var>envRec</var> is <emu-val>false</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>unscopables</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>bindings</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@unscopables</a></emu-xref>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>unscopables</var>) is Object, then<ol><li>Let <var>blocked</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>unscopables</var>, <var>N</var>)).</li><li>If <var>blocked</var> is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-get-array-@@species": {"num": "22.1.2.5", "title": "#sec-get-array-@@species get Array [ @@species ]", "html": "<emu-clause id=\"sec-get-array-@@species\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-array-@@species\">#sec-get-array-@@species</span> get Array [ @@species ]</h1>\n        <p><code>Array[@@species]</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Return the <emu-val>this</emu-val> value.</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"get [Symbol.species]\"</emu-val>.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Array prototype methods normally use their <emu-val>this</emu-val> value's <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create a derived object. However, a subclass <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> may over-ride that default behaviour by redefining its <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@species</a></emu-xref> property.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-add-entries-from-iterable": {"num": "23.1.1.2", "title": "#sec-add-entries-from-iterable AddEntriesFromIterable ( target, iterable, adder )", "html": "<emu-clause id=\"sec-add-entries-from-iterable\" aoid=\"AddEntriesFromIterable\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-add-entries-from-iterable\">#sec-add-entries-from-iterable</span> AddEntriesFromIterable ( <var>target</var>, <var>iterable</var>, <var>adder</var> )</h1>\n        <p>The abstract operation AddEntriesFromIterable takes arguments <var>target</var>, <var>iterable</var>, and <var>adder</var> (a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>). <var>adder</var> will be invoked, with <var>target</var> as the receiver. It performs the following steps when called:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>adder</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iterable</var> is present, and is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>.</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>iterable</var>).</li><li>Repeat,<ol><li>Let <var>next</var> be ?&#160;<emu-xref aoid=\"IteratorStep\"><a href=\"#sec-iteratorstep\">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, return <var>target</var>.</li><li>Let <var>nextItem</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>nextItem</var>) is not Object, then<ol><li>Let <var>error</var> be <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(a newly created <emu-val>TypeError</emu-val> object).</li><li>Return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>error</var>).</li></ol></li><li>Let <var>k</var> be <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>nextItem</var>, <emu-val>\"0\"</emu-val>).</li><li>If <var>k</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>k</var>).</li><li>Let <var>v</var> be <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>nextItem</var>, <emu-val>\"1\"</emu-val>).</li><li>If <var>v</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>v</var>).</li><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>adder</var>, <var>target</var>, &#171; <var>k</var>.[[Value]], <var>v</var>.[[Value]] &#187;).</li><li>If <var>status</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, return ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>status</var>).</li></ol></li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The parameter <var>iterable</var> is expected to be an object that implements an <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@iterator</a></emu-xref> method that returns an iterator object that produces a two element <emu-xref href=\"#sec-lengthofarraylike\"><a href=\"#sec-lengthofarraylike\">array-like object</a></emu-xref> whose first element is a value that will be used as a Map key and whose second element is the value to associate with that key.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-weakset.prototype-@@tostringtag": {"num": "23.4.3.5", "title": "#sec-weakset.prototype-@@tostringtag WeakSet.prototype [ @@toStringTag ]", "html": "<emu-clause id=\"sec-weakset.prototype-@@tostringtag\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakset.prototype-@@tostringtag\">#sec-weakset.prototype-@@tostringtag</span> WeakSet.prototype [ @@toStringTag ]</h1>\n        <p>The initial value of the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toStringTag</a></emu-xref> property is the String value <emu-val>\"WeakSet\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-async-function-prototype-properties-toStringTag": {"num": "25.7.3.2", "title": "#sec-async-function-prototype-properties-toStringTag AsyncFunction.prototype [ @@toStringTag ]", "html": "<emu-clause id=\"sec-async-function-prototype-properties-toStringTag\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-prototype-properties-toStringTag\">#sec-async-function-prototype-properties-toStringTag</span> AsyncFunction.prototype [ @@toStringTag ]</h1>\n\n        <p>The initial value of the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toStringTag</a></emu-xref> property is the String value <emu-val>\"AsyncFunction\"</emu-val>.</p>\n\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-typedarray-object": {"num": "22.2.4.4", "title": "#sec-typedarray-object TypedArray ( object )", "html": "<emu-clause id=\"sec-typedarray-object\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-typedarray-object\">#sec-typedarray-object</span> <var>TypedArray</var> ( <var>object</var> )</h1>\n        <p>This description applies only if the <var>TypedArray</var> function is called with at least one argument and the Type of the first argument is Object and that object does not have either a [[TypedArrayName]] or an [[ArrayBufferData]] internal slot.</p>\n        <p><var>TypedArray</var> called with argument <var>object</var> performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>object</var>) is Object and <var>object</var> does not have either a [[TypedArrayName]] or an [[ArrayBufferData]] internal slot.</li><li>If NewTarget is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorName</var> be the String value of the <emu-xref href=\"#constructor\"><a href=\"#constructor\">Constructor</a></emu-xref> Name value specified in <emu-xref href=\"#table-the-typedarray-constructors\"><a href=\"#table-the-typedarray-constructors\" class=\"excluded-xref\" excluded-id=\"table-the-typedarray-constructors\">#table-the-typedarray-constructors</a></emu-xref> for this <var>TypedArray</var> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</li><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"AllocateTypedArray\"><a href=\"#sec-allocatetypedarray\">AllocateTypedArray</a></emu-xref>(<var>constructorName</var>, NewTarget, <code>\"%<var>TypedArray</var>.prototype%\"</code>).</li><li>Let <var>usingIterator</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>object</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@iterator</a></emu-xref>).</li><li>If <var>usingIterator</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>values</var> be ?&#160;<emu-xref aoid=\"IterableToList\"><a href=\"#sec-iterabletolist\">IterableToList</a></emu-xref>(<var>object</var>, <var>usingIterator</var>).</li><li>Let <var>len</var> be the number of elements in <var>values</var>.</li><li>Perform ?&#160;<emu-xref aoid=\"AllocateTypedArrayBuffer\"><a href=\"#sec-allocatetypedarraybuffer\">AllocateTypedArrayBuffer</a></emu-xref>(<var>O</var>, <var>len</var>).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kValue</var> be the first element of <var>values</var> and remove that element from <var>values</var>.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>Pk</var>, <var>kValue</var>, <emu-val>true</emu-val>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>values</var> is now an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return <var>O</var>.</li></ol></li><li>NOTE: <var>object</var> is not an Iterable so assume it is already an <emu-xref href=\"#sec-lengthofarraylike\"><a href=\"#sec-lengthofarraylike\">array-like object</a></emu-xref>.</li><li>Let <var>arrayLike</var> be <var>object</var>.</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>arrayLike</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"AllocateTypedArrayBuffer\"><a href=\"#sec-allocatetypedarraybuffer\">AllocateTypedArrayBuffer</a></emu-xref>(<var>O</var>, <var>len</var>).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>arrayLike</var>, <var>Pk</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>Pk</var>, <var>kValue</var>, <emu-val>true</emu-val>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <var>O</var>.</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-map-iterable": {"num": "23.1.1.1", "title": "#sec-map-iterable Map ( [ iterable ] )", "html": "<emu-clause id=\"sec-map-iterable\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map-iterable\">#sec-map-iterable</span> Map ( [ <var>iterable</var> ] )</h1>\n        <p>When the <code>Map</code> function is called with optional argument <var>iterable</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>If NewTarget is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>map</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(NewTarget, <emu-val>\"%Map.prototype%\"</emu-val>, &#171; [[MapData]] &#187;).</li><li>Set <var>map</var>.[[MapData]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>If <var>iterable</var> is either <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, return <var>map</var>.</li><li>Let <var>adder</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>map</var>, <emu-val>\"set\"</emu-val>).</li><li>Return ?&#160;<emu-xref aoid=\"AddEntriesFromIterable\"><a href=\"#sec-add-entries-from-iterable\">AddEntriesFromIterable</a></emu-xref>(<var>map</var>, <var>iterable</var>, <var>adder</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>If the parameter <var>iterable</var> is present, it is expected to be an object that implements an <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@iterator</a></emu-xref> method that returns an iterator object that produces a two element <emu-xref href=\"#sec-lengthofarraylike\"><a href=\"#sec-lengthofarraylike\">array-like object</a></emu-xref> whose first element is a value that will be used as a Map key and whose second element is the value to associate with that key.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-math-@@tostringtag": {"num": "20.3.1.9", "title": "#sec-math-@@tostringtag Math [ @@toStringTag ]", "html": "<emu-clause id=\"sec-math-@@tostringtag\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math-@@tostringtag\">#sec-math-@@tostringtag</span> Math [ @@toStringTag ]</h1>\n        <p>The initial value of the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toStringTag</a></emu-xref> property is the String value <emu-val>\"Math\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-dataview.prototype-@@tostringtag": {"num": "24.3.4.25", "title": "#sec-dataview.prototype-@@tostringtag DataView.prototype [ @@toStringTag ]", "html": "<emu-clause id=\"sec-dataview.prototype-@@tostringtag\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype-@@tostringtag\">#sec-dataview.prototype-@@tostringtag</span> DataView.prototype [ @@toStringTag ]</h1>\n        <p>The initial value of the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toStringTag</a></emu-xref> property is the String value <emu-val>\"DataView\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-string.prototype.replace": {"num": "21.1.3.17", "title": "#sec-string.prototype.replace String.prototype.replace ( searchValue, replaceValue )", "html": "<emu-clause id=\"sec-string.prototype.replace\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.replace\">#sec-string.prototype.replace</span> String.prototype.replace ( <var>searchValue</var>, <var>replaceValue</var> )</h1>\n        <p>When the <code>replace</code> method is called with arguments <var>searchValue</var> and <var>replaceValue</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>searchValue</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, then<ol><li>Let <var>replacer</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>searchValue</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@replace</a></emu-xref>).</li><li>If <var>replacer</var> is not <emu-val>undefined</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>replacer</var>, <var>searchValue</var>, &#171; <var>O</var>, <var>replaceValue</var> &#187;).</li></ol></li></ol></li><li>Let <var>string</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>searchString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>searchValue</var>).</li><li>Let <var>functionalReplace</var> be <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>replaceValue</var>).</li><li>If <var>functionalReplace</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>replaceValue</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>replaceValue</var>).</li></ol></li><li>Search <var>string</var> for the first occurrence of <var>searchString</var> and let <var>pos</var> be the index within <var>string</var> of the first code unit of the matched substring and let <var>matched</var> be <var>searchString</var>. If no occurrences of <var>searchString</var> were found, return <var>string</var>.</li><li>If <var>functionalReplace</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>replValue</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>replaceValue</var>, <emu-val>undefined</emu-val>, &#171; <var>matched</var>, <var>pos</var>, <var>string</var> &#187;).</li><li>Let <var>replStr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>replValue</var>).</li></ol></li><li>Else,<ol><li>Let <var>captures</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>replStr</var> be !&#160;<emu-xref aoid=\"GetSubstitution\"><a href=\"#sec-getsubstitution\">GetSubstitution</a></emu-xref>(<var>matched</var>, <var>string</var>, <var>pos</var>, <var>captures</var>, <emu-val>undefined</emu-val>, <var>replaceValue</var>).</li></ol></li><li>Let <var>tailPos</var> be <var>pos</var> + the number of code units in <var>matched</var>.</li><li>Let <var>newString</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the first <var>pos</var> code units of <var>string</var>, <var>replStr</var>, and the trailing substring of <var>string</var> starting at index <var>tailPos</var>. If <var>pos</var> is 0, the first element of the concatenation will be the empty String.</li><li>Return <var>newString</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>replace</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-getsubstitution\"><h1><span class=\"secnum\">21.1.3.17.1</span>#sec-getsubstitution Runtime Semantics: GetSubstitution ( matched, str, position, captures, namedCaptures, replacement )</h1>...</div></emu-clause>\n\n      "}, "sec-%typedarray%.prototype-@@iterator": {"num": "22.2.3.31", "title": "#sec-%typedarray%.prototype-@@iterator %TypedArray%.prototype [ @@iterator ] ( )", "html": "<emu-clause id=\"sec-%typedarray%.prototype-@@iterator\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype-@@iterator\">#sec-%typedarray%.prototype-@@iterator</span> %TypedArray%.prototype [ @@iterator ] ( )</h1>\n        <p>The initial value of the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@iterator</a></emu-xref> property is the same <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> as the initial value of the <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.values</code> property.</p>\n      </emu-clause>\n\n      "}, "sec-generator.prototype-@@tostringtag": {"num": "25.4.1.5", "title": "#sec-generator.prototype-@@tostringtag Generator.prototype [ @@toStringTag ]", "html": "<emu-clause id=\"sec-generator.prototype-@@tostringtag\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator.prototype-@@tostringtag\">#sec-generator.prototype-@@tostringtag</span> Generator.prototype [ @@toStringTag ]</h1>\n        <p>The initial value of the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toStringTag</a></emu-xref> property is the String value <emu-val>\"Generator\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-symbol.prototype-@@tostringtag": {"num": "19.4.3.6", "title": "#sec-symbol.prototype-@@tostringtag Symbol.prototype [ @@toStringTag ]", "html": "<emu-clause id=\"sec-symbol.prototype-@@tostringtag\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-symbol.prototype-@@tostringtag\">#sec-symbol.prototype-@@tostringtag</span> Symbol.prototype [ @@toStringTag ]</h1>\n        <p>The initial value of the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toStringTag</a></emu-xref> property is the String value <emu-val>\"Symbol\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-map.prototype-@@tostringtag": {"num": "23.1.3.13", "title": "#sec-map.prototype-@@tostringtag Map.prototype [ @@toStringTag ]", "html": "<emu-clause id=\"sec-map.prototype-@@tostringtag\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype-@@tostringtag\">#sec-map.prototype-@@tostringtag</span> Map.prototype [ @@toStringTag ]</h1>\n        <p>The initial value of the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toStringTag</a></emu-xref> property is the String value <emu-val>\"Map\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-%setiteratorprototype%-@@tostringtag": {"num": "23.2.5.2.2", "title": "#sec-%setiteratorprototype%-@@tostringtag %SetIteratorPrototype% [ @@toStringTag ]", "html": "<emu-clause id=\"sec-%setiteratorprototype%-@@tostringtag\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%setiteratorprototype%-@@tostringtag\">#sec-%setiteratorprototype%-@@tostringtag</span> %SetIteratorPrototype% [ @@toStringTag ]</h1>\n          <p>The initial value of the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toStringTag</a></emu-xref> property is the String value <emu-val>\"Set Iterator\"</emu-val>.</p>\n          <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n        </emu-clause>\n      "}, "sec-symbol.match": {"num": "19.4.2.7", "title": "#sec-symbol.match Symbol.match", "html": "<emu-clause id=\"sec-symbol.match\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-symbol.match\">#sec-symbol.match</span> Symbol.match</h1>\n        <p>The initial value of <code>Symbol.match</code> is the well-known symbol <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@match</a></emu-xref> (<emu-xref href=\"#table-1\"><a href=\"#table-1\" class=\"excluded-xref\" excluded-id=\"table-1\">#table-1</a></emu-xref>).</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-symbol.unscopables": {"num": "19.4.2.16", "title": "#sec-symbol.unscopables Symbol.unscopables", "html": "<emu-clause id=\"sec-symbol.unscopables\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-symbol.unscopables\">#sec-symbol.unscopables</span> Symbol.unscopables</h1>\n        <p>The initial value of <code>Symbol.unscopables</code> is the well-known symbol <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@unscopables</a></emu-xref> (<emu-xref href=\"#table-1\"><a href=\"#table-1\" class=\"excluded-xref\" excluded-id=\"table-1\">#table-1</a></emu-xref>).</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-regexp.prototype-@@match": {"num": "21.2.5.7", "title": "#sec-regexp.prototype-@@match RegExp.prototype [ @@match ] ( string )", "html": "<emu-clause id=\"sec-regexp.prototype-@@match\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp.prototype-@@match\">#sec-regexp.prototype-@@match</span> RegExp.prototype [ @@match ] ( <var>string</var> )</h1>\n        <p>When the <code>@@match</code> method is called with argument <var>string</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>rx</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rx</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Let <var>global</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>rx</var>, <emu-val>\"global\"</emu-val>)).</li><li>If <var>global</var> is <emu-val>false</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"RegExpExec\"><a href=\"#sec-regexpexec\">RegExpExec</a></emu-xref>(<var>rx</var>, <var>S</var>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>global</var> is <emu-val>true</emu-val>.</li><li>Let <var>fullUnicode</var> be !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>rx</var>, <emu-val>\"unicode\"</emu-val>)).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>rx</var>, <emu-val>\"lastIndex\"</emu-val>, 0, <emu-val>true</emu-val>).</li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>n</var> be 0.</li><li>Repeat,<ol><li>Let <var>result</var> be ?&#160;<emu-xref aoid=\"RegExpExec\"><a href=\"#sec-regexpexec\">RegExpExec</a></emu-xref>(<var>rx</var>, <var>S</var>).</li><li>If <var>result</var> is <emu-val>null</emu-val>, then<ol><li>If <var>n</var> = 0, return <emu-val>null</emu-val>.</li><li>Return <var>A</var>.</li></ol></li><li>Else,<ol><li>Let <var>matchStr</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>result</var>, <emu-val>\"0\"</emu-val>)).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>n</var>), <var>matchStr</var>).</li><li>If <var>matchStr</var> is the empty String, then<ol><li>Let <var>thisIndex</var> be ?&#160;<emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(? <emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>rx</var>, <emu-val>\"lastIndex\"</emu-val>)).</li><li>Let <var>nextIndex</var> be <emu-xref aoid=\"AdvanceStringIndex\"><a href=\"#sec-advancestringindex\">AdvanceStringIndex</a></emu-xref>(<var>S</var>, <var>thisIndex</var>, <var>fullUnicode</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>rx</var>, <emu-val>\"lastIndex\"</emu-val>, <var>nextIndex</var>, <emu-val>true</emu-val>).</li></ol></li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li></ol></li></ol></li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"[Symbol.match]\"</emu-val>.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@match</a></emu-xref> property is used by the <emu-xref aoid=\"IsRegExp\"><a href=\"#sec-isregexp\">IsRegExp</a></emu-xref> abstract operation to identify objects that have the basic behaviour of regular expressions. The absence of a <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@match</a></emu-xref> property or the existence of such a property whose value does not Boolean coerce to <emu-val>true</emu-val> indicates that the object is not intended to be used as a regular expression object.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-string.prototype.matchall": {"num": "21.1.3.12", "title": "#sec-string.prototype.matchall String.prototype.matchAll ( regexp )", "html": "<emu-clause id=\"sec-string.prototype.matchall\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.matchall\">#sec-string.prototype.matchall</span> String.prototype.matchAll ( <var>regexp</var> )</h1>\n        <p>Performs a regular expression match of the String representing the <emu-val>this</emu-val> value against <var>regexp</var> and returns an iterator. Each iteration result's value is an Array object containing the results of the match, or <emu-val>null</emu-val> if the String did not match.</p>\n        <p>When the <code>matchAll</code> method is called, the following steps are taken:</p>\n\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>regexp</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, then<ol><li>Let <var>isRegExp</var> be ?&#160;<emu-xref aoid=\"IsRegExp\"><a href=\"#sec-isregexp\">IsRegExp</a></emu-xref>(<var>regexp</var>).</li><li>If <var>isRegExp</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>flags</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>regexp</var>, <emu-val>\"flags\"</emu-val>).</li><li>Perform ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<var>flags</var>).</li><li>If ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>flags</var>) does not contain <emu-val>\"g\"</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Let <var>matcher</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>regexp</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@matchAll</a></emu-xref>).</li><li>If <var>matcher</var> is not <emu-val>undefined</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>matcher</var>, <var>regexp</var>, &#171; <var>O</var> &#187;).</li></ol></li></ol></li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>rx</var> be ?&#160;<emu-xref aoid=\"RegExpCreate\"><a href=\"#sec-regexpcreate\">RegExpCreate</a></emu-xref>(<var>regexp</var>, <emu-val>\"g\"</emu-val>).</li><li>Return ?&#160;<emu-xref aoid=\"Invoke\"><a href=\"#sec-invoke\">Invoke</a></emu-xref>(<var>rx</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@matchAll</a></emu-xref>, &#171; <var>S</var> &#187;).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">The <code>matchAll</code> function is intentionally generic, it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">Similarly to <code>String.prototype.split</code>, <code>String.prototype.matchAll</code> is designed to typically act without mutating its inputs.</div></emu-note>\n      </emu-clause>\n\n      "}, "sec-string.prototype.match": {"num": "21.1.3.11", "title": "#sec-string.prototype.match String.prototype.match ( regexp )", "html": "<emu-clause id=\"sec-string.prototype.match\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.match\">#sec-string.prototype.match</span> String.prototype.match ( <var>regexp</var> )</h1>\n        <p>When the <code>match</code> method is called with argument <var>regexp</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>regexp</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, then<ol><li>Let <var>matcher</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>regexp</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@match</a></emu-xref>).</li><li>If <var>matcher</var> is not <emu-val>undefined</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>matcher</var>, <var>regexp</var>, &#171; <var>O</var> &#187;).</li></ol></li></ol></li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>rx</var> be ?&#160;<emu-xref aoid=\"RegExpCreate\"><a href=\"#sec-regexpcreate\">RegExpCreate</a></emu-xref>(<var>regexp</var>, <emu-val>undefined</emu-val>).</li><li>Return ?&#160;<emu-xref aoid=\"Invoke\"><a href=\"#sec-invoke\">Invoke</a></emu-xref>(<var>rx</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@match</a></emu-xref>, &#171; <var>S</var> &#187;).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>match</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-symbol.asynciterator": {"num": "19.4.2.1", "title": "#sec-symbol.asynciterator Symbol.asyncIterator", "html": "<emu-clause id=\"sec-symbol.asynciterator\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-symbol.asynciterator\">#sec-symbol.asynciterator</span> Symbol.asyncIterator</h1>\n        <p>The initial value of <code>Symbol.asyncIterator</code> is the well known symbol <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@asyncIterator</a></emu-xref> (<emu-xref href=\"#table-1\"><a href=\"#table-1\" class=\"excluded-xref\" excluded-id=\"table-1\">#table-1</a></emu-xref>).</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-%mapiteratorprototype%-@@tostringtag": {"num": "23.1.5.2.2", "title": "#sec-%mapiteratorprototype%-@@tostringtag %MapIteratorPrototype% [ @@toStringTag ]", "html": "<emu-clause id=\"sec-%mapiteratorprototype%-@@tostringtag\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%mapiteratorprototype%-@@tostringtag\">#sec-%mapiteratorprototype%-@@tostringtag</span> %MapIteratorPrototype% [ @@toStringTag ]</h1>\n          <p>The initial value of the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toStringTag</a></emu-xref> property is the String value <emu-val>\"Map Iterator\"</emu-val>.</p>\n          <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n        </emu-clause>\n      "}, "sec-symbol.toprimitive": {"num": "19.4.2.14", "title": "#sec-symbol.toprimitive Symbol.toPrimitive", "html": "<emu-clause id=\"sec-symbol.toprimitive\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-symbol.toprimitive\">#sec-symbol.toprimitive</span> Symbol.toPrimitive</h1>\n        <p>The initial value of <code>Symbol.toPrimitive</code> is the well-known symbol <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toPrimitive</a></emu-xref> (<emu-xref href=\"#table-1\"><a href=\"#table-1\" class=\"excluded-xref\" excluded-id=\"table-1\">#table-1</a></emu-xref>).</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-symbol.iterator": {"num": "19.4.2.5", "title": "#sec-symbol.iterator Symbol.iterator", "html": "<emu-clause id=\"sec-symbol.iterator\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-symbol.iterator\">#sec-symbol.iterator</span> Symbol.iterator</h1>\n        <p>The initial value of <code>Symbol.iterator</code> is the well-known symbol <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@iterator</a></emu-xref> (<emu-xref href=\"#table-1\"><a href=\"#table-1\" class=\"excluded-xref\" excluded-id=\"table-1\">#table-1</a></emu-xref>).</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-%arrayiteratorprototype%-@@tostringtag": {"num": "22.1.5.2.2", "title": "#sec-%arrayiteratorprototype%-@@tostringtag %ArrayIteratorPrototype% [ @@toStringTag ]", "html": "<emu-clause id=\"sec-%arrayiteratorprototype%-@@tostringtag\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%arrayiteratorprototype%-@@tostringtag\">#sec-%arrayiteratorprototype%-@@tostringtag</span> %ArrayIteratorPrototype% [ @@toStringTag ]</h1>\n          <p>The initial value of the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toStringTag</a></emu-xref> property is the String value <emu-val>\"Array Iterator\"</emu-val>.</p>\n          <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n        </emu-clause>\n      "}, "sec-object.prototype.tostring": {"num": "19.1.3.6", "title": "#sec-object.prototype.tostring Object.prototype.toString ( )", "html": "<emu-clause id=\"sec-object.prototype.tostring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.prototype.tostring\">#sec-object.prototype.tostring</span> Object.prototype.toString ( )</h1>\n        <p>When the <code>toString</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>If the <emu-val>this</emu-val> value is <emu-val>undefined</emu-val>, return <emu-val>\"[object Undefined]\"</emu-val>.</li><li>If the <emu-val>this</emu-val> value is <emu-val>null</emu-val>, return <emu-val>\"[object Null]\"</emu-val>.</li><li>Let <var>O</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>isArray</var> be ?&#160;<emu-xref aoid=\"IsArray\"><a href=\"#sec-isarray\">IsArray</a></emu-xref>(<var>O</var>).</li><li>If <var>isArray</var> is <emu-val>true</emu-val>, let <var>builtinTag</var> be <emu-val>\"Array\"</emu-val>.</li><li>Else if <var>O</var> has a [[ParameterMap]] internal slot, let <var>builtinTag</var> be <emu-val>\"Arguments\"</emu-val>.</li><li>Else if <var>O</var> has a [[Call]] internal method, let <var>builtinTag</var> be <emu-val>\"Function\"</emu-val>.</li><li>Else if <var>O</var> has an [[ErrorData]] internal slot, let <var>builtinTag</var> be <emu-val>\"Error\"</emu-val>.</li><li>Else if <var>O</var> has a [[BooleanData]] internal slot, let <var>builtinTag</var> be <emu-val>\"Boolean\"</emu-val>.</li><li>Else if <var>O</var> has a [[NumberData]] internal slot, let <var>builtinTag</var> be <emu-val>\"Number\"</emu-val>.</li><li>Else if <var>O</var> has a [[StringData]] internal slot, let <var>builtinTag</var> be <emu-val>\"String\"</emu-val>.</li><li>Else if <var>O</var> has a [[DateValue]] internal slot, let <var>builtinTag</var> be <emu-val>\"Date\"</emu-val>.</li><li>Else if <var>O</var> has a [[RegExpMatcher]] internal slot, let <var>builtinTag</var> be <emu-val>\"RegExp\"</emu-val>.</li><li>Else, let <var>builtinTag</var> be <emu-val>\"Object\"</emu-val>.</li><li>Let <var>tag</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toStringTag</a></emu-xref>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>tag</var>) is not String, set <var>tag</var> to <var>builtinTag</var>.</li><li>Return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <emu-val>\"[object \"</emu-val>, <var>tag</var>, and <emu-val>\"]\"</emu-val>.</li></ol></emu-alg>\n        <p>This function is the <dfn>%ObjProto_toString%</dfn> intrinsic object.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Historically, this function was occasionally used to access the String value of the [[Class]] internal slot that was used in previous editions of this specification as a nominal type tag for various built-in objects. The above definition of <code>toString</code> preserves compatibility for legacy code that uses <code>toString</code> as a test for those specific kinds of built-in objects. It does not provide a reliable type testing mechanism for other kinds of built-in or program defined objects. In addition, programs can use <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toStringTag</a></emu-xref> in ways that will invalidate the reliability of such legacy type tests.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.from": {"num": "22.2.2.1", "title": "#sec-%typedarray%.from %TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )", "html": "<emu-clause id=\"sec-%typedarray%.from\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.from\">#sec-%typedarray%.from</span> %TypedArray%.from ( <var>source</var> [ , <var>mapfn</var> [ , <var>thisArg</var> ] ] )</h1>\n        <p>When the <code>from</code> method is called with argument <var>source</var>, and optional arguments <var>mapfn</var> and <var>thisArg</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>C</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>C</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>mapfn</var> is <emu-val>undefined</emu-val>, let <var>mapping</var> be <emu-val>false</emu-val>.</li><li>Else,<ol><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>mapfn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>mapping</var> be <emu-val>true</emu-val>.</li></ol></li><li>Let <var>usingIterator</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>source</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@iterator</a></emu-xref>).</li><li>If <var>usingIterator</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>values</var> be ?&#160;<emu-xref aoid=\"IterableToList\"><a href=\"#sec-iterabletolist\">IterableToList</a></emu-xref>(<var>source</var>, <var>usingIterator</var>).</li><li>Let <var>len</var> be the number of elements in <var>values</var>.</li><li>Let <var>targetObj</var> be ?&#160;<emu-xref aoid=\"TypedArrayCreate\"><a href=\"#typedarray-create\">TypedArrayCreate</a></emu-xref>(<var>C</var>, &#171; <var>len</var> &#187;).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kValue</var> be the first element of <var>values</var> and remove that element from <var>values</var>.</li><li>If <var>mapping</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>mappedValue</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>mapfn</var>, <var>thisArg</var>, &#171; <var>kValue</var>, <var>k</var> &#187;).</li></ol></li><li>Else, let <var>mappedValue</var> be <var>kValue</var>.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>targetObj</var>, <var>Pk</var>, <var>mappedValue</var>, <emu-val>true</emu-val>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>values</var> is now an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return <var>targetObj</var>.</li></ol></li><li>NOTE: <var>source</var> is not an Iterable so assume it is already an <emu-xref href=\"#sec-lengthofarraylike\"><a href=\"#sec-lengthofarraylike\">array-like object</a></emu-xref>.</li><li>Let <var>arrayLike</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>source</var>).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>arrayLike</var>).</li><li>Let <var>targetObj</var> be ?&#160;<emu-xref aoid=\"TypedArrayCreate\"><a href=\"#typedarray-create\">TypedArrayCreate</a></emu-xref>(<var>C</var>, &#171; <var>len</var> &#187;).</li><li>Let <var>k</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>len</var>,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>arrayLike</var>, <var>Pk</var>).</li><li>If <var>mapping</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>mappedValue</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>mapfn</var>, <var>thisArg</var>, &#171; <var>kValue</var>, <var>k</var> &#187;).</li></ol></li><li>Else, let <var>mappedValue</var> be <var>kValue</var>.</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>targetObj</var>, <var>Pk</var>, <var>mappedValue</var>, <emu-val>true</emu-val>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <var>targetObj</var>.</li></ol></emu-alg>\n\n        <div id=\"excluded-sec-iterabletolist\"><h1><span class=\"secnum\">22.2.2.1.1</span>#sec-iterabletolist Runtime Semantics: IterableToList ( items, method )</h1>...</div></emu-clause>\n\n      "}, "sec-string.prototype.search": {"num": "21.1.3.18", "title": "#sec-string.prototype.search String.prototype.search ( regexp )", "html": "<emu-clause id=\"sec-string.prototype.search\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.search\">#sec-string.prototype.search</span> String.prototype.search ( <var>regexp</var> )</h1>\n        <p>When the <code>search</code> method is called with argument <var>regexp</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>regexp</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, then<ol><li>Let <var>searcher</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>regexp</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@search</a></emu-xref>).</li><li>If <var>searcher</var> is not <emu-val>undefined</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>searcher</var>, <var>regexp</var>, &#171; <var>O</var> &#187;).</li></ol></li></ol></li><li>Let <var>string</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>rx</var> be ?&#160;<emu-xref aoid=\"RegExpCreate\"><a href=\"#sec-regexpcreate\">RegExpCreate</a></emu-xref>(<var>regexp</var>, <emu-val>undefined</emu-val>).</li><li>Return ?&#160;<emu-xref aoid=\"Invoke\"><a href=\"#sec-invoke\">Invoke</a></emu-xref>(<var>rx</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@search</a></emu-xref>, &#171; <var>string</var> &#187;).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>search</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-string.prototype.split": {"num": "21.1.3.20", "title": "#sec-string.prototype.split String.prototype.split ( separator, limit )", "html": "<emu-clause id=\"sec-string.prototype.split\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.split\">#sec-string.prototype.split</span> String.prototype.split ( <var>separator</var>, <var>limit</var> )</h1>\n        <p>Returns an Array object into which substrings of the result of converting this object to a String have been stored. The substrings are determined by searching from left to right for occurrences of <var>separator</var>; these occurrences are not part of any substring in the returned array, but serve to divide up the String value. The value of <var>separator</var> may be a String of any length or it may be an object, such as a RegExp, that has a <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@split</a></emu-xref> method.</p>\n        <p>When the <code>split</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>separator</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, then<ol><li>Let <var>splitter</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>separator</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@split</a></emu-xref>).</li><li>If <var>splitter</var> is not <emu-val>undefined</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>splitter</var>, <var>separator</var>, &#171; <var>O</var>, <var>limit</var> &#187;).</li></ol></li></ol></li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>lengthA</var> be 0.</li><li>If <var>limit</var> is <emu-val>undefined</emu-val>, let <var>lim</var> be 2<sup>32</sup> - 1; else let <var>lim</var> be ?&#160;<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>limit</var>).</li><li>Let <var>R</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>separator</var>).</li><li>If <var>lim</var> = 0, return <var>A</var>.</li><li>If <var>separator</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"0\"</emu-val>, <var>S</var>).</li><li>Return <var>A</var>.</li></ol></li><li>Let <var>s</var> be the length of <var>S</var>.</li><li>If <var>s</var> = 0, then<ol><li>Let <var>z</var> be <emu-xref aoid=\"SplitMatch\"><a href=\"#sec-splitmatch\">SplitMatch</a></emu-xref>(<var>S</var>, 0, <var>R</var>).</li><li>If <var>z</var> is not <emu-val>false</emu-val>, return <var>A</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"0\"</emu-val>, <var>S</var>).</li><li>Return <var>A</var>.</li></ol></li><li>Let <var>p</var> be 0.</li><li>Let <var>q</var> be <var>p</var>.</li><li>Repeat, while <var>q</var> &#8800; <var>s</var>,<ol><li>Let <var>e</var> be <emu-xref aoid=\"SplitMatch\"><a href=\"#sec-splitmatch\">SplitMatch</a></emu-xref>(<var>S</var>, <var>q</var>, <var>R</var>).</li><li>If <var>e</var> is <emu-val>false</emu-val>, set <var>q</var> to <var>q</var> + 1.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>e</var> is an <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> &#8804; <var>s</var>.</li><li>If <var>e</var> = <var>p</var>, set <var>q</var> to <var>q</var> + 1.</li><li>Else,<ol><li>Let <var>T</var> be the String value equal to the substring of <var>S</var> consisting of the code units at indices <var>p</var> (inclusive) through <var>q</var> (exclusive).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>lengthA</var>), <var>T</var>).</li><li>Set <var>lengthA</var> to <var>lengthA</var> + 1.</li><li>If <var>lengthA</var> = <var>lim</var>, return <var>A</var>.</li><li>Set <var>p</var> to <var>e</var>.</li><li>Set <var>q</var> to <var>p</var>.</li></ol></li></ol></li></ol></li><li>Let <var>T</var> be the String value equal to the substring of <var>S</var> consisting of the code units at indices <var>p</var> (inclusive) through <var>s</var> (exclusive).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>lengthA</var>), <var>T</var>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The value of <var>separator</var> may be an empty String. In this case, <var>separator</var> does not match the empty substring at the beginning or end of the input String, nor does it match the empty substring at the end of the previous separator match. If <var>separator</var> is the empty String, the String is split up into individual code unit elements; the length of the result array equals the length of the String, and each substring contains one code unit.</p>\n          <p>If the <emu-val>this</emu-val> value is (or converts to) the empty String, the result depends on whether <var>separator</var> can match the empty String. If it can, the result array contains no elements. Otherwise, the result array contains one element, which is the empty String.</p>\n          <p>If <var>separator</var> is <emu-val>undefined</emu-val>, then the result array contains just one String, which is the <emu-val>this</emu-val> value (converted to a String). If <var>limit</var> is not <emu-val>undefined</emu-val>, then the output array is truncated so that it contains no more than <var>limit</var> elements.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>split</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-splitmatch\"><h1><span class=\"secnum\">21.1.3.20.1</span>#sec-splitmatch Runtime Semantics: SplitMatch ( S, q, R )</h1>...</div></emu-clause>\n\n      "}, "sec-set.prototype-@@iterator": {"num": "23.2.3.11", "title": "#sec-set.prototype-@@iterator Set.prototype [ @@iterator ] ( )", "html": "<emu-clause id=\"sec-set.prototype-@@iterator\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set.prototype-@@iterator\">#sec-set.prototype-@@iterator</span> Set.prototype [ @@iterator ] ( )</h1>\n        <p>The initial value of the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@iterator</a></emu-xref> property is the same <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> as the initial value of the <emu-val>\"values\"</emu-val> property.</p>\n      </emu-clause>\n\n      "}, "sec-weakmap-iterable": {"num": "23.3.1.1", "title": "#sec-weakmap-iterable WeakMap ( [ iterable ] )", "html": "<emu-clause id=\"sec-weakmap-iterable\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-weakmap-iterable\">#sec-weakmap-iterable</span> WeakMap ( [ <var>iterable</var> ] )</h1>\n        <p>When the <code>WeakMap</code> function is called with optional argument <var>iterable</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>If NewTarget is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>map</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(NewTarget, <emu-val>\"%WeakMap.prototype%\"</emu-val>, &#171; [[WeakMapData]] &#187;).</li><li>Set <var>map</var>.[[WeakMapData]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>If <var>iterable</var> is either <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, return <var>map</var>.</li><li>Let <var>adder</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>map</var>, <emu-val>\"set\"</emu-val>).</li><li>Return ?&#160;<emu-xref aoid=\"AddEntriesFromIterable\"><a href=\"#sec-add-entries-from-iterable\">AddEntriesFromIterable</a></emu-xref>(<var>map</var>, <var>iterable</var>, <var>adder</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>If the parameter <var>iterable</var> is present, it is expected to be an object that implements an <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@iterator</a></emu-xref> method that returns an iterator object that produces a two element <emu-xref href=\"#sec-lengthofarraylike\"><a href=\"#sec-lengthofarraylike\">array-like object</a></emu-xref> whose first element is a value that will be used as a WeakMap key and whose second element is the value to associate with that key.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-asyncgeneratorfunction-prototype-tostringtag": {"num": "25.3.3.3", "title": "#sec-asyncgeneratorfunction-prototype-tostringtag AsyncGeneratorFunction.prototype [ @@toStringTag ]", "html": "<emu-clause id=\"sec-asyncgeneratorfunction-prototype-tostringtag\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorfunction-prototype-tostringtag\">#sec-asyncgeneratorfunction-prototype-tostringtag</span> AsyncGeneratorFunction.prototype [ @@toStringTag ]</h1>\n        <p>The initial value of the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toStringTag</a></emu-xref> property is the String value <emu-val>\"AsyncGeneratorFunction\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-symbol.isconcatspreadable": {"num": "19.4.2.4", "title": "#sec-symbol.isconcatspreadable Symbol.isConcatSpreadable", "html": "<emu-clause id=\"sec-symbol.isconcatspreadable\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-symbol.isconcatspreadable\">#sec-symbol.isconcatspreadable</span> Symbol.isConcatSpreadable</h1>\n        <p>The initial value of <code>Symbol.isConcatSpreadable</code> is the well-known symbol <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@isConcatSpreadable</a></emu-xref> (<emu-xref href=\"#table-1\"><a href=\"#table-1\" class=\"excluded-xref\" excluded-id=\"table-1\">#table-1</a></emu-xref>).</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-getiterator": {"num": "7.4.1", "title": "#sec-getiterator GetIterator ( obj [ , hint [ , method ] ] )", "html": "<emu-clause id=\"sec-getiterator\" aoid=\"GetIterator\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getiterator\">#sec-getiterator</span> GetIterator ( <var>obj</var> [ , <var>hint</var> [ , <var>method</var> ] ] )</h1>\n      <p>The abstract operation GetIterator takes argument <var>obj</var> and optional arguments <var>hint</var> and <var>method</var>. It performs the following steps when called:</p>\n      <emu-alg><ol><li>If <var>hint</var> is not present, set <var>hint</var> to <emu-const>sync</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>hint</var> is either <emu-const>sync</emu-const> or <emu-const>async</emu-const>.</li><li>If <var>method</var> is not present, then<ol><li>If <var>hint</var> is <emu-const>async</emu-const>, then<ol><li>Set <var>method</var> to ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>obj</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@asyncIterator</a></emu-xref>).</li><li>If <var>method</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>syncMethod</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>obj</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@iterator</a></emu-xref>).</li><li>Let <var>syncIteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>obj</var>, <emu-const>sync</emu-const>, <var>syncMethod</var>).</li><li>Return !&#160;<emu-xref aoid=\"CreateAsyncFromSyncIterator\"><a href=\"#sec-createasyncfromsynciterator\">CreateAsyncFromSyncIterator</a></emu-xref>(<var>syncIteratorRecord</var>).</li></ol></li></ol></li><li>Otherwise, set <var>method</var> to ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>obj</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@iterator</a></emu-xref>).</li></ol></li><li>Let <var>iterator</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>method</var>, <var>obj</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>iterator</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>nextMethod</var> be ?&#160;<emu-xref aoid=\"GetV\"><a href=\"#sec-getv\">GetV</a></emu-xref>(<var>iterator</var>, <emu-val>\"next\"</emu-val>).</li><li>Let <var>iteratorRecord</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Iterator]]: <var>iterator</var>, [[NextMethod]]: <var>nextMethod</var>, [[Done]]: <emu-val>false</emu-val> }.</li><li>Return <var>iteratorRecord</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-asyncgenerator-prototype-tostringtag": {"num": "25.5.1.5", "title": "#sec-asyncgenerator-prototype-tostringtag AsyncGenerator.prototype [ @@toStringTag ]", "html": "<emu-clause id=\"sec-asyncgenerator-prototype-tostringtag\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-prototype-tostringtag\">#sec-asyncgenerator-prototype-tostringtag</span> AsyncGenerator.prototype [ @@toStringTag ]</h1>\n        <p>The initial value of the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toStringTag</a></emu-xref> property is the String value <emu-val>\"AsyncGenerator\"</emu-val>.</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n      </emu-clause>\n    "}, "sec-symbol.species": {"num": "19.4.2.12", "title": "#sec-symbol.species Symbol.species", "html": "<emu-clause id=\"sec-symbol.species\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-symbol.species\">#sec-symbol.species</span> Symbol.species</h1>\n        <p>The initial value of <code>Symbol.species</code> is the well-known symbol <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@species</a></emu-xref> (<emu-xref href=\"#table-1\"><a href=\"#table-1\" class=\"excluded-xref\" excluded-id=\"table-1\">#table-1</a></emu-xref>).</p>\n        <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>\n      </emu-clause>\n\n      "}, "sec-isconcatspreadable": {"num": "22.1.3.1.1", "title": "#sec-isconcatspreadable Runtime Semantics: IsConcatSpreadable ( O )", "html": "<emu-clause id=\"sec-isconcatspreadable\" aoid=\"IsConcatSpreadable\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isconcatspreadable\">#sec-isconcatspreadable</span> Runtime Semantics: IsConcatSpreadable ( <var>O</var> )</h1>\n          <p>The abstract operation IsConcatSpreadable takes argument <var>O</var>. It performs the following steps when called:</p>\n          <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, return <emu-val>false</emu-val>.</li><li>Let <var>spreadable</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@isConcatSpreadable</a></emu-xref>).</li><li>If <var>spreadable</var> is not <emu-val>undefined</emu-val>, return !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(<var>spreadable</var>).</li><li>Return ?&#160;<emu-xref aoid=\"IsArray\"><a href=\"#sec-isarray\">IsArray</a></emu-xref>(<var>O</var>).</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-atomics-@@tostringtag": {"num": "24.4.14", "title": "#sec-atomics-@@tostringtag Atomics [ @@toStringTag ]", "html": "<emu-clause id=\"sec-atomics-@@tostringtag\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics-@@tostringtag\">#sec-atomics-@@tostringtag</span> Atomics [ @@toStringTag ]</h1>\n      <p>The initial value of the <emu-xref href=\"#sec-well-known-symbols\"><a href=\"#sec-well-known-symbols\">@@toStringTag</a></emu-xref> property is the String value <emu-val>\"Atomics\"</emu-val>.</p>\n      <p>This property has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }.</p>\n    </emu-clause>\n  "}}, "figData": {"table-1": "Table 1", "table-the-typedarray-constructors": "Table 61"}}}