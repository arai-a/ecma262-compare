{"from": {"secList": ["sec-array.prototype.flatmap"], "secData": {"sec-array.prototype.flatmap": {"num": "22.1.3.11", "title": "#sec-array.prototype.flatmap Array.prototype.flatMap ( mapperFunction [ , thisArg ] )", "html": "<emu-clause id=\"sec-array.prototype.flatmap\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.flatmap\">#sec-array.prototype.flatmap</span> Array.prototype.flatMap ( <var>mapperFunction</var> [ , <var>thisArg</var> ] )</h1>\n        <p>When the <code>flatMap</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>sourceLen</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If !&#160;<emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>mapperFunction</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>thisArg</var> is present, let <var>T</var> be <var>thisArg</var>; else let <var>T</var> be <emu-val>undefined</emu-val>.</li><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"ArraySpeciesCreate\"><a href=\"#sec-arrayspeciescreate\">ArraySpeciesCreate</a></emu-xref>(<var>O</var>, 0).</li><li>Perform ?&#160;<emu-xref aoid=\"FlattenIntoArray\"><a href=\"#sec-flattenintoarray\">FlattenIntoArray</a></emu-xref>(<var>A</var>, <var>O</var>, <var>sourceLen</var>, 0, 1, <var>mapperFunction</var>, <var>T</var>).</li><li>Return <var>A</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-array.prototype.flatmap"], "secData": {"sec-array.prototype.flatmap": {"num": "22.1.3.11", "title": "#sec-array.prototype.flatmap Array.prototype.flatMap ( mapperFunction [ , thisArg ] )", "html": "<emu-clause id=\"sec-array.prototype.flatmap\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.flatmap\">#sec-array.prototype.flatmap</span> Array.prototype.flatMap ( <var>mapperFunction</var> [ , <var>thisArg</var> ] )</h1>\n        <p>When the <code>flatMap</code> method is called with one or two arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>sourceLen</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>If !&#160;<emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>mapperFunction</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"ArraySpeciesCreate\"><a href=\"#sec-arrayspeciescreate\">ArraySpeciesCreate</a></emu-xref>(<var>O</var>, 0).</li><li>Perform ?&#160;<emu-xref aoid=\"FlattenIntoArray\"><a href=\"#sec-flattenintoarray\">FlattenIntoArray</a></emu-xref>(<var>A</var>, <var>O</var>, <var>sourceLen</var>, 0, 1, <var>mapperFunction</var>, <var>thisArg</var>).</li><li>Return <var>A</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {}}}