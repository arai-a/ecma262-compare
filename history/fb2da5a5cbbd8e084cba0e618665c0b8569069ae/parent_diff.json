{"from": {"secList": ["sec-async-generator-function-definitions", "sec-asyncgenerator-definitions-propertydefinitionevaluation", "sec-generator-function-definitions", "sec-__proto__-property-names-in-object-initializers", "sec-async-function-definitions", "sec-object-initializer-runtime-semantics-evaluation", "sec-runtime-semantics-classdefinitionevaluation", "sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions", "sec-method-definitions-runtime-semantics-propertydefinitionevaluation", "sec-method-definitions", "sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "sec-object-initializer-runtime-semantics-propertydefinitionevaluation", "sec-object-initializer", "sec-json.parse", "sec-runtime-semantics-definemethod", "sec-async-function-definitions-PropertyDefinitionEvaluation"], "secData": {"sec-async-generator-function-definitions": {"num": "14.5", "title": "#sec-async-generator-function-definitions Async Generator Function Definitions", "html": "<emu-clause id=\"sec-async-generator-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-generator-function-definitions\">#sec-async-generator-function-definitions</span> Async Generator Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"AsyncGeneratorMethod\" params=\"Yield, Await\" id=\"prod-AsyncGeneratorMethod\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a713bc4f\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncGeneratorDeclaration\" params=\"Yield, Await, Default\" id=\"prod-AsyncGeneratorDeclaration\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bf1795ae\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"cdd34229\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncGeneratorExpression\" id=\"prod-AsyncGeneratorExpression\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ca1d1606\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"+Yield, +Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[+Yield, +Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncGeneratorBody\" id=\"prod-AsyncGeneratorBody\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cd09a4ad\"><emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p><emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> and <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> cannot be used within the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of an async generator function because any expressions that are part of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> are evaluated before the resulting async generator object is in a resumable state.</p>\n    </div></emu-note>\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p><emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">Abstract operations</a></emu-xref> relating to async generator objects are defined in <emu-xref href=\"#sec-asyncgenerator-abstract-operations\"><a href=\"#sec-asyncgenerator-abstract-operations\" class=\"excluded-xref\" excluded-id=\"sec-asyncgenerator-abstract-operations\">#sec-asyncgenerator-abstract-operations</a></emu-xref>.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-async-generator-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">14.5.1</span>#sec-async-generator-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-async-generator-function-definitions-static-semantics-boundnames\"><h1><span class=\"secnum\">14.5.2</span>#sec-async-generator-function-definitions-static-semantics-boundnames Static Semantics: BoundNames</h1>...</div><div id=\"excluded-sec-async-generator-function-definitions-static-semantics-computedpropertycontains\"><h1><span class=\"secnum\">14.5.3</span>#sec-async-generator-function-definitions-static-semantics-computedpropertycontains Static Semantics: ComputedPropertyContains</h1>...</div><div id=\"excluded-sec-async-generator-function-definitions-static-semantics-contains\"><h1><span class=\"secnum\">14.5.4</span>#sec-async-generator-function-definitions-static-semantics-contains Static Semantics: Contains</h1>...</div><div id=\"excluded-sec-async-generator-function-definitions-static-semantics-hasdirectsuper\"><h1><span class=\"secnum\">14.5.5</span>#sec-async-generator-function-definitions-static-semantics-hasdirectsuper Static Semantics: HasDirectSuper</h1>...</div><div id=\"excluded-sec-async-generator-function-definitions-static-semantics-hasname\"><h1><span class=\"secnum\">14.5.6</span>#sec-async-generator-function-definitions-static-semantics-hasname Static Semantics: HasName</h1>...</div><div id=\"excluded-sec-async-generator-function-definitions-static-semantics-isconstantdeclaration\"><h1><span class=\"secnum\">14.5.7</span>#sec-async-generator-function-definitions-static-semantics-isconstantdeclaration Static Semantics: IsConstantDeclaration</h1>...</div><div id=\"excluded-sec-async-generator-function-definitions-static-semantics-isfunctiondefinition\"><h1><span class=\"secnum\">14.5.8</span>#sec-async-generator-function-definitions-static-semantics-isfunctiondefinition Static Semantics: IsFunctionDefinition</h1>...</div><div id=\"excluded-sec-async-generator-function-definitions-static-semantics-propname\"><h1><span class=\"secnum\">14.5.9</span>#sec-async-generator-function-definitions-static-semantics-propname Static Semantics: PropName</h1>...</div><div id=\"excluded-sec-asyncgenerator-definitions-evaluatebody\"><h1><span class=\"secnum\">14.5.10</span>#sec-asyncgenerator-definitions-evaluatebody Runtime Semantics: EvaluateBody</h1>...</div><div id=\"excluded-sec-asyncgenerator-definitions-instantiatefunctionobject\"><h1><span class=\"secnum\">14.5.11</span>#sec-asyncgenerator-definitions-instantiatefunctionobject Runtime Semantics: InstantiateFunctionObject</h1>...</div><div id=\"excluded-sec-asyncgenerator-definitions-propertydefinitionevaluation\"><h1><span class=\"secnum\">14.5.12</span>#sec-asyncgenerator-definitions-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation</h1>...</div><div id=\"excluded-sec-asyncgenerator-definitions-namedevaluation\"><h1><span class=\"secnum\">14.5.13</span>#sec-asyncgenerator-definitions-namedevaluation Runtime Semantics: NamedEvaluation</h1>...</div><div id=\"excluded-sec-asyncgenerator-definitions-evaluation\"><h1><span class=\"secnum\">14.5.14</span>#sec-asyncgenerator-definitions-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-asyncgenerator-definitions-propertydefinitionevaluation": {"num": "14.5.12", "title": "#sec-asyncgenerator-definitions-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-asyncgenerator-definitions-propertydefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-definitions-propertydefinitionevaluation\">#sec-asyncgenerator-definitions-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameter <var>object</var> and <var>enumerable</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncGeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"be384400\">\n        <emu-t>async</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgeneratorfunction-prototype\"><a href=\"#sec-properties-of-asyncgeneratorfunction-prototype\">%AsyncGeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Let <var>desc</var> be PropertyDescriptor { [[Value]]: <var>closure</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-generator-function-definitions": {"num": "14.4", "title": "#sec-generator-function-definitions Generator Function Definitions", "html": "<emu-clause id=\"sec-generator-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions\">#sec-generator-function-definitions</span> Generator Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"GeneratorMethod\" params=\"Yield, Await\" id=\"prod-GeneratorMethod\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"54505152\">\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"GeneratorDeclaration\" params=\"Yield, Await, Default\" id=\"prod-GeneratorDeclaration\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e7a001a0\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"19cc4b38\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"GeneratorExpression\" id=\"prod-GeneratorExpression\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"65253812\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"+Yield, ~Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"GeneratorBody\" id=\"prod-GeneratorBody\">\n    <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"42e56a37\"><emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"YieldExpression\" params=\"In, Await\" id=\"prod-YieldExpression\">\n    <emu-nt params=\"In, Await\"><a href=\"#prod-YieldExpression\">YieldExpression</a><emu-mods><emu-params>[In, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"68b64d66\">\n        <emu-t>yield</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?In, +Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, +Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"9ab6e2ea\">\n        <emu-t>yield</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?In, +Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, +Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p>The syntactic context immediately following <code>yield</code> requires use of the <emu-nt><a href=\"#prod-InputElementRegExpOrTemplateTail\">InputElementRegExpOrTemplateTail</a></emu-nt> lexical goal.</p>\n    </div></emu-note>\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p><emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> cannot be used within the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of a generator function because any expressions that are part of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> are evaluated before the resulting generator object is in a resumable state.</p>\n    </div></emu-note>\n    <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n      <p><emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">Abstract operations</a></emu-xref> relating to generator objects are defined in <emu-xref href=\"#sec-generator-abstract-operations\"><a href=\"#sec-generator-abstract-operations\" class=\"excluded-xref\" excluded-id=\"sec-generator-abstract-operations\">#sec-generator-abstract-operations</a></emu-xref>.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-generator-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">14.4.1</span>#sec-generator-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-generator-function-definitions-static-semantics-boundnames\"><h1><span class=\"secnum\">14.4.2</span>#sec-generator-function-definitions-static-semantics-boundnames Static Semantics: BoundNames</h1>...</div><div id=\"excluded-sec-generator-function-definitions-static-semantics-computedpropertycontains\"><h1><span class=\"secnum\">14.4.3</span>#sec-generator-function-definitions-static-semantics-computedpropertycontains Static Semantics: ComputedPropertyContains</h1>...</div><div id=\"excluded-sec-generator-function-definitions-static-semantics-contains\"><h1><span class=\"secnum\">14.4.4</span>#sec-generator-function-definitions-static-semantics-contains Static Semantics: Contains</h1>...</div><div id=\"excluded-sec-generator-function-definitions-static-semantics-hasdirectsuper\"><h1><span class=\"secnum\">14.4.5</span>#sec-generator-function-definitions-static-semantics-hasdirectsuper Static Semantics: HasDirectSuper</h1>...</div><div id=\"excluded-sec-generator-function-definitions-static-semantics-hasname\"><h1><span class=\"secnum\">14.4.6</span>#sec-generator-function-definitions-static-semantics-hasname Static Semantics: HasName</h1>...</div><div id=\"excluded-sec-generator-function-definitions-static-semantics-isconstantdeclaration\"><h1><span class=\"secnum\">14.4.7</span>#sec-generator-function-definitions-static-semantics-isconstantdeclaration Static Semantics: IsConstantDeclaration</h1>...</div><div id=\"excluded-sec-generator-function-definitions-static-semantics-isfunctiondefinition\"><h1><span class=\"secnum\">14.4.8</span>#sec-generator-function-definitions-static-semantics-isfunctiondefinition Static Semantics: IsFunctionDefinition</h1>...</div><div id=\"excluded-sec-generator-function-definitions-static-semantics-propname\"><h1><span class=\"secnum\">14.4.9</span>#sec-generator-function-definitions-static-semantics-propname Static Semantics: PropName</h1>...</div><div id=\"excluded-sec-generator-function-definitions-runtime-semantics-evaluatebody\"><h1><span class=\"secnum\">14.4.10</span>#sec-generator-function-definitions-runtime-semantics-evaluatebody Runtime Semantics: EvaluateBody</h1>...</div><div id=\"excluded-sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject\"><h1><span class=\"secnum\">14.4.11</span>#sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject Runtime Semantics: InstantiateFunctionObject</h1>...</div><div id=\"excluded-sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation\"><h1><span class=\"secnum\">14.4.12</span>#sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation</h1>...</div><div id=\"excluded-sec-generator-function-definitions-runtime-semantics-namedevaluation\"><h1><span class=\"secnum\">14.4.13</span>#sec-generator-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation</h1>...</div><div id=\"excluded-sec-generator-function-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.4.14</span>#sec-generator-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-__proto__-property-names-in-object-initializers": {"num": "B.3.1", "title": "#sec-__proto__-property-names-in-object-initializers __proto__ Property Names in Object Initializers", "html": "<emu-annex id=\"sec-__proto__-property-names-in-object-initializers\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-__proto__-property-names-in-object-initializers\">#sec-__proto__-property-names-in-object-initializers</span> __proto__ Property Names in Object Initializers</h1>\n      <p>The following Early Error rule is added to those in <emu-xref href=\"#sec-object-initializer-static-semantics-early-errors\"><a href=\"#sec-object-initializer-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-object-initializer-static-semantics-early-errors\">#sec-object-initializer-static-semantics-early-errors</a></emu-xref>. This rule is <b>not</b> applied under any of the following circumstances:</p>\n      <ul>\n        <li>when <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> appears in a context where <emu-nt><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a></emu-nt> is required,</li>\n        <li>when initially parsing a <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt> or a <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>, or</li>\n        <li>when parsing text for <emu-xref href=\"#sec-json.parse\"><a href=\"#sec-json.parse\">JSON.parse</a></emu-xref>.</li>\n      </ul>\n      <emu-grammar><emu-production name=\"ObjectLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1bef8ed3\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ObjectLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8703527f\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if PropertyNameList of <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> contains any duplicate entries for <emu-val>\"__proto__\"</emu-val> and at least two of those entries were obtained from productions of the form <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2d90b76\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> returned by PropertyNameList does not include string literal property names defined as using a <emu-nt><a href=\"#prod-ComputedPropertyName\">ComputedPropertyName</a></emu-nt>.</p>\n      </div></emu-note>\n      <p>In <emu-xref href=\"#sec-object-initializer-runtime-semantics-propertydefinitionevaluation\"><a href=\"#sec-object-initializer-runtime-semantics-propertydefinitionevaluation\" class=\"excluded-xref\" excluded-id=\"sec-object-initializer-runtime-semantics-propertydefinitionevaluation\">#sec-object-initializer-runtime-semantics-propertydefinitionevaluation</a></emu-xref> the PropertyDefinitionEvaluation algorithm for the production\n        <br>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2d90b76\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <br>\n        is replaced with the following definition:</p>\n      <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2d90b76\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>If <var>propKey</var> is the String value <emu-val>\"__proto__\"</emu-val> and if IsComputedPropertyKey(<emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>) is <emu-val>false</emu-val>, then<ol><li>Let <var>isProtoSetter</var> be <emu-val>true</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>isProtoSetter</var> be <emu-val>false</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and <var>isProtoSetter</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>propValue</var> be ? NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>propKey</var>.</li></ol></li><li>Else,<ol><li>Let <var>exprValueRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValueRef</var>).</li></ol></li><li>If <var>isProtoSetter</var> is <emu-val>true</emu-val>, then<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>propValue</var>) is either Object or Null, then<ol><li>Return <var>object</var>.[[SetPrototypeOf]](<var>propValue</var>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>enumerable</var> is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>object</var> is an ordinary, extensible object with no non-configurable properties.</li><li>Return !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>propValue</var>).</li></ol></emu-alg>\n    </emu-annex>\n\n    "}, "sec-async-function-definitions": {"num": "14.7", "title": "#sec-async-function-definitions Async Function Definitions", "html": "<emu-clause id=\"sec-async-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions\">#sec-async-function-definitions</span> Async Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"AsyncFunctionDeclaration\" params=\"Yield, Await, Default\" id=\"prod-AsyncFunctionDeclaration\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f512250e\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"fef042b8\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncFunctionExpression\" id=\"prod-AsyncFunctionExpression\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c25b1d19\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"be6457e0\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncMethod\" params=\"Yield, Await\" id=\"prod-AsyncMethod\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AsyncMethod\">AsyncMethod</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a922691e\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncFunctionBody\" id=\"prod-AsyncFunctionBody\">\n    <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8ff4dc7c\"><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"AwaitExpression\" params=\"Yield\" id=\"prod-AwaitExpression\">\n    <emu-nt params=\"Yield\"><a href=\"#prod-AwaitExpression\">AwaitExpression</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c19c56e7\">\n        <emu-t>await</emu-t>\n        <emu-nt params=\"?Yield, +Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, +Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p><code>await</code> is parsed as an <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> when the <sub>[Await]</sub> parameter is present. The <sub>[Await]</sub> parameter is present in the following contexts:</p>\n      <ul>\n        <li>In an <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li>\n        <li>In the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>. <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> in this position is a Syntax error via <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref>.</li>\n      </ul>\n      <p>When <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> is the syntactic <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> and the <sub>[Await]</sub> parameter is absent, <code>await</code> is parsed as a <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\">keyword</a></emu-xref> and will be a Syntax error. When <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> is the syntactic <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>, <code>await</code> may be parsed as an identifier when the <sub>[Await]</sub> parameter is absent. This includes the following contexts:</p>\n      <ul>\n        <li>Anywhere outside of an <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> or <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li>\n        <li>In the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> of a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li>\n      </ul>\n    </div></emu-note>\n\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>Unlike <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt>, it is a Syntax Error to omit the operand of an <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt>. You must await something.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-async-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">14.7.1</span>#sec-async-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-BoundNames\"><h1><span class=\"secnum\">14.7.2</span>#sec-async-function-definitions-static-semantics-BoundNames Static Semantics: BoundNames</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-ComputedPropertyContains\"><h1><span class=\"secnum\">14.7.3</span>#sec-async-function-definitions-static-semantics-ComputedPropertyContains Static Semantics: ComputedPropertyContains</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-Contains\"><h1><span class=\"secnum\">14.7.4</span>#sec-async-function-definitions-static-semantics-Contains Static Semantics: Contains</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-HasDirectSuper\"><h1><span class=\"secnum\">14.7.5</span>#sec-async-function-definitions-static-semantics-HasDirectSuper Static Semantics: HasDirectSuper</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-HasName\"><h1><span class=\"secnum\">14.7.6</span>#sec-async-function-definitions-static-semantics-HasName Static Semantics: HasName</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-IsConstantDeclaration\"><h1><span class=\"secnum\">14.7.7</span>#sec-async-function-definitions-static-semantics-IsConstantDeclaration Static Semantics: IsConstantDeclaration</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-IsFunctionDefinition\"><h1><span class=\"secnum\">14.7.8</span>#sec-async-function-definitions-static-semantics-IsFunctionDefinition Static Semantics: IsFunctionDefinition</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-PropName\"><h1><span class=\"secnum\">14.7.9</span>#sec-async-function-definitions-static-semantics-PropName Static Semantics: PropName</h1>...</div><div id=\"excluded-sec-async-function-definitions-InstantiateFunctionObject\"><h1><span class=\"secnum\">14.7.10</span>#sec-async-function-definitions-InstantiateFunctionObject Runtime Semantics: InstantiateFunctionObject</h1>...</div><div id=\"excluded-sec-async-function-definitions-EvaluateBody\"><h1><span class=\"secnum\">14.7.11</span>#sec-async-function-definitions-EvaluateBody Runtime Semantics: EvaluateBody</h1>...</div><div id=\"excluded-sec-async-function-definitions-PropertyDefinitionEvaluation\"><h1><span class=\"secnum\">14.7.12</span>#sec-async-function-definitions-PropertyDefinitionEvaluation Runtime Semantics: PropertyDefinitionEvaluation</h1>...</div><div id=\"excluded-sec-async-function-definitions-runtime-semantics-namedevaluation\"><h1><span class=\"secnum\">14.7.13</span>#sec-async-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation</h1>...</div><div id=\"excluded-sec-async-function-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.7.14</span>#sec-async-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-object-initializer-runtime-semantics-evaluation": {"num": "12.2.6.7", "title": "#sec-object-initializer-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-object-initializer-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-initializer-runtime-semantics-evaluation\">#sec-object-initializer-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"ObjectLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"81ba5a4a\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ObjectLiteral\">\n    <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1bef8ed3\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"8703527f\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li><li>Perform ? PropertyDefinitionEvaluation of <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> with arguments <var>obj</var> and <emu-val>true</emu-val>.</li><li>Return <var>obj</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"LiteralPropertyName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LiteralPropertyName\">LiteralPropertyName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0ebb31e2\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return StringValue of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"LiteralPropertyName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LiteralPropertyName\">LiteralPropertyName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"5c74e54d\"><emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the SV of <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"LiteralPropertyName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LiteralPropertyName\">LiteralPropertyName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a548b407\"><emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>nbr</var> be the NumericValue of <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt>.</li><li>Return !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nbr</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ComputedPropertyName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ComputedPropertyName\">ComputedPropertyName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2ed5550b\">\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>exprValue</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>propName</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValue</var>).</li><li>Return ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>propName</var>).</li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-runtime-semantics-classdefinitionevaluation": {"num": "14.6.14", "title": "#sec-runtime-semantics-classdefinitionevaluation Runtime Semantics: ClassDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-classdefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-classdefinitionevaluation\">#sec-runtime-semantics-classdefinitionevaluation</span> Runtime Semantics: ClassDefinitionEvaluation</h1>\n      <p>With parameters <var>classBinding</var> and <var>className</var>.</p>\n      <emu-grammar><emu-production name=\"ClassTail\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b8ea6aa5\">\n        <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>env</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>classScope</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>env</var>).</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScope</var>.CreateImmutableBinding(<var>classBinding</var>, <emu-val>true</emu-val>).</li></ol></li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, then<ol><li>Let <var>protoParent</var> be <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else,<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>Let <var>superclassRef</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>Let <var>superclass</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>superclassRef</var>).</li><li>If <var>superclass</var> is <emu-val>null</emu-val>, then<ol><li>Let <var>protoParent</var> be <emu-val>null</emu-val>.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else if <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>superclass</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Else,<ol><li>Let <var>protoParent</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>superclass</var>, <emu-val>\"prototype\"</emu-val>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>protoParent</var>) is neither Object nor Null, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorParent</var> be <var>superclass</var>.</li></ol></li></ol></li><li>Let <var>proto</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>protoParent</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>constructor</var> be <emu-const>empty</emu-const>.</li><li>Else, let <var>constructor</var> be ConstructorMethod of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>If <var>constructor</var> is <emu-const>empty</emu-const>, then<ol><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, then<ol><li>Let <var>constructorText</var> be the source text\n              <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">constructor</span>(...args) { <span class=\"hljs-keyword\">super</span>(...args); }</code></pre></li></ol></li><li>Else,<ol><li>Let <var>constructorText</var> be the source text\n              <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">constructor</span>() {}</code></pre></li></ol></li><li>Set <var>constructor</var> to <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(<var>constructorText</var>, <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>constructor</var> is a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>.</li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>Let <var>constructorInfo</var> be ! DefineMethod of <var>constructor</var> with arguments <var>proto</var> and <var>constructorParent</var>.</li><li>Let <var>F</var> be <var>constructorInfo</var>.[[Closure]].</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>className</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>, <emu-val>false</emu-val>, <var>proto</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, set <var>F</var>.[[ConstructorKind]] to <emu-const>derived</emu-const>.</li><li>Perform <emu-xref aoid=\"MakeClassConstructor\"><a href=\"#sec-makeclassconstructor\">MakeClassConstructor</a></emu-xref>(<var>F</var>).</li><li>Perform <emu-xref aoid=\"CreateMethodProperty\"><a href=\"#sec-createmethodproperty\">CreateMethodProperty</a></emu-xref>(<var>proto</var>, <emu-val>\"constructor\"</emu-val>, <var>F</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>methods</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Else, let <var>methods</var> be NonConstructorMethodDefinitions of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>For each <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <var>m</var> of <var>methods</var>, do<ol><li>If IsStatic of <var>m</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>status</var> be PropertyDefinitionEvaluation of <var>m</var> with arguments <var>proto</var> and <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>status</var> be PropertyDefinitionEvaluation of <var>m</var> with arguments <var>F</var> and <emu-val>false</emu-val>.</li></ol></li><li>If <var>status</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>status</var>).</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScope</var>.InitializeBinding(<var>classBinding</var>, <var>F</var>).</li></ol></li><li>Return <var>F</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions": {"num": "F", "title": "#sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions Additions and Changes That Introduce Incompatibilities with Prior Editions", "html": "<emu-annex id=\"sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions\">#sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions</span> Additions and Changes That Introduce Incompatibilities with Prior Editions</h1>\n  <p><emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\" class=\"excluded-xref\" excluded-id=\"sec-reference-record-specification-type\">#sec-reference-record-specification-type</a></emu-xref>: In ECMAScript 2015, Function calls are not allowed to return a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref>.</p>\n  <p><emu-xref href=\"#sec-tonumber-applied-to-the-string-type\"><a href=\"#sec-tonumber-applied-to-the-string-type\" class=\"excluded-xref\" excluded-id=\"sec-tonumber-applied-to-the-string-type\">#sec-tonumber-applied-to-the-string-type</a></emu-xref>: In ECMAScript 2015, <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref> applied to a String value now recognizes and converts <emu-nt><a href=\"#prod-BinaryIntegerLiteral\">BinaryIntegerLiteral</a></emu-nt> and <emu-nt><a href=\"#prod-OctalIntegerLiteral\">OctalIntegerLiteral</a></emu-nt> numeric strings. In previous editions such strings were converted to <emu-val>NaN</emu-val>.</p>\n  <p><emu-xref href=\"#sec-code-realms\"><a href=\"#sec-code-realms\" class=\"excluded-xref\" excluded-id=\"sec-code-realms\">#sec-code-realms</a></emu-xref>: In ECMAScript 2018, Template objects are canonicalized based on <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> (source location), instead of across all occurrences of that template literal or tagged template in a <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> in previous editions.</p>\n  <p><emu-xref href=\"#sec-white-space\"><a href=\"#sec-white-space\" class=\"excluded-xref\" excluded-id=\"sec-white-space\">#sec-white-space</a></emu-xref>: In ECMASCript 2016, Unicode 8.0.0 or higher is mandated, as opposed to ECMAScript 2015 which mandated Unicode 5.1. In particular, this caused U+180E MONGOLIAN VOWEL SEPARATOR, which was in the <code>Space_Separator</code> (<code>Zs</code>) category and thus treated as whitespace in ECMAScript 2015, to be moved to the <code>Format</code> (<code>Cf</code>) category (as of Unicode 6.3.0). This causes whitespace-sensitive methods to behave differently. For example, <code>\"\\u180E\".trim().length</code> was <code>0</code> in previous editions, but <code>1</code> in ECMAScript 2016 and later. Additionally, ECMAScript 2017 mandated always using the latest version of the Unicode standard.</p>\n  <p><emu-xref href=\"#sec-names-and-keywords\"><a href=\"#sec-names-and-keywords\" class=\"excluded-xref\" excluded-id=\"sec-names-and-keywords\">#sec-names-and-keywords</a></emu-xref>: In ECMAScript 2015, the valid code points for an <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> are specified in terms of the Unicode properties &#8220;ID_Start&#8221; and &#8220;ID_Continue&#8221;. In previous editions, the valid <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> or <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> code points were specified by enumerating various Unicode code point categories.</p>\n  <p><emu-xref href=\"#sec-rules-of-automatic-semicolon-insertion\"><a href=\"#sec-rules-of-automatic-semicolon-insertion\" class=\"excluded-xref\" excluded-id=\"sec-rules-of-automatic-semicolon-insertion\">#sec-rules-of-automatic-semicolon-insertion</a></emu-xref>: In ECMAScript 2015, Automatic Semicolon Insertion adds a semicolon at the end of a do-while statement if the semicolon is missing. This change aligns the specification with the actual behaviour of most existing implementations.</p>\n  <p><emu-xref href=\"#sec-object-initializer-static-semantics-early-errors\"><a href=\"#sec-object-initializer-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-object-initializer-static-semantics-early-errors\">#sec-object-initializer-static-semantics-early-errors</a></emu-xref>: In ECMAScript 2015, it is no longer an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> to have duplicate property names in Object Initializers.</p>\n  <p><emu-xref href=\"#sec-assignment-operators-static-semantics-early-errors\"><a href=\"#sec-assignment-operators-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-assignment-operators-static-semantics-early-errors\">#sec-assignment-operators-static-semantics-early-errors</a></emu-xref>: In ECMAScript 2015, <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> containing an assignment to an immutable binding such as the function name of a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> does not produce an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref>. Instead it produces a runtime error.</p>\n  <p><emu-xref href=\"#sec-block\"><a href=\"#sec-block\" class=\"excluded-xref\" excluded-id=\"sec-block\">#sec-block</a></emu-xref>: In ECMAScript 2015, a <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> beginning with the token let followed by the input elements <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> then <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> is the start of a <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>. In previous editions, automatic semicolon insertion would always insert a semicolon before the <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> input element.</p>\n  <p><emu-xref href=\"#sec-expression-statement\"><a href=\"#sec-expression-statement\" class=\"excluded-xref\" excluded-id=\"sec-expression-statement\">#sec-expression-statement</a></emu-xref>: In ECMAScript 2015, a <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> beginning with the token <code>let</code> followed by the token <code>[</code> is the start of a <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>. In previous editions such a sequence would be the start of an <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt>.</p>\n  <p><emu-xref href=\"#sec-if-statement-runtime-semantics-evaluation\"><a href=\"#sec-if-statement-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-if-statement-runtime-semantics-evaluation\">#sec-if-statement-runtime-semantics-evaluation</a></emu-xref>: In ECMAScript 2015, the normal completion value of an <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If no <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part is evaluated or if the evaluated <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part produces a normal completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> is <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>: In ECMAScript 2015, if the <code>(</code> token of a for statement is immediately followed by the token sequence <code>let [</code> then the <code>let</code> is treated as the start of a <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>. In previous editions such a token sequence would be the start of an <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</p>\n  <p><emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>: In ECMAScript 2015, if the ( token of a for-in statement is immediately followed by the token sequence <code>let [</code> then the <code>let</code> is treated as the start of a <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>. In previous editions such a token sequence would be the start of an <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</p>\n  <p><emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>: Prior to ECMAScript 2015, an initialization expression could appear as part of the <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> that precedes the <code>in</code> <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\">keyword</a></emu-xref>. In ECMAScript 2015, the <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> in that same position does not allow the occurrence of such an initializer. In ECMAScript 2017, such an initializer is permitted only in <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>.</p>\n  <p><emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>: In ECMAScript 2015, the completion value of an <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If the <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part of an <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> is not evaluated or if the final evaluation of the <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part produces a completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> is <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-with-statement-runtime-semantics-evaluation\"><a href=\"#sec-with-statement-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-with-statement-runtime-semantics-evaluation\">#sec-with-statement-runtime-semantics-evaluation</a></emu-xref>: In ECMAScript 2015, the normal completion value of a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If evaluation of the <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part of a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> produces a normal completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> is <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-switch-statement-runtime-semantics-evaluation\"><a href=\"#sec-switch-statement-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-switch-statement-runtime-semantics-evaluation\">#sec-switch-statement-runtime-semantics-evaluation</a></emu-xref>: In ECMAScript 2015, the completion value of a <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If the <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> part of a <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> produces a completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> is <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-try-statement\"><a href=\"#sec-try-statement\" class=\"excluded-xref\" excluded-id=\"sec-try-statement\">#sec-try-statement</a></emu-xref>: In ECMAScript 2015, it is an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> for a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause to contain a <code>var</code> declaration for the same <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> that appears as the <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause parameter. In previous editions, such a variable declaration would be instantiated in the enclosing variable environment but the declaration's <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> value would be assigned to the <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> parameter.</p>\n  <p><emu-xref href=\"#sec-try-statement\"><a href=\"#sec-try-statement\" class=\"excluded-xref\" excluded-id=\"sec-try-statement\">#sec-try-statement</a></emu-xref>, <emu-xref href=\"#sec-evaldeclarationinstantiation\"><a href=\"#sec-evaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-evaldeclarationinstantiation\">#sec-evaldeclarationinstantiation</a></emu-xref>: In ECMAScript 2015, a runtime <emu-val>SyntaxError</emu-val> is thrown if a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause evaluates a non-strict direct <code>eval</code> whose eval code includes a <code>var</code> or <code>FunctionDeclaration</code> declaration that binds the same <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> that appears as the <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause parameter.</p>\n  <p><emu-xref href=\"#sec-try-statement-runtime-semantics-evaluation\"><a href=\"#sec-try-statement-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-try-statement-runtime-semantics-evaluation\">#sec-try-statement-runtime-semantics-evaluation</a></emu-xref>: In ECMAScript 2015, the completion value of a <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If the <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> part of a <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> evaluates to a normal completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> is <emu-val>undefined</emu-val>. If the <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> part of a <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> evaluates to a throw completion and it has a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> part that evaluates to a normal completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> is <emu-val>undefined</emu-val> if there is no <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> clause or if its <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> clause evaluates to an <emu-const>empty</emu-const> normal completion.</p>\n  <p><emu-xref href=\"#sec-method-definitions-runtime-semantics-propertydefinitionevaluation\"><a href=\"#sec-method-definitions-runtime-semantics-propertydefinitionevaluation\" class=\"excluded-xref\" excluded-id=\"sec-method-definitions-runtime-semantics-propertydefinitionevaluation\">#sec-method-definitions-runtime-semantics-propertydefinitionevaluation</a></emu-xref> In ECMAScript 2015, the function objects that are created as the values of the [[Get]] or [[Set]] attribute of accessor properties in an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> are not <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> functions and they do not have a <emu-val>\"prototype\"</emu-val> own property. In the previous edition, they were constructors and had a <emu-val>\"prototype\"</emu-val> property.</p>\n  <p><emu-xref href=\"#sec-object.freeze\"><a href=\"#sec-object.freeze\" class=\"excluded-xref\" excluded-id=\"sec-object.freeze\">#sec-object.freeze</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.freeze</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.getownpropertydescriptor\"><a href=\"#sec-object.getownpropertydescriptor\" class=\"excluded-xref\" excluded-id=\"sec-object.getownpropertydescriptor\">#sec-object.getownpropertydescriptor</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.getOwnPropertyDescriptor</code> is not an object an attempt is made to coerce the argument using <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>. If the coercion is successful the result is used in place of the original argument value. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.getownpropertynames\"><a href=\"#sec-object.getownpropertynames\" class=\"excluded-xref\" excluded-id=\"sec-object.getownpropertynames\">#sec-object.getownpropertynames</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.getOwnPropertyNames</code> is not an object an attempt is made to coerce the argument using <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>. If the coercion is successful the result is used in place of the original argument value. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.getprototypeof\"><a href=\"#sec-object.getprototypeof\" class=\"excluded-xref\" excluded-id=\"sec-object.getprototypeof\">#sec-object.getprototypeof</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.getPrototypeOf</code> is not an object an attempt is made to coerce the argument using <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>. If the coercion is successful the result is used in place of the original argument value. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.isextensible\"><a href=\"#sec-object.isextensible\" class=\"excluded-xref\" excluded-id=\"sec-object.isextensible\">#sec-object.isextensible</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.isExtensible</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.isfrozen\"><a href=\"#sec-object.isfrozen\" class=\"excluded-xref\" excluded-id=\"sec-object.isfrozen\">#sec-object.isfrozen</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.isFrozen</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.issealed\"><a href=\"#sec-object.issealed\" class=\"excluded-xref\" excluded-id=\"sec-object.issealed\">#sec-object.issealed</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.isSealed</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.keys\"><a href=\"#sec-object.keys\" class=\"excluded-xref\" excluded-id=\"sec-object.keys\">#sec-object.keys</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.keys</code> is not an object an attempt is made to coerce the argument using <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>. If the coercion is successful the result is used in place of the original argument value. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.preventextensions\"><a href=\"#sec-object.preventextensions\" class=\"excluded-xref\" excluded-id=\"sec-object.preventextensions\">#sec-object.preventextensions</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.preventExtensions</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.seal\"><a href=\"#sec-object.seal\" class=\"excluded-xref\" excluded-id=\"sec-object.seal\">#sec-object.seal</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.seal</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-function.prototype.bind\"><a href=\"#sec-function.prototype.bind\" class=\"excluded-xref\" excluded-id=\"sec-function.prototype.bind\">#sec-function.prototype.bind</a></emu-xref>: In ECMAScript 2015, the [[Prototype]] internal slot of a bound function is set to the [[GetPrototypeOf]] value of its target function. In the previous edition, [[Prototype]] was always set to <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</p>\n  <p><emu-xref href=\"#sec-function-instances-length\"><a href=\"#sec-function-instances-length\" class=\"excluded-xref\" excluded-id=\"sec-function-instances-length\">#sec-function-instances-length</a></emu-xref>: In ECMAScript 2015, the <emu-val>\"length\"</emu-val> property of function instances is configurable. In previous editions it was non-configurable.</p>\n  <p><emu-xref href=\"#sec-properties-of-the-nativeerror-constructors\"><a href=\"#sec-properties-of-the-nativeerror-constructors\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-nativeerror-constructors\">#sec-properties-of-the-nativeerror-constructors</a></emu-xref>: In ECMAScript 2015, the [[Prototype]] internal slot of a <var>NativeError</var> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is the Error <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. In previous editions it was the <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">Function prototype object</a></emu-xref>.</p>\n  <p><emu-xref href=\"#sec-properties-of-the-date-prototype-object\"><a href=\"#sec-properties-of-the-date-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-date-prototype-object\">#sec-properties-of-the-date-prototype-object</a></emu-xref> In ECMAScript 2015, the <emu-xref href=\"#sec-properties-of-the-date-prototype-object\"><a href=\"#sec-properties-of-the-date-prototype-object\">Date prototype object</a></emu-xref> is not a Date instance. In previous editions it was a Date instance whose TimeValue was <emu-val>NaN</emu-val>.</p>\n  <p><emu-xref href=\"#sec-string.prototype.localecompare\"><a href=\"#sec-string.prototype.localecompare\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.localecompare\">#sec-string.prototype.localecompare</a></emu-xref> In ECMAScript 2015, the <code>String.prototype.localeCompare</code> function must treat Strings that are canonically equivalent according to the Unicode standard as being identical. In previous editions implementations were permitted to ignore canonical equivalence and could instead use a bit-wise comparison.</p>\n  <p><emu-xref href=\"#sec-string.prototype.tolowercase\"><a href=\"#sec-string.prototype.tolowercase\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.tolowercase\">#sec-string.prototype.tolowercase</a></emu-xref> and <emu-xref href=\"#sec-string.prototype.touppercase\"><a href=\"#sec-string.prototype.touppercase\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.touppercase\">#sec-string.prototype.touppercase</a></emu-xref> In ECMAScript 2015, lowercase/upper conversion processing operates on code points. In previous editions such the conversion processing was only applied to individual code units. The only affected code points are those in the Deseret block of Unicode.</p>\n  <p><emu-xref href=\"#sec-string.prototype.trim\"><a href=\"#sec-string.prototype.trim\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.trim\">#sec-string.prototype.trim</a></emu-xref> In ECMAScript 2015, the <code>String.prototype.trim</code> method is defined to recognize white space code points that may exists outside of the Unicode BMP. However, as of Unicode 7 no such code points are defined. In previous editions such code points would not have been recognized as white space.</p>\n  <p><emu-xref href=\"#sec-regexp-pattern-flags\"><a href=\"#sec-regexp-pattern-flags\" class=\"excluded-xref\" excluded-id=\"sec-regexp-pattern-flags\">#sec-regexp-pattern-flags</a></emu-xref> In ECMAScript 2015, If the <var>pattern</var> argument is a RegExp instance and the <var>flags</var> argument is not <emu-val>undefined</emu-val>, a new RegExp instance is created just like <var>pattern</var> except that <var>pattern</var>'s flags are replaced by the argument <var>flags</var>. In previous editions a <emu-val>TypeError</emu-val> exception was thrown when <var>pattern</var> was a RegExp instance and <var>flags</var> was not <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-regexp-prototype-object\">#sec-properties-of-the-regexp-prototype-object</a></emu-xref> In ECMAScript 2015, the <emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\">RegExp prototype object</a></emu-xref> is not a RegExp instance. In previous editions it was a RegExp instance whose pattern is the empty String.</p>\n  <p><emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-regexp-prototype-object\">#sec-properties-of-the-regexp-prototype-object</a></emu-xref> In ECMAScript 2015, <emu-val>\"source\"</emu-val>, <emu-val>\"global\"</emu-val>, <emu-val>\"ignoreCase\"</emu-val>, and <emu-val>\"multiline\"</emu-val> are accessor properties defined on the <emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\">RegExp prototype object</a></emu-xref>. In previous editions they were data properties defined on RegExp instances.</p>\n  <p><emu-xref href=\"#sec-atomics.notify\"><a href=\"#sec-atomics.notify\" class=\"excluded-xref\" excluded-id=\"sec-atomics.notify\">#sec-atomics.notify</a></emu-xref>: In ECMAScript 2019, <code>Atomics.wake</code> has been renamed to <code>Atomics.notify</code> to prevent confusion with <code>Atomics.wait</code>.</p>\n  <p><emu-xref href=\"#sec-asyncfromsynciteratorcontinuation\"><a href=\"#sec-asyncfromsynciteratorcontinuation\" class=\"excluded-xref\" excluded-id=\"sec-asyncfromsynciteratorcontinuation\">#sec-asyncfromsynciteratorcontinuation</a></emu-xref>, <emu-xref href=\"#sec-asyncgeneratorresumenext\"><a href=\"#sec-asyncgeneratorresumenext\" class=\"excluded-xref\" excluded-id=\"sec-asyncgeneratorresumenext\">#sec-asyncgeneratorresumenext</a></emu-xref>: In ECMAScript 2019, the number of Jobs enqueued by <code>await</code> was reduced, which could create an observable difference in resolution order between a <code>then()</code> call and an <code>await</code> expression.</p>\n</emu-annex>\n"}, "sec-method-definitions-runtime-semantics-propertydefinitionevaluation": {"num": "14.3.8", "title": "#sec-method-definitions-runtime-semantics-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-method-definitions-runtime-semantics-propertydefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-method-definitions-runtime-semantics-propertydefinitionevaluation\">#sec-method-definitions-runtime-semantics-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n      <emu-see-also-para op=\"PropertyDefinitionEvaluation\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cb8e53e9\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>methodDef</var> be ? DefineMethod of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> with argument <var>object</var>.</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>methodDef</var>.[[Closure]], <var>methodDef</var>.[[Key]]).</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>methodDef</var>.[[Closure]], [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>methodDef</var>.[[Key]], <var>desc</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f1487956\">\n        <emu-t>get</emu-t>\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>formalParameterList</var> be an instance of the production <emu-grammar><emu-production name=\"FormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <var>formalParameterList</var>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>, <emu-val>\"get\"</emu-val>).</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Get]]: <var>closure</var>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).</li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4402354c\">\n        <emu-t>set</emu-t>\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>, <emu-val>\"set\"</emu-val>).</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Set]]: <var>closure</var>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).</li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-method-definitions": {"num": "14.3", "title": "#sec-method-definitions Method Definitions", "html": "<emu-clause id=\"sec-method-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-method-definitions\">#sec-method-definitions</span> Method Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"MethodDefinition\" params=\"Yield, Await\" id=\"prod-MethodDefinition\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"19d49312\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"b8854ce2\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"978adba9\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AsyncMethod\">AsyncMethod</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"d8d5f4bb\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"044ecd0b\">\n        <emu-t>get</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"55774850\">\n        <emu-t>set</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"PropertySetParameterList\" id=\"prod-PropertySetParameterList\">\n    <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3f4952d7\"><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n\n    <div id=\"excluded-sec-method-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">14.3.1</span>#sec-method-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-method-definitions-static-semantics-computedpropertycontains\"><h1><span class=\"secnum\">14.3.2</span>#sec-method-definitions-static-semantics-computedpropertycontains Static Semantics: ComputedPropertyContains</h1>...</div><div id=\"excluded-sec-method-definitions-static-semantics-expectedargumentcount\"><h1><span class=\"secnum\">14.3.3</span>#sec-method-definitions-static-semantics-expectedargumentcount Static Semantics: ExpectedArgumentCount</h1>...</div><div id=\"excluded-sec-method-definitions-static-semantics-hasdirectsuper\"><h1><span class=\"secnum\">14.3.4</span>#sec-method-definitions-static-semantics-hasdirectsuper Static Semantics: HasDirectSuper</h1>...</div><div id=\"excluded-sec-method-definitions-static-semantics-propname\"><h1><span class=\"secnum\">14.3.5</span>#sec-method-definitions-static-semantics-propname Static Semantics: PropName</h1>...</div><div id=\"excluded-sec-static-semantics-specialmethod\"><h1><span class=\"secnum\">14.3.6</span>#sec-static-semantics-specialmethod Static Semantics: SpecialMethod</h1>...</div><div id=\"excluded-sec-runtime-semantics-definemethod\"><h1><span class=\"secnum\">14.3.7</span>#sec-runtime-semantics-definemethod Runtime Semantics: DefineMethod</h1>...</div><div id=\"excluded-sec-method-definitions-runtime-semantics-propertydefinitionevaluation\"><h1><span class=\"secnum\">14.3.8</span>#sec-method-definitions-runtime-semantics-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation</h1>...</div></emu-clause>\n\n  "}, "sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation": {"num": "14.4.12", "title": "#sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation\">#sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n      <emu-see-also-para op=\"PropertyDefinitionEvaluation\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"GeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c5c757ac\">\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%GeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>closure</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-object-initializer-runtime-semantics-propertydefinitionevaluation": {"num": "12.2.6.8", "title": "#sec-object-initializer-runtime-semantics-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-object-initializer-runtime-semantics-propertydefinitionevaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-initializer-runtime-semantics-propertydefinitionevaluation\">#sec-object-initializer-runtime-semantics-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n        <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n        <emu-see-also-para op=\"PropertyDefinitionEvaluation\"></emu-see-also-para>\n        <emu-grammar><emu-production name=\"PropertyDefinitionList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3152d601\">\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Perform ? PropertyDefinitionEvaluation of <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.</li><li>Return the result of performing PropertyDefinitionEvaluation of <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"5bb8853e\">\n        <emu-t>...</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>exprValue</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValue</var>).</li><li>Let <var>excludedNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return ?&#160;<emu-xref aoid=\"CopyDataProperties\"><a href=\"#sec-copydataproperties\">CopyDataProperties</a></emu-xref>(<var>object</var>, <var>fromValue</var>, <var>excludedNames</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2361f19d\"><emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>propName</var> be StringValue of <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt>.</li><li>Let <var>exprValue</var> be the result of evaluating <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt>.</li><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValue</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>enumerable</var> is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>object</var> is an ordinary, extensible object with no non-configurable properties.</li><li>Return !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propName</var>, <var>propValue</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2d90b76\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>propValue</var> be ? NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>propKey</var>.</li></ol></li><li>Else,<ol><li>Let <var>exprValueRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValueRef</var>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>enumerable</var> is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>object</var> is an ordinary, extensible object with no non-configurable properties.</li><li>Return !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>propValue</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>An alternative semantics for this production is given in <emu-xref href=\"#sec-__proto__-property-names-in-object-initializers\"><a href=\"#sec-__proto__-property-names-in-object-initializers\" class=\"excluded-xref\" excluded-id=\"sec-__proto__-property-names-in-object-initializers\">#sec-__proto__-property-names-in-object-initializers</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-object-initializer": {"num": "12.2.6", "title": "#sec-object-initializer Object Initializer", "html": "<emu-clause id=\"sec-object-initializer\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-initializer\">#sec-object-initializer</span> Object Initializer</h1>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>An object initializer is an expression describing the initialization of an Object, written in a form resembling a literal. It is a list of zero or more pairs of property keys and associated values, enclosed in curly brackets. The values need not be literals; they are evaluated each time the object initializer is evaluated.</p>\n      </div></emu-note>\n      <h2>Syntax</h2>\n      <emu-grammar type=\"definition\"><emu-production name=\"ObjectLiteral\" params=\"Yield, Await\" id=\"prod-ObjectLiteral\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"81ba5a4a\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"4200417f\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"0731c59c\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"PropertyDefinitionList\" params=\"Yield, Await\" id=\"prod-PropertyDefinitionList\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9b4b46b6\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"afd4e913\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"PropertyDefinition\" params=\"Yield, Await\" id=\"prod-PropertyDefinition\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0e54a070\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-IdentifierReference\">IdentifierReference</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"68f5ac08\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverInitializedName\">CoverInitializedName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"e73ae371\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"91edbff4\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"b623b4c8\">\n        <emu-t>...</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"PropertyName\" params=\"Yield, Await\" id=\"prod-PropertyName\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e71e2304\"><emu-nt><a href=\"#prod-LiteralPropertyName\">LiteralPropertyName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5f44b65f\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ComputedPropertyName\">ComputedPropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"LiteralPropertyName\" id=\"prod-LiteralPropertyName\">\n    <emu-nt><a href=\"#prod-LiteralPropertyName\">LiteralPropertyName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0ebb31e2\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5c74e54d\"><emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"a548b407\"><emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ComputedPropertyName\" params=\"Yield, Await\" id=\"prod-ComputedPropertyName\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ComputedPropertyName\">ComputedPropertyName</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e3cff7e5\">\n        <emu-t>[</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"CoverInitializedName\" params=\"Yield, Await\" id=\"prod-CoverInitializedName\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-CoverInitializedName\">CoverInitializedName</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"85c0d9fd\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-IdentifierReference\">IdentifierReference</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"Initializer\" params=\"In, Yield, Await\" id=\"prod-Initializer\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dc616ce5\">\n        <emu-t>=</emu-t>\n        <emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p><emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is defined in <emu-xref href=\"#sec-method-definitions\"><a href=\"#sec-method-definitions\" class=\"excluded-xref\" excluded-id=\"sec-method-definitions\">#sec-method-definitions</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>In certain contexts, <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> is used as a cover grammar for a more restricted secondary grammar. The <emu-nt><a href=\"#prod-CoverInitializedName\">CoverInitializedName</a></emu-nt> production is necessary to fully cover these secondary grammars. However, use of this production results in an early Syntax Error in normal contexts where an actual <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> is expected.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-object-initializer-static-semantics-early-errors\"><h1><span class=\"secnum\">12.2.6.1</span>#sec-object-initializer-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-object-initializer-static-semantics-computedpropertycontains\"><h1><span class=\"secnum\">12.2.6.2</span>#sec-object-initializer-static-semantics-computedpropertycontains Static Semantics: ComputedPropertyContains</h1>...</div><div id=\"excluded-sec-object-initializer-static-semantics-contains\"><h1><span class=\"secnum\">12.2.6.3</span>#sec-object-initializer-static-semantics-contains Static Semantics: Contains</h1>...</div><div id=\"excluded-sec-static-semantics-iscomputedpropertykey\"><h1><span class=\"secnum\">12.2.6.4</span>#sec-static-semantics-iscomputedpropertykey Static Semantics: IsComputedPropertyKey</h1>...</div><div id=\"excluded-sec-object-initializer-static-semantics-propname\"><h1><span class=\"secnum\">12.2.6.5</span>#sec-object-initializer-static-semantics-propname Static Semantics: PropName</h1>...</div><div id=\"excluded-sec-static-semantics-propertynamelist\"><h1><span class=\"secnum\">12.2.6.6</span>#sec-static-semantics-propertynamelist Static Semantics: PropertyNameList</h1>...</div><div id=\"excluded-sec-object-initializer-runtime-semantics-evaluation\"><h1><span class=\"secnum\">12.2.6.7</span>#sec-object-initializer-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div><div id=\"excluded-sec-object-initializer-runtime-semantics-propertydefinitionevaluation\"><h1><span class=\"secnum\">12.2.6.8</span>#sec-object-initializer-runtime-semantics-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation</h1>...</div></emu-clause>\n\n    "}, "sec-json.parse": {"num": "24.5.1", "title": "#sec-json.parse JSON.parse ( text [ , reviver ] )", "html": "<emu-clause id=\"sec-json.parse\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-json.parse\">#sec-json.parse</span> JSON.parse ( <var>text</var> [ , <var>reviver</var> ] )</h1>\n      <p>The <code>parse</code> function parses a JSON text (a JSON-formatted String) and produces an ECMAScript value. The JSON format represents literals, arrays, and objects with a syntax similar to the syntax for ECMAScript literals, Array Initializers, and Object Initializers. After parsing, JSON objects are realized as ECMAScript objects. JSON arrays are realized as ECMAScript Array instances. JSON strings, numbers, booleans, and null are realized as ECMAScript Strings, Numbers, Booleans, and <emu-val>null</emu-val>.</p>\n      <p>The optional <var>reviver</var> parameter is a function that takes two parameters, <var>key</var> and <var>value</var>. It can filter and transform the results. It is called with each of the <var>key</var>/<var>value</var> pairs produced by the parse, and its return value is used instead of the original value. If it returns what it received, the structure is not modified. If it returns <emu-val>undefined</emu-val> then the property is deleted from the result.</p>\n      <emu-alg><ol><li>Let <var>jsonString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>text</var>).</li><li id=\"step-json-parse-validate\">Parse !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>jsonString</var>) as a JSON text as specified in ECMA-404. Throw a <emu-val>SyntaxError</emu-val> exception if it is not a valid JSON text as defined in that specification.</li><li>Let <var>scriptString</var> be the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <emu-val>\"(\"</emu-val>, <var>jsonString</var>, and <emu-val>\");\"</emu-val>.</li><li>Let <var>script</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(! <emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>scriptString</var>), <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>script</var> is a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>.</li><li>Let <var>completion</var> be the result of evaluating <var>script</var>. The extended PropertyDefinitionEvaluation semantics defined in <emu-xref href=\"#sec-__proto__-property-names-in-object-initializers\"><a href=\"#sec-__proto__-property-names-in-object-initializers\" class=\"excluded-xref\" excluded-id=\"sec-__proto__-property-names-in-object-initializers\">#sec-__proto__-property-names-in-object-initializers</a></emu-xref> must not be used during the evaluation.</li><li>Let <var>unfiltered</var> be <var>completion</var>.[[Value]].</li><li id=\"step-json-parse-assert-type\"><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>unfiltered</var> is either a String, Number, Boolean, Null, or an Object that is defined by either an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt> or an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt>.</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>reviver</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>root</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li><li>Let <var>rootName</var> be the empty String.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>root</var>, <var>rootName</var>, <var>unfiltered</var>).</li><li>Return ?&#160;<emu-xref aoid=\"InternalizeJSONProperty\"><a href=\"#sec-internalizejsonproperty\">InternalizeJSONProperty</a></emu-xref>(<var>root</var>, <var>rootName</var>, <var>reviver</var>).</li></ol></li><li>Else,<ol><li>Return <var>unfiltered</var>.</li></ol></li></ol></emu-alg>\n      <p>The <emu-val>\"length\"</emu-val> property of the <code>parse</code> function is <emu-val>2</emu-val><sub>&#120125;</sub>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Valid JSON text is a subset of the ECMAScript <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt> syntax. Step <emu-xref href=\"#step-json-parse-validate\"><a href=\"#step-json-parse-validate\" class=\"excluded-xref\" excluded-id=\"step-json-parse-validate\">#step-json-parse-validate</a></emu-xref> verifies that <var>jsonString</var> conforms to that subset, and step <emu-xref href=\"#step-json-parse-assert-type\"><a href=\"#step-json-parse-assert-type\" class=\"excluded-xref\" excluded-id=\"step-json-parse-assert-type\">#step-json-parse-assert-type</a></emu-xref> asserts that that parsing and evaluation returns a value of an appropriate type.</p>\n        <p>However, because <emu-xref href=\"#sec-__proto__-property-names-in-object-initializers\"><a href=\"#sec-__proto__-property-names-in-object-initializers\" class=\"excluded-xref\" excluded-id=\"sec-__proto__-property-names-in-object-initializers\">#sec-__proto__-property-names-in-object-initializers</a></emu-xref> applies when evaluating ECMAScript source text and does not apply during <code>JSON.parse</code>, the same source text can produce different results when evaluated as a <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt> rather than as JSON. Furthermore, the Early Error for duplicate <emu-val>\"__proto__\"</emu-val> properties in object literals, which likewise does not apply during <code>JSON.parse</code>, means that not all texts accepted by <code>JSON.parse</code> are valid as a <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt>, despite matching the grammar.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-internalizejsonproperty\"><h1><span class=\"secnum\">24.5.1.1</span>#sec-internalizejsonproperty InternalizeJSONProperty ( holder, name, reviver )</h1>...</div></emu-clause>\n\n    "}, "sec-runtime-semantics-definemethod": {"num": "14.3.7", "title": "#sec-runtime-semantics-definemethod Runtime Semantics: DefineMethod", "html": "<emu-clause id=\"sec-runtime-semantics-definemethod\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-definemethod\">#sec-runtime-semantics-definemethod</span> Runtime Semantics: DefineMethod</h1>\n      <p>With parameter <var>object</var> and optional parameter <var>functionPrototype</var>.</p>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cb8e53e9\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>If <var>functionPrototype</var> is present, then<ol><li>Let <var>prototype</var> be <var>functionPrototype</var>.</li></ol></li><li>Else,<ol><li>Let <var>prototype</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<var>prototype</var>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]]: <var>propKey</var>, [[Closure]]: <var>closure</var> }.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-async-function-definitions-PropertyDefinitionEvaluation": {"num": "14.7.12", "title": "#sec-async-function-definitions-PropertyDefinitionEvaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-async-function-definitions-PropertyDefinitionEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-PropertyDefinitionEvaluation\">#sec-async-function-definitions-PropertyDefinitionEvaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"759e5682\">\n        <emu-t>async</emu-t>\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>closure</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).</li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {}}, "to": {"secList": ["sec-async-generator-function-definitions", "sec-generator-function-definitions", "sec-__proto__-property-names-in-object-initializers", "sec-async-function-definitions", "sec-object-initializer-runtime-semantics-evaluation", "sec-runtime-semantics-classdefinitionevaluation", "sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions", "sec-method-definitions", "sec-runtime-semantics-propertydefinitionevaluation", "sec-object-initializer", "sec-json.parse", "sec-runtime-semantics-definemethod"], "secData": {"sec-async-generator-function-definitions": {"num": "14.5", "title": "#sec-async-generator-function-definitions Async Generator Function Definitions", "html": "<emu-clause id=\"sec-async-generator-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-generator-function-definitions\">#sec-async-generator-function-definitions</span> Async Generator Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"AsyncGeneratorMethod\" params=\"Yield, Await\" id=\"prod-AsyncGeneratorMethod\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a713bc4f\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncGeneratorDeclaration\" params=\"Yield, Await, Default\" id=\"prod-AsyncGeneratorDeclaration\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"bf1795ae\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"cdd34229\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncGeneratorExpression\" id=\"prod-AsyncGeneratorExpression\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"ca1d1606\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"+Yield, +Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[+Yield, +Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncGeneratorBody\" id=\"prod-AsyncGeneratorBody\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cd09a4ad\"><emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p><emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> and <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> cannot be used within the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of an async generator function because any expressions that are part of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> are evaluated before the resulting async generator object is in a resumable state.</p>\n    </div></emu-note>\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p><emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">Abstract operations</a></emu-xref> relating to async generator objects are defined in <emu-xref href=\"#sec-asyncgenerator-abstract-operations\"><a href=\"#sec-asyncgenerator-abstract-operations\" class=\"excluded-xref\" excluded-id=\"sec-asyncgenerator-abstract-operations\">#sec-asyncgenerator-abstract-operations</a></emu-xref>.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-async-generator-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">14.5.1</span>#sec-async-generator-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-async-generator-function-definitions-static-semantics-boundnames\"><h1><span class=\"secnum\">14.5.2</span>#sec-async-generator-function-definitions-static-semantics-boundnames Static Semantics: BoundNames</h1>...</div><div id=\"excluded-sec-async-generator-function-definitions-static-semantics-computedpropertycontains\"><h1><span class=\"secnum\">14.5.3</span>#sec-async-generator-function-definitions-static-semantics-computedpropertycontains Static Semantics: ComputedPropertyContains</h1>...</div><div id=\"excluded-sec-async-generator-function-definitions-static-semantics-contains\"><h1><span class=\"secnum\">14.5.4</span>#sec-async-generator-function-definitions-static-semantics-contains Static Semantics: Contains</h1>...</div><div id=\"excluded-sec-async-generator-function-definitions-static-semantics-hasdirectsuper\"><h1><span class=\"secnum\">14.5.5</span>#sec-async-generator-function-definitions-static-semantics-hasdirectsuper Static Semantics: HasDirectSuper</h1>...</div><div id=\"excluded-sec-async-generator-function-definitions-static-semantics-hasname\"><h1><span class=\"secnum\">14.5.6</span>#sec-async-generator-function-definitions-static-semantics-hasname Static Semantics: HasName</h1>...</div><div id=\"excluded-sec-async-generator-function-definitions-static-semantics-isconstantdeclaration\"><h1><span class=\"secnum\">14.5.7</span>#sec-async-generator-function-definitions-static-semantics-isconstantdeclaration Static Semantics: IsConstantDeclaration</h1>...</div><div id=\"excluded-sec-async-generator-function-definitions-static-semantics-isfunctiondefinition\"><h1><span class=\"secnum\">14.5.8</span>#sec-async-generator-function-definitions-static-semantics-isfunctiondefinition Static Semantics: IsFunctionDefinition</h1>...</div><div id=\"excluded-sec-async-generator-function-definitions-static-semantics-propname\"><h1><span class=\"secnum\">14.5.9</span>#sec-async-generator-function-definitions-static-semantics-propname Static Semantics: PropName</h1>...</div><div id=\"excluded-sec-asyncgenerator-definitions-evaluatebody\"><h1><span class=\"secnum\">14.5.10</span>#sec-asyncgenerator-definitions-evaluatebody Runtime Semantics: EvaluateBody</h1>...</div><div id=\"excluded-sec-asyncgenerator-definitions-instantiatefunctionobject\"><h1><span class=\"secnum\">14.5.11</span>#sec-asyncgenerator-definitions-instantiatefunctionobject Runtime Semantics: InstantiateFunctionObject</h1>...</div><div id=\"excluded-sec-asyncgenerator-definitions-namedevaluation\"><h1><span class=\"secnum\">14.5.12</span>#sec-asyncgenerator-definitions-namedevaluation Runtime Semantics: NamedEvaluation</h1>...</div><div id=\"excluded-sec-asyncgenerator-definitions-evaluation\"><h1><span class=\"secnum\">14.5.13</span>#sec-asyncgenerator-definitions-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-generator-function-definitions": {"num": "14.4", "title": "#sec-generator-function-definitions Generator Function Definitions", "html": "<emu-clause id=\"sec-generator-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions\">#sec-generator-function-definitions</span> Generator Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"GeneratorMethod\" params=\"Yield, Await\" id=\"prod-GeneratorMethod\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"54505152\">\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"GeneratorDeclaration\" params=\"Yield, Await, Default\" id=\"prod-GeneratorDeclaration\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e7a001a0\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"19cc4b38\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"GeneratorExpression\" id=\"prod-GeneratorExpression\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"65253812\">\n        <emu-t>function</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"+Yield, ~Await\" optional=\"\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"GeneratorBody\" id=\"prod-GeneratorBody\">\n    <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"42e56a37\"><emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"YieldExpression\" params=\"In, Await\" id=\"prod-YieldExpression\">\n    <emu-nt params=\"In, Await\"><a href=\"#prod-YieldExpression\">YieldExpression</a><emu-mods><emu-params>[In, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"68b64d66\">\n        <emu-t>yield</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?In, +Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, +Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"9ab6e2ea\">\n        <emu-t>yield</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>*</emu-t>\n        <emu-nt params=\"?In, +Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, +Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p>The syntactic context immediately following <code>yield</code> requires use of the <emu-nt><a href=\"#prod-InputElementRegExpOrTemplateTail\">InputElementRegExpOrTemplateTail</a></emu-nt> lexical goal.</p>\n    </div></emu-note>\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p><emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> cannot be used within the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of a generator function because any expressions that are part of <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> are evaluated before the resulting generator object is in a resumable state.</p>\n    </div></emu-note>\n    <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n      <p><emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">Abstract operations</a></emu-xref> relating to generator objects are defined in <emu-xref href=\"#sec-generator-abstract-operations\"><a href=\"#sec-generator-abstract-operations\" class=\"excluded-xref\" excluded-id=\"sec-generator-abstract-operations\">#sec-generator-abstract-operations</a></emu-xref>.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-generator-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">14.4.1</span>#sec-generator-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-generator-function-definitions-static-semantics-boundnames\"><h1><span class=\"secnum\">14.4.2</span>#sec-generator-function-definitions-static-semantics-boundnames Static Semantics: BoundNames</h1>...</div><div id=\"excluded-sec-generator-function-definitions-static-semantics-computedpropertycontains\"><h1><span class=\"secnum\">14.4.3</span>#sec-generator-function-definitions-static-semantics-computedpropertycontains Static Semantics: ComputedPropertyContains</h1>...</div><div id=\"excluded-sec-generator-function-definitions-static-semantics-contains\"><h1><span class=\"secnum\">14.4.4</span>#sec-generator-function-definitions-static-semantics-contains Static Semantics: Contains</h1>...</div><div id=\"excluded-sec-generator-function-definitions-static-semantics-hasdirectsuper\"><h1><span class=\"secnum\">14.4.5</span>#sec-generator-function-definitions-static-semantics-hasdirectsuper Static Semantics: HasDirectSuper</h1>...</div><div id=\"excluded-sec-generator-function-definitions-static-semantics-hasname\"><h1><span class=\"secnum\">14.4.6</span>#sec-generator-function-definitions-static-semantics-hasname Static Semantics: HasName</h1>...</div><div id=\"excluded-sec-generator-function-definitions-static-semantics-isconstantdeclaration\"><h1><span class=\"secnum\">14.4.7</span>#sec-generator-function-definitions-static-semantics-isconstantdeclaration Static Semantics: IsConstantDeclaration</h1>...</div><div id=\"excluded-sec-generator-function-definitions-static-semantics-isfunctiondefinition\"><h1><span class=\"secnum\">14.4.8</span>#sec-generator-function-definitions-static-semantics-isfunctiondefinition Static Semantics: IsFunctionDefinition</h1>...</div><div id=\"excluded-sec-generator-function-definitions-static-semantics-propname\"><h1><span class=\"secnum\">14.4.9</span>#sec-generator-function-definitions-static-semantics-propname Static Semantics: PropName</h1>...</div><div id=\"excluded-sec-generator-function-definitions-runtime-semantics-evaluatebody\"><h1><span class=\"secnum\">14.4.10</span>#sec-generator-function-definitions-runtime-semantics-evaluatebody Runtime Semantics: EvaluateBody</h1>...</div><div id=\"excluded-sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject\"><h1><span class=\"secnum\">14.4.11</span>#sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject Runtime Semantics: InstantiateFunctionObject</h1>...</div><div id=\"excluded-sec-generator-function-definitions-runtime-semantics-namedevaluation\"><h1><span class=\"secnum\">14.4.12</span>#sec-generator-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation</h1>...</div><div id=\"excluded-sec-generator-function-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.4.13</span>#sec-generator-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-__proto__-property-names-in-object-initializers": {"num": "B.3.1", "title": "#sec-__proto__-property-names-in-object-initializers __proto__ Property Names in Object Initializers", "html": "<emu-annex id=\"sec-__proto__-property-names-in-object-initializers\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-__proto__-property-names-in-object-initializers\">#sec-__proto__-property-names-in-object-initializers</span> __proto__ Property Names in Object Initializers</h1>\n      <p>The following Early Error rule is added to those in <emu-xref href=\"#sec-object-initializer-static-semantics-early-errors\"><a href=\"#sec-object-initializer-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-object-initializer-static-semantics-early-errors\">#sec-object-initializer-static-semantics-early-errors</a></emu-xref>. This rule is <b>not</b> applied under any of the following circumstances:</p>\n      <ul>\n        <li>when <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> appears in a context where <emu-nt><a href=\"#prod-ObjectAssignmentPattern\">ObjectAssignmentPattern</a></emu-nt> is required,</li>\n        <li>when initially parsing a <emu-nt><a href=\"#prod-CoverParenthesizedExpressionAndArrowParameterList\">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt> or a <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>, or</li>\n        <li>when parsing text for <emu-xref href=\"#sec-json.parse\"><a href=\"#sec-json.parse\">JSON.parse</a></emu-xref>.</li>\n      </ul>\n      <emu-grammar><emu-production name=\"ObjectLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1bef8ed3\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"ObjectLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8703527f\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <ul>\n        <li>\n          It is a Syntax Error if PropertyNameList of <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> contains any duplicate entries for <emu-val>\"__proto__\"</emu-val> and at least two of those entries were obtained from productions of the form <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2d90b76\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>.\n        </li>\n      </ul>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> returned by PropertyNameList does not include string literal property names defined as using a <emu-nt><a href=\"#prod-ComputedPropertyName\">ComputedPropertyName</a></emu-nt>.</p>\n      </div></emu-note>\n      <p>In <emu-xref href=\"#sec-runtime-semantics-propertydefinitionevaluation\"><a href=\"#sec-runtime-semantics-propertydefinitionevaluation\" class=\"excluded-xref\" excluded-id=\"sec-runtime-semantics-propertydefinitionevaluation\">#sec-runtime-semantics-propertydefinitionevaluation</a></emu-xref> the <emu-xref aoid=\"PropertyDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-propertydefinitionevaluation\">PropertyDefinitionEvaluation</a></emu-xref> algorithm for the production\n        <br>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2d90b76\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <br>\n        is replaced with the following definition:</p>\n      <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2d90b76\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>If <var>propKey</var> is the String value <emu-val>\"__proto__\"</emu-val> and if IsComputedPropertyKey(<emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>) is <emu-val>false</emu-val>, then<ol><li>Let <var>isProtoSetter</var> be <emu-val>true</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>isProtoSetter</var> be <emu-val>false</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val> and <var>isProtoSetter</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>propValue</var> be ? NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>propKey</var>.</li></ol></li><li>Else,<ol><li>Let <var>exprValueRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValueRef</var>).</li></ol></li><li>If <var>isProtoSetter</var> is <emu-val>true</emu-val>, then<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>propValue</var>) is either Object or Null, then<ol><li>Return <var>object</var>.[[SetPrototypeOf]](<var>propValue</var>).</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>enumerable</var> is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>object</var> is an ordinary, extensible object with no non-configurable properties.</li><li>Return !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>propValue</var>).</li></ol></emu-alg>\n    </emu-annex>\n\n    "}, "sec-async-function-definitions": {"num": "14.7", "title": "#sec-async-function-definitions Async Function Definitions", "html": "<emu-clause id=\"sec-async-function-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions\">#sec-async-function-definitions</span> Async Function Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"AsyncFunctionDeclaration\" params=\"Yield, Await, Default\" id=\"prod-AsyncFunctionDeclaration\">\n    <emu-nt params=\"Yield, Await, Default\"><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a><emu-mods><emu-params>[Yield, Await, Default]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f512250e\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"fef042b8\" constraints=\"+Default\"><emu-constraints>[+Default]</emu-constraints>\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncFunctionExpression\" id=\"prod-AsyncFunctionExpression\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c25b1d19\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"be6457e0\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-t>function</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncMethod\" params=\"Yield, Await\" id=\"prod-AsyncMethod\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-AsyncMethod\">AsyncMethod</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a922691e\">\n        <emu-t>async</emu-t>\n        <emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"AsyncFunctionBody\" id=\"prod-AsyncFunctionBody\">\n    <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"8ff4dc7c\"><emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"AwaitExpression\" params=\"Yield\" id=\"prod-AwaitExpression\">\n    <emu-nt params=\"Yield\"><a href=\"#prod-AwaitExpression\">AwaitExpression</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c19c56e7\">\n        <emu-t>await</emu-t>\n        <emu-nt params=\"?Yield, +Await\"><a href=\"#prod-UnaryExpression\">UnaryExpression</a><emu-mods><emu-params>[?Yield, +Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p><code>await</code> is parsed as an <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> when the <sub>[Await]</sub> parameter is present. The <sub>[Await]</sub> parameter is present in the following contexts:</p>\n      <ul>\n        <li>In an <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li>\n        <li>In the <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>. <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> in this position is a Syntax error via <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref>.</li>\n      </ul>\n      <p>When <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> is the syntactic <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> and the <sub>[Await]</sub> parameter is absent, <code>await</code> is parsed as a <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\">keyword</a></emu-xref> and will be a Syntax error. When <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt> is the syntactic <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>, <code>await</code> may be parsed as an identifier when the <sub>[Await]</sub> parameter is absent. This includes the following contexts:</p>\n      <ul>\n        <li>Anywhere outside of an <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt> or <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> of an <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li>\n        <li>In the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> of a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>, or <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li>\n      </ul>\n    </div></emu-note>\n\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>Unlike <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt>, it is a Syntax Error to omit the operand of an <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt>. You must await something.</p>\n    </div></emu-note>\n\n    <div id=\"excluded-sec-async-function-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">14.7.1</span>#sec-async-function-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-BoundNames\"><h1><span class=\"secnum\">14.7.2</span>#sec-async-function-definitions-static-semantics-BoundNames Static Semantics: BoundNames</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-ComputedPropertyContains\"><h1><span class=\"secnum\">14.7.3</span>#sec-async-function-definitions-static-semantics-ComputedPropertyContains Static Semantics: ComputedPropertyContains</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-Contains\"><h1><span class=\"secnum\">14.7.4</span>#sec-async-function-definitions-static-semantics-Contains Static Semantics: Contains</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-HasDirectSuper\"><h1><span class=\"secnum\">14.7.5</span>#sec-async-function-definitions-static-semantics-HasDirectSuper Static Semantics: HasDirectSuper</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-HasName\"><h1><span class=\"secnum\">14.7.6</span>#sec-async-function-definitions-static-semantics-HasName Static Semantics: HasName</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-IsConstantDeclaration\"><h1><span class=\"secnum\">14.7.7</span>#sec-async-function-definitions-static-semantics-IsConstantDeclaration Static Semantics: IsConstantDeclaration</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-IsFunctionDefinition\"><h1><span class=\"secnum\">14.7.8</span>#sec-async-function-definitions-static-semantics-IsFunctionDefinition Static Semantics: IsFunctionDefinition</h1>...</div><div id=\"excluded-sec-async-function-definitions-static-semantics-PropName\"><h1><span class=\"secnum\">14.7.9</span>#sec-async-function-definitions-static-semantics-PropName Static Semantics: PropName</h1>...</div><div id=\"excluded-sec-async-function-definitions-InstantiateFunctionObject\"><h1><span class=\"secnum\">14.7.10</span>#sec-async-function-definitions-InstantiateFunctionObject Runtime Semantics: InstantiateFunctionObject</h1>...</div><div id=\"excluded-sec-async-function-definitions-EvaluateBody\"><h1><span class=\"secnum\">14.7.11</span>#sec-async-function-definitions-EvaluateBody Runtime Semantics: EvaluateBody</h1>...</div><div id=\"excluded-sec-async-function-definitions-runtime-semantics-namedevaluation\"><h1><span class=\"secnum\">14.7.12</span>#sec-async-function-definitions-runtime-semantics-namedevaluation Runtime Semantics: NamedEvaluation</h1>...</div><div id=\"excluded-sec-async-function-definitions-runtime-semantics-evaluation\"><h1><span class=\"secnum\">14.7.13</span>#sec-async-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div></emu-clause>\n\n  "}, "sec-object-initializer-runtime-semantics-evaluation": {"num": "12.2.6.7", "title": "#sec-object-initializer-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-object-initializer-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-initializer-runtime-semantics-evaluation\">#sec-object-initializer-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"ObjectLiteral\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"81ba5a4a\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ObjectLiteral\">\n    <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"1bef8ed3\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"8703527f\">\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li><li>Perform ? <emu-xref aoid=\"PropertyDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-propertydefinitionevaluation\">PropertyDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> with arguments <var>obj</var> and <emu-val>true</emu-val>.</li><li>Return <var>obj</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"LiteralPropertyName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LiteralPropertyName\">LiteralPropertyName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0ebb31e2\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return StringValue of <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"LiteralPropertyName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LiteralPropertyName\">LiteralPropertyName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"5c74e54d\"><emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Return the SV of <emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"LiteralPropertyName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-LiteralPropertyName\">LiteralPropertyName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"a548b407\"><emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>nbr</var> be the NumericValue of <emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt>.</li><li>Return !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nbr</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"ComputedPropertyName\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ComputedPropertyName\">ComputedPropertyName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2ed5550b\">\n        <emu-t>[</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>exprValue</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>propName</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValue</var>).</li><li>Return ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>propName</var>).</li></ol></emu-alg>\n      </emu-clause>\n      "}, "sec-runtime-semantics-classdefinitionevaluation": {"num": "14.6.14", "title": "#sec-runtime-semantics-classdefinitionevaluation Runtime Semantics: ClassDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-classdefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-classdefinitionevaluation\">#sec-runtime-semantics-classdefinitionevaluation</span> Runtime Semantics: ClassDefinitionEvaluation</h1>\n      <p>With parameters <var>classBinding</var> and <var>className</var>.</p>\n      <emu-grammar><emu-production name=\"ClassTail\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"b8ea6aa5\">\n        <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>env</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>classScope</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>env</var>).</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScope</var>.CreateImmutableBinding(<var>classBinding</var>, <emu-val>true</emu-val>).</li></ol></li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, then<ol><li>Let <var>protoParent</var> be <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else,<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>Let <var>superclassRef</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>Let <var>superclass</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>superclassRef</var>).</li><li>If <var>superclass</var> is <emu-val>null</emu-val>, then<ol><li>Let <var>protoParent</var> be <emu-val>null</emu-val>.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else if <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>superclass</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Else,<ol><li>Let <var>protoParent</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>superclass</var>, <emu-val>\"prototype\"</emu-val>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>protoParent</var>) is neither Object nor Null, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorParent</var> be <var>superclass</var>.</li></ol></li></ol></li><li>Let <var>proto</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>protoParent</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>constructor</var> be <emu-const>empty</emu-const>.</li><li>Else, let <var>constructor</var> be ConstructorMethod of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>If <var>constructor</var> is <emu-const>empty</emu-const>, then<ol><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, then<ol><li>Let <var>constructorText</var> be the source text\n              <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">constructor</span>(...args) { <span class=\"hljs-keyword\">super</span>(...args); }</code></pre></li></ol></li><li>Else,<ol><li>Let <var>constructorText</var> be the source text\n              <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">constructor</span>() {}</code></pre></li></ol></li><li>Set <var>constructor</var> to <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(<var>constructorText</var>, <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>constructor</var> is a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>.</li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>Let <var>constructorInfo</var> be ! DefineMethod of <var>constructor</var> with arguments <var>proto</var> and <var>constructorParent</var>.</li><li>Let <var>F</var> be <var>constructorInfo</var>.[[Closure]].</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>className</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>, <emu-val>false</emu-val>, <var>proto</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, set <var>F</var>.[[ConstructorKind]] to <emu-const>derived</emu-const>.</li><li>Perform <emu-xref aoid=\"MakeClassConstructor\"><a href=\"#sec-makeclassconstructor\">MakeClassConstructor</a></emu-xref>(<var>F</var>).</li><li>Perform <emu-xref aoid=\"CreateMethodProperty\"><a href=\"#sec-createmethodproperty\">CreateMethodProperty</a></emu-xref>(<var>proto</var>, <emu-val>\"constructor\"</emu-val>, <var>F</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>methods</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Else, let <var>methods</var> be NonConstructorMethodDefinitions of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>For each <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <var>m</var> of <var>methods</var>, do<ol><li>If IsStatic of <var>m</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>status</var> be <emu-xref aoid=\"PropertyDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-propertydefinitionevaluation\">PropertyDefinitionEvaluation</a></emu-xref> of <var>m</var> with arguments <var>proto</var> and <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>status</var> be <emu-xref aoid=\"PropertyDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-propertydefinitionevaluation\">PropertyDefinitionEvaluation</a></emu-xref> of <var>m</var> with arguments <var>F</var> and <emu-val>false</emu-val>.</li></ol></li><li>If <var>status</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>status</var>).</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScope</var>.InitializeBinding(<var>classBinding</var>, <var>F</var>).</li></ol></li><li>Return <var>F</var>.</li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions": {"num": "F", "title": "#sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions Additions and Changes That Introduce Incompatibilities with Prior Editions", "html": "<emu-annex id=\"sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions\">\n  <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions\">#sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions</span> Additions and Changes That Introduce Incompatibilities with Prior Editions</h1>\n  <p><emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\" class=\"excluded-xref\" excluded-id=\"sec-reference-record-specification-type\">#sec-reference-record-specification-type</a></emu-xref>: In ECMAScript 2015, Function calls are not allowed to return a <emu-xref href=\"#sec-reference-record-specification-type\"><a href=\"#sec-reference-record-specification-type\">Reference Record</a></emu-xref>.</p>\n  <p><emu-xref href=\"#sec-tonumber-applied-to-the-string-type\"><a href=\"#sec-tonumber-applied-to-the-string-type\" class=\"excluded-xref\" excluded-id=\"sec-tonumber-applied-to-the-string-type\">#sec-tonumber-applied-to-the-string-type</a></emu-xref>: In ECMAScript 2015, <emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref> applied to a String value now recognizes and converts <emu-nt><a href=\"#prod-BinaryIntegerLiteral\">BinaryIntegerLiteral</a></emu-nt> and <emu-nt><a href=\"#prod-OctalIntegerLiteral\">OctalIntegerLiteral</a></emu-nt> numeric strings. In previous editions such strings were converted to <emu-val>NaN</emu-val>.</p>\n  <p><emu-xref href=\"#sec-code-realms\"><a href=\"#sec-code-realms\" class=\"excluded-xref\" excluded-id=\"sec-code-realms\">#sec-code-realms</a></emu-xref>: In ECMAScript 2018, Template objects are canonicalized based on <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> (source location), instead of across all occurrences of that template literal or tagged template in a <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> in previous editions.</p>\n  <p><emu-xref href=\"#sec-white-space\"><a href=\"#sec-white-space\" class=\"excluded-xref\" excluded-id=\"sec-white-space\">#sec-white-space</a></emu-xref>: In ECMASCript 2016, Unicode 8.0.0 or higher is mandated, as opposed to ECMAScript 2015 which mandated Unicode 5.1. In particular, this caused U+180E MONGOLIAN VOWEL SEPARATOR, which was in the <code>Space_Separator</code> (<code>Zs</code>) category and thus treated as whitespace in ECMAScript 2015, to be moved to the <code>Format</code> (<code>Cf</code>) category (as of Unicode 6.3.0). This causes whitespace-sensitive methods to behave differently. For example, <code>\"\\u180E\".trim().length</code> was <code>0</code> in previous editions, but <code>1</code> in ECMAScript 2016 and later. Additionally, ECMAScript 2017 mandated always using the latest version of the Unicode standard.</p>\n  <p><emu-xref href=\"#sec-names-and-keywords\"><a href=\"#sec-names-and-keywords\" class=\"excluded-xref\" excluded-id=\"sec-names-and-keywords\">#sec-names-and-keywords</a></emu-xref>: In ECMAScript 2015, the valid code points for an <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> are specified in terms of the Unicode properties &#8220;ID_Start&#8221; and &#8220;ID_Continue&#8221;. In previous editions, the valid <emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt> or <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> code points were specified by enumerating various Unicode code point categories.</p>\n  <p><emu-xref href=\"#sec-rules-of-automatic-semicolon-insertion\"><a href=\"#sec-rules-of-automatic-semicolon-insertion\" class=\"excluded-xref\" excluded-id=\"sec-rules-of-automatic-semicolon-insertion\">#sec-rules-of-automatic-semicolon-insertion</a></emu-xref>: In ECMAScript 2015, Automatic Semicolon Insertion adds a semicolon at the end of a do-while statement if the semicolon is missing. This change aligns the specification with the actual behaviour of most existing implementations.</p>\n  <p><emu-xref href=\"#sec-object-initializer-static-semantics-early-errors\"><a href=\"#sec-object-initializer-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-object-initializer-static-semantics-early-errors\">#sec-object-initializer-static-semantics-early-errors</a></emu-xref>: In ECMAScript 2015, it is no longer an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> to have duplicate property names in Object Initializers.</p>\n  <p><emu-xref href=\"#sec-assignment-operators-static-semantics-early-errors\"><a href=\"#sec-assignment-operators-static-semantics-early-errors\" class=\"excluded-xref\" excluded-id=\"sec-assignment-operators-static-semantics-early-errors\">#sec-assignment-operators-static-semantics-early-errors</a></emu-xref>: In ECMAScript 2015, <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> containing an assignment to an immutable binding such as the function name of a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> does not produce an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref>. Instead it produces a runtime error.</p>\n  <p><emu-xref href=\"#sec-block\"><a href=\"#sec-block\" class=\"excluded-xref\" excluded-id=\"sec-block\">#sec-block</a></emu-xref>: In ECMAScript 2015, a <emu-nt><a href=\"#prod-StatementList\">StatementList</a></emu-nt> beginning with the token let followed by the input elements <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> then <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> is the start of a <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>. In previous editions, automatic semicolon insertion would always insert a semicolon before the <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> input element.</p>\n  <p><emu-xref href=\"#sec-expression-statement\"><a href=\"#sec-expression-statement\" class=\"excluded-xref\" excluded-id=\"sec-expression-statement\">#sec-expression-statement</a></emu-xref>: In ECMAScript 2015, a <emu-nt><a href=\"#prod-StatementListItem\">StatementListItem</a></emu-nt> beginning with the token <code>let</code> followed by the token <code>[</code> is the start of a <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>. In previous editions such a sequence would be the start of an <emu-nt><a href=\"#prod-ExpressionStatement\">ExpressionStatement</a></emu-nt>.</p>\n  <p><emu-xref href=\"#sec-if-statement-runtime-semantics-evaluation\"><a href=\"#sec-if-statement-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-if-statement-runtime-semantics-evaluation\">#sec-if-statement-runtime-semantics-evaluation</a></emu-xref>: In ECMAScript 2015, the normal completion value of an <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If no <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part is evaluated or if the evaluated <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part produces a normal completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-IfStatement\">IfStatement</a></emu-nt> is <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>: In ECMAScript 2015, if the <code>(</code> token of a for statement is immediately followed by the token sequence <code>let [</code> then the <code>let</code> is treated as the start of a <emu-nt><a href=\"#prod-LexicalDeclaration\">LexicalDeclaration</a></emu-nt>. In previous editions such a token sequence would be the start of an <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt>.</p>\n  <p><emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>: In ECMAScript 2015, if the ( token of a for-in statement is immediately followed by the token sequence <code>let [</code> then the <code>let</code> is treated as the start of a <emu-nt><a href=\"#prod-ForDeclaration\">ForDeclaration</a></emu-nt>. In previous editions such a token sequence would be the start of an <emu-nt><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a></emu-nt>.</p>\n  <p><emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>: Prior to ECMAScript 2015, an initialization expression could appear as part of the <emu-nt><a href=\"#prod-VariableDeclaration\">VariableDeclaration</a></emu-nt> that precedes the <code>in</code> <emu-xref href=\"#sec-keywords-and-reserved-words\"><a href=\"#sec-keywords-and-reserved-words\">keyword</a></emu-xref>. In ECMAScript 2015, the <emu-nt><a href=\"#prod-ForBinding\">ForBinding</a></emu-nt> in that same position does not allow the occurrence of such an initializer. In ECMAScript 2017, such an initializer is permitted only in <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>.</p>\n  <p><emu-xref href=\"#sec-iteration-statements\"><a href=\"#sec-iteration-statements\" class=\"excluded-xref\" excluded-id=\"sec-iteration-statements\">#sec-iteration-statements</a></emu-xref>: In ECMAScript 2015, the completion value of an <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If the <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part of an <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> is not evaluated or if the final evaluation of the <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part produces a completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-IterationStatement\">IterationStatement</a></emu-nt> is <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-with-statement-runtime-semantics-evaluation\"><a href=\"#sec-with-statement-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-with-statement-runtime-semantics-evaluation\">#sec-with-statement-runtime-semantics-evaluation</a></emu-xref>: In ECMAScript 2015, the normal completion value of a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If evaluation of the <emu-nt><a href=\"#prod-Statement\">Statement</a></emu-nt> part of a <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> produces a normal completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-WithStatement\">WithStatement</a></emu-nt> is <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-switch-statement-runtime-semantics-evaluation\"><a href=\"#sec-switch-statement-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-switch-statement-runtime-semantics-evaluation\">#sec-switch-statement-runtime-semantics-evaluation</a></emu-xref>: In ECMAScript 2015, the completion value of a <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If the <emu-nt><a href=\"#prod-CaseBlock\">CaseBlock</a></emu-nt> part of a <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> produces a completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-SwitchStatement\">SwitchStatement</a></emu-nt> is <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-try-statement\"><a href=\"#sec-try-statement\" class=\"excluded-xref\" excluded-id=\"sec-try-statement\">#sec-try-statement</a></emu-xref>: In ECMAScript 2015, it is an <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> for a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause to contain a <code>var</code> declaration for the same <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> that appears as the <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause parameter. In previous editions, such a variable declaration would be instantiated in the enclosing variable environment but the declaration's <emu-nt><a href=\"#prod-Initializer\">Initializer</a></emu-nt> value would be assigned to the <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> parameter.</p>\n  <p><emu-xref href=\"#sec-try-statement\"><a href=\"#sec-try-statement\" class=\"excluded-xref\" excluded-id=\"sec-try-statement\">#sec-try-statement</a></emu-xref>, <emu-xref href=\"#sec-evaldeclarationinstantiation\"><a href=\"#sec-evaldeclarationinstantiation\" class=\"excluded-xref\" excluded-id=\"sec-evaldeclarationinstantiation\">#sec-evaldeclarationinstantiation</a></emu-xref>: In ECMAScript 2015, a runtime <emu-val>SyntaxError</emu-val> is thrown if a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause evaluates a non-strict direct <code>eval</code> whose eval code includes a <code>var</code> or <code>FunctionDeclaration</code> declaration that binds the same <emu-nt><a href=\"#prod-Identifier\">Identifier</a></emu-nt> that appears as the <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> clause parameter.</p>\n  <p><emu-xref href=\"#sec-try-statement-runtime-semantics-evaluation\"><a href=\"#sec-try-statement-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-try-statement-runtime-semantics-evaluation\">#sec-try-statement-runtime-semantics-evaluation</a></emu-xref>: In ECMAScript 2015, the completion value of a <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> is never the value <emu-const>empty</emu-const>. If the <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> part of a <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> evaluates to a normal completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> is <emu-val>undefined</emu-val>. If the <emu-nt><a href=\"#prod-Block\">Block</a></emu-nt> part of a <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> evaluates to a throw completion and it has a <emu-nt><a href=\"#prod-Catch\">Catch</a></emu-nt> part that evaluates to a normal completion whose value is <emu-const>empty</emu-const>, the completion value of the <emu-nt><a href=\"#prod-TryStatement\">TryStatement</a></emu-nt> is <emu-val>undefined</emu-val> if there is no <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> clause or if its <emu-nt><a href=\"#prod-Finally\">Finally</a></emu-nt> clause evaluates to an <emu-const>empty</emu-const> normal completion.</p>\n  <p><emu-xref href=\"#sec-runtime-semantics-propertydefinitionevaluation\"><a href=\"#sec-runtime-semantics-propertydefinitionevaluation\" class=\"excluded-xref\" excluded-id=\"sec-runtime-semantics-propertydefinitionevaluation\">#sec-runtime-semantics-propertydefinitionevaluation</a></emu-xref> In ECMAScript 2015, the function objects that are created as the values of the [[Get]] or [[Set]] attribute of accessor properties in an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> are not <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> functions and they do not have a <emu-val>\"prototype\"</emu-val> own property. In the previous edition, they were constructors and had a <emu-val>\"prototype\"</emu-val> property.</p>\n  <p><emu-xref href=\"#sec-object.freeze\"><a href=\"#sec-object.freeze\" class=\"excluded-xref\" excluded-id=\"sec-object.freeze\">#sec-object.freeze</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.freeze</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.getownpropertydescriptor\"><a href=\"#sec-object.getownpropertydescriptor\" class=\"excluded-xref\" excluded-id=\"sec-object.getownpropertydescriptor\">#sec-object.getownpropertydescriptor</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.getOwnPropertyDescriptor</code> is not an object an attempt is made to coerce the argument using <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>. If the coercion is successful the result is used in place of the original argument value. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.getownpropertynames\"><a href=\"#sec-object.getownpropertynames\" class=\"excluded-xref\" excluded-id=\"sec-object.getownpropertynames\">#sec-object.getownpropertynames</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.getOwnPropertyNames</code> is not an object an attempt is made to coerce the argument using <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>. If the coercion is successful the result is used in place of the original argument value. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.getprototypeof\"><a href=\"#sec-object.getprototypeof\" class=\"excluded-xref\" excluded-id=\"sec-object.getprototypeof\">#sec-object.getprototypeof</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.getPrototypeOf</code> is not an object an attempt is made to coerce the argument using <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>. If the coercion is successful the result is used in place of the original argument value. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.isextensible\"><a href=\"#sec-object.isextensible\" class=\"excluded-xref\" excluded-id=\"sec-object.isextensible\">#sec-object.isextensible</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.isExtensible</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.isfrozen\"><a href=\"#sec-object.isfrozen\" class=\"excluded-xref\" excluded-id=\"sec-object.isfrozen\">#sec-object.isfrozen</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.isFrozen</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.issealed\"><a href=\"#sec-object.issealed\" class=\"excluded-xref\" excluded-id=\"sec-object.issealed\">#sec-object.issealed</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.isSealed</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.keys\"><a href=\"#sec-object.keys\" class=\"excluded-xref\" excluded-id=\"sec-object.keys\">#sec-object.keys</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.keys</code> is not an object an attempt is made to coerce the argument using <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>. If the coercion is successful the result is used in place of the original argument value. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.preventextensions\"><a href=\"#sec-object.preventextensions\" class=\"excluded-xref\" excluded-id=\"sec-object.preventextensions\">#sec-object.preventextensions</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.preventExtensions</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-object.seal\"><a href=\"#sec-object.seal\" class=\"excluded-xref\" excluded-id=\"sec-object.seal\">#sec-object.seal</a></emu-xref>: In ECMAScript 2015, if the argument to <code>Object.seal</code> is not an object it is treated as if it was a non-extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties. In the previous edition, a non-object argument always causes a <emu-val>TypeError</emu-val> to be thrown.</p>\n  <p><emu-xref href=\"#sec-function.prototype.bind\"><a href=\"#sec-function.prototype.bind\" class=\"excluded-xref\" excluded-id=\"sec-function.prototype.bind\">#sec-function.prototype.bind</a></emu-xref>: In ECMAScript 2015, the [[Prototype]] internal slot of a bound function is set to the [[GetPrototypeOf]] value of its target function. In the previous edition, [[Prototype]] was always set to <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</p>\n  <p><emu-xref href=\"#sec-function-instances-length\"><a href=\"#sec-function-instances-length\" class=\"excluded-xref\" excluded-id=\"sec-function-instances-length\">#sec-function-instances-length</a></emu-xref>: In ECMAScript 2015, the <emu-val>\"length\"</emu-val> property of function instances is configurable. In previous editions it was non-configurable.</p>\n  <p><emu-xref href=\"#sec-properties-of-the-nativeerror-constructors\"><a href=\"#sec-properties-of-the-nativeerror-constructors\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-nativeerror-constructors\">#sec-properties-of-the-nativeerror-constructors</a></emu-xref>: In ECMAScript 2015, the [[Prototype]] internal slot of a <var>NativeError</var> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is the Error <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. In previous editions it was the <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">Function prototype object</a></emu-xref>.</p>\n  <p><emu-xref href=\"#sec-properties-of-the-date-prototype-object\"><a href=\"#sec-properties-of-the-date-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-date-prototype-object\">#sec-properties-of-the-date-prototype-object</a></emu-xref> In ECMAScript 2015, the <emu-xref href=\"#sec-properties-of-the-date-prototype-object\"><a href=\"#sec-properties-of-the-date-prototype-object\">Date prototype object</a></emu-xref> is not a Date instance. In previous editions it was a Date instance whose TimeValue was <emu-val>NaN</emu-val>.</p>\n  <p><emu-xref href=\"#sec-string.prototype.localecompare\"><a href=\"#sec-string.prototype.localecompare\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.localecompare\">#sec-string.prototype.localecompare</a></emu-xref> In ECMAScript 2015, the <code>String.prototype.localeCompare</code> function must treat Strings that are canonically equivalent according to the Unicode standard as being identical. In previous editions implementations were permitted to ignore canonical equivalence and could instead use a bit-wise comparison.</p>\n  <p><emu-xref href=\"#sec-string.prototype.tolowercase\"><a href=\"#sec-string.prototype.tolowercase\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.tolowercase\">#sec-string.prototype.tolowercase</a></emu-xref> and <emu-xref href=\"#sec-string.prototype.touppercase\"><a href=\"#sec-string.prototype.touppercase\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.touppercase\">#sec-string.prototype.touppercase</a></emu-xref> In ECMAScript 2015, lowercase/upper conversion processing operates on code points. In previous editions such the conversion processing was only applied to individual code units. The only affected code points are those in the Deseret block of Unicode.</p>\n  <p><emu-xref href=\"#sec-string.prototype.trim\"><a href=\"#sec-string.prototype.trim\" class=\"excluded-xref\" excluded-id=\"sec-string.prototype.trim\">#sec-string.prototype.trim</a></emu-xref> In ECMAScript 2015, the <code>String.prototype.trim</code> method is defined to recognize white space code points that may exists outside of the Unicode BMP. However, as of Unicode 7 no such code points are defined. In previous editions such code points would not have been recognized as white space.</p>\n  <p><emu-xref href=\"#sec-regexp-pattern-flags\"><a href=\"#sec-regexp-pattern-flags\" class=\"excluded-xref\" excluded-id=\"sec-regexp-pattern-flags\">#sec-regexp-pattern-flags</a></emu-xref> In ECMAScript 2015, If the <var>pattern</var> argument is a RegExp instance and the <var>flags</var> argument is not <emu-val>undefined</emu-val>, a new RegExp instance is created just like <var>pattern</var> except that <var>pattern</var>'s flags are replaced by the argument <var>flags</var>. In previous editions a <emu-val>TypeError</emu-val> exception was thrown when <var>pattern</var> was a RegExp instance and <var>flags</var> was not <emu-val>undefined</emu-val>.</p>\n  <p><emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-regexp-prototype-object\">#sec-properties-of-the-regexp-prototype-object</a></emu-xref> In ECMAScript 2015, the <emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\">RegExp prototype object</a></emu-xref> is not a RegExp instance. In previous editions it was a RegExp instance whose pattern is the empty String.</p>\n  <p><emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-the-regexp-prototype-object\">#sec-properties-of-the-regexp-prototype-object</a></emu-xref> In ECMAScript 2015, <emu-val>\"source\"</emu-val>, <emu-val>\"global\"</emu-val>, <emu-val>\"ignoreCase\"</emu-val>, and <emu-val>\"multiline\"</emu-val> are accessor properties defined on the <emu-xref href=\"#sec-properties-of-the-regexp-prototype-object\"><a href=\"#sec-properties-of-the-regexp-prototype-object\">RegExp prototype object</a></emu-xref>. In previous editions they were data properties defined on RegExp instances.</p>\n  <p><emu-xref href=\"#sec-atomics.notify\"><a href=\"#sec-atomics.notify\" class=\"excluded-xref\" excluded-id=\"sec-atomics.notify\">#sec-atomics.notify</a></emu-xref>: In ECMAScript 2019, <code>Atomics.wake</code> has been renamed to <code>Atomics.notify</code> to prevent confusion with <code>Atomics.wait</code>.</p>\n  <p><emu-xref href=\"#sec-asyncfromsynciteratorcontinuation\"><a href=\"#sec-asyncfromsynciteratorcontinuation\" class=\"excluded-xref\" excluded-id=\"sec-asyncfromsynciteratorcontinuation\">#sec-asyncfromsynciteratorcontinuation</a></emu-xref>, <emu-xref href=\"#sec-asyncgeneratorresumenext\"><a href=\"#sec-asyncgeneratorresumenext\" class=\"excluded-xref\" excluded-id=\"sec-asyncgeneratorresumenext\">#sec-asyncgeneratorresumenext</a></emu-xref>: In ECMAScript 2019, the number of Jobs enqueued by <code>await</code> was reduced, which could create an observable difference in resolution order between a <code>then()</code> call and an <code>await</code> expression.</p>\n</emu-annex>\n"}, "sec-method-definitions": {"num": "14.3", "title": "#sec-method-definitions Method Definitions", "html": "<emu-clause id=\"sec-method-definitions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-method-definitions\">#sec-method-definitions</span> Method Definitions</h1>\n    <h2>Syntax</h2>\n    <emu-grammar type=\"definition\"><emu-production name=\"MethodDefinition\" params=\"Yield, Await\" id=\"prod-MethodDefinition\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"19d49312\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"b8854ce2\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"978adba9\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AsyncMethod\">AsyncMethod</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"d8d5f4bb\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"044ecd0b\">\n        <emu-t>get</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"55774850\">\n        <emu-t>set</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"PropertySetParameterList\" id=\"prod-PropertySetParameterList\">\n    <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3f4952d7\"><emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameter\">FormalParameter</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n\n    <div id=\"excluded-sec-method-definitions-static-semantics-early-errors\"><h1><span class=\"secnum\">14.3.1</span>#sec-method-definitions-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-method-definitions-static-semantics-computedpropertycontains\"><h1><span class=\"secnum\">14.3.2</span>#sec-method-definitions-static-semantics-computedpropertycontains Static Semantics: ComputedPropertyContains</h1>...</div><div id=\"excluded-sec-method-definitions-static-semantics-expectedargumentcount\"><h1><span class=\"secnum\">14.3.3</span>#sec-method-definitions-static-semantics-expectedargumentcount Static Semantics: ExpectedArgumentCount</h1>...</div><div id=\"excluded-sec-method-definitions-static-semantics-hasdirectsuper\"><h1><span class=\"secnum\">14.3.4</span>#sec-method-definitions-static-semantics-hasdirectsuper Static Semantics: HasDirectSuper</h1>...</div><div id=\"excluded-sec-method-definitions-static-semantics-propname\"><h1><span class=\"secnum\">14.3.5</span>#sec-method-definitions-static-semantics-propname Static Semantics: PropName</h1>...</div><div id=\"excluded-sec-static-semantics-specialmethod\"><h1><span class=\"secnum\">14.3.6</span>#sec-static-semantics-specialmethod Static Semantics: SpecialMethod</h1>...</div><div id=\"excluded-sec-runtime-semantics-definemethod\"><h1><span class=\"secnum\">14.3.7</span>#sec-runtime-semantics-definemethod Runtime Semantics: DefineMethod</h1>...</div></emu-clause>\n\n  "}, "sec-runtime-semantics-propertydefinitionevaluation": {"num": "12.2.6.8", "title": "#sec-runtime-semantics-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-propertydefinitionevaluation\" oldids=\"sec-object-initializer-runtime-semantics-propertydefinitionevaluation,sec-method-definitions-runtime-semantics-propertydefinitionevaluation,sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation,sec-asyncgenerator-definitions-propertydefinitionevaluation,sec-async-function-definitions-PropertyDefinitionEvaluation\" type=\"sdo\" aoid=\"PropertyDefinitionEvaluation\"><span id=\"sec-async-function-definitions-PropertyDefinitionEvaluation\"></span><span id=\"sec-asyncgenerator-definitions-propertydefinitionevaluation\"></span><span id=\"sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation\"></span><span id=\"sec-method-definitions-runtime-semantics-propertydefinitionevaluation\"></span><span id=\"sec-object-initializer-runtime-semantics-propertydefinitionevaluation\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-propertydefinitionevaluation\">#sec-runtime-semantics-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n        <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n        <emu-grammar><emu-production name=\"PropertyDefinitionList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"3152d601\">\n        <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Perform ? <emu-xref aoid=\"PropertyDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-propertydefinitionevaluation\">PropertyDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.</li><li>Return the result of performing <emu-xref aoid=\"PropertyDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-propertydefinitionevaluation\">PropertyDefinitionEvaluation</a></emu-xref> of <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"5bb8853e\">\n        <emu-t>...</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>exprValue</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>fromValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValue</var>).</li><li>Let <var>excludedNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return ?&#160;<emu-xref aoid=\"CopyDataProperties\"><a href=\"#sec-copydataproperties\">CopyDataProperties</a></emu-xref>(<var>object</var>, <var>fromValue</var>, <var>excludedNames</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"2361f19d\"><emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt></emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>propName</var> be StringValue of <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt>.</li><li>Let <var>exprValue</var> be the result of evaluating <emu-nt><a href=\"#prod-IdentifierReference\">IdentifierReference</a></emu-nt>.</li><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValue</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>enumerable</var> is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>object</var> is an ordinary, extensible object with no non-configurable properties.</li><li>Return !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propName</var>, <var>propValue</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"PropertyDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f2d90b76\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>If <emu-xref aoid=\"IsAnonymousFunctionDefinition\"><a href=\"#sec-isanonymousfunctiondefinition\">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>propValue</var> be ? NamedEvaluation of <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> with argument <var>propKey</var>.</li></ol></li><li>Else,<ol><li>Let <var>exprValueRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>propValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprValueRef</var>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>enumerable</var> is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>object</var> is an ordinary, extensible object with no non-configurable properties.</li><li>Return !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>propValue</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>An alternative semantics for this production is given in <emu-xref href=\"#sec-__proto__-property-names-in-object-initializers\"><a href=\"#sec-__proto__-property-names-in-object-initializers\" class=\"excluded-xref\" excluded-id=\"sec-__proto__-property-names-in-object-initializers\">#sec-__proto__-property-names-in-object-initializers</a></emu-xref>.</p>\n        </div></emu-note>\n        <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cb8e53e9\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>methodDef</var> be ? DefineMethod of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> with argument <var>object</var>.</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>methodDef</var>.[[Closure]], <var>methodDef</var>.[[Key]]).</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>methodDef</var>.[[Closure]], [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>methodDef</var>.[[Key]], <var>desc</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"f1487956\">\n        <emu-t>get</emu-t>\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>formalParameterList</var> be an instance of the production <emu-grammar><emu-production name=\"FormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production>\n</emu-grammar>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <var>formalParameterList</var>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>, <emu-val>\"get\"</emu-val>).</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Get]]: <var>closure</var>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"4402354c\">\n        <emu-t>set</emu-t>\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>, <emu-val>\"set\"</emu-val>).</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Set]]: <var>closure</var>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"GeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"c5c757ac\">\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%GeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-generator-prototype\"><a href=\"#sec-properties-of-generator-prototype\">%GeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>closure</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AsyncGeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"be384400\">\n        <emu-t>async</emu-t>\n        <emu-t>*</emu-t>\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgeneratorfunction-prototype\"><a href=\"#sec-properties-of-asyncgeneratorfunction-prototype\">%AsyncGeneratorFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-asyncgenerator-prototype\"><a href=\"#sec-properties-of-asyncgenerator-prototype\">%AsyncGeneratorFunction.prototype.prototype%</a></emu-xref>).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Let <var>desc</var> be PropertyDescriptor { [[Value]]: <var>closure</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).</li></ol></emu-alg>\n        <emu-grammar><emu-production name=\"AsyncMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"759e5682\">\n        <emu-t>async</emu-t>\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n        <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-async-function-prototype-properties\"><a href=\"#sec-async-function-prototype-properties\">%AsyncFunction.prototype%</a></emu-xref>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>closure</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).</li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-object-initializer": {"num": "12.2.6", "title": "#sec-object-initializer Object Initializer", "html": "<emu-clause id=\"sec-object-initializer\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object-initializer\">#sec-object-initializer</span> Object Initializer</h1>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>An object initializer is an expression describing the initialization of an Object, written in a form resembling a literal. It is a list of zero or more pairs of property keys and associated values, enclosed in curly brackets. The values need not be literals; they are evaluated each time the object initializer is evaluated.</p>\n      </div></emu-note>\n      <h2>Syntax</h2>\n      <emu-grammar type=\"definition\"><emu-production name=\"ObjectLiteral\" params=\"Yield, Await\" id=\"prod-ObjectLiteral\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"81ba5a4a\">\n        <emu-t>{</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"4200417f\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n    <emu-rhs a=\"0731c59c\">\n        <emu-t>{</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"PropertyDefinitionList\" params=\"Yield, Await\" id=\"prod-PropertyDefinitionList\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"9b4b46b6\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"afd4e913\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyDefinitionList\">PropertyDefinitionList</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>,</emu-t>\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"PropertyDefinition\" params=\"Yield, Await\" id=\"prod-PropertyDefinition\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-PropertyDefinition\">PropertyDefinition</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0e54a070\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-IdentifierReference\">IdentifierReference</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"68f5ac08\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-CoverInitializedName\">CoverInitializedName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"e73ae371\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>:</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n    <emu-rhs a=\"91edbff4\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"b623b4c8\">\n        <emu-t>...</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"PropertyName\" params=\"Yield, Await\" id=\"prod-PropertyName\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-PropertyName\">PropertyName</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e71e2304\"><emu-nt><a href=\"#prod-LiteralPropertyName\">LiteralPropertyName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5f44b65f\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ComputedPropertyName\">ComputedPropertyName</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"LiteralPropertyName\" id=\"prod-LiteralPropertyName\">\n    <emu-nt><a href=\"#prod-LiteralPropertyName\">LiteralPropertyName</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"0ebb31e2\"><emu-nt><a href=\"#prod-IdentifierName\">IdentifierName</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"5c74e54d\"><emu-nt><a href=\"#prod-StringLiteral\">StringLiteral</a></emu-nt></emu-rhs>\n    <emu-rhs a=\"a548b407\"><emu-nt><a href=\"#prod-NumericLiteral\">NumericLiteral</a></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"ComputedPropertyName\" params=\"Yield, Await\" id=\"prod-ComputedPropertyName\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-ComputedPropertyName\">ComputedPropertyName</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"e3cff7e5\">\n        <emu-t>[</emu-t>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-t>]</emu-t>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"CoverInitializedName\" params=\"Yield, Await\" id=\"prod-CoverInitializedName\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-CoverInitializedName\">CoverInitializedName</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"85c0d9fd\">\n        <emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-IdentifierReference\">IdentifierReference</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n        <emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n<emu-production name=\"Initializer\" params=\"In, Yield, Await\" id=\"prod-Initializer\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-Initializer\">Initializer</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"dc616ce5\">\n        <emu-t>=</emu-t>\n        <emu-nt params=\"?In, ?Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p><emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> is defined in <emu-xref href=\"#sec-method-definitions\"><a href=\"#sec-method-definitions\" class=\"excluded-xref\" excluded-id=\"sec-method-definitions\">#sec-method-definitions</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>In certain contexts, <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> is used as a cover grammar for a more restricted secondary grammar. The <emu-nt><a href=\"#prod-CoverInitializedName\">CoverInitializedName</a></emu-nt> production is necessary to fully cover these secondary grammars. However, use of this production results in an early Syntax Error in normal contexts where an actual <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt> is expected.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-object-initializer-static-semantics-early-errors\"><h1><span class=\"secnum\">12.2.6.1</span>#sec-object-initializer-static-semantics-early-errors Static Semantics: Early Errors</h1>...</div><div id=\"excluded-sec-object-initializer-static-semantics-computedpropertycontains\"><h1><span class=\"secnum\">12.2.6.2</span>#sec-object-initializer-static-semantics-computedpropertycontains Static Semantics: ComputedPropertyContains</h1>...</div><div id=\"excluded-sec-object-initializer-static-semantics-contains\"><h1><span class=\"secnum\">12.2.6.3</span>#sec-object-initializer-static-semantics-contains Static Semantics: Contains</h1>...</div><div id=\"excluded-sec-static-semantics-iscomputedpropertykey\"><h1><span class=\"secnum\">12.2.6.4</span>#sec-static-semantics-iscomputedpropertykey Static Semantics: IsComputedPropertyKey</h1>...</div><div id=\"excluded-sec-object-initializer-static-semantics-propname\"><h1><span class=\"secnum\">12.2.6.5</span>#sec-object-initializer-static-semantics-propname Static Semantics: PropName</h1>...</div><div id=\"excluded-sec-static-semantics-propertynamelist\"><h1><span class=\"secnum\">12.2.6.6</span>#sec-static-semantics-propertynamelist Static Semantics: PropertyNameList</h1>...</div><div id=\"excluded-sec-object-initializer-runtime-semantics-evaluation\"><h1><span class=\"secnum\">12.2.6.7</span>#sec-object-initializer-runtime-semantics-evaluation Runtime Semantics: Evaluation</h1>...</div><div id=\"excluded-sec-runtime-semantics-propertydefinitionevaluation\"><h1><span class=\"secnum\">12.2.6.8</span>#sec-runtime-semantics-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation</h1>...</div></emu-clause>\n\n    "}, "sec-json.parse": {"num": "24.5.1", "title": "#sec-json.parse JSON.parse ( text [ , reviver ] )", "html": "<emu-clause id=\"sec-json.parse\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-json.parse\">#sec-json.parse</span> JSON.parse ( <var>text</var> [ , <var>reviver</var> ] )</h1>\n      <p>The <code>parse</code> function parses a JSON text (a JSON-formatted String) and produces an ECMAScript value. The JSON format represents literals, arrays, and objects with a syntax similar to the syntax for ECMAScript literals, Array Initializers, and Object Initializers. After parsing, JSON objects are realized as ECMAScript objects. JSON arrays are realized as ECMAScript Array instances. JSON strings, numbers, booleans, and null are realized as ECMAScript Strings, Numbers, Booleans, and <emu-val>null</emu-val>.</p>\n      <p>The optional <var>reviver</var> parameter is a function that takes two parameters, <var>key</var> and <var>value</var>. It can filter and transform the results. It is called with each of the <var>key</var>/<var>value</var> pairs produced by the parse, and its return value is used instead of the original value. If it returns what it received, the structure is not modified. If it returns <emu-val>undefined</emu-val> then the property is deleted from the result.</p>\n      <emu-alg><ol><li>Let <var>jsonString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>text</var>).</li><li id=\"step-json-parse-validate\">Parse !&#160;<emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>jsonString</var>) as a JSON text as specified in ECMA-404. Throw a <emu-val>SyntaxError</emu-val> exception if it is not a valid JSON text as defined in that specification.</li><li>Let <var>scriptString</var> be the <emu-xref href=\"#string-concatenation\"><a href=\"#string-concatenation\">string-concatenation</a></emu-xref> of <emu-val>\"(\"</emu-val>, <var>jsonString</var>, and <emu-val>\");\"</emu-val>.</li><li>Let <var>script</var> be <emu-xref aoid=\"ParseText\"><a href=\"#sec-parsetext\">ParseText</a></emu-xref>(! <emu-xref aoid=\"StringToCodePoints\"><a href=\"#sec-stringtocodepoints\">StringToCodePoints</a></emu-xref>(<var>scriptString</var>), <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>script</var> is a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>.</li><li>Let <var>completion</var> be the result of evaluating <var>script</var>. The extended <emu-xref aoid=\"PropertyDefinitionEvaluation\"><a href=\"#sec-runtime-semantics-propertydefinitionevaluation\">PropertyDefinitionEvaluation</a></emu-xref> semantics defined in <emu-xref href=\"#sec-__proto__-property-names-in-object-initializers\"><a href=\"#sec-__proto__-property-names-in-object-initializers\" class=\"excluded-xref\" excluded-id=\"sec-__proto__-property-names-in-object-initializers\">#sec-__proto__-property-names-in-object-initializers</a></emu-xref> must not be used during the evaluation.</li><li>Let <var>unfiltered</var> be <var>completion</var>.[[Value]].</li><li id=\"step-json-parse-assert-type\"><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>unfiltered</var> is either a String, Number, Boolean, Null, or an Object that is defined by either an <emu-nt><a href=\"#prod-ArrayLiteral\">ArrayLiteral</a></emu-nt> or an <emu-nt><a href=\"#prod-ObjectLiteral\">ObjectLiteral</a></emu-nt>.</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>reviver</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>root</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li><li>Let <var>rootName</var> be the empty String.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>root</var>, <var>rootName</var>, <var>unfiltered</var>).</li><li>Return ?&#160;<emu-xref aoid=\"InternalizeJSONProperty\"><a href=\"#sec-internalizejsonproperty\">InternalizeJSONProperty</a></emu-xref>(<var>root</var>, <var>rootName</var>, <var>reviver</var>).</li></ol></li><li>Else,<ol><li>Return <var>unfiltered</var>.</li></ol></li></ol></emu-alg>\n      <p>The <emu-val>\"length\"</emu-val> property of the <code>parse</code> function is <emu-val>2</emu-val><sub>&#120125;</sub>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Valid JSON text is a subset of the ECMAScript <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt> syntax. Step <emu-xref href=\"#step-json-parse-validate\"><a href=\"#step-json-parse-validate\" class=\"excluded-xref\" excluded-id=\"step-json-parse-validate\">#step-json-parse-validate</a></emu-xref> verifies that <var>jsonString</var> conforms to that subset, and step <emu-xref href=\"#step-json-parse-assert-type\"><a href=\"#step-json-parse-assert-type\" class=\"excluded-xref\" excluded-id=\"step-json-parse-assert-type\">#step-json-parse-assert-type</a></emu-xref> asserts that that parsing and evaluation returns a value of an appropriate type.</p>\n        <p>However, because <emu-xref href=\"#sec-__proto__-property-names-in-object-initializers\"><a href=\"#sec-__proto__-property-names-in-object-initializers\" class=\"excluded-xref\" excluded-id=\"sec-__proto__-property-names-in-object-initializers\">#sec-__proto__-property-names-in-object-initializers</a></emu-xref> applies when evaluating ECMAScript source text and does not apply during <code>JSON.parse</code>, the same source text can produce different results when evaluated as a <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt> rather than as JSON. Furthermore, the Early Error for duplicate <emu-val>\"__proto__\"</emu-val> properties in object literals, which likewise does not apply during <code>JSON.parse</code>, means that not all texts accepted by <code>JSON.parse</code> are valid as a <emu-nt><a href=\"#prod-PrimaryExpression\">PrimaryExpression</a></emu-nt>, despite matching the grammar.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-internalizejsonproperty\"><h1><span class=\"secnum\">24.5.1.1</span>#sec-internalizejsonproperty InternalizeJSONProperty ( holder, name, reviver )</h1>...</div></emu-clause>\n\n    "}, "sec-runtime-semantics-definemethod": {"num": "14.3.7", "title": "#sec-runtime-semantics-definemethod Runtime Semantics: DefineMethod", "html": "<emu-clause id=\"sec-runtime-semantics-definemethod\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-definemethod\">#sec-runtime-semantics-definemethod</span> Runtime Semantics: DefineMethod</h1>\n      <p>With parameter <var>object</var> and optional parameter <var>functionPrototype</var>.</p>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"cb8e53e9\">\n        <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>\n        <emu-t>(</emu-t>\n        <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>\n        <emu-t>)</emu-t>\n        <emu-t>{</emu-t>\n        <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>If <var>functionPrototype</var> is present, then<ol><li>Let <var>prototype</var> be <var>functionPrototype</var>.</li></ol></li><li>Else,<ol><li>Let <var>prototype</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Let <var>sourceText</var> be the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<var>prototype</var>, <var>sourceText</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>non-lexical-this</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]]: <var>propKey</var>, [[Closure]]: <var>closure</var> }.</li></ol></emu-alg>\n    </emu-clause>\n  "}}, "figData": {}}}