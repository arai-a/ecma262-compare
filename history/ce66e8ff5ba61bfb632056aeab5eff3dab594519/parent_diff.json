{"from": {"secList": ["sec-integerindexedelementget", "sec-generatorfunction", "sec-parsefloat-string", "sec-trimstring", "sec-forward-progress", "sec-%typedarray%.prototype.set-typedarray-offset", "sec-gettemplateobject", "sec-rawbytestonumeric", "sec-dataview.prototype.getuint16", "sec-bindthisvalue", "sec-dataview.prototype.setuint16", "sec-performeval", "sec-dataview.prototype.setint32", "sec-integerindexedelementset", "sec-asyncgeneratorfunction-instances", "sec-atomicreadmodifywrite", "sec-set.prototype.entries", "sec-ecmascript-function-objects-construct-argumentslist-newtarget", "sec-function-environment-records", "sec-dataview.prototype.getint16", "sec-isunclampedintegerelementtype", "sec-function-environment-records-getthisbinding", "sec-makeclassconstructor", "sec-functionallocate", "sec-memory-model-fundamentals", "sec-stringpad", "sec-properties-of-array-iterator-instances", "sec-innermoduleevaluation", "sec-map.prototype.keys", "sec-dataview.prototype.getint8", "sec-ordinarycallbindthis", "sec-fulfillpromise", "sec-string.prototype.trimstart", "sec-string.prototype.trim", "sec-shared-memory-guidelines", "sec-createdynamicfunction", "sec-dataview.prototype.setint16", "sec-newfunctionenvironment", "sec-generatorstart", "sec-built-in-function-objects", "sec-rejectpromise", "sec-%setiteratorprototype%.next", "sec-%typedarray%.prototype.fill", "sec-%typedarray%.prototype.set-array-offset", "sec-dataview.prototype.getbiguint64", "sec-data-races", "sec-isunsignedelementtype", "sec-getmodulenamespace", "sec-moduleevaluation", "sec-isbigintelementtype", "sec-async-function-constructor-arguments", "sec-dataview.prototype.setbigint64", "sec-dataview.prototype.setfloat32", "sec-dataview.prototype.getint32", "sec-asyncgeneratorfunction", "sec-getviewvalue", "sec-object.keys", "sec-promise-executor", "sec-example-cyclic-module-record-graphs", "sec-numerictorawbytes", "sec-promisereactionjob", "sec-%typedarray%.prototype.values", "sec-setviewvalue", "sec-functioninitialize", "sec-asyncgeneratorfunctioncreate", "sec-algorithm-conventions", "sec-generatorfunctioncreate", "sec-generatorresume", "sec-object.seal", "sec-properties-of-promise-instances", "sec-getmodifysetvalueinbuffer", "sec-properties-of-set-iterator-instances", "sec-testintegritylevel", "sec-createsharedbytedatablock", "sec-generatoryield", "sec-atomicload", "sec-properties-of-asyncgenerator-intances", "sec-getvaluefrombuffer", "sec-array.prototype.values", "sec-map.prototype.values", "sec-validatesharedintegertypedarray", "sec-dataview.prototype.setuint32", "sec-array.prototype.entries", "sec-%arrayiteratorprototype%.next", "sec-object.freeze", "sec-InnerModuleLinking", "sec-dataview.prototype.getfloat32", "sec-generatorfunction-instances", "sec-dataview.prototype.getuint32", "sec-internalizejsonproperty", "sec-isnotearconfiguration", "sec-%mapiteratorprototype%.next", "sec-dataview.prototype.setbiguint64", "sec-object.issealed", "sec-moduledeclarationlinking", "sec-function-p1-p2-pn-body", "sec-%typedarray%.prototype.entries", "sec-asyncgeneratorenqueue", "sec-asyncgeneratoryield", "sec-async-functions-abstract-operations-async-function-create", "sec-runtime-semantics-classdefinitionevaluation", "sec-mathematical-operations", "sec-properties-of-generator-instances", "sec-array.prototype.keys", "sec-%typedarray%.prototype.slice", "sec-string.prototype.trimend", "sec-properties-of-map-iterator-instances", "sec-copydatablockbytes", "sec-happens-before", "sec-memory-order", "sec-typedarray-objects", "sec-%typedarray%.prototype.keys", "sec-synchronizes-with", "sec-string.prototype.padend", "sec-serializejsonobject", "sec-cyclic-module-records", "sec-dataview.prototype.setuint8", "sec-string.prototype.padstart", "sec-atomics.store", "sec-dataview.prototype.getbigint64", "sec-object.values", "sec-dataview.prototype.getfloat64", "sec-map.prototype.entries", "sec-atomics.compareexchange", "sec-setintegritylevel", "sec-performpromisethen", "sec-asyncgeneratorstart", "sec-datestring", "sec-ecmascript-function-objects-call-thisargument-argumentslist", "sec-object.isfrozen", "sec-parsemodule", "sec-dataview.prototype.getuint8", "sec-typedarray-typedarray", "sec-allocatetypedarray", "sec-function-environment-records-hasthisbinding", "sec-function-environment-records-hassuperbinding", "sec-async-function-instances", "sec-dataview.prototype.setfloat64", "sec-asyncgeneratorresumenext", "sec-promisereaction-records", "sec-generatorresumeabrupt", "sec-parseint-string-radix", "sec-date.prototype.toutcstring", "sec-object.entries", "sec-generatorvalidate", "sec-ecmascript-function-objects", "sec-dataview.prototype.setint8", "sec-functioncreate", "sec-%typedarray%.prototype.copywithin", "sec-setvalueinbuffer", "sec-set.prototype.values", "sec-enumerableownpropertynames"], "secData": {"sec-integerindexedelementget": {"num": "9.4.5.8", "title": "#sec-integerindexedelementget IntegerIndexedElementGet ( O, index )", "html": "<emu-clause id=\"sec-integerindexedelementget\" aoid=\"IntegerIndexedElementGet\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-integerindexedelementget\">#sec-integerindexedelementget</span> IntegerIndexedElementGet ( <var>O</var>, <var>index</var> )</h1>\n        <p>The abstract operation IntegerIndexedElementGet with arguments <var>O</var> and <var>index</var> performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>index</var>) is Number.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> is an Object that has [[ViewedArrayBuffer]], [[ArrayLength]], [[ByteOffset]], [[ContentType]], and [[TypedArrayName]] internal slots.</li><li>Let <var>buffer</var> be <var>O</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"IsInteger\"><a href=\"#sec-isinteger\">IsInteger</a></emu-xref>(<var>index</var>) is <emu-val>false</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <var>index</var> = <emu-val>-0</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Let <var>length</var> be <var>O</var>.[[ArrayLength]].</li><li>If <var>index</var> &lt; 0 or <var>index</var> &#8805; <var>length</var>, return <emu-val>undefined</emu-val>.</li><li>Let <var>offset</var> be <var>O</var>.[[ByteOffset]].</li><li>Let <var>arrayTypeName</var> be the String value of <var>O</var>.[[TypedArrayName]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>indexedPosition</var> be (<var>index</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Let <var>elementType</var> be the String value of the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Return <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref>(<var>buffer</var>, <var>indexedPosition</var>, <var>elementType</var>, <emu-val>true</emu-val>, <code>\"Unordered\"</code>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-generatorfunction": {"num": "25.2.1.1", "title": "#sec-generatorfunction GeneratorFunction ( p1, p2, \u2026 , pn, body )", "html": "<emu-clause id=\"sec-generatorfunction\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorfunction\">#sec-generatorfunction</span> GeneratorFunction ( <var>p1</var>, <var>p2</var>, &#8230; , <var>pn</var>, <var>body</var> )</h1>\n        <p>The last argument specifies the body (executable code) of a generator function; any preceding arguments specify formal parameters.</p>\n        <p>When the <code>GeneratorFunction</code> function is called with some arguments <var>p1</var>, <var>p2</var>, &#8230; , <var>pn</var>, <var>body</var> (where <var>n</var> might be 0, that is, there are no &#8220;<var>p</var>&#8221; arguments, and where <var>body</var> might also not be provided), the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>C</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>args</var> be the <var>argumentsList</var> that was passed to this function by [[Call]] or [[Construct]].</li><li>Return ?&#160;<emu-xref aoid=\"CreateDynamicFunction\"><a href=\"#sec-createdynamicfunction\">CreateDynamicFunction</a></emu-xref>(<var>C</var>, NewTarget, <code>\"generator\"</code>, <var>args</var>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>See NOTE for  <emu-xref href=\"#sec-function-p1-p2-pn-body\"><a href=\"#sec-function-p1-p2-pn-body\" class=\"excluded-xref\" excluded-id=\"sec-function-p1-p2-pn-body\">#sec-function-p1-p2-pn-body</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-parsefloat-string": {"num": "18.2.4", "title": "#sec-parsefloat-string parseFloat ( string )", "html": "<emu-clause id=\"sec-parsefloat-string\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-parsefloat-string\">#sec-parsefloat-string</span> parseFloat ( <var>string</var> )</h1>\n      <p>The <code>parseFloat</code> function produces a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> dictated by interpretation of the contents of the <var>string</var> argument as a decimal literal.</p>\n      <p>The <code>parseFloat</code> function is the  <dfn>%parseFloat%</dfn> intrinsic object. When the <code>parseFloat</code> function is called with one argument <var>string</var>, the following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>inputString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Let <var>trimmedString</var> be !&#160;<emu-xref aoid=\"TrimString\"><a href=\"#sec-trimstring\">TrimString</a></emu-xref>(<var>inputString</var>, <code>\"start\"</code>).</li><li>If neither <var>trimmedString</var> nor any prefix of <var>trimmedString</var> satisfies the syntax of a <emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt> (see <emu-xref href=\"#sec-tonumber-applied-to-the-string-type\"><a href=\"#sec-tonumber-applied-to-the-string-type\" class=\"excluded-xref\" excluded-id=\"sec-tonumber-applied-to-the-string-type\">#sec-tonumber-applied-to-the-string-type</a></emu-xref>), return <emu-val>NaN</emu-val>.</li><li>Let <var>numberString</var> be the longest prefix of <var>trimmedString</var>, which might be <var>trimmedString</var> itself, that satisfies the syntax of a <emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt>.</li><li>Let <var>mathFloat</var> be MV of <var>numberString</var>.</li><li>If <var>mathFloat</var> = 0<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>, then<ol><li>If the first code unit of <var>trimmedString</var> is the code unit 0x002D (HYPHEN-MINUS), return <emu-val>-0</emu-val>.</li><li>Return <emu-val>+0</emu-val>.</li></ol></li><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>mathFloat</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><code>parseFloat</code> may interpret only a leading portion of <var>string</var> as a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref>; it ignores any code units that cannot be interpreted as part of the notation of a decimal literal, and no indication is given that any such code units were ignored.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-trimstring": {"num": "21.1.3.28.1", "title": "#sec-trimstring Runtime Semantics: TrimString ( string, where )", "html": "<emu-clause id=\"sec-trimstring\" aoid=\"TrimString\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-trimstring\">#sec-trimstring</span> Runtime Semantics: TrimString ( <var>string</var>, <var>where</var> )</h1>\n          <p>The abstract operation TrimString is called with arguments <var>string</var> and <var>where</var>, and interprets the String value <var>string</var> as a sequence of UTF-16 encoded code points, as described in  <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>. It performs the following steps:</p>\n          <emu-alg><ol><li>Let <var>str</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<var>string</var>).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>str</var>).</li><li>If <var>where</var> is <code>\"start\"</code>, let <var>T</var> be the String value that is a copy of <var>S</var> with leading white space removed.</li><li>Else if <var>where</var> is <code>\"end\"</code>, let <var>T</var> be the String value that is a copy of <var>S</var> with trailing white space removed.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>where</var> is <code>\"start+end\"</code>.</li><li>Let <var>T</var> be the String value that is a copy of <var>S</var> with both leading and trailing white space removed.</li></ol></li><li>Return <var>T</var>.\n          </li></ol></emu-alg>\n          <p>The definition of white space is the union of <emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt> and <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt>. When determining whether a Unicode code point is in Unicode general category &#8220;Space_Separator&#8221; (&#8220;Zs&#8221;), code unit sequences are interpreted as UTF-16 encoded code point sequences as specified in  <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>.</p>\n        </emu-clause>\n      "}, "sec-forward-progress": {"num": "8.9", "title": "#sec-forward-progress Forward Progress", "html": "<emu-clause id=\"sec-forward-progress\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-forward-progress\">#sec-forward-progress</span> Forward Progress</h1>\n    <p>For an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> to  <em>make forward progress</em> is for it to perform an evaluation step according to this specification.</p>\n    <p>An <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> becomes  <em>blocked</em> when its <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> waits synchronously and indefinitely for an external event. Only agents whose <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>'s [[CanBlock]] property is <emu-val>true</emu-val> can become blocked in this sense.  An  <em>unblocked</em> <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is one that is not blocked.</p>\n\n    <p>Implementations must ensure that:</p>\n    <ul>\n      <li>every unblocked <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> with a dedicated <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> eventually makes forward progress</li>\n      <li>in a set of agents that share an <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref>, one <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> eventually makes forward progress</li>\n      <li>an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> does not cause another <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> to become blocked except via explicit APIs that provide blocking.</li>\n    </ul>\n\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>This, along with the liveness guarantee in the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>, ensures that all <code>\"SeqCst\"</code> writes eventually become observable to all agents.</p>\n    </div></emu-note>\n  </emu-clause>\n\n"}, "sec-%typedarray%.prototype.set-typedarray-offset": {"num": "22.2.3.23.2", "title": "#sec-%typedarray%.prototype.set-typedarray-offset %TypedArray%.prototype.set ( typedArray [ , offset ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.set-typedarray-offset\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.set-typedarray-offset\">#sec-%typedarray%.prototype.set-typedarray-offset</span> %TypedArray%.prototype.set ( <var>typedArray</var> [ , <var>offset</var> ] )</h1>\n          <p>Sets multiple values in this <var>TypedArray</var>, reading the values from the <var>typedArray</var> argument object. The optional <var>offset</var> value indicates the first element index in this <var>TypedArray</var> where values are written. If omitted, it is assumed to be 0.</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>typedArray</var> has a [[TypedArrayName]] internal slot. If it does not, the definition in <emu-xref href=\"#sec-%typedarray%.prototype.set-array-offset\"><a href=\"#sec-%typedarray%.prototype.set-array-offset\" class=\"excluded-xref\" excluded-id=\"sec-%typedarray%.prototype.set-array-offset\">#sec-%typedarray%.prototype.set-array-offset</a></emu-xref> applies.</li><li>Let <var>target</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>target</var>, [[TypedArrayName]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>target</var> has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>targetOffset</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>offset</var>).</li><li>If <var>targetOffset</var> &lt; 0, throw a <emu-val>RangeError</emu-val> exception.</li><li>Let <var>targetBuffer</var> be <var>target</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>targetBuffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>targetLength</var> be <var>target</var>.[[ArrayLength]].</li><li>Let <var>srcBuffer</var> be <var>typedArray</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>srcBuffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>targetName</var> be the String value of <var>target</var>.[[TypedArrayName]].</li><li>Let <var>targetType</var> be the String value of the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>targetName</var>.</li><li>Let <var>targetElementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>targetName</var>.</li><li>Let <var>targetByteOffset</var> be <var>target</var>.[[ByteOffset]].</li><li>Let <var>srcName</var> be the String value of <var>typedArray</var>.[[TypedArrayName]].</li><li>Let <var>srcType</var> be the String value of the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>srcName</var>.</li><li>Let <var>srcElementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>srcName</var>.</li><li>Let <var>srcLength</var> be <var>typedArray</var>.[[ArrayLength]].</li><li>Let <var>srcByteOffset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>If <var>srcLength</var> + <var>targetOffset</var> &gt; <var>targetLength</var>, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>target</var>.[[ContentType]] is not equal to <var>typedArray</var>.[[ContentType]], throw a <emu-val>TypeError</emu-val> exception.</li><li>If both <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>srcBuffer</var>) and <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>targetBuffer</var>) are <emu-val>true</emu-val>, then<ol><li>If <var>srcBuffer</var>.[[ArrayBufferData]] and <var>targetBuffer</var>.[[ArrayBufferData]] are the same <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref> values, let <var>same</var> be <emu-val>true</emu-val>; else let <var>same</var> be <emu-val>false</emu-val>.</li></ol></li><li>Else, let <var>same</var> be <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>srcBuffer</var>, <var>targetBuffer</var>).</li><li>If <var>same</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>srcByteLength</var> be <var>typedArray</var>.[[ByteLength]].</li><li>Set <var>srcBuffer</var> to ?&#160;<emu-xref aoid=\"CloneArrayBuffer\"><a href=\"#sec-clonearraybuffer\">CloneArrayBuffer</a></emu-xref>(<var>srcBuffer</var>, <var>srcByteOffset</var>, <var>srcByteLength</var>, <emu-xref href=\"#sec-arraybuffer-constructor\"><a href=\"#sec-arraybuffer-constructor\">%ArrayBuffer%</a></emu-xref>).</li><li>NOTE: <emu-xref href=\"#sec-arraybuffer-constructor\"><a href=\"#sec-arraybuffer-constructor\">%ArrayBuffer%</a></emu-xref> is used to clone <var>srcBuffer</var> because is it known to not have any observable side-effects.</li><li>Let <var>srcByteIndex</var> be 0.</li></ol></li><li>Else, let <var>srcByteIndex</var> be <var>srcByteOffset</var>.</li><li>Let <var>targetByteIndex</var> be <var>targetOffset</var> &#215; <var>targetElementSize</var> + <var>targetByteOffset</var>.</li><li>Let <var>limit</var> be <var>targetByteIndex</var> + <var>targetElementSize</var> &#215; <var>srcLength</var>.</li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>srcType</var>, <var>targetType</var>) is <emu-val>true</emu-val>, then<ol><li>NOTE: If <var>srcType</var> and <var>targetType</var> are the same, the transfer must be performed in a manner that preserves the bit-level encoding of the source data.</li><li>Repeat, while <var>targetByteIndex</var> &lt; <var>limit</var><ol><li>Let <var>value</var> be <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref>(<var>srcBuffer</var>, <var>srcByteIndex</var>, <code>\"Uint8\"</code>, <emu-val>true</emu-val>, <code>\"Unordered\"</code>).</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>targetBuffer</var>, <var>targetByteIndex</var>, <code>\"Uint8\"</code>, <var>value</var>, <emu-val>true</emu-val>, <code>\"Unordered\"</code>).</li><li>Set <var>srcByteIndex</var> to <var>srcByteIndex</var> + 1.</li><li>Set <var>targetByteIndex</var> to <var>targetByteIndex</var> + 1.</li></ol></li></ol></li><li>Else,<ol><li>Repeat, while <var>targetByteIndex</var> &lt; <var>limit</var><ol><li>Let <var>value</var> be <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref>(<var>srcBuffer</var>, <var>srcByteIndex</var>, <var>srcType</var>, <emu-val>true</emu-val>, <code>\"Unordered\"</code>).</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>targetBuffer</var>, <var>targetByteIndex</var>, <var>targetType</var>, <var>value</var>, <emu-val>true</emu-val>, <code>\"Unordered\"</code>).</li><li>Set <var>srcByteIndex</var> to <var>srcByteIndex</var> + <var>srcElementSize</var>.</li><li>Set <var>targetByteIndex</var> to <var>targetByteIndex</var> + <var>targetElementSize</var>.</li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-gettemplateobject": {"num": "12.2.9.4", "title": "#sec-gettemplateobject Runtime Semantics: GetTemplateObject ( templateLiteral )", "html": "<emu-clause id=\"sec-gettemplateobject\" aoid=\"GetTemplateObject\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-gettemplateobject\">#sec-gettemplateobject</span> Runtime Semantics: GetTemplateObject ( <var>templateLiteral</var> )</h1>\n        <p>The abstract operation GetTemplateObject is called with a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>, <var>templateLiteral</var>, as an argument. It performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>rawStrings</var> be TemplateStrings of <var>templateLiteral</var> with argument <emu-val>true</emu-val>.</li><li>Let <var>realm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Let <var>templateRegistry</var> be <var>realm</var>.[[TemplateMap]].</li><li>For each element <var>e</var> of <var>templateRegistry</var>, do<ol><li>If <var>e</var>.[[Site]] is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">the same Parse Node</a></emu-xref> as <var>templateLiteral</var>, then<ol><li>Return <var>e</var>.[[Array]].</li></ol></li></ol></li><li>Let <var>cookedStrings</var> be TemplateStrings of <var>templateLiteral</var> with argument <emu-val>false</emu-val>.</li><li>Let <var>count</var> be the number of elements in the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>cookedStrings</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>count</var> &#8804; 2<sup>32</sup> - 1.</li><li>Let <var>template</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(<var>count</var>).</li><li>Let <var>rawObj</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(<var>count</var>).</li><li>Let <var>index</var> be 0.</li><li>Repeat, while <var>index</var> &lt; <var>count</var><ol><li>Let <var>prop</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>index</var>).</li><li>Let <var>cookedValue</var> be the String value <var>cookedStrings</var>[<var>index</var>].</li><li>Call <var>template</var>.[[DefineOwnProperty]](<var>prop</var>, PropertyDescriptor { [[Value]]: <var>cookedValue</var>, [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Let <var>rawValue</var> be the String value <var>rawStrings</var>[<var>index</var>].</li><li>Call <var>rawObj</var>.[[DefineOwnProperty]](<var>prop</var>, PropertyDescriptor { [[Value]]: <var>rawValue</var>, [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Set <var>index</var> to <var>index</var> + 1.</li></ol></li><li>Perform <emu-xref aoid=\"SetIntegrityLevel\"><a href=\"#sec-setintegritylevel\">SetIntegrityLevel</a></emu-xref>(<var>rawObj</var>, <code>\"frozen\"</code>).</li><li>Call <var>template</var>.[[DefineOwnProperty]](<code>\"raw\"</code>, PropertyDescriptor { [[Value]]: <var>rawObj</var>, [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <emu-xref aoid=\"SetIntegrityLevel\"><a href=\"#sec-setintegritylevel\">SetIntegrityLevel</a></emu-xref>(<var>template</var>, <code>\"frozen\"</code>).</li><li>Append the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Site]]: <var>templateLiteral</var>, [[Array]]: <var>template</var> } to <var>templateRegistry</var>.</li><li>Return <var>template</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The creation of a template object cannot result in an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>Each <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt> in the program code of a <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> is associated with a unique template object that is used in the evaluation of tagged Templates (<emu-xref href=\"#sec-template-literals-runtime-semantics-evaluation\"><a href=\"#sec-template-literals-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-template-literals-runtime-semantics-evaluation\">#sec-template-literals-runtime-semantics-evaluation</a></emu-xref>). The template objects are frozen and the same template object is used each time a specific tagged Template is evaluated. Whether template objects are created lazily upon first evaluation of the <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt> or eagerly prior to first evaluation is an implementation choice that is not observable to ECMAScript code.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n          <p>Future editions of this specification may define additional non-enumerable properties of template objects.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-rawbytestonumeric": {"num": "24.1.1.9", "title": "#sec-rawbytestonumeric RawBytesToNumeric ( type, rawBytes, isLittleEndian )", "html": "<emu-clause id=\"sec-rawbytestonumeric\" aoid=\"RawBytesToNumeric\" oldids=\"sec-rawbytestonumber\">\n        <span id=\"sec-rawbytestonumber\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-rawbytestonumeric\">#sec-rawbytestonumeric</span> RawBytesToNumeric ( <var>type</var>, <var>rawBytes</var>, <var>isLittleEndian</var> )</h1>\n        <p>The abstract operation RawBytesToNumeric takes three parameters, a String <var>type</var>, a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>rawBytes</var>, and a Boolean <var>isLittleEndian</var>. This operation performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for Element Type <var>type</var>.</li><li>If <var>isLittleEndian</var> is <emu-val>false</emu-val>, reverse the order of the elements of <var>rawBytes</var>.</li><li>If <var>type</var> is <code>\"Float32\"</code>, then<ol><li>Let <var>value</var> be the byte elements of <var>rawBytes</var> concatenated and interpreted as a little-endian bit string encoding of an IEEE 754-2008 binary32 value.</li><li>If <var>value</var> is an IEEE 754-2008 binary32 NaN value, return the <emu-val>NaN</emu-val> <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref>.</li><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> that corresponds to <var>value</var>.</li></ol></li><li>If <var>type</var> is <code>\"Float64\"</code>, then<ol><li>Let <var>value</var> be the byte elements of <var>rawBytes</var> concatenated and interpreted as a little-endian bit string encoding of an IEEE 754-2008 binary64 value.</li><li>If <var>value</var> is an IEEE 754-2008 binary64 NaN value, return the <emu-val>NaN</emu-val> <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref>.</li><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> that corresponds to <var>value</var>.</li></ol></li><li>If !&#160;<emu-xref aoid=\"IsUnsignedElementType\"><a href=\"#sec-isunsignedelementtype\">IsUnsignedElementType</a></emu-xref>(<var>type</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>intValue</var> be the byte elements of <var>rawBytes</var> concatenated and interpreted as a bit string encoding of an unsigned little-endian binary number.</li></ol></li><li>Else,<ol><li>Let <var>intValue</var> be the byte elements of <var>rawBytes</var> concatenated and interpreted as a bit string encoding of a binary little-endian 2's complement number of bit length <var>elementSize</var> &#215; 8.</li></ol></li><li>If !&#160;<emu-xref aoid=\"IsBigIntElementType\"><a href=\"#sec-isbigintelementtype\">IsBigIntElementType</a></emu-xref>(<var>type</var>) is <emu-val>true</emu-val>, return the BigInt value that corresponds to <var>intValue</var>.</li><li>Otherwise, return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> that corresponds to <var>intValue</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-dataview.prototype.getuint16": {"num": "24.3.4.13", "title": "#sec-dataview.prototype.getuint16 DataView.prototype.getUint16 ( byteOffset [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.getuint16\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.getuint16\">#sec-dataview.prototype.getuint16</span> DataView.prototype.getUint16 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>getUint16</code> method is called with argument <var>byteOffset</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"GetViewValue\"><a href=\"#sec-getviewvalue\">GetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <code>\"Uint16\"</code>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-bindthisvalue": {"num": "8.1.1.3.1", "title": "#sec-bindthisvalue BindThisValue ( V )", "html": "<emu-clause id=\"sec-bindthisvalue\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bindthisvalue\">#sec-bindthisvalue</span> BindThisValue ( <var>V</var> )</h1>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var>.[[ThisBindingStatus]] is not <code>\"lexical\"</code>.</li><li>If <var>envRec</var>.[[ThisBindingStatus]] is <code>\"initialized\"</code>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Set <var>envRec</var>.[[ThisValue]] to <var>V</var>.</li><li>Set <var>envRec</var>.[[ThisBindingStatus]] to <code>\"initialized\"</code>.</li><li>Return <var>V</var>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-dataview.prototype.setuint16": {"num": "24.3.4.23", "title": "#sec-dataview.prototype.setuint16 DataView.prototype.setUint16 ( byteOffset, value [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.setuint16\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.setuint16\">#sec-dataview.prototype.setuint16</span> DataView.prototype.setUint16 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>setUint16</code> method is called with arguments <var>byteOffset</var> and <var>value</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"SetViewValue\"><a href=\"#sec-setviewvalue\">SetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <code>\"Uint16\"</code>, <var>value</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-performeval": {"num": "18.2.1.1", "title": "#sec-performeval Runtime Semantics: PerformEval ( x, callerRealm, strictCaller, direct )", "html": "<emu-clause id=\"sec-performeval\" aoid=\"PerformEval\" oldids=\"sec-performeval-rules-outside-functions,sec-performeval-rules-outside-methods,sec-performeval-rules-outside-constructors\">\n        <span id=\"sec-performeval-rules-outside-constructors\"></span><span id=\"sec-performeval-rules-outside-methods\"></span><span id=\"sec-performeval-rules-outside-functions\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-performeval\">#sec-performeval</span> Runtime Semantics: PerformEval ( <var>x</var>, <var>callerRealm</var>, <var>strictCaller</var>, <var>direct</var> )</h1>\n        <p>The abstract operation PerformEval with arguments <var>x</var>, <var>callerRealm</var>, <var>strictCaller</var>, and <var>direct</var> performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>direct</var> is <emu-val>false</emu-val>, then <var>strictCaller</var> is also <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is not String, return <var>x</var>.</li><li>Let <var>evalRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>callerRealm</var>, <var>evalRealm</var>).</li><li>Let <var>thisEnvRec</var> be !&#160;<emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li>If <var>thisEnvRec</var> is a <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref>, then<ol><li>Let <var>F</var> be <var>thisEnvRec</var>.[[FunctionObject]].</li><li>Let <var>inFunction</var> be <emu-val>true</emu-val>.</li><li>Let <var>inMethod</var> be <var>thisEnvRec</var>.HasSuperBinding().</li><li>If <var>F</var>.[[ConstructorKind]] is <code>\"derived\"</code>, let <var>inDerivedConstructor</var> be <emu-val>true</emu-val>; otherwise, let <var>inDerivedConstructor</var> be <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>inFunction</var> be <emu-val>false</emu-val>.</li><li>Let <var>inMethod</var> be <emu-val>false</emu-val>.</li><li>Let <var>inDerivedConstructor</var> be <emu-val>false</emu-val>.</li></ol></li><li>Perform the following substeps in an implementation-dependent order, possibly interleaving parsing and error detection:<ol><li>Let <var>script</var> be the ECMAScript code that is the result of parsing <var>x</var>, interpreted as UTF-16 encoded Unicode text as described in <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>, for the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. If the parse fails, throw a <emu-val>SyntaxError</emu-val> exception. If any early errors are detected, throw a <emu-val>SyntaxError</emu-val> exception (but see also clause <emu-xref href=\"#sec-error-handling-and-language-extensions\"><a href=\"#sec-error-handling-and-language-extensions\" class=\"excluded-xref\" excluded-id=\"sec-error-handling-and-language-extensions\">#sec-error-handling-and-language-extensions</a></emu-xref>).</li><li>If <var>script</var> Contains <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> is <emu-val>false</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Let <var>body</var> be the <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> of <var>script</var>.</li><li>If <var>inFunction</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>inMethod</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>inDerivedConstructor</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>If <var>strictCaller</var> is <emu-val>true</emu-val>, let <var>strictEval</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>strictEval</var> be IsStrict of <var>script</var>.</li><li>Let <var>ctx</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>NOTE: If <var>direct</var> is <emu-val>true</emu-val>, <var>ctx</var> will be the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that performed the <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref>. If <var>direct</var> is <emu-val>false</emu-val>, <var>ctx</var> will be the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> for the invocation of the <code>eval</code> function.</li><li>If <var>direct</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>ctx</var>'s LexicalEnvironment).</li><li>Let <var>varEnv</var> be <var>ctx</var>'s VariableEnvironment.</li></ol></li><li>Else,<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>evalRealm</var>.[[GlobalEnv]]).</li><li>Let <var>varEnv</var> be <var>evalRealm</var>.[[GlobalEnv]].</li></ol></li><li>If <var>strictEval</var> is <emu-val>true</emu-val>, set <var>varEnv</var> to <var>lexEnv</var>.</li><li>If <var>ctx</var> is not already suspended, suspend <var>ctx</var>.</li><li>Let <var>evalCxt</var> be a new ECMAScript code <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set the <var>evalCxt</var>'s Function to <emu-val>null</emu-val>.</li><li>Set the <var>evalCxt</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> to <var>evalRealm</var>.</li><li>Set the <var>evalCxt</var>'s ScriptOrModule to <var>ctx</var>'s ScriptOrModule.</li><li>Set the <var>evalCxt</var>'s VariableEnvironment to <var>varEnv</var>.</li><li>Set the <var>evalCxt</var>'s LexicalEnvironment to <var>lexEnv</var>.</li><li>Push <var>evalCxt</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>evalCxt</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"EvalDeclarationInstantiation\"><a href=\"#sec-evaldeclarationinstantiation\">EvalDeclarationInstantiation</a></emu-xref>(<var>body</var>, <var>varEnv</var>, <var>lexEnv</var>, <var>strictEval</var>).</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Set <var>result</var> to the result of evaluating <var>body</var>.</li></ol></li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const> and <var>result</var>.[[Value]] is <emu-const>empty</emu-const>, then<ol><li>Set <var>result</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></li><li><emu-xref aoid=\"Suspend\"><a href=\"#sec-suspend\">Suspend</a></emu-xref> <var>evalCxt</var> and remove it from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Resume the context that is now on the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The eval code cannot instantiate variable or function bindings in the variable environment of the calling context that invoked the eval if the calling context is evaluating formal parameter initializers or if either the code of the calling context or the eval code is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>. Instead such bindings are instantiated in a new VariableEnvironment that is only accessible to the eval code. Bindings introduced by <code>let</code>, <code>const</code>, or <code>class</code> declarations are always instantiated in a new LexicalEnvironment.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-dataview.prototype.setint32": {"num": "24.3.4.21", "title": "#sec-dataview.prototype.setint32 DataView.prototype.setInt32 ( byteOffset, value [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.setint32\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.setint32\">#sec-dataview.prototype.setint32</span> DataView.prototype.setInt32 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>setInt32</code> method is called with arguments <var>byteOffset</var> and <var>value</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"SetViewValue\"><a href=\"#sec-setviewvalue\">SetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <code>\"Int32\"</code>, <var>value</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-integerindexedelementset": {"num": "9.4.5.9", "title": "#sec-integerindexedelementset IntegerIndexedElementSet ( O, index, value )", "html": "<emu-clause id=\"sec-integerindexedelementset\" aoid=\"IntegerIndexedElementSet\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-integerindexedelementset\">#sec-integerindexedelementset</span> IntegerIndexedElementSet ( <var>O</var>, <var>index</var>, <var>value</var> )</h1>\n        <p>The abstract operation IntegerIndexedElementSet with arguments <var>O</var>, <var>index</var>, and <var>value</var> performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>index</var>) is Number.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> is an Object that has [[ViewedArrayBuffer]], [[ArrayLength]], [[ByteOffset]], [[ContentType]], and [[TypedArrayName]] internal slots.</li><li>If <var>O</var>.[[ContentType]] is <code>\"BigInt\"</code>, let <var>numValue</var> be ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-tobigint\">ToBigInt</a></emu-xref>(<var>value</var>).</li><li>Otherwise, let <var>numValue</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>value</var>).</li><li>Let <var>buffer</var> be <var>O</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"IsInteger\"><a href=\"#sec-isinteger\">IsInteger</a></emu-xref>(<var>index</var>) is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>index</var> = <emu-val>-0</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>length</var> be <var>O</var>.[[ArrayLength]].</li><li>If <var>index</var> &lt; 0 or <var>index</var> &#8805; <var>length</var>, return <emu-val>false</emu-val>.</li><li>Let <var>offset</var> be <var>O</var>.[[ByteOffset]].</li><li>Let <var>arrayTypeName</var> be the String value of <var>O</var>.[[TypedArrayName]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>indexedPosition</var> be (<var>index</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Let <var>elementType</var> be the String value of the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>buffer</var>, <var>indexedPosition</var>, <var>elementType</var>, <var>numValue</var>, <emu-val>true</emu-val>, <code>\"Unordered\"</code>).</li><li>Return <emu-val>true</emu-val>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-asyncgeneratorfunction-instances": {"num": "25.3.4", "title": "#sec-asyncgeneratorfunction-instances AsyncGeneratorFunction Instances", "html": "<emu-clause id=\"sec-asyncgeneratorfunction-instances\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorfunction-instances\">#sec-asyncgeneratorfunction-instances</span> AsyncGeneratorFunction Instances</h1>\n      <p>Every AsyncGeneratorFunction instance is an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> and has the internal slots listed in  <emu-xref href=\"#table-27\"><a href=\"#table-27\" class=\"excluded-xref\" excluded-id=\"table-27\">#table-27</a></emu-xref>. The value of the [[FunctionKind]] internal slot for all such instances is <code>\"generator\"</code>.</p>\n      <p>Each AsyncGeneratorFunction instance has the following own properties:</p>\n\n      <div id=\"excluded-sec-asyncgeneratorfunction-instance-length\"><h1><span class=\"secnum\">25.3.4.1</span>#sec-asyncgeneratorfunction-instance-length length</h1>...</div><div id=\"excluded-sec-asyncgeneratorfunction-instance-name\"><h1><span class=\"secnum\">25.3.4.2</span>#sec-asyncgeneratorfunction-instance-name name</h1>...</div><div id=\"excluded-sec-asyncgeneratorfunction-instance-prototype\"><h1><span class=\"secnum\">25.3.4.3</span>#sec-asyncgeneratorfunction-instance-prototype prototype</h1>...</div></emu-clause>\n  "}, "sec-atomicreadmodifywrite": {"num": "24.4.1.11", "title": "#sec-atomicreadmodifywrite AtomicReadModifyWrite ( typedArray, index, value, op )", "html": "<emu-clause id=\"sec-atomicreadmodifywrite\" aoid=\"AtomicReadModifyWrite\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomicreadmodifywrite\">#sec-atomicreadmodifywrite</span> AtomicReadModifyWrite ( <var>typedArray</var>, <var>index</var>, <var>value</var>, <var>op</var> )</h1>\n        <p>The abstract operation AtomicReadModifyWrite takes four arguments, <var>typedArray</var>, <var>index</var>, <var>value</var>, and a pure combining operation <var>op</var>. The pure combining operation <var>op</var> takes two <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values arguments and returns a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values. The operation atomically loads a value, combines it with another value, and stores the result of the combination. It returns the loaded value. It performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateSharedIntegerTypedArray\"><a href=\"#sec-validatesharedintegertypedarray\">ValidateSharedIntegerTypedArray</a></emu-xref>(<var>typedArray</var>).</li><li>Let <var>i</var> be ?&#160;<emu-xref aoid=\"ValidateAtomicAccess\"><a href=\"#sec-validateatomicaccess\">ValidateAtomicAccess</a></emu-xref>(<var>typedArray</var>, <var>index</var>).</li><li>Let <var>arrayTypeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>If <var>typedArray</var>.[[ContentType]] is <code>\"BigInt\"</code>, let <var>v</var> be ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-tobigint\">ToBigInt</a></emu-xref>(<var>value</var>).</li><li>Otherwise, let <var>v</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>value</var>).</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>elementType</var> be the String value of the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>offset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>Let <var>indexedPosition</var> be (<var>i</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Return <emu-xref aoid=\"GetModifySetValueInBuffer\"><a href=\"#sec-getmodifysetvalueinbuffer\">GetModifySetValueInBuffer</a></emu-xref>(<var>buffer</var>, <var>indexedPosition</var>, <var>elementType</var>, <var>v</var>, <var>op</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-set.prototype.entries": {"num": "23.2.3.5", "title": "#sec-set.prototype.entries Set.prototype.entries ( )", "html": "<emu-clause id=\"sec-set.prototype.entries\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set.prototype.entries\">#sec-set.prototype.entries</span> Set.prototype.entries ( )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"CreateSetIterator\"><a href=\"#sec-createsetiterator\">CreateSetIterator</a></emu-xref>(<var>S</var>, <code>\"key+value\"</code>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>For iteration purposes, a Set appears similar to a Map where each entry has the same value for its key and value.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-ecmascript-function-objects-construct-argumentslist-newtarget": {"num": "9.2.2", "title": "#sec-ecmascript-function-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )", "html": "<emu-clause id=\"sec-ecmascript-function-objects-construct-argumentslist-newtarget\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-function-objects-construct-argumentslist-newtarget\">#sec-ecmascript-function-objects-construct-argumentslist-newtarget</span> [[Construct]] ( <var>argumentsList</var>, <var>newTarget</var> )</h1>\n      <p>The [[Construct]] internal method for an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> <var>F</var> is called with parameters <var>argumentsList</var> and <var>newTarget</var>. <var>argumentsList</var> is a possibly empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values. The following steps are taken:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> is an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>newTarget</var>) is Object.</li><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>kind</var> be <var>F</var>.[[ConstructorKind]].</li><li>If <var>kind</var> is <code>\"base\"</code>, then<ol><li>Let <var>thisArgument</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(<var>newTarget</var>, <code>\"%Object.prototype%\"</code>).</li></ol></li><li>Let <var>calleeContext</var> be <emu-xref aoid=\"PrepareForOrdinaryCall\"><a href=\"#sec-prepareforordinarycall\">PrepareForOrdinaryCall</a></emu-xref>(<var>F</var>, <var>newTarget</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>calleeContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>kind</var> is <code>\"base\"</code>, perform <emu-xref aoid=\"OrdinaryCallBindThis\"><a href=\"#sec-ordinarycallbindthis\">OrdinaryCallBindThis</a></emu-xref>(<var>F</var>, <var>calleeContext</var>, <var>thisArgument</var>).</li><li>Let <var>constructorEnv</var> be the LexicalEnvironment of <var>calleeContext</var>.</li><li>Let <var>envRec</var> be <var>constructorEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"OrdinaryCallEvaluateBody\"><a href=\"#sec-ordinarycallevaluatebody\">OrdinaryCallEvaluateBody</a></emu-xref>(<var>F</var>, <var>argumentsList</var>).</li><li>Remove <var>calleeContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore <var>callerContext</var> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>result</var>.[[Type]] is <emu-const>return</emu-const>, then<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>.[[Value]]) is Object, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>result</var>.[[Value]]).</li><li>If <var>kind</var> is <code>\"base\"</code>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>thisArgument</var>).</li><li>If <var>result</var>.[[Value]] is not <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Else, <emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>result</var>).</li><li>Return ? <var>envRec</var>.GetThisBinding().\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-function-environment-records": {"num": "8.1.1.3", "title": "#sec-function-environment-records Function Environment Records", "html": "<emu-clause id=\"sec-function-environment-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-environment-records\">#sec-function-environment-records</span> Function Environment Records</h1>\n        <p>A  <dfn>function Environment Record</dfn> is a declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that is used to represent the top-level scope of a function and, if the function is not an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, provides a <code>this</code> binding. If a function is not an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> function and references <code>super</code>, its function Environment Record also contains the state that is used to perform <code>super</code> method invocations from within the function.</p>\n        <p>Function Environment Records have the additional state fields listed in  <emu-xref href=\"#table-16\"><a href=\"#table-16\" class=\"excluded-xref\" excluded-id=\"table-16\">#table-16</a></emu-xref>.</p>\n        <emu-table id=\"table-16\" caption=\"Additional Fields of Function Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-16\">#table-16</span>: Additional Fields of Function Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              \n              </th>\n              <th>\n                Value\n              \n              </th>\n              <th>\n                Meaning\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[ThisValue]]\n              \n              </td>\n              <td>\n                Any\n              \n              </td>\n              <td>\n                This is the <emu-val>this</emu-val> value used for this invocation of the function.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ThisBindingStatus]]\n              \n              </td>\n              <td>\n                <code>\"lexical\"</code> | <code>\"initialized\"</code> | <code>\"uninitialized\"</code>\n              \n              </td>\n              <td>\n                If the value is <code>\"lexical\"</code>, this is an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> and does not have a local <emu-val>this</emu-val> value.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[FunctionObject]]\n              \n              </td>\n              <td>\n                Object\n              \n              </td>\n              <td>\n                The <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> whose invocation caused this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> to be created.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[HomeObject]]\n              \n              </td>\n              <td>\n                Object | <emu-val>undefined</emu-val>\n              \n              </td>\n              <td>\n                If the associated function has <code>super</code> property accesses and is not an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, [[HomeObject]] is the object that the function is bound to as a method. The default value for [[HomeObject]] is <emu-val>undefined</emu-val>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[NewTarget]]\n              \n              </td>\n              <td>\n                Object | <emu-val>undefined</emu-val>\n              \n              </td>\n              <td>\n                If this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> was created by the [[Construct]] internal method, [[NewTarget]] is the value of the [[Construct]] <var>newTarget</var> parameter. Otherwise, its value is <emu-val>undefined</emu-val>.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>Function Environment Records support all of the declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> methods listed in  <emu-xref href=\"#table-15\"><a href=\"#table-15\" class=\"excluded-xref\" excluded-id=\"table-15\">#table-15</a></emu-xref> and share the same specifications for all of those methods except for HasThisBinding and HasSuperBinding. In addition, function Environment Records support the methods listed in  <emu-xref href=\"#table-17\"><a href=\"#table-17\" class=\"excluded-xref\" excluded-id=\"table-17\">#table-17</a></emu-xref>:</p>\n        <emu-table id=\"table-17\" caption=\"Additional Methods of Function Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-17\">#table-17</span>: Additional Methods of Function Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Method\n              \n              </th>\n              <th>\n                Purpose\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                BindThisValue(V)\n              \n              </td>\n              <td>\n                Set the [[ThisValue]] and record that it has been initialized.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                GetThisBinding()\n              \n              </td>\n              <td>\n                Return the value of this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s <code>this</code> binding. Throws a <emu-val>ReferenceError</emu-val> if the <code>this</code> binding has not been initialized.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                GetSuperBase()\n              \n              </td>\n              <td>\n                Return the object that is the base for <code>super</code> property accesses bound in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The object is derived from this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s [[HomeObject]] field. The value <emu-val>undefined</emu-val> indicates that <code>super</code> property accesses will produce runtime errors.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>The behaviour of the additional concrete specification methods for function Environment Records is defined by the following algorithms:</p>\n\n        <div id=\"excluded-sec-bindthisvalue\"><h1><span class=\"secnum\">8.1.1.3.1</span>#sec-bindthisvalue BindThisValue ( V )</h1>...</div><div id=\"excluded-sec-function-environment-records-hasthisbinding\"><h1><span class=\"secnum\">8.1.1.3.2</span>#sec-function-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-function-environment-records-hassuperbinding\"><h1><span class=\"secnum\">8.1.1.3.3</span>#sec-function-environment-records-hassuperbinding HasSuperBinding ( )</h1>...</div><div id=\"excluded-sec-function-environment-records-getthisbinding\"><h1><span class=\"secnum\">8.1.1.3.4</span>#sec-function-environment-records-getthisbinding GetThisBinding ( )</h1>...</div><div id=\"excluded-sec-getsuperbase\"><h1><span class=\"secnum\">8.1.1.3.5</span>#sec-getsuperbase GetSuperBase ( )</h1>...</div></emu-clause>\n\n      "}, "sec-dataview.prototype.getint16": {"num": "24.3.4.10", "title": "#sec-dataview.prototype.getint16 DataView.prototype.getInt16 ( byteOffset [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.getint16\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.getint16\">#sec-dataview.prototype.getint16</span> DataView.prototype.getInt16 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>getInt16</code> method is called with argument <var>byteOffset</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"GetViewValue\"><a href=\"#sec-getviewvalue\">GetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <code>\"Int16\"</code>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-isunclampedintegerelementtype": {"num": "24.1.1.6", "title": "#sec-isunclampedintegerelementtype IsUnclampedIntegerElementType ( type )", "html": "<emu-clause id=\"sec-isunclampedintegerelementtype\" aoid=\"IsUnclampedIntegerElementType\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isunclampedintegerelementtype\">#sec-isunclampedintegerelementtype</span> IsUnclampedIntegerElementType ( <var>type</var> )</h1>\n        <p>The abstract operation IsUnclampedIntegerElementType verifies if the argument <var>type</var> is an Interger TypedArray element type not including <code>\"Uint8C\"</code>. This operation performs the following steps:</p>\n        <emu-alg><ol><li>If <var>type</var> is <code>\"Int8\"</code>, <code>\"Uint8\"</code>, <code>\"Int16\"</code>, <code>\"Uint16\"</code>, <code>\"Int32\"</code>, or <code>\"Uint32\"</code>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-function-environment-records-getthisbinding": {"num": "8.1.1.3.4", "title": "#sec-function-environment-records-getthisbinding GetThisBinding ( )", "html": "<emu-clause id=\"sec-function-environment-records-getthisbinding\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-environment-records-getthisbinding\">#sec-function-environment-records-getthisbinding</span> GetThisBinding ( )</h1>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var>.[[ThisBindingStatus]] is not <code>\"lexical\"</code>.</li><li>If <var>envRec</var>.[[ThisBindingStatus]] is <code>\"uninitialized\"</code>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Return <var>envRec</var>.[[ThisValue]].\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-makeclassconstructor": {"num": "9.2.11", "title": "#sec-makeclassconstructor MakeClassConstructor ( F )", "html": "<emu-clause id=\"sec-makeclassconstructor\" aoid=\"MakeClassConstructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-makeclassconstructor\">#sec-makeclassconstructor</span> MakeClassConstructor ( <var>F</var> )</h1>\n      <p>The abstract operation MakeClassConstructor with argument <var>F</var> performs the following steps:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> is an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var>.[[FunctionKind]] is <code>\"normal\"</code>.</li><li>Set <var>F</var>.[[FunctionKind]] to <code>\"classConstructor\"</code>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-functionallocate": {"num": "9.2.3", "title": "#sec-functionallocate FunctionAllocate ( functionPrototype, functionKind )", "html": "<emu-clause id=\"sec-functionallocate\" aoid=\"FunctionAllocate\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-functionallocate\">#sec-functionallocate</span> FunctionAllocate ( <var>functionPrototype</var>, <var>functionKind</var> )</h1>\n      <p>The abstract operation FunctionAllocate requires the two arguments <var>functionPrototype</var> and <var>functionKind</var>. FunctionAllocate performs the following steps:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>functionPrototype</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>functionKind</var> is either <code>\"normal\"</code>, <code>\"non-constructor\"</code>, <code>\"generator\"</code>, <code>\"async\"</code>, or <code>\"async generator\"</code>.</li><li>If <var>functionKind</var> is <code>\"normal\"</code>, let <var>needsConstruct</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>needsConstruct</var> be <emu-val>false</emu-val>.</li><li>If <var>functionKind</var> is <code>\"non-constructor\"</code>, set <var>functionKind</var> to <code>\"normal\"</code>.</li><li>Let <var>F</var> be a newly created ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> with the internal slots listed in <emu-xref href=\"#table-27\"><a href=\"#table-27\" class=\"excluded-xref\" excluded-id=\"table-27\">#table-27</a></emu-xref>.</li><li>Set <var>F</var>'s essential internal methods to the default ordinary object definitions specified in <emu-xref href=\"#sec-ordinary-object-internal-methods-and-internal-slots\"><a href=\"#sec-ordinary-object-internal-methods-and-internal-slots\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-object-internal-methods-and-internal-slots\">#sec-ordinary-object-internal-methods-and-internal-slots</a></emu-xref>.</li><li>Set <var>F</var>.[[Call]] to the definition specified in <emu-xref href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\"><a href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects-call-thisargument-argumentslist\">#sec-ecmascript-function-objects-call-thisargument-argumentslist</a></emu-xref>.</li><li>If <var>needsConstruct</var> is <emu-val>true</emu-val>, then<ol><li>Set <var>F</var>.[[Construct]] to the definition specified in <emu-xref href=\"#sec-ecmascript-function-objects-construct-argumentslist-newtarget\"><a href=\"#sec-ecmascript-function-objects-construct-argumentslist-newtarget\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects-construct-argumentslist-newtarget\">#sec-ecmascript-function-objects-construct-argumentslist-newtarget</a></emu-xref>.</li><li>Set <var>F</var>.[[ConstructorKind]] to <code>\"base\"</code>.</li></ol></li><li>Set <var>F</var>.[[FunctionKind]] to <var>functionKind</var>.</li><li>Set <var>F</var>.[[Prototype]] to <var>functionPrototype</var>.</li><li>Set <var>F</var>.[[Extensible]] to <emu-val>true</emu-val>.</li><li>Set <var>F</var>.[[Realm]] to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-memory-model-fundamentals": {"num": "27.1", "title": "#sec-memory-model-fundamentals Memory Model Fundamentals", "html": "<emu-clause id=\"sec-memory-model-fundamentals\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-memory-model-fundamentals\">#sec-memory-model-fundamentals</span> Memory Model Fundamentals</h1>\n    <p>Shared memory accesses (reads and writes) are divided into two groups, atomic accesses and data accesses, defined below. Atomic accesses are sequentially consistent, i.e., there is a strict total ordering of events agreed upon by all agents in an <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref>. Non-atomic accesses do not have a strict total ordering agreed upon by all agents, i.e., unordered.</p>\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p>No orderings weaker than sequentially consistent and stronger than unordered, such as release-acquire, are supported.</p>\n    </div></emu-note>\n    <p>A  <dfn>Shared Data Block event</dfn> is either a  <dfn>ReadSharedMemory</dfn>,  <dfn>WriteSharedMemory</dfn>, or  <dfn>ReadModifyWriteSharedMemory</dfn> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>.</p>\n\n    <emu-table id=\"table-readsharedmemory-fields\" caption=\"ReadSharedMemory Event Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-readsharedmemory-fields\">#table-readsharedmemory-fields</span>: <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> Event Fields</figcaption>\n      <table>\n        <tbody>\n          <tr>\n            <th>Field Name</th>\n            <th>Value</th>\n            <th>Meaning</th>\n          </tr>\n          <tr>\n            <td>[[Order]]</td>\n            <td><code>\"SeqCst\"</code> or <code>\"Unordered\"</code></td>\n            <td>The weakest ordering guaranteed by the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> for the event.</td>\n          </tr>\n          <tr>\n            <td>[[NoTear]]</td>\n            <td>A Boolean</td>\n            <td>Whether this event is allowed to read from multiple write events on equal range as this event.</td>\n          </tr>\n          <tr>\n            <td>[[Block]]</td>\n            <td>A <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref></td>\n            <td>The block the event operates on.</td>\n          </tr>\n          <tr>\n            <td>[[ByteIndex]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The byte address of the read in [[Block]].</td>\n          </tr>\n          <tr>\n            <td>[[ElementSize]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The size of the read.</td>\n          </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <emu-table id=\"table-writesharedmemory-fields\" caption=\"WriteSharedMemory Event Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-writesharedmemory-fields\">#table-writesharedmemory-fields</span>: <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> Event Fields</figcaption>\n      <table>\n        <tbody>\n          <tr>\n            <th>Field Name</th>\n            <th>Value</th>\n            <th>Meaning</th>\n          </tr>\n          <tr>\n            <td>[[Order]]</td>\n            <td><code>\"SeqCst\"</code>, <code>\"Unordered\"</code>, or <code>\"Init\"</code></td>\n            <td>The weakest ordering guaranteed by the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> for the event.</td>\n          </tr>\n          <tr>\n            <td>[[NoTear]]</td>\n            <td>A Boolean</td>\n            <td>Whether this event is allowed to be read from multiple read events with equal range as this event.</td>\n          </tr>\n          <tr>\n            <td>[[Block]]</td>\n            <td>A <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref></td>\n            <td>The block the event operates on.</td>\n          </tr>\n          <tr>\n            <td>[[ByteIndex]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The byte address of the write in [[Block]].</td>\n          </tr>\n          <tr>\n            <td>[[ElementSize]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The size of the write.</td>\n          </tr>\n          <tr>\n            <td>[[Payload]]</td>\n            <td>A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref></td>\n            <td>The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values to be read by other events.</td>\n          </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <emu-table id=\"table-rmwsharedmemory-fields\" caption=\"ReadModifyWriteSharedMemory Event Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-rmwsharedmemory-fields\">#table-rmwsharedmemory-fields</span>: <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> Event Fields</figcaption>\n      <table>\n        <tbody>\n          <tr>\n            <th>Field Name</th>\n            <th>Value</th>\n            <th>Meaning</th>\n          </tr>\n          <tr>\n            <td>[[Order]]</td>\n            <td><code>\"SeqCst\"</code></td>\n            <td>Read-modify-write events are always sequentially consistent.</td>\n          </tr>\n          <tr>\n            <td>[[NoTear]]</td>\n            <td><emu-val>true</emu-val></td>\n            <td>Read-modify-write events cannot tear.</td>\n          </tr>\n          <tr>\n            <td>[[Block]]</td>\n            <td>A <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref></td>\n            <td>The block the event operates on.</td>\n          </tr>\n          <tr>\n            <td>[[ByteIndex]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The byte address of the read-modify-write in [[Block]].</td>\n          </tr>\n          <tr>\n            <td>[[ElementSize]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The size of the read-modify-write.</td>\n          </tr>\n          <tr>\n            <td>[[Payload]]</td>\n            <td>A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref></td>\n            <td>The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values to be passed to [[ModifyOp]].</td>\n          </tr>\n          <tr>\n            <td>[[ModifyOp]]</td>\n            <td>A semantic function</td>\n            <td>A pure semantic function that returns a modified <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values from a read <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values and [[Payload]].</td>\n          </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <p>These events are introduced by <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> or by methods on the Atomics object.</p>\n    <p>Some operations may also introduce  <dfn>Synchronize</dfn> events. A  <dfn>Synchronize event</dfn> has no fields, and exists purely to directly constrain the permitted orderings of other events.</p>\n    <p>In addition to <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref> and Synchronize events, there are host-specific events.</p>\n    <p>Let the range of a ReadSharedMemory, WriteSharedMemory, or ReadModifyWriteSharedMemory event be the Set of contiguous integers from its [[ByteIndex]] to [[ByteIndex]] + [[ElementSize]] - 1. Two events' ranges are equal when the events have the same [[Block]], and the ranges are element-wise equal. Two events' ranges are overlapping when the events have the same [[Block]], the ranges are not equal and their intersection is non-empty. Two events' ranges are disjoint when the events do not have the same [[Block]] or their ranges are neither equal nor overlapping.</p>\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>Examples of host-specific synchronizing events that should be accounted for are: sending a SharedArrayBuffer from one <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> to another (e.g., by <code>postMessage</code> in a browser), starting and stopping agents, and communicating within the <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref> via channels other than shared memory. It is assumed those events are appended to <emu-xref aoid=\"agent-order\"><a href=\"#sec-agent-order\">agent-order</a></emu-xref> during evaluation like the other SharedArrayBuffer events.</p>\n    </div></emu-note>\n    <p>Events are ordered within candidate executions by the relations defined below.</p>\n  </emu-clause>\n\n  "}, "sec-stringpad": {"num": "21.1.3.15.1", "title": "#sec-stringpad Runtime Semantics: StringPad ( O, maxLength, fillString, placement )", "html": "<emu-clause id=\"sec-stringpad\" aoid=\"StringPad\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-stringpad\">#sec-stringpad</span> Runtime Semantics: StringPad ( <var>O</var>, <var>maxLength</var>, <var>fillString</var>, <var>placement</var> )</h1>\n          <p>When the abstract operation StringPad is called with arguments <var>O</var>, <var>maxLength</var>, <var>fillString</var>, and <var>placement</var>, the following steps are taken:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>placement</var> is <code>\"start\"</code> or <code>\"end\"</code>.</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>intMaxLength</var> be ?&#160;<emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(<var>maxLength</var>).</li><li>Let <var>stringLength</var> be the length of <var>S</var>.</li><li>If <var>intMaxLength</var> is not greater than <var>stringLength</var>, return <var>S</var>.</li><li>If <var>fillString</var> is <emu-val>undefined</emu-val>, let <var>filler</var> be the String value consisting solely of the code unit 0x0020 (SPACE).</li><li>Else, let <var>filler</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>fillString</var>).</li><li>If <var>filler</var> is the empty String, return <var>S</var>.</li><li>Let <var>fillLen</var> be <var>intMaxLength</var> - <var>stringLength</var>.</li><li>Let <var>truncatedStringFiller</var> be the String value consisting of repeated concatenations of <var>filler</var> truncated to length <var>fillLen</var>.</li><li>If <var>placement</var> is <code>\"start\"</code>, return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>truncatedStringFiller</var> and <var>S</var>.</li><li>Else, return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>S</var> and <var>truncatedStringFiller</var>.\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>The argument <var>maxLength</var> will be clamped such that it can be no smaller than the length of <var>S</var>.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>The argument <var>fillString</var> defaults to <code>\" \"</code> (the String value consisting of the code unit 0x0020 SPACE).</p>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-properties-of-array-iterator-instances": {"num": "22.1.5.3", "title": "#sec-properties-of-array-iterator-instances Properties of Array Iterator Instances", "html": "<emu-clause id=\"sec-properties-of-array-iterator-instances\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-array-iterator-instances\">#sec-properties-of-array-iterator-instances</span> Properties of Array Iterator Instances</h1>\n        <p>Array Iterator instances are ordinary objects that inherit properties from the <emu-xref href=\"#sec-%arrayiteratorprototype%-object\"><a href=\"#sec-%arrayiteratorprototype%-object\">%ArrayIteratorPrototype%</a></emu-xref> intrinsic object. Array Iterator instances are initially created with the internal slots listed in  <emu-xref href=\"#table-48\"><a href=\"#table-48\" class=\"excluded-xref\" excluded-id=\"table-48\">#table-48</a></emu-xref>.</p>\n        <emu-table id=\"table-48\" caption=\"Internal Slots of Array Iterator Instances\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-48\">#table-48</span>: Internal Slots of Array Iterator Instances</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Internal Slot\n              \n              </th>\n              <th>\n                Description\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[IteratedObject]]\n              \n              </td>\n              <td>\n                The object whose array elements are being iterated.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ArrayIteratorNextIndex]]\n              \n              </td>\n              <td>\n                The <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> of the next <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> to be examined by this iteration.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ArrayIterationKind]]\n              \n              </td>\n              <td>\n                A String value that identifies what is returned for each element of the iteration. The possible values are: <code>\"key\"</code>, <code>\"value\"</code>, <code>\"key+value\"</code>.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n    "}, "sec-innermoduleevaluation": {"num": "15.2.1.16.2.1", "title": "#sec-innermoduleevaluation InnerModuleEvaluation ( module, stack, index )", "html": "<emu-clause id=\"sec-innermoduleevaluation\" aoid=\"InnerModuleEvaluation\">\n            <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-innermoduleevaluation\">#sec-innermoduleevaluation</span> InnerModuleEvaluation ( <var>module</var>, <var>stack</var>, <var>index</var> )</h1>\n\n            <p>The InnerModuleEvaluation abstract operation is used by Evaluate to perform the actual evaluation process for the <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> <var>module</var>, as well as recursively on all other modules in the dependency graph. The <var>stack</var> and <var>index</var> parameters, as well as <var>module</var>'s [[DFSIndex]] and [[DFSAncestorIndex]] fields, are used the same way as in <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>.</p>\n\n            <p>This abstract operation performs the following steps:</p>\n\n            <emu-alg><ol><li>If <var>module</var> is not a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li>Perform ? <var>module</var>.Evaluate().</li><li>Return <var>index</var>.</li></ol></li><li>If <var>module</var>.[[Status]] is <code>\"evaluated\"</code>, then<ol><li>If <var>module</var>.[[EvaluationError]] is <emu-val>undefined</emu-val>, return <var>index</var>.</li><li>Otherwise, return <var>module</var>.[[EvaluationError]].</li></ol></li><li>If <var>module</var>.[[Status]] is <code>\"evaluating\"</code>, return <var>index</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <code>\"linked\"</code>.</li><li>Set <var>module</var>.[[Status]] to <code>\"evaluating\"</code>.</li><li>Set <var>module</var>.[[DFSIndex]] to <var>index</var>.</li><li>Set <var>module</var>.[[DFSAncestorIndex]] to <var>index</var>.</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>Append <var>module</var> to <var>stack</var>.</li><li>For each String <var>required</var> that is an element of <var>module</var>.[[RequestedModules]], do<ol><li>Let <var>requiredModule</var> be !&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>required</var>).</li><li>NOTE: Link must be completed successfully prior to invoking this method, so every requested module is guaranteed to resolve successfully.</li><li>Set <var>index</var> to ?&#160;<emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref>(<var>requiredModule</var>, <var>stack</var>, <var>index</var>).</li><li>If <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is either <code>\"evaluating\"</code> or <code>\"evaluated\"</code>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is <code>\"evaluating\"</code> if and only if <var>requiredModule</var> is in <var>stack</var>.</li><li>If <var>requiredModule</var>.[[Status]] is <code>\"evaluating\"</code>, then<ol><li>Set <var>module</var>.[[DFSAncestorIndex]] to <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>module</var>.[[DFSAncestorIndex]], <var>requiredModule</var>.[[DFSAncestorIndex]]).</li></ol></li></ol></li></ol></li><li>Perform ? <var>module</var>.<emu-xref aoid=\"ExecuteModule\"><a href=\"#sec-source-text-module-record-execute-module\">ExecuteModule</a></emu-xref>().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> occurs exactly once in <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[DFSAncestorIndex]] is less than or equal to <var>module</var>.[[DFSIndex]].</li><li>If <var>module</var>.[[DFSAncestorIndex]] equals <var>module</var>.[[DFSIndex]], then<ol><li>Let <var>done</var> be <emu-val>false</emu-val>.</li><li>Repeat, while <var>done</var> is <emu-val>false</emu-val>,<ol><li>Let <var>requiredModule</var> be the last element in <var>stack</var>.</li><li>Remove the last element of <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>.</li><li>Set <var>requiredModule</var>.[[Status]] to <code>\"evaluated\"</code>.</li><li>If <var>requiredModule</var> and <var>module</var> are the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, set <var>done</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <var>index</var>.\n            </li></ol></emu-alg>\n          </emu-clause>\n        "}, "sec-map.prototype.keys": {"num": "23.1.3.8", "title": "#sec-map.prototype.keys Map.prototype.keys ( )", "html": "<emu-clause id=\"sec-map.prototype.keys\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype.keys\">#sec-map.prototype.keys</span> Map.prototype.keys ( )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"CreateMapIterator\"><a href=\"#sec-createmapiterator\">CreateMapIterator</a></emu-xref>(<var>M</var>, <code>\"key\"</code>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-dataview.prototype.getint8": {"num": "24.3.4.9", "title": "#sec-dataview.prototype.getint8 DataView.prototype.getInt8 ( byteOffset )", "html": "<emu-clause id=\"sec-dataview.prototype.getint8\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.getint8\">#sec-dataview.prototype.getint8</span> DataView.prototype.getInt8 ( <var>byteOffset</var> )</h1>\n        <p>When the <code>getInt8</code> method is called with argument <var>byteOffset</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"GetViewValue\"><a href=\"#sec-getviewvalue\">GetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <emu-val>true</emu-val>, <code>\"Int8\"</code>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-ordinarycallbindthis": {"num": "9.2.1.2", "title": "#sec-ordinarycallbindthis OrdinaryCallBindThis ( F, calleeContext, thisArgument )", "html": "<emu-clause id=\"sec-ordinarycallbindthis\" aoid=\"OrdinaryCallBindThis\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinarycallbindthis\">#sec-ordinarycallbindthis</span> OrdinaryCallBindThis ( <var>F</var>, <var>calleeContext</var>, <var>thisArgument</var> )</h1>\n        <p>When the abstract operation OrdinaryCallBindThis is called with <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> <var>F</var>, <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> <var>calleeContext</var>, and ECMAScript value <var>thisArgument</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>thisMode</var> be <var>F</var>.[[ThisMode]].</li><li>If <var>thisMode</var> is <emu-const>lexical</emu-const>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Let <var>calleeRealm</var> be <var>F</var>.[[Realm]].</li><li>Let <var>localEnv</var> be the LexicalEnvironment of <var>calleeContext</var>.</li><li>If <var>thisMode</var> is <emu-const>strict</emu-const>, let <var>thisValue</var> be <var>thisArgument</var>.</li><li>Else,<ol><li>If <var>thisArgument</var> is <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, then<ol><li>Let <var>globalEnv</var> be <var>calleeRealm</var>.[[GlobalEnv]].</li><li>Let <var>globalEnvRec</var> be <var>globalEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>globalEnvRec</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>Let <var>thisValue</var> be <var>globalEnvRec</var>.[[GlobalThisValue]].</li></ol></li><li>Else,<ol><li>Let <var>thisValue</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>thisArgument</var>).</li><li>NOTE: <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref> produces wrapper objects using <var>calleeRealm</var>.</li></ol></li></ol></li><li>Let <var>envRec</var> be <var>localEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> is a <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The next step never returns an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> because <var>envRec</var>.[[ThisBindingStatus]] is not <code>\"initialized\"</code>.</li><li>Return <var>envRec</var>.BindThisValue(<var>thisValue</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-fulfillpromise": {"num": "25.6.1.4", "title": "#sec-fulfillpromise FulfillPromise ( promise, value )", "html": "<emu-clause id=\"sec-fulfillpromise\" aoid=\"FulfillPromise\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-fulfillpromise\">#sec-fulfillpromise</span> FulfillPromise ( <var>promise</var>, <var>value</var> )</h1>\n        <p>When the FulfillPromise abstract operation is called with arguments <var>promise</var> and <var>value</var>, the following steps are taken:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The value of <var>promise</var>.[[PromiseState]] is <code>\"pending\"</code>.</li><li>Let <var>reactions</var> be <var>promise</var>.[[PromiseFulfillReactions]].</li><li>Set <var>promise</var>.[[PromiseResult]] to <var>value</var>.</li><li>Set <var>promise</var>.[[PromiseFulfillReactions]] to <emu-val>undefined</emu-val>.</li><li>Set <var>promise</var>.[[PromiseRejectReactions]] to <emu-val>undefined</emu-val>.</li><li>Set <var>promise</var>.[[PromiseState]] to <code>\"fulfilled\"</code>.</li><li>Return <emu-xref aoid=\"TriggerPromiseReactions\"><a href=\"#sec-triggerpromisereactions\">TriggerPromiseReactions</a></emu-xref>(<var>reactions</var>, <var>value</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-string.prototype.trimstart": {"num": "21.1.3.30", "title": "#sec-string.prototype.trimstart String.prototype.trimStart ( )", "html": "<emu-clause id=\"sec-string.prototype.trimstart\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.trimstart\">#sec-string.prototype.trimstart</span> String.prototype.trimStart ( )</h1>\n        <p>This function interprets a String value as a sequence of UTF-16 encoded code points, as described in  <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>.</p>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"TrimString\"><a href=\"#sec-trimstring\">TrimString</a></emu-xref>(<var>S</var>, <code>\"start\"</code>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>trimStart</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-string.prototype.trim": {"num": "21.1.3.28", "title": "#sec-string.prototype.trim String.prototype.trim ( )", "html": "<emu-clause id=\"sec-string.prototype.trim\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.trim\">#sec-string.prototype.trim</span> String.prototype.trim ( )</h1>\n        <p>This function interprets a String value as a sequence of UTF-16 encoded code points, as described in  <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>.</p>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"TrimString\"><a href=\"#sec-trimstring\">TrimString</a></emu-xref>(<var>S</var>, <code>\"start+end\"</code>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>trim</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-trimstring\"><h1><span class=\"secnum\">21.1.3.28.1</span>#sec-trimstring Runtime Semantics: TrimString ( string, where )</h1>...</div></emu-clause>\n\n      "}, "sec-shared-memory-guidelines": {"num": "27.11", "title": "#sec-shared-memory-guidelines Shared Memory Guidelines", "html": "<emu-clause id=\"sec-shared-memory-guidelines\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-shared-memory-guidelines\">#sec-shared-memory-guidelines</span> Shared Memory Guidelines</h1>\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p>The following are guidelines for ECMAScript programmers working with shared memory.</p>\n      <p>We recommend programs be kept data race free, i.e., make it so that it is impossible for there to be concurrent non-atomic operations on the same memory location. Data race free programs have interleaving semantics where each step in the evaluation semantics of each <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> are interleaved with each other. For data race free programs, it is not necessary to understand the details of the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>. The details are unlikely to build intuition that will help one to better write ECMAScript.</p>\n      <p>More generally, even if a program is not data race free it may have predictable behaviour, so long as atomic operations are not involved in any data races and the operations that race all have the same access size. The simplest way to arrange for atomics not to be involved in races is to ensure that different memory cells are used by atomic and non-atomic operations and that atomic accesses of different sizes are not used to access the same cells at the same time. Effectively, the program should treat shared memory as strongly typed as much as possible. One still cannot depend on the ordering and timing of non-atomic accesses that race, but if memory is treated as strongly typed the racing accesses will not \"tear\" (bits of their values will not be mixed).</p>\n    </div></emu-note>\n\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>The following are guidelines for ECMAScript implementers writing compiler transformations for programs using shared memory.</p>\n      <p>It is desirable to allow most program transformations that are valid in a single-<emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> setting in a multi-<emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> setting, to ensure that the performance of each <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> in a multi-<emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> program is as good as it would be in a single-<emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> setting. Frequently these transformations are hard to judge. We outline some rules about program transformations that are intended to be taken as normative (in that they are implied by the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> or stronger than what the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> implies) but which are likely not exhaustive. These rules are intended to apply to program transformations that precede the introductions of the events that make up the <emu-xref aoid=\"agent-order\"><a href=\"#sec-agent-order\">agent-order</a></emu-xref>.</p>\n      <p>Let an  <dfn>agent-order slice</dfn> be the subset of the <emu-xref aoid=\"agent-order\"><a href=\"#sec-agent-order\">agent-order</a></emu-xref> pertaining to a single <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>.</p>\n      <p>Let  <dfn>possible read values</dfn> of a read event be the set of all values of <emu-xref aoid=\"ValueOfReadEvent\"><a href=\"#sec-valueofreadevent\">ValueOfReadEvent</a></emu-xref> for that event across all valid executions.</p>\n      <p>Any transformation of an agent-order slice that is valid in the absence of shared memory is valid in the presence of shared memory, with the following exceptions.</p>\n      <ul>\n        <li>\n          <p><em>Atomics are carved in stone</em>: Program transformations must not cause the  <code>\"SeqCst\"</code> events in an agent-order slice to be reordered with its  <code>\"Unordered\"</code> operations, nor its  <code>\"SeqCst\"</code> operations to be reordered with each other, nor may a program transformation remove a  <code>\"SeqCst\"</code> operation from the <emu-xref aoid=\"agent-order\"><a href=\"#sec-agent-order\">agent-order</a></emu-xref>.</p>\n          <p>(In practice, the prohibition on reorderings forces a compiler to assume that every  <code>\"SeqCst\"</code> operation is a synchronization and included in the final <emu-xref aoid=\"memory-order\"><a href=\"#sec-memory-order\">memory-order</a></emu-xref>, which it would usually have to assume anyway in the absence of inter-<emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> program analysis. It also forces the compiler to assume that every call where the callee's effects on the <emu-xref aoid=\"memory-order\"><a href=\"#sec-memory-order\">memory-order</a></emu-xref> are unknown may contain  <code>\"SeqCst\"</code> operations.)</p>\n        </li>\n        <li>\n          <p><em>Reads must be stable</em>: Any given shared memory read must only observe a single value in an execution.</p>\n          <p>(For example, if what is semantically a single read in the program is executed multiple times then the program is subsequently allowed to observe only one of the values read. A transformation known as rematerialization can violate this rule.)</p>\n        </li>\n        <li>\n          <p><em>Writes must be stable</em>: All observable writes to shared memory must follow from program semantics in an execution.</p>\n          <p>(For example, a transformation may not introduce certain observable writes, such as by using read-modify-write operations on a larger location to write a smaller datum, writing a value to memory that the program could not have written, or writing a just-read value back to the location it was read from, if that location could have been overwritten by another <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> after the read.)</p>\n        </li>\n        <li>\n          <p><em>Possible read values must be nonempty</em>: Program transformations cannot cause the possible read values of a shared memory read to become empty.</p>\n          <p>(Counterintuitively, this rule in effect restricts transformations on writes, because writes have force in <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> insofar as to be read by read events. For example, writes may be moved and coalesced and sometimes reordered between two  <code>\"SeqCst\"</code> operations, but the transformation may not remove every write that updates a location; some write must be preserved.)</p>\n        </li>\n      </ul>\n      <p>Examples of transformations that remain valid are: merging multiple non-atomic reads from the same location, reordering non-atomic reads, introducing speculative non-atomic reads, merging multiple non-atomic writes to the same location, reordering non-atomic writes to different locations, and hoisting non-atomic reads out of loops even if that affects termination. Note in general that aliased TypedArrays make it hard to prove that locations are different.</p>\n    </div></emu-note>\n\n    <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n      <p>The following are guidelines for ECMAScript implementers generating machine code for shared memory accesses.</p>\n      <p>For architectures with memory models no weaker than those of ARM or Power, non-atomic stores and loads may be compiled to bare stores and loads on the target architecture. Atomic stores and loads may be compiled down to instructions that guarantee sequential consistency. If no such instructions exist, memory barriers are to be employed, such as placing barriers on both sides of a bare store or load. Read-modify-write operations may be compiled to read-modify-write instructions on the target architecture, such as  <code>LOCK</code>-prefixed instructions on x86, load-exclusive/store-exclusive instructions on ARM, and load-link/store-conditional instructions on Power.</p>\n      <p>Specifically, the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> is intended to allow code generation as follows.</p>\n      <ul>\n        <li>Every atomic operation in the program is assumed to be necessary.</li>\n        <li>Atomic operations are never rearranged with each other or with non-atomic operations.</li>\n        <li>Functions are always assumed to perform atomic operations.</li>\n        <li>Atomic operations are never implemented as read-modify-write operations on larger data, but as non-lock-free atomics if the platform does not have atomic operations of the appropriate size. (We already assume that every platform has normal memory access operations of every interesting size.)</li>\n      </ul>\n      <p>Naive code generation uses these patterns:</p>\n      <ul>\n        <li>Regular loads and stores compile to single load and store instructions.</li>\n        <li>Lock-free atomic loads and stores compile to a full (sequentially consistent) fence, a regular load or store, and a full fence.</li>\n        <li>Lock-free atomic read-modify-write accesses compile to a full fence, an atomic read-modify-write instruction sequence, and a full fence.</li>\n        <li>Non-lock-free atomics compile to a spinlock acquire, a full fence, a series of non-atomic load and store instructions, a full fence, and a spinlock release.</li>\n      </ul>\n      <p>That mapping is correct so long as an atomic operation on an address range does not race with a non-atomic write or with an atomic operation of different size. However, that is all we need: the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> effectively demotes the atomic operations involved in a race to non-atomic status. On the other hand, the naive mapping is quite strong: it allows atomic operations to be used as sequentially consistent fences, which the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> does not actually guarantee.</p>\n      <p>A number of local improvements to those basic patterns are also intended to be legal:</p>\n      <ul>\n        <li>There are obvious platform-dependent improvements that remove redundant fences.  For example, on x86 the fences around lock-free atomic loads and stores can always be omitted except for the fence following a store, and no fence is needed for lock-free read-modify-write instructions, as these all use LOCK-prefixed instructions. On many platforms there are fences of several strengths, and weaker fences can be used in certain contexts without destroying sequential consistency.</li>\n        <li>Most modern platforms support lock-free atomics for all the data sizes required by ECMAScript atomics. Should non-lock-free atomics be needed, the fences surrounding the body of the atomic operation can usually be folded into the lock and unlock steps. The simplest solution for non-lock-free atomics is to have a single lock word per SharedArrayBuffer.</li>\n        <li>There are also more complicated platform-dependent local improvements, requiring some code analysis. For example, two back-to-back fences often have the same effect as a single fence, so if code is generated for two atomic operations in sequence, only a single fence need separate them.  On x86, even a single fence separating atomic stores can be omitted, as the fence following a store is only needed to separate the store from a subsequent load.</li>\n      </ul>\n    </div></emu-note>\n  </emu-clause>\n"}, "sec-createdynamicfunction": {"num": "19.2.1.1.1", "title": "#sec-createdynamicfunction Runtime Semantics: CreateDynamicFunction ( constructor, newTarget, kind, args )", "html": "<emu-clause id=\"sec-createdynamicfunction\" aoid=\"CreateDynamicFunction\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createdynamicfunction\">#sec-createdynamicfunction</span> Runtime Semantics: CreateDynamicFunction ( <var>constructor</var>, <var>newTarget</var>, <var>kind</var>, <var>args</var> )</h1>\n          <p>The abstract operation CreateDynamicFunction is called with arguments <var>constructor</var>, <var>newTarget</var>, <var>kind</var>, and <var>args</var>. <var>constructor</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function that is performing this action, <var>newTarget</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> that <code>new</code> was initially applied to, <var>kind</var> is either <code>\"normal\"</code>, <code>\"generator\"</code>, <code>\"async\"</code>, or <code>\"async generator\"</code>, and <var>args</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the actual argument values that were passed to <var>constructor</var>. The following steps are taken:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> has at least two elements.</li><li>Let <var>callerContext</var> be the second to top element of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Let <var>callerRealm</var> be <var>callerContext</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>.</li><li>Let <var>calleeRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>callerRealm</var>, <var>calleeRealm</var>).</li><li>If <var>newTarget</var> is <emu-val>undefined</emu-val>, set <var>newTarget</var> to <var>constructor</var>.</li><li>If <var>kind</var> is <code>\"normal\"</code>, then<ol><li>Let <var>goal</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <code>\"%Function.prototype%\"</code>.</li></ol></li><li>Else if <var>kind</var> is <code>\"generator\"</code>, then<ol><li>Let <var>goal</var> be the grammar symbol <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <code>\"%Generator%\"</code>.</li></ol></li><li>Else if <var>kind</var> is <code>\"async\"</code>, then<ol><li>Let <var>goal</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <code>\"%AsyncFunction.prototype%\"</code>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <code>\"async generator\"</code>.</li><li>Let <var>goal</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <code>\"%AsyncGenerator%\"</code>.</li></ol></li><li>Let <var>argCount</var> be the number of elements in <var>args</var>.</li><li>Let <var>P</var> be the empty String.</li><li>If <var>argCount</var> = 0, let <var>bodyText</var> be the empty String.</li><li>Else if <var>argCount</var> = 1, let <var>bodyText</var> be <var>args</var>[0].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>argCount</var> &gt; 1.</li><li>Let <var>firstArg</var> be <var>args</var>[0].</li><li>Set <var>P</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>firstArg</var>).</li><li>Let <var>k</var> be 1.</li><li>Repeat, while <var>k</var> &lt; <var>argCount</var> - 1<ol><li>Let <var>nextArg</var> be <var>args</var>[<var>k</var>].</li><li>Let <var>nextArgString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nextArg</var>).</li><li>Set <var>P</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the previous value of <var>P</var>, <code>\",\"</code> (a comma), and <var>nextArgString</var>.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Let <var>bodyText</var> be <var>args</var>[<var>k</var>].</li></ol></li><li>Set <var>bodyText</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>bodyText</var>).</li><li>Perform the following substeps in an implementation-dependent order, possibly interleaving parsing and error detection:<ol><li>Let <var>parameters</var> be the result of parsing <var>P</var>, interpreted as UTF-16 encoded Unicode text as described in <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>, using <var>parameterGoal</var> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>. Throw a <emu-val>SyntaxError</emu-val> exception if the parse fails.</li><li>Let <var>body</var> be the result of parsing <var>bodyText</var>, interpreted as UTF-16 encoded Unicode text as described in <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>, using <var>goal</var> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>. Throw a <emu-val>SyntaxError</emu-val> exception if the parse fails.</li><li>Let <var>strict</var> be ContainsUseStrict of <var>body</var>.</li><li>If any <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> errors are detected for <var>parameters</var> or <var>body</var>, throw a <emu-val>SyntaxError</emu-val> exception. If <var>strict</var> is <emu-val>true</emu-val>, the Early Error rules for <emu-grammar><emu-production name=\"UniqueFormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0218c6f5\"><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> are applied.</li><li>If <var>strict</var> is <emu-val>true</emu-val> and IsSimpleParameterList of <var>parameters</var> is <emu-val>false</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If any element of the BoundNames of <var>parameters</var> also occurs in the LexicallyDeclaredNames of <var>body</var>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>body</var> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>body</var> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>kind</var> is <code>\"generator\"</code> or <code>\"async generator\"</code>, then<ol><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>If <var>kind</var> is <code>\"async\"</code> or <code>\"async generator\"</code>, then<ol><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>If <var>strict</var> is <emu-val>true</emu-val>, then<ol><li>If BoundNames of <var>parameters</var> contains any duplicate elements, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li></ol></li><li>Let <var>proto</var> be ?&#160;<emu-xref aoid=\"GetPrototypeFromConstructor\"><a href=\"#sec-getprototypefromconstructor\">GetPrototypeFromConstructor</a></emu-xref>(<var>newTarget</var>, <var>fallbackProto</var>).</li><li>Let <var>F</var> be <emu-xref aoid=\"FunctionAllocate\"><a href=\"#sec-functionallocate\">FunctionAllocate</a></emu-xref>(<var>proto</var>, <var>kind</var>).</li><li>Let <var>realmF</var> be <var>F</var>.[[Realm]].</li><li>Let <var>scope</var> be <var>realmF</var>.[[GlobalEnv]].</li><li>Perform <emu-xref aoid=\"FunctionInitialize\"><a href=\"#sec-functioninitialize\">FunctionInitialize</a></emu-xref>(<var>F</var>, <emu-const>Normal</emu-const>, <var>parameters</var>, <var>body</var>, <var>scope</var>).</li><li>If <var>kind</var> is <code>\"generator\"</code>, then<ol><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%Generator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <code>\"prototype\"</code>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <code>\"async generator\"</code>, then<ol><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%AsyncGenerator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <code>\"prototype\"</code>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <code>\"normal\"</code>, perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>NOTE: Async functions are not constructable and do not have a [[Construct]] internal method or a <code>\"prototype\"</code> property.</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <code>\"anonymous\"</code>).</li><li>Let <var>prefix</var> be the prefix associated with <var>kind</var> in <emu-xref href=\"#table-dynamic-function-sourcetext-prefixes\"><a href=\"#table-dynamic-function-sourcetext-prefixes\" class=\"excluded-xref\" excluded-id=\"table-dynamic-function-sourcetext-prefixes\">#table-dynamic-function-sourcetext-prefixes</a></emu-xref>.</li><li>Let <var>sourceText</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>prefix</var>, <code>\" anonymous(\"</code>, <var>P</var>, 0x000A (LINE FEED), <code>\") {\"</code>, 0x000A (LINE FEED), <var>bodyText</var>, 0x000A (LINE FEED), and <code>\"}\"</code>.</li><li>Set <var>F</var>.[[SourceText]] to <var>sourceText</var>.</li><li>Return <var>F</var>.\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>A <code>\"prototype\"</code> property is created for every non-async function created using CreateDynamicFunction to provide for the possibility that the function will be used as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</p>\n          </div></emu-note>\n\n          <emu-table id=\"table-dynamic-function-sourcetext-prefixes\" caption=\"Dynamic Function SourceText Prefixes\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-dynamic-function-sourcetext-prefixes\">#table-dynamic-function-sourcetext-prefixes</span>: Dynamic Function SourceText Prefixes</figcaption>\n            <table>\n              <tbody>\n                <tr><th>Kind</th><th>Prefix</th></tr>\n                <tr><td><code>\"normal\"</code></td><td><code>\"function\"</code></td></tr>\n                <tr><td><code>\"generator\"</code></td><td><code>\"function*\"</code></td></tr>\n                <tr><td><code>\"async\"</code></td><td><code>\"async function\"</code></td></tr>\n                <tr><td><code>\"async generator\"</code></td><td><code>\"async function*\"</code></td></tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </emu-clause>\n      "}, "sec-dataview.prototype.setint16": {"num": "24.3.4.20", "title": "#sec-dataview.prototype.setint16 DataView.prototype.setInt16 ( byteOffset, value [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.setint16\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.setint16\">#sec-dataview.prototype.setint16</span> DataView.prototype.setInt16 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>setInt16</code> method is called with arguments <var>byteOffset</var> and <var>value</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"SetViewValue\"><a href=\"#sec-setviewvalue\">SetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <code>\"Int16\"</code>, <var>value</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-newfunctionenvironment": {"num": "8.1.2.4", "title": "#sec-newfunctionenvironment NewFunctionEnvironment ( F, newTarget )", "html": "<emu-clause id=\"sec-newfunctionenvironment\" aoid=\"NewFunctionEnvironment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newfunctionenvironment\">#sec-newfunctionenvironment</span> NewFunctionEnvironment ( <var>F</var>, <var>newTarget</var> )</h1>\n        <p>When the abstract operation NewFunctionEnvironment is called with arguments <var>F</var> and <var>newTarget</var> the following steps are performed:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> is an ECMAScript function.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>newTarget</var>) is Undefined or Object.</li><li>Let <var>env</var> be a new <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref>.</li><li>Let <var>envRec</var> be a new <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref> containing no bindings.</li><li>Set <var>envRec</var>.[[FunctionObject]] to <var>F</var>.</li><li>If <var>F</var>.[[ThisMode]] is <emu-const>lexical</emu-const>, set <var>envRec</var>.[[ThisBindingStatus]] to <code>\"lexical\"</code>.</li><li>Else, set <var>envRec</var>.[[ThisBindingStatus]] to <code>\"uninitialized\"</code>.</li><li>Let <var>home</var> be <var>F</var>.[[HomeObject]].</li><li>Set <var>envRec</var>.[[HomeObject]] to <var>home</var>.</li><li>Set <var>envRec</var>.[[NewTarget]] to <var>newTarget</var>.</li><li>Set <var>env</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref> to <var>envRec</var>.</li><li>Set the outer lexical environment reference of <var>env</var> to <var>F</var>.[[Environment]].</li><li>Return <var>env</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-generatorstart": {"num": "25.4.3.1", "title": "#sec-generatorstart GeneratorStart ( generator, generatorBody )", "html": "<emu-clause id=\"sec-generatorstart\" aoid=\"GeneratorStart\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorstart\">#sec-generatorstart</span> GeneratorStart ( <var>generator</var>, <var>generatorBody</var> )</h1>\n        <p>The abstract operation GeneratorStart with arguments <var>generator</var> and <var>generatorBody</var> performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The value of <var>generator</var>.[[GeneratorState]] is <emu-val>undefined</emu-val>.</li><li>Let <var>genContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the Generator component of <var>genContext</var> to <var>generator</var>.</li><li>Set the code evaluation state of <var>genContext</var> such that when evaluation is resumed for that <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> the following steps will be performed:<ol><li>Let <var>result</var> be the result of evaluating <var>generatorBody</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If we return here, the generator either threw an exception or performed either an implicit or explicit return.</li><li>Remove <var>genContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <code>\"completed\"</code>.</li><li>Once a generator enters the <code>\"completed\"</code> state it never leaves it and its associated <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is never resumed. Any execution state associated with <var>generator</var> can be discarded at this point.</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, let <var>resultValue</var> be <emu-val>undefined</emu-val>.</li><li>Else if <var>result</var>.[[Type]] is <emu-const>return</emu-const>, let <var>resultValue</var> be <var>result</var>.[[Value]].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>result</var>.[[Type]] is <emu-const>throw</emu-const>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>resultValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Set <var>generator</var>.[[GeneratorContext]] to <var>genContext</var>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <code>\"suspendedStart\"</code>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-built-in-function-objects": {"num": "9.3", "title": "#sec-built-in-function-objects Built-in Function Objects", "html": "<emu-clause id=\"sec-built-in-function-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-built-in-function-objects\">#sec-built-in-function-objects</span> Built-in Function Objects</h1>\n    <p>The built-in function objects defined in this specification may be implemented as either ECMAScript function objects (<emu-xref href=\"#sec-ecmascript-function-objects\"><a href=\"#sec-ecmascript-function-objects\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects\">#sec-ecmascript-function-objects</a></emu-xref>) whose behaviour is provided using ECMAScript code or as implementation provided function exotic objects whose behaviour is provided in some other manner. In either case, the effect of calling such functions must conform to their specifications. An implementation may also provide additional built-in function objects that are not defined in this specification.</p>\n    <p>If a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is implemented as an <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> it must have the ordinary object behaviour specified in  <emu-xref href=\"#sec-ordinary-object-internal-methods-and-internal-slots\"><a href=\"#sec-ordinary-object-internal-methods-and-internal-slots\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-object-internal-methods-and-internal-slots\">#sec-ordinary-object-internal-methods-and-internal-slots</a></emu-xref>. All such function exotic objects also have [[Prototype]], [[Extensible]], [[Realm]], and [[ScriptOrModule]] internal slots.</p>\n    <p>Unless otherwise specified every built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has the <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref> object as the initial value of its [[Prototype]] internal slot.</p>\n    <p>The behaviour specified for each built-in function via algorithm steps or other means is the specification of the function body behaviour for both [[Call]] and [[Construct]] invocations of the function. However, [[Construct]] invocation is not supported by all built-in functions. For each built-in function, when invoked with [[Call]], the [[Call]] <var>thisArgument</var> provides the <emu-val>this</emu-val> value, the [[Call]] <var>argumentsList</var> provides the named parameters, and the NewTarget value is <emu-val>undefined</emu-val>. When invoked with [[Construct]], the <emu-val>this</emu-val> value is uninitialized, the [[Construct]] <var>argumentsList</var> provides the named parameters, and the [[Construct]] <var>newTarget</var> parameter provides the NewTarget value. If the built-in function is implemented as an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> then this specified behaviour must be implemented by the ECMAScript code that is the body of the function. Built-in functions that are ECMAScript function objects must be strict functions. If a built-in <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> has any [[Call]] behaviour other than throwing a <emu-val>TypeError</emu-val> exception, an ECMAScript implementation of the function must be done in a manner that does not cause the function's [[FunctionKind]] internal slot to have the value <emu-val>\"classConstructor\"</emu-val>.</p>\n    <p>Built-in function objects that are not identified as constructors do not implement the [[Construct]] internal method unless otherwise specified in the description of a particular function. When a built-in <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is called as part of a <code>new</code> expression the <var>argumentsList</var> parameter of the invoked [[Construct]] internal method provides the values for the built-in <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>'s named parameters.</p>\n    <p>Built-in functions that are not constructors do not have a <code>\"prototype\"</code> property unless otherwise specified in the description of a particular function.</p>\n    <p>If a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is not implemented as an ECMAScript function it must provide [[Call]] and [[Construct]] internal methods that conform to the following definitions:</p>\n\n    <div id=\"excluded-sec-built-in-function-objects-call-thisargument-argumentslist\"><h1><span class=\"secnum\">9.3.1</span>#sec-built-in-function-objects-call-thisargument-argumentslist [[Call]] ( thisArgument, argumentsList )</h1>...</div><div id=\"excluded-sec-built-in-function-objects-construct-argumentslist-newtarget\"><h1><span class=\"secnum\">9.3.2</span>#sec-built-in-function-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )</h1>...</div><div id=\"excluded-sec-createbuiltinfunction\"><h1><span class=\"secnum\">9.3.3</span>#sec-createbuiltinfunction CreateBuiltinFunction ( steps, internalSlotsList [ , realm [ , prototype ] ] )</h1>...</div></emu-clause>\n\n  "}, "sec-rejectpromise": {"num": "25.6.1.7", "title": "#sec-rejectpromise RejectPromise ( promise, reason )", "html": "<emu-clause id=\"sec-rejectpromise\" aoid=\"RejectPromise\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-rejectpromise\">#sec-rejectpromise</span> RejectPromise ( <var>promise</var>, <var>reason</var> )</h1>\n        <p>When the RejectPromise abstract operation is called with arguments <var>promise</var> and <var>reason</var>, the following steps are taken:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The value of <var>promise</var>.[[PromiseState]] is <code>\"pending\"</code>.</li><li>Let <var>reactions</var> be <var>promise</var>.[[PromiseRejectReactions]].</li><li>Set <var>promise</var>.[[PromiseResult]] to <var>reason</var>.</li><li>Set <var>promise</var>.[[PromiseFulfillReactions]] to <emu-val>undefined</emu-val>.</li><li>Set <var>promise</var>.[[PromiseRejectReactions]] to <emu-val>undefined</emu-val>.</li><li>Set <var>promise</var>.[[PromiseState]] to <code>\"rejected\"</code>.</li><li>If <var>promise</var>.[[PromiseIsHandled]] is <emu-val>false</emu-val>, perform <emu-xref aoid=\"HostPromiseRejectionTracker\"><a href=\"#sec-host-promise-rejection-tracker\">HostPromiseRejectionTracker</a></emu-xref>(<var>promise</var>, <code>\"reject\"</code>).</li><li>Return <emu-xref aoid=\"TriggerPromiseReactions\"><a href=\"#sec-triggerpromisereactions\">TriggerPromiseReactions</a></emu-xref>(<var>reactions</var>, <var>reason</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-%setiteratorprototype%.next": {"num": "23.2.5.2.1", "title": "#sec-%setiteratorprototype%.next %SetIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%setiteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%setiteratorprototype%.next\">#sec-%setiteratorprototype%.next</span> %SetIteratorPrototype%.next ( )</h1>\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>O</var> does not have all of the internal slots of a Set Iterator Instance (<emu-xref href=\"#sec-properties-of-set-iterator-instances\"><a href=\"#sec-properties-of-set-iterator-instances\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-set-iterator-instances\">#sec-properties-of-set-iterator-instances</a></emu-xref>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>s</var> be <var>O</var>.[[IteratedSet]].</li><li>Let <var>index</var> be <var>O</var>.[[SetNextIndex]].</li><li>Let <var>itemKind</var> be <var>O</var>.[[SetIterationKind]].</li><li>If <var>s</var> is <emu-val>undefined</emu-val>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>s</var> has a [[SetData]] internal slot.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>s</var>.[[SetData]].</li><li>Let <var>numEntries</var> be the number of elements of <var>entries</var>.</li><li>NOTE: <var>numEntries</var> must be redetermined each time this method is evaluated.</li><li>Repeat, while <var>index</var> is less than <var>numEntries</var>,<ol><li>Let <var>e</var> be <var>entries</var>[<var>index</var>].</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>Set <var>O</var>.[[SetNextIndex]] to <var>index</var>.</li><li>If <var>e</var> is not <emu-const>empty</emu-const>, then<ol><li>If <var>itemKind</var> is <code>\"key+value\"</code>, then<ol><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>e</var>, <var>e</var> &#187;), <emu-val>false</emu-val>).</li></ol></li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>e</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li><li>Set <var>O</var>.[[IteratedSet]] to <emu-val>undefined</emu-val>.</li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-%typedarray%.prototype.fill": {"num": "22.2.3.8", "title": "#sec-%typedarray%.prototype.fill %TypedArray%.prototype.fill ( value [ , start [ , end ] ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.fill\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.fill\">#sec-%typedarray%.prototype.fill</span> %TypedArray%.prototype.fill ( <var>value</var> [ , <var>start</var> [ , <var>end</var> ] ] )</h1>\n        <p>The interpretation and use of the arguments of <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.fill</code> are the same as for <code>Array.prototype.fill</code> as defined in  <emu-xref href=\"#sec-array.prototype.fill\"><a href=\"#sec-array.prototype.fill\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.fill\">#sec-array.prototype.fill</a></emu-xref>.</p>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Let <var>len</var> be <var>O</var>.[[ArrayLength]].</li><li>If <var>O</var>.[[ContentType]] is <code>\"BigInt\"</code>, set <var>value</var> to ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-tobigint\">ToBigInt</a></emu-xref>(<var>value</var>).</li><li>Otherwise, set <var>value</var> to ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>value</var>).</li><li>Let <var>relativeStart</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>start</var>).</li><li>If <var>relativeStart</var> &lt; 0, let <var>k</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeStart</var>), 0); else let <var>k</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeStart</var>, <var>len</var>).</li><li>If <var>end</var> is <emu-val>undefined</emu-val>, let <var>relativeEnd</var> be <var>len</var>; else let <var>relativeEnd</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>end</var>).</li><li>If <var>relativeEnd</var> &lt; 0, let <var>final</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeEnd</var>), 0); else let <var>final</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeEnd</var>, <var>len</var>).</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>O</var>.[[ViewedArrayBuffer]]) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Repeat, while <var>k</var> &lt; <var>final</var><ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Perform !&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>Pk</var>, <var>value</var>, <emu-val>true</emu-val>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <var>O</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.set-array-offset": {"num": "22.2.3.23.1", "title": "#sec-%typedarray%.prototype.set-array-offset %TypedArray%.prototype.set ( array [ , offset ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.set-array-offset\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.set-array-offset\">#sec-%typedarray%.prototype.set-array-offset</span> %TypedArray%.prototype.set ( <var>array</var> [ , <var>offset</var> ] )</h1>\n          <p>Sets multiple values in this <var>TypedArray</var>, reading the values from the object <var>array</var>. The optional <var>offset</var> value indicates the first element index in this <var>TypedArray</var> where values are written. If omitted, it is assumed to be 0.</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>array</var> is any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> other than an Object with a [[TypedArrayName]] internal slot. If it is such an Object, the definition in <emu-xref href=\"#sec-%typedarray%.prototype.set-typedarray-offset\"><a href=\"#sec-%typedarray%.prototype.set-typedarray-offset\" class=\"excluded-xref\" excluded-id=\"sec-%typedarray%.prototype.set-typedarray-offset\">#sec-%typedarray%.prototype.set-typedarray-offset</a></emu-xref> applies.</li><li>Let <var>target</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>target</var>, [[TypedArrayName]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>target</var> has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>targetOffset</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>offset</var>).</li><li>If <var>targetOffset</var> &lt; 0, throw a <emu-val>RangeError</emu-val> exception.</li><li>Let <var>targetBuffer</var> be <var>target</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>targetBuffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>targetLength</var> be <var>target</var>.[[ArrayLength]].</li><li>Let <var>targetName</var> be the String value of <var>target</var>.[[TypedArrayName]].</li><li>Let <var>targetElementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>targetName</var>.</li><li>Let <var>targetType</var> be the String value of the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>targetName</var>.</li><li>Let <var>targetByteOffset</var> be <var>target</var>.[[ByteOffset]].</li><li>Let <var>src</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>array</var>).</li><li>Let <var>srcLength</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>src</var>).</li><li>If <var>srcLength</var> + <var>targetOffset</var> &gt; <var>targetLength</var>, throw a <emu-val>RangeError</emu-val> exception.</li><li>Let <var>targetByteIndex</var> be <var>targetOffset</var> &#215; <var>targetElementSize</var> + <var>targetByteOffset</var>.</li><li>Let <var>k</var> be 0.</li><li>Let <var>limit</var> be <var>targetByteIndex</var> + <var>targetElementSize</var> &#215; <var>srcLength</var>.</li><li>Repeat, while <var>targetByteIndex</var> &lt; <var>limit</var><ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>src</var>, <var>Pk</var>).</li><li>If <var>target</var>.[[ContentType]] is <code>\"BigInt\"</code>, set <var>value</var> to ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-tobigint\">ToBigInt</a></emu-xref>(<var>value</var>).</li><li>Otherwise, set <var>value</var> to ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>value</var>).</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>targetBuffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>targetBuffer</var>, <var>targetByteIndex</var>, <var>targetType</var>, <var>value</var>, <emu-val>true</emu-val>, <code>\"Unordered\"</code>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li><li>Set <var>targetByteIndex</var> to <var>targetByteIndex</var> + <var>targetElementSize</var>.</li></ol></li><li>Return <emu-val>undefined</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-dataview.prototype.getbiguint64": {"num": "24.3.4.6", "title": "#sec-dataview.prototype.getbiguint64 DataView.prototype.getBigUint64 ( byteOffset [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.getbiguint64\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.getbiguint64\">#sec-dataview.prototype.getbiguint64</span> DataView.prototype.getBigUint64 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>getBigUint64</code> method is called with argument <var>byteOffset</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>undefined</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"GetViewValue\"><a href=\"#sec-getviewvalue\">GetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <code>\"BigUint64\"</code>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-data-races": {"num": "27.9", "title": "#sec-data-races Data Races", "html": "<emu-clause id=\"sec-data-races\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-data-races\">#sec-data-races</span> Data Races</h1>\n    <p>For an execution <var>execution</var>, two events <var>E</var> and <var>D</var> in <emu-xref aoid=\"SharedDataBlockEventSet\"><a href=\"#sec-sharedatablockeventset\">SharedDataBlockEventSet</a></emu-xref>(<var>execution</var>) are in a data race if the following abstract operation returns <emu-val>true</emu-val>.</p>\n    <emu-alg><ol><li>If <var>E</var> and <var>D</var> are in a race in <var>execution</var>, then<ol><li>If <var>E</var>.[[Order]] is not <code>\"SeqCst\"</code> or <var>D</var>.[[Order]] is not <code>\"SeqCst\"</code>, then<ol><li>Return <emu-val>true</emu-val>.</li></ol></li><li>If <var>E</var> and <var>D</var> have overlapping ranges, then<ol><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <emu-val>false</emu-val>.\n    </li></ol></emu-alg>\n  </emu-clause>\n\n  "}, "sec-isunsignedelementtype": {"num": "24.1.1.5", "title": "#sec-isunsignedelementtype IsUnsignedElementType ( type )", "html": "<emu-clause id=\"sec-isunsignedelementtype\" aoid=\"IsUnsignedElementType\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isunsignedelementtype\">#sec-isunsignedelementtype</span> IsUnsignedElementType ( <var>type</var> )</h1>\n        <p>The abstract operation IsUnsignedElementType verifies if the argument <var>type</var> is an unsigned TypedArray element type. This operation performs the following steps:</p>\n        <emu-alg><ol><li>If <var>type</var> is <code>\"Uint8\"</code>, <code>\"Uint8C\"</code>, <code>\"Uint16\"</code>, <code>\"Uint32\"</code>, or <code>\"BigUint64\"</code>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-getmodulenamespace": {"num": "15.2.1.21", "title": "#sec-getmodulenamespace Runtime Semantics: GetModuleNamespace ( module )", "html": "<emu-clause id=\"sec-getmodulenamespace\" aoid=\"GetModuleNamespace\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getmodulenamespace\">#sec-getmodulenamespace</span> Runtime Semantics: GetModuleNamespace ( <var>module</var> )</h1>\n\n        <p>The GetModuleNamespace abstract operation retrieves the Module Namespace <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">Exotic object</a></emu-xref> representing <var>module</var>'s exports, lazily creating it the first time it was requested, and storing it in <var>module</var>.[[Namespace]] for future retrieval.</p>\n\n        <p>This abstract operation performs the following steps:</p>\n\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> is an instance of a concrete subclass of <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>module</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then <var>module</var>.[[Status]] is not <code>\"unlinked\"</code>.</li><li>Let <var>namespace</var> be <var>module</var>.[[Namespace]].</li><li>If <var>namespace</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>exportedNames</var> be ? <var>module</var>.GetExportedNames().</li><li>Let <var>unambiguousNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>name</var> that is an element of <var>exportedNames</var>, do<ol><li>Let <var>resolution</var> be ? <var>module</var>.ResolveExport(<var>name</var>).</li><li>If <var>resolution</var> is a <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref>, append <var>name</var> to <var>unambiguousNames</var>.</li></ol></li><li>Set <var>namespace</var> to <emu-xref aoid=\"ModuleNamespaceCreate\"><a href=\"#sec-modulenamespacecreate\">ModuleNamespaceCreate</a></emu-xref>(<var>module</var>, <var>unambiguousNames</var>).</li></ol></li><li>Return <var>namespace</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The only way GetModuleNamespace can throw is via one of the triggered <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> calls. Unresolvable names are simply excluded from the namespace at this point. They will lead to a real linking error later unless they are all ambiguous star exports that are not explicitly requested anywhere.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-moduleevaluation": {"num": "15.2.1.16.2", "title": "#sec-moduleevaluation Evaluate ( ) Concrete Method", "html": "<emu-clause id=\"sec-moduleevaluation\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-moduleevaluation\">#sec-moduleevaluation</span> Evaluate ( ) Concrete Method</h1>\n\n          <p>The Evaluate concrete method of a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> implements the corresponding <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> abstract method.</p>\n          <p>Evaluate transitions this module's [[Status]] from <code>\"linked\"</code> to <code>\"evaluated\"</code>.</p>\n\n          <p>If execution results in an exception, that exception is recorded in the [[EvaluationError]] field and rethrown by future invocations of Evaluate.</p>\n\n          <p>This abstract method performs the following steps (most of the work is done by the auxiliary function <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref>):</p>\n\n          <emu-alg><ol><li>Let <var>module</var> be this <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <code>\"linked\"</code> or <code>\"evaluated\"</code>.</li><li>Let <var>stack</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref>(<var>module</var>, <var>stack</var>, 0).</li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>For each <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> <var>m</var> in <var>stack</var>, do<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>m</var>.[[Status]] is <code>\"evaluating\"</code>.</li><li>Set <var>m</var>.[[Status]] to <code>\"evaluated\"</code>.</li><li>Set <var>m</var>.[[EvaluationError]] to <var>result</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <code>\"evaluated\"</code> and <var>module</var>.[[EvaluationError]] is <var>result</var>.</li><li>Return <var>result</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <code>\"evaluated\"</code> and <var>module</var>.[[EvaluationError]] is <emu-val>undefined</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>stack</var> is empty.</li><li>Return <emu-val>undefined</emu-val>.\n          </li></ol></emu-alg>\n\n          <div id=\"excluded-sec-innermoduleevaluation\"><h1><span class=\"secnum\">15.2.1.16.2.1</span>#sec-innermoduleevaluation InnerModuleEvaluation ( module, stack, index )</h1>...</div></emu-clause>\n\n        "}, "sec-isbigintelementtype": {"num": "24.1.1.7", "title": "#sec-isbigintelementtype IsBigIntElementType ( type )", "html": "<emu-clause id=\"sec-isbigintelementtype\" aoid=\"IsBigIntElementType\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isbigintelementtype\">#sec-isbigintelementtype</span> IsBigIntElementType ( <var>type</var> )</h1>\n        <p>The abstract operation IsBigIntElementType verifies if the argument <var>type</var> is a BigInt TypedArray element type. This operation performs the following steps:</p>\n        <emu-alg><ol><li>If <var>type</var> is <code>\"BigUint64\"</code> or <code>\"BigInt64\"</code>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-async-function-constructor-arguments": {"num": "25.7.1.1", "title": "#sec-async-function-constructor-arguments AsyncFunction ( p1, p2, \u2026 , pn, body )", "html": "<emu-clause id=\"sec-async-function-constructor-arguments\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-constructor-arguments\">#sec-async-function-constructor-arguments</span> AsyncFunction ( <var>p1</var>, <var>p2</var>, &#8230; , <var>pn</var>, <var>body</var> )</h1>\n\n        <p>The last argument specifies the body (executable code) of an async function. Any preceding arguments specify formal parameters.</p>\n\n        <p>When the <code>AsyncFunction</code> function is called with some arguments <var>p1</var>, <var>p2</var>, &#8230; , <var>pn</var>, <var>body</var> (where <var>n</var> might be 0, that is, there are no <var>p</var> arguments, and where <var>body</var> might also not be provided), the following steps are taken:</p>\n\n        <emu-alg><ol><li>Let <var>C</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>args</var> be the <var>argumentsList</var> that was passed to this function by [[Call]] or [[Construct]].</li><li>Return <emu-xref aoid=\"CreateDynamicFunction\"><a href=\"#sec-createdynamicfunction\">CreateDynamicFunction</a></emu-xref>(<var>C</var>, NewTarget, <code>\"async\"</code>, <var>args</var>).\n        </li></ol></emu-alg>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">See NOTE for  <emu-xref href=\"#sec-function-p1-p2-pn-body\"><a href=\"#sec-function-p1-p2-pn-body\" class=\"excluded-xref\" excluded-id=\"sec-function-p1-p2-pn-body\">#sec-function-p1-p2-pn-body</a></emu-xref>.</div></emu-note>\n      </emu-clause>\n    "}, "sec-dataview.prototype.setbigint64": {"num": "24.3.4.15", "title": "#sec-dataview.prototype.setbigint64 DataView.prototype.setBigInt64 ( byteOffset, value [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.setbigint64\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.setbigint64\">#sec-dataview.prototype.setbigint64</span> DataView.prototype.setBigInt64 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>setBigInt64</code> method is called with arguments <var>byteOffset</var> and <var>value</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>undefined</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"SetViewValue\"><a href=\"#sec-setviewvalue\">SetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <code>\"BigInt64\"</code>, <var>value</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-dataview.prototype.setfloat32": {"num": "24.3.4.17", "title": "#sec-dataview.prototype.setfloat32 DataView.prototype.setFloat32 ( byteOffset, value [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.setfloat32\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.setfloat32\">#sec-dataview.prototype.setfloat32</span> DataView.prototype.setFloat32 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>setFloat32</code> method is called with arguments <var>byteOffset</var> and <var>value</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"SetViewValue\"><a href=\"#sec-setviewvalue\">SetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <code>\"Float32\"</code>, <var>value</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-dataview.prototype.getint32": {"num": "24.3.4.11", "title": "#sec-dataview.prototype.getint32 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.getint32\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.getint32\">#sec-dataview.prototype.getint32</span> DataView.prototype.getInt32 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>getInt32</code> method is called with argument <var>byteOffset</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"GetViewValue\"><a href=\"#sec-getviewvalue\">GetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <code>\"Int32\"</code>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-asyncgeneratorfunction": {"num": "25.3.1.1", "title": "#sec-asyncgeneratorfunction AsyncGeneratorFunction ( p1, p2, \u2026 , pn, body )", "html": "<emu-clause id=\"sec-asyncgeneratorfunction\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorfunction\">#sec-asyncgeneratorfunction</span> AsyncGeneratorFunction ( <var>p1</var>, <var>p2</var>, &#8230; , <var>pn</var>, <var>body</var> )</h1>\n        <p>The last argument specifies the body (executable code) of an async generator function; any preceding arguments specify formal parameters.</p>\n        <p>When the <code>AsyncGeneratorFunction</code> function is called with some arguments <var>p1</var>, <var>p2</var>, &#8230; , <var>pn</var>, <var>body</var> (where <var>n</var> might be 0, that is, there are no \"<var>p</var>\" arguments, and where <var>body</var> might also not be provided), the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>C</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>args</var> be the <var>argumentsList</var> that was passed to this function by [[Call]] or [[Construct]].</li><li>Return ?&#160;<emu-xref aoid=\"CreateDynamicFunction\"><a href=\"#sec-createdynamicfunction\">CreateDynamicFunction</a></emu-xref>(<var>C</var>, NewTarget, <code>\"async generator\"</code>, <var>args</var>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>See NOTE for  <emu-xref href=\"#sec-function-p1-p2-pn-body\"><a href=\"#sec-function-p1-p2-pn-body\" class=\"excluded-xref\" excluded-id=\"sec-function-p1-p2-pn-body\">#sec-function-p1-p2-pn-body</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-getviewvalue": {"num": "24.3.1.1", "title": "#sec-getviewvalue GetViewValue ( view, requestIndex, isLittleEndian, type )", "html": "<emu-clause id=\"sec-getviewvalue\" aoid=\"GetViewValue\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getviewvalue\">#sec-getviewvalue</span> GetViewValue ( <var>view</var>, <var>requestIndex</var>, <var>isLittleEndian</var>, <var>type</var> )</h1>\n        <p>The abstract operation GetViewValue with arguments <var>view</var>, <var>requestIndex</var>, <var>isLittleEndian</var>, and <var>type</var> is used by functions on DataView instances to retrieve values from the view's buffer. It performs the following steps:</p>\n        <emu-alg><ol><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>view</var>, [[DataView]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>view</var> has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>getIndex</var> be ?&#160;<emu-xref aoid=\"ToIndex\"><a href=\"#sec-toindex\">ToIndex</a></emu-xref>(<var>requestIndex</var>).</li><li>Set <var>isLittleEndian</var> to !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(<var>isLittleEndian</var>).</li><li>Let <var>buffer</var> be <var>view</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>viewOffset</var> be <var>view</var>.[[ByteOffset]].</li><li>Let <var>viewSize</var> be <var>view</var>.[[ByteLength]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for Element Type <var>type</var>.</li><li>If <var>getIndex</var> + <var>elementSize</var> &gt; <var>viewSize</var>, throw a <emu-val>RangeError</emu-val> exception.</li><li>Let <var>bufferIndex</var> be <var>getIndex</var> + <var>viewOffset</var>.</li><li>Return <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref>(<var>buffer</var>, <var>bufferIndex</var>, <var>type</var>, <emu-val>false</emu-val>, <code>\"Unordered\"</code>, <var>isLittleEndian</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-object.keys": {"num": "19.1.2.17", "title": "#sec-object.keys Object.keys ( O )", "html": "<emu-clause id=\"sec-object.keys\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.keys\">#sec-object.keys</span> Object.keys ( <var>O</var> )</h1>\n        <p>When the <code>keys</code> function is called with argument <var>O</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>obj</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>O</var>).</li><li>Let <var>nameList</var> be ?&#160;<emu-xref aoid=\"EnumerableOwnPropertyNames\"><a href=\"#sec-enumerableownpropertynames\">EnumerableOwnPropertyNames</a></emu-xref>(<var>obj</var>, <code>\"key\"</code>).</li><li>Return <emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(<var>nameList</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-promise-executor": {"num": "25.6.3.1", "title": "#sec-promise-executor Promise ( executor )", "html": "<emu-clause id=\"sec-promise-executor\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promise-executor\">#sec-promise-executor</span> Promise ( <var>executor</var> )</h1>\n        <p>When the <code>Promise</code> function is called with argument <var>executor</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>If NewTarget is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>executor</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>promise</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(NewTarget, <code>\"%Promise.prototype%\"</code>, &#171; [[PromiseState]], [[PromiseResult]], [[PromiseFulfillReactions]], [[PromiseRejectReactions]], [[PromiseIsHandled]] &#187;).</li><li>Set <var>promise</var>.[[PromiseState]] to <code>\"pending\"</code>.</li><li>Set <var>promise</var>.[[PromiseFulfillReactions]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Set <var>promise</var>.[[PromiseRejectReactions]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Set <var>promise</var>.[[PromiseIsHandled]] to <emu-val>false</emu-val>.</li><li>Let <var>resolvingFunctions</var> be <emu-xref aoid=\"CreateResolvingFunctions\"><a href=\"#sec-createresolvingfunctions\">CreateResolvingFunctions</a></emu-xref>(<var>promise</var>).</li><li>Let <var>completion</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>executor</var>, <emu-val>undefined</emu-val>, &#171; <var>resolvingFunctions</var>.[[Resolve]], <var>resolvingFunctions</var>.[[Reject]] &#187;).</li><li>If <var>completion</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>resolvingFunctions</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>completion</var>.[[Value]] &#187;).</li></ol></li><li>Return <var>promise</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <var>executor</var> argument must be a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. It is called for initiating and reporting completion of the possibly deferred action represented by this Promise object. The executor is called with two arguments: <var>resolve</var> and <var>reject</var>. These are functions that may be used by the <var>executor</var> function to report eventual completion or failure of the deferred computation. Returning from the executor function does not mean that the deferred action has been completed but only that the request to eventually perform the deferred action has been accepted.</p>\n          <p>The <var>resolve</var> function that is passed to an <var>executor</var> function accepts a single argument. The <var>executor</var> code may eventually call the <var>resolve</var> function to indicate that it wishes to resolve the associated Promise object. The argument passed to the <var>resolve</var> function represents the eventual value of the deferred action and can be either the actual fulfillment value or another Promise object which will provide the value if it is fulfilled.</p>\n          <p>The <var>reject</var> function that is passed to an <var>executor</var> function accepts a single argument. The <var>executor</var> code may eventually call the <var>reject</var> function to indicate that the associated Promise is rejected and will never be fulfilled. The argument passed to the <var>reject</var> function is used as the rejection value of the promise. Typically it will be an <code>Error</code> object.</p>\n          <p>The resolve and reject functions passed to an <var>executor</var> function by the Promise <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> have the capability to actually resolve and reject the associated promise. Subclasses may have different <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> behaviour that passes in customized values for resolve and reject.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-example-cyclic-module-record-graphs": {"num": "15.2.1.16.3", "title": "#sec-example-cyclic-module-record-graphs Example Cyclic Module Record Graphs", "html": "<emu-clause id=\"sec-example-cyclic-module-record-graphs\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-example-cyclic-module-record-graphs\">#sec-example-cyclic-module-record-graphs</span> Example Cyclic Module Record Graphs</h1>\n\n          <p>This non-normative section gives a series of examples of the linking and evaluation of a few common module graphs, with a specific focus on how errors can occur.</p>\n\n          <p>First consider the following simple module graph:</p>\n\n          <emu-figure id=\"figure-module-graph-simple\" caption=\"A simple module graph\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-simple\">#figure-module-graph-simple</span>: A simple module graph</figcaption>\n            <img alt=\"A module graph in which module A depends on module B, and module B depends on module C\" width=\"121\" height=\"211\" src=\"img/module-graph-simple.svg\">\n          </figure></emu-figure>\n\n          <p>Let's first assume that there are no error conditions. When a host first calls <var>A</var>.Link(), this will complete successfully by assumption, and recursively link modules <var>B</var> and <var>C</var> as well, such that <var>A</var>.[[Status]] = <var>B</var>.[[Status]] = <var>C</var>.[[Status]] = <code>\"linked\"</code>. This preparatory step can be performed at any time. Later, when the host is ready to incur any possible side effects of the modules, it can call <var>A</var>.Evaluate(), which will complete successfully (again by assumption), recursively having evaluated first <var>C</var> and then <var>B</var>. Each module's [[Status]] at this point will be <code>\"evaluated\"</code>.</p>\n\n          <p>Consider then cases involving linking errors. If <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> of <var>C</var> succeeds but, thereafter, fails for <var>B</var>, for example because it imports something that <var>C</var> does not provide, then the original <var>A</var>.Link() will fail, and both <var>A</var> and <var>B</var>'s [[Status]] remain <code>\"unlinked\"</code>. <var>C</var>'s [[Status]] has become <code>\"linked\"</code>, though.</p>\n\n          <p>Finally, consider a case involving evaluation errors. If <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> of <var>C</var> succeeds but, thereafter, fails for <var>B</var>, for example because <var>B</var> contains code that throws an exception, then the original <var>A</var>.Evaluate() will fail. The resulting exception will be recorded in both <var>A</var> and <var>B</var>'s [[EvaluationError]] fields, and their [[Status]] will become <code>\"evaluated\"</code>. <var>C</var> will also become <code>\"evaluated\"</code> but, in contrast to <var>A</var> and <var>B</var>, will remain without an [[EvaluationError]], as it successfully completed evaluation. Storing the exception ensures that any time a host tries to reuse <var>A</var> or <var>B</var> by calling their Evaluate() method, it will encounter the same exception. (Hosts are not required to reuse Cyclic Module Records; similarly, hosts are not required to expose the exception objects thrown by these  methods. However, the specification enables such uses.)</p>\n\n          <p>The difference here between linking and evaluation errors is due to how evaluation must be only performed once, as it can cause side effects; it is thus important to remember whether evaluation has already been performed, even if unsuccessfully. (In the error case, it makes sense to also remember the exception because otherwise subsequent Evaluate() calls would have to synthesize a new one.) Linking, on the other hand, is side-effect-free, and thus even if it fails, it can be retried at a later time with no issues.</p>\n\n          <p>Now consider a different type of error condition:</p>\n\n          <emu-figure id=\"figure-module-graph-missing\" caption=\"A module graph with an unresolvable module\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-missing\">#figure-module-graph-missing</span>: A module graph with an unresolvable module</figcaption>\n            <img alt=\"A module graph in which module A depends on a missing (unresolvable) module, represented by ???\" width=\"121\" height=\"121\" src=\"img/module-graph-missing.svg\">\n          </figure></emu-figure>\n\n          <p>In this scenario, module <var>A</var> declares a dependency on some other module, but no <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> exists for that module, i.e. <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> throws an exception when asked for it. This could occur for a variety of reasons, such as the corresponding resource not existing, or the resource existing but <emu-xref aoid=\"ParseModule\"><a href=\"#sec-parsemodule\">ParseModule</a></emu-xref> throwing an exception when trying to parse the resulting source text. Hosts can choose to expose the cause of failure via the exception they throw from <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>. In any case, this exception causes a linking failure, which as before results in <var>A</var>'s [[Status]] remaining <code>\"unlinked\"</code>.</p>\n\n          <p>Lastly, consider a module graph with a cycle:</p>\n\n          <emu-figure id=\"figure-module-graph-cycle\" caption=\"A cyclic module graph\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-cycle\">#figure-module-graph-cycle</span>: A cyclic module graph</figcaption>\n            <img alt=\"A module graph in which module A depends on module B and C, but module B also depends on module A\" width=\"181\" height=\"121\" src=\"img/module-graph-cycle.svg\">\n          </figure></emu-figure>\n\n          <p>Here we assume that the entry point is module <var>A</var>, so that the host proceeds by calling <var>A</var>.Link(), which performs <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>. This in turn calls <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>B</var>. Because of the cycle, this again triggers <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>, but at this point it is a no-op since <var>A</var>.[[Status]] is already <code>\"linking\"</code>. <var>B</var>.[[Status]] itself remains <code>\"linking\"</code> when control gets back to <var>A</var> and <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> is triggered on <var>C</var>. After this returns with <var>C</var>.[[Status]] being <code>\"linked\"</code> , both <var>A</var> and <var>B</var> transition from <code>\"linking\"</code> to <code>\"linked\"</code> together; this is by design, since they form a strongly connected component.</p>\n\n          <p>An analogous story occurs for the evaluation phase of a cyclic module graph, in the success case.</p>\n\n          <p>Now consider a case where <var>A</var> has an linking error; for example, it tries to import a binding from <var>C</var> that does not exist. In that case, the above steps still occur, including the early return from the second call to <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>. However, once we unwind back to the original <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>, it fails during ModuleDeclarationEnvironmentSetup, namely right after <var>C</var>.ResolveExport(). The thrown <emu-val>SyntaxError</emu-val> exception propagates up to <var>A</var>.Link, which resets all modules that are currently on its <var>stack</var> (these are always exactly the modules that are still <code>\"linking\"</code>). Hence both <var>A</var> and <var>B</var> become <code>\"unlinked\"</code>. Note that <var>C</var> is left as <code>\"linked\"</code>.</p>\n\n          <p>Finally, consider a case where <var>A</var> has an evaluation error; for example, its source code throws an exception. In that case, the evaluation-time analog of the above steps still occurs, including the early return from the second call to <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>A</var>. However, once we unwind back to the original <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>A</var>, it fails by assumption. The exception thrown propagates up to <var>A</var>.Evaluate(), which records the error in all modules that are currently on its <var>stack</var> (i.e., the modules that are still <code>\"evaluating\"</code>). Hence both <var>A</var> and <var>B</var> become <code>\"evaluated\"</code> and the exception is recorded in both <var>A</var> and <var>B</var>'s [[EvaluationError]] fields, while <var>C</var> is left as <code>\"evaluated\"</code> with no [[EvaluationError]].</p>\n        </emu-clause>\n      "}, "sec-numerictorawbytes": {"num": "24.1.1.11", "title": "#sec-numerictorawbytes NumericToRawBytes ( type, value, isLittleEndian )", "html": "<emu-clause id=\"sec-numerictorawbytes\" aoid=\"NumericToRawBytes\" oldids=\"sec-numbertorawbytes\">\n        <span id=\"sec-numbertorawbytes\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numerictorawbytes\">#sec-numerictorawbytes</span> NumericToRawBytes ( <var>type</var>, <var>value</var>, <var>isLittleEndian</var> )</h1>\n        <p>The abstract operation NumericToRawBytes takes three parameters, a String <var>type</var>, a BigInt or a Number <var>value</var>, and a Boolean <var>isLittleEndian</var>. This operation performs the following steps:</p>\n        <emu-alg><ol><li>If <var>type</var> is <code>\"Float32\"</code>, then<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the 4 bytes that are the result of converting <var>value</var> to IEEE 754-2008 binary32 format using roundTiesToEven mode. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are arranged in big endian order. Otherwise, the bytes are arranged in little endian order. If <var>value</var> is <emu-val>NaN</emu-val>, <var>rawBytes</var> may be set to any implementation chosen IEEE 754-2008 binary32 format Not-a-Number encoding. An implementation must always choose the same encoding for each implementation distinguishable <emu-val>NaN</emu-val> value.</li></ol></li><li>Else if <var>type</var> is <code>\"Float64\"</code>, then<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the 8 bytes that are the IEEE 754-2008 binary64 format encoding of <var>value</var>. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are arranged in big endian order. Otherwise, the bytes are arranged in little endian order. If <var>value</var> is <emu-val>NaN</emu-val>, <var>rawBytes</var> may be set to any implementation chosen IEEE 754-2008 binary64 format Not-a-Number encoding. An implementation must always choose the same encoding for each implementation distinguishable <emu-val>NaN</emu-val> value.</li></ol></li><li>Else,<ol><li>Let <var>n</var> be the Element Size specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for Element Type <var>type</var>.</li><li>Let <var>convOp</var> be the abstract operation named in the Conversion Operation column in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for Element Type <var>type</var>.</li><li>Let <var>intValue</var> be <var>convOp</var>(<var>value</var>) treated as a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref>, whether the result is a BigInt or Number.</li><li>If <var>intValue</var> &#8805; 0<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>, then<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the <var>n</var>-byte binary encoding of <var>intValue</var>. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are ordered in big endian order. Otherwise, the bytes are ordered in little endian order.</li></ol></li><li>Else,<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the <var>n</var>-byte binary 2's complement encoding of <var>intValue</var>. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are ordered in big endian order. Otherwise, the bytes are ordered in little endian order.</li></ol></li></ol></li><li>Return <var>rawBytes</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-promisereactionjob": {"num": "25.6.2.1", "title": "#sec-promisereactionjob PromiseReactionJob ( reaction, argument )", "html": "<emu-clause id=\"sec-promisereactionjob\" aoid=\"PromiseReactionJob\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promisereactionjob\">#sec-promisereactionjob</span> PromiseReactionJob ( <var>reaction</var>, <var>argument</var> )</h1>\n        <p>The job PromiseReactionJob with parameters <var>reaction</var> and <var>argument</var> applies the appropriate handler to the incoming value, and uses the handler's return value to resolve or reject the derived promise associated with that handler.</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>reaction</var> is a PromiseReaction <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>.</li><li>Let <var>promiseCapability</var> be <var>reaction</var>.[[Capability]].</li><li>Let <var>type</var> be <var>reaction</var>.[[Type]].</li><li>Let <var>handler</var> be <var>reaction</var>.[[Handler]].</li><li>If <var>handler</var> is <emu-val>undefined</emu-val>, then<ol><li>If <var>type</var> is <code>\"Fulfill\"</code>, let <var>handlerResult</var> be <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>argument</var>).</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>type</var> is <code>\"Reject\"</code>.</li><li>Let <var>handlerResult</var> be <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(<var>argument</var>).</li></ol></li></ol></li><li>Else, let <var>handlerResult</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>handler</var>, <emu-val>undefined</emu-val>, &#171; <var>argument</var> &#187;).</li><li>If <var>promiseCapability</var> is <emu-val>undefined</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>handlerResult</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li>If <var>handlerResult</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>handlerResult</var>.[[Value]] &#187;).</li></ol></li><li>Else,<ol><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>handlerResult</var>.[[Value]] &#187;).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>status</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.values": {"num": "22.2.3.30", "title": "#sec-%typedarray%.prototype.values %TypedArray%.prototype.values ( )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.values\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.values\">#sec-%typedarray%.prototype.values</span> %TypedArray%.prototype.values ( )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Return <emu-xref aoid=\"CreateArrayIterator\"><a href=\"#sec-createarrayiterator\">CreateArrayIterator</a></emu-xref>(<var>O</var>, <code>\"value\"</code>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-setviewvalue": {"num": "24.3.1.2", "title": "#sec-setviewvalue SetViewValue ( view, requestIndex, isLittleEndian, type, value )", "html": "<emu-clause id=\"sec-setviewvalue\" aoid=\"SetViewValue\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-setviewvalue\">#sec-setviewvalue</span> SetViewValue ( <var>view</var>, <var>requestIndex</var>, <var>isLittleEndian</var>, <var>type</var>, <var>value</var> )</h1>\n        <p>The abstract operation SetViewValue with arguments <var>view</var>, <var>requestIndex</var>, <var>isLittleEndian</var>, <var>type</var>, and <var>value</var> is used by functions on DataView instances to store values into the view's buffer. It performs the following steps:</p>\n        <emu-alg><ol><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>view</var>, [[DataView]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>view</var> has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>getIndex</var> be ?&#160;<emu-xref aoid=\"ToIndex\"><a href=\"#sec-toindex\">ToIndex</a></emu-xref>(<var>requestIndex</var>).</li><li>If !&#160;<emu-xref aoid=\"IsBigIntElementType\"><a href=\"#sec-isbigintelementtype\">IsBigIntElementType</a></emu-xref>(<var>type</var>) is <emu-val>true</emu-val>, let <var>numberValue</var> be ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-tobigint\">ToBigInt</a></emu-xref>(<var>value</var>).</li><li>Otherwise, let <var>numberValue</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>value</var>).</li><li>Set <var>isLittleEndian</var> to !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(<var>isLittleEndian</var>).</li><li>Let <var>buffer</var> be <var>view</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>viewOffset</var> be <var>view</var>.[[ByteOffset]].</li><li>Let <var>viewSize</var> be <var>view</var>.[[ByteLength]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for Element Type <var>type</var>.</li><li>If <var>getIndex</var> + <var>elementSize</var> &gt; <var>viewSize</var>, throw a <emu-val>RangeError</emu-val> exception.</li><li>Let <var>bufferIndex</var> be <var>getIndex</var> + <var>viewOffset</var>.</li><li>Return <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>buffer</var>, <var>bufferIndex</var>, <var>type</var>, <var>numberValue</var>, <emu-val>false</emu-val>, <code>\"Unordered\"</code>, <var>isLittleEndian</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-functioninitialize": {"num": "9.2.4", "title": "#sec-functioninitialize FunctionInitialize ( F, kind, ParameterList, Body, Scope )", "html": "<emu-clause id=\"sec-functioninitialize\" aoid=\"FunctionInitialize\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-functioninitialize\">#sec-functioninitialize</span> FunctionInitialize ( <var>F</var>, <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var> )</h1>\n      <p>The abstract operation FunctionInitialize requires the arguments: a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> <var>F</var>, <var>kind</var> which is one of (Normal, Method, Arrow), a parameter list <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>ParameterList</var>, a body <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>Body</var>, a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> specified by <var>Scope</var>. FunctionInitialize performs the following steps:</p>\n      <emu-alg><ol><li>Let <var>len</var> be the ExpectedArgumentCount of <var>ParameterList</var>.</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionLength\"><a href=\"#sec-setfunctionlength\">SetFunctionLength</a></emu-xref>(<var>F</var>, <var>len</var>).</li><li>If the source text matching <var>Body</var> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>Strict</var> be <emu-val>true</emu-val>; else let <var>Strict</var> be <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Strict]] to <var>Strict</var>.</li><li>Set <var>F</var>.[[Environment]] to <var>Scope</var>.</li><li>Set <var>F</var>.[[FormalParameters]] to <var>ParameterList</var>.</li><li>Set <var>F</var>.[[ECMAScriptCode]] to <var>Body</var>.</li><li>Set <var>F</var>.[[ScriptOrModule]] to <emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>().</li><li>If <var>kind</var> is <emu-const>Arrow</emu-const>, set <var>F</var>.[[ThisMode]] to <emu-const>lexical</emu-const>.</li><li>Else if <var>Strict</var> is <emu-val>true</emu-val>, set <var>F</var>.[[ThisMode]] to <emu-const>strict</emu-const>.</li><li>Else, set <var>F</var>.[[ThisMode]] to <emu-const>global</emu-const>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-asyncgeneratorfunctioncreate": {"num": "9.2.7", "title": "#sec-asyncgeneratorfunctioncreate AsyncGeneratorFunctionCreate ( kind, ParameterList, Body, Scope )", "html": "<emu-clause id=\"sec-asyncgeneratorfunctioncreate\" aoid=\"AsyncGeneratorFunctionCreate\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorfunctioncreate\">#sec-asyncgeneratorfunctioncreate</span> AsyncGeneratorFunctionCreate ( <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var> )</h1>\n      <p>The abstract operation AsyncGeneratorFunctionCreate requires the arguments: <var>kind</var> which is one of (<emu-const>Normal</emu-const>, <emu-const>Method</emu-const>), a parameter list <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>ParameterList</var>, a body <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>Body</var>, a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> specified by <var>Scope</var>. AsyncGeneratorFunctionCreate performs the following steps:</p>\n      <emu-alg><ol><li>Let <var>functionPrototype</var> be <emu-xref href=\"#sec-asyncgeneratorfunction-prototype\"><a href=\"#sec-asyncgeneratorfunction-prototype\">%AsyncGenerator%</a></emu-xref>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"FunctionAllocate\"><a href=\"#sec-functionallocate\">FunctionAllocate</a></emu-xref>(<var>functionPrototype</var>, <code>\"generator\"</code>).</li><li>Return !&#160;<emu-xref aoid=\"FunctionInitialize\"><a href=\"#sec-functioninitialize\">FunctionInitialize</a></emu-xref>(<var>F</var>, <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-algorithm-conventions": {"num": "5.2", "title": "#sec-algorithm-conventions Algorithm Conventions", "html": "<emu-clause id=\"sec-algorithm-conventions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-algorithm-conventions\">#sec-algorithm-conventions</span> Algorithm Conventions</h1>\n    <p>The specification often uses a numbered list to specify steps in an algorithm. These algorithms are used to precisely specify the required semantics of ECMAScript language constructs. The algorithms are not intended to imply the use of any specific implementation technique. In practice, there may be more efficient algorithms available to implement a given feature.</p>\n    <p>Algorithms may be explicitly parameterized, in which case the names and usage of the parameters must be provided as part of the algorithm's definition.</p>\n    <p>Algorithm steps may be subdivided into sequential substeps. Substeps are indented and may themselves be further divided into indented substeps. Outline numbering conventions are used to identify substeps with the first level of substeps labelled with lower case alphabetic characters and the second level of substeps labelled with lower case roman numerals. If more than three levels are required these rules repeat with the fourth level using numeric labels. For example:</p>\n    <emu-alg><ol><li>Top-level step<ol><li>Substep.</li><li>Substep.<ol><li>Subsubstep.<ol><li>Subsubsubstep<ol><li>Subsubsubsubstep<ol><li>Subsubsubsubsubstep\n    </li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></emu-alg>\n    <p>A step or substep may be written as an &#8220;if&#8221; predicate that conditions its substeps. In this case, the substeps are only applied if the predicate is true. If a step or substep begins with the word &#8220;else&#8221;, it is a predicate that is the negation of the preceding &#8220;if&#8221; predicate step at the same level.</p>\n    <p>A step may specify the iterative application of its substeps.</p>\n    <p>A step that begins with &#8220;<dfn id=\"assert\">Assert</dfn>:&#8221; asserts an invariant condition of its algorithm. Such assertions are used to make explicit algorithmic invariants that would otherwise be implicit. Such assertions add no additional semantic requirements and hence need not be checked by an implementation. They are used simply to clarify algorithms.</p>\n    <p>Algorithm steps may declare named aliases for any value using the form &#8220;Let <var>x</var> be <var>someValue</var>&#8221;. These aliases are reference-like in that both <var>x</var> and <var>someValue</var> refer to the same underlying data and modifications to either are visible to both. Algorithm steps that want to avoid this reference-like behaviour should explicitly make a copy of the right-hand side: &#8220;Let <var>x</var> be a copy of <var>someValue</var>&#8221; creates a shallow copy of <var>someValue</var>.</p>\n    <p>Once declared, an alias may be referenced in any subsequent steps and must not be referenced from steps prior to the alias's declaration. Aliases may be modified using the form &#8220;Set <var>x</var> to <var>someOtherValue</var>&#8221;.</p>\n\n    <div id=\"excluded-sec-algorithm-conventions-abstract-operations\"><h1><span class=\"secnum\">5.2.1</span>#sec-algorithm-conventions-abstract-operations Abstract Operations</h1>...</div><div id=\"excluded-sec-algorithm-conventions-syntax-directed-operations\"><h1><span class=\"secnum\">5.2.2</span>#sec-algorithm-conventions-syntax-directed-operations Syntax-Directed Operations</h1>...</div><div id=\"excluded-sec-runtime-semantics\"><h1><span class=\"secnum\">5.2.3</span>#sec-runtime-semantics Runtime Semantics</h1>...</div><div id=\"excluded-sec-static-semantic-rules\"><h1><span class=\"secnum\">5.2.4</span>#sec-static-semantic-rules Static Semantics</h1>...</div><div id=\"excluded-sec-mathematical-operations\"><h1><span class=\"secnum\">5.2.5</span>#sec-mathematical-operations Mathematical Operations</h1>...</div></emu-clause>\n"}, "sec-generatorfunctioncreate": {"num": "9.2.6", "title": "#sec-generatorfunctioncreate GeneratorFunctionCreate ( kind, ParameterList, Body, Scope )", "html": "<emu-clause id=\"sec-generatorfunctioncreate\" aoid=\"GeneratorFunctionCreate\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorfunctioncreate\">#sec-generatorfunctioncreate</span> GeneratorFunctionCreate ( <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var> )</h1>\n      <p>The abstract operation GeneratorFunctionCreate requires the arguments: <var>kind</var> which is one of (Normal, Method), a parameter list <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>ParameterList</var>, a body <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>Body</var>, a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> specified by <var>Scope</var>. GeneratorFunctionCreate performs the following steps:</p>\n      <emu-alg><ol><li>Let <var>functionPrototype</var> be <emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%Generator%</a></emu-xref>.</li><li>Let <var>F</var> be <emu-xref aoid=\"FunctionAllocate\"><a href=\"#sec-functionallocate\">FunctionAllocate</a></emu-xref>(<var>functionPrototype</var>, <code>\"generator\"</code>).</li><li>Return <emu-xref aoid=\"FunctionInitialize\"><a href=\"#sec-functioninitialize\">FunctionInitialize</a></emu-xref>(<var>F</var>, <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-generatorresume": {"num": "25.4.3.3", "title": "#sec-generatorresume GeneratorResume ( generator, value )", "html": "<emu-clause id=\"sec-generatorresume\" aoid=\"GeneratorResume\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorresume\">#sec-generatorresume</span> GeneratorResume ( <var>generator</var>, <var>value</var> )</h1>\n        <p>The abstract operation GeneratorResume with arguments <var>generator</var> and <var>value</var> performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>state</var> be ?&#160;<emu-xref aoid=\"GeneratorValidate\"><a href=\"#sec-generatorvalidate\">GeneratorValidate</a></emu-xref>(<var>generator</var>).</li><li>If <var>state</var> is <code>\"completed\"</code>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>state</var> is either <code>\"suspendedStart\"</code> or <code>\"suspendedYield\"</code>.</li><li>Let <var>genContext</var> be <var>generator</var>.[[GeneratorContext]].</li><li>Let <var>methodContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref aoid=\"Suspend\"><a href=\"#sec-suspend\">Suspend</a></emu-xref> <var>methodContext</var>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <code>\"executing\"</code>.</li><li>Push <var>genContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>genContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>genContext</var> using <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>value</var>) as the result of the operation that suspended it. Let <var>result</var> be the value returned by the resumed computation.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we return here, <var>genContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>methodContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-object.seal": {"num": "19.1.2.20", "title": "#sec-object.seal Object.seal ( O )", "html": "<emu-clause id=\"sec-object.seal\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.seal\">#sec-object.seal</span> Object.seal ( <var>O</var> )</h1>\n        <p>When the <code>seal</code> function is called, the following steps are taken:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, return <var>O</var>.</li><li>Let <var>status</var> be ?&#160;<emu-xref aoid=\"SetIntegrityLevel\"><a href=\"#sec-setintegritylevel\">SetIntegrityLevel</a></emu-xref>(<var>O</var>, <code>\"sealed\"</code>).</li><li>If <var>status</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>O</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-properties-of-promise-instances": {"num": "25.6.6", "title": "#sec-properties-of-promise-instances Properties of Promise Instances", "html": "<emu-clause id=\"sec-properties-of-promise-instances\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-promise-instances\">#sec-properties-of-promise-instances</span> Properties of Promise Instances</h1>\n      <p>Promise instances are ordinary objects that inherit properties from the Promise prototype object (the intrinsic, %Promise.prototype%). Promise instances are initially created with the internal slots described in  <emu-xref href=\"#table-59\"><a href=\"#table-59\" class=\"excluded-xref\" excluded-id=\"table-59\">#table-59</a></emu-xref>.</p>\n      <emu-table id=\"table-59\" caption=\"Internal Slots of Promise Instances\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-59\">#table-59</span>: Internal Slots of Promise Instances</figcaption>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Internal Slot\n            \n            </th>\n            <th>\n              Description\n            \n            </th>\n          </tr>\n          <tr>\n            <td>\n              [[PromiseState]]\n            \n            </td>\n            <td>\n              A String value that governs how a promise will react to incoming calls to its <code>then</code> method. The possible values are: <code>\"pending\"</code>, <code>\"fulfilled\"</code>, and <code>\"rejected\"</code>.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[PromiseResult]]\n            \n            </td>\n            <td>\n              The value with which the promise has been fulfilled or rejected, if any. Only meaningful if [[PromiseState]] is not <code>\"pending\"</code>.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[PromiseFulfillReactions]]\n            \n            </td>\n            <td>\n              A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of PromiseReaction records to be processed when/if the promise transitions from the <code>\"pending\"</code> state to the <code>\"fulfilled\"</code> state.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[PromiseRejectReactions]]\n            \n            </td>\n            <td>\n              A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of PromiseReaction records to be processed when/if the promise transitions from the <code>\"pending\"</code> state to the <code>\"rejected\"</code> state.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[PromiseIsHandled]]\n            \n            </td>\n            <td>\n              A boolean indicating whether the promise has ever had a fulfillment or rejection handler; used in unhandled rejection tracking.\n            \n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n    </emu-clause>\n  "}, "sec-getmodifysetvalueinbuffer": {"num": "24.1.1.13", "title": "#sec-getmodifysetvalueinbuffer GetModifySetValueInBuffer ( arrayBuffer, byteIndex, type, value, op [ , isLittleEndian ] )", "html": "<emu-clause id=\"sec-getmodifysetvalueinbuffer\" aoid=\"GetModifySetValueInBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getmodifysetvalueinbuffer\">#sec-getmodifysetvalueinbuffer</span> GetModifySetValueInBuffer ( <var>arrayBuffer</var>, <var>byteIndex</var>, <var>type</var>, <var>value</var>, <var>op</var> [ , <var>isLittleEndian</var> ] )</h1>\n        <p>The abstract operation GetModifySetValueInBuffer takes six parameters, a SharedArrayBuffer <var>arrayBuffer</var>, a nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>byteIndex</var>, a String <var>type</var>, a Number or BigInt <var>value</var>, a semantic function <var>op</var>, and optionally a Boolean <var>isLittleEndian</var>. This operation performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: There are sufficient bytes in <var>arrayBuffer</var> starting at <var>byteIndex</var> to represent a value of <var>type</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>byteIndex</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value &#8805; 0.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is BigInt if !&#160;<emu-xref aoid=\"IsBigIntElementType\"><a href=\"#sec-isbigintelementtype\">IsBigIntElementType</a></emu-xref>(<var>type</var>) is <emu-val>true</emu-val>; otherwise, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Number.</li><li>Let <var>block</var> be <var>arrayBuffer</var>.[[ArrayBufferData]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for Element Type <var>type</var>.</li><li>If <var>isLittleEndian</var> is not present, set <var>isLittleEndian</var> to the value of the [[LittleEndian]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>rawBytes</var> be <emu-xref aoid=\"NumericToRawBytes\"><a href=\"#sec-numerictorawbytes\">NumericToRawBytes</a></emu-xref>(<var>type</var>, <var>value</var>, <var>isLittleEndian</var>).</li><li>Let <var>execution</var> be the [[CandidateExecution]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>eventList</var> be the [[EventList]] field of the element in <var>execution</var>.[[EventsRecords]] whose [[AgentSignifier]] is <emu-xref aoid=\"AgentSignifier\"><a href=\"#sec-agentsignifier\">AgentSignifier</a></emu-xref>().</li><li>Let <var>rawBytesRead</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of length <var>elementSize</var> of nondeterministically chosen byte values.</li><li>NOTE: In implementations, <var>rawBytesRead</var> is the result of a load-link, of a load-exclusive, or of an operand of a read-modify-write instruction on the underlying hardware. The nondeterminism is a semantic prescription of the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> to describe observable behaviour of hardware with weak consistency.</li><li>Let <var>rmwEvent</var> be <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> { [[Order]]: <code>\"SeqCst\"</code>, [[NoTear]]: <emu-val>true</emu-val>, [[Block]]: <var>block</var>, [[ByteIndex]]: <var>byteIndex</var>, [[ElementSize]]: <var>elementSize</var>, [[Payload]]: <var>rawBytes</var>, [[ModifyOp]]: <var>op</var> }.</li><li>Append <var>rmwEvent</var> to <var>eventList</var>.</li><li>Append <emu-xref href=\"#sec-chosen-value-records\"><a href=\"#sec-chosen-value-records\">Chosen Value Record</a></emu-xref> { [[Event]]: <var>rmwEvent</var>, [[ChosenValue]]: <var>rawBytesRead</var> } to <var>execution</var>.[[ChosenValues]].</li><li>Return <emu-xref aoid=\"RawBytesToNumeric\"><a href=\"#sec-rawbytestonumeric\">RawBytesToNumeric</a></emu-xref>(<var>type</var>, <var>rawBytesRead</var>, <var>isLittleEndian</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-properties-of-set-iterator-instances": {"num": "23.2.5.3", "title": "#sec-properties-of-set-iterator-instances Properties of Set Iterator Instances", "html": "<emu-clause id=\"sec-properties-of-set-iterator-instances\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-set-iterator-instances\">#sec-properties-of-set-iterator-instances</span> Properties of Set Iterator Instances</h1>\n        <p>Set Iterator instances are ordinary objects that inherit properties from the <emu-xref href=\"#sec-%setiteratorprototype%-object\"><a href=\"#sec-%setiteratorprototype%-object\">%SetIteratorPrototype%</a></emu-xref> intrinsic object. Set Iterator instances are initially created with the internal slots specified in  <emu-xref href=\"#table-51\"><a href=\"#table-51\" class=\"excluded-xref\" excluded-id=\"table-51\">#table-51</a></emu-xref>.</p>\n        <emu-table id=\"table-51\" caption=\"Internal Slots of Set Iterator Instances\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-51\">#table-51</span>: Internal Slots of Set Iterator Instances</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Internal Slot\n              \n              </th>\n              <th>\n                Description\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[IteratedSet]]\n              \n              </td>\n              <td>\n                The Set object that is being iterated.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[SetNextIndex]]\n              \n              </td>\n              <td>\n                The <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> of the next Set data element to be examined by this iterator\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[SetIterationKind]]\n              \n              </td>\n              <td>\n                A String value that identifies what is to be returned for each element of the iteration. The possible values are: <code>\"key\"</code>, <code>\"value\"</code>, <code>\"key+value\"</code>. <code>\"key\"</code> and <code>\"value\"</code> have the same meaning.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n    "}, "sec-testintegritylevel": {"num": "7.3.15", "title": "#sec-testintegritylevel TestIntegrityLevel ( O, level )", "html": "<emu-clause id=\"sec-testintegritylevel\" aoid=\"TestIntegrityLevel\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-testintegritylevel\">#sec-testintegritylevel</span> TestIntegrityLevel ( <var>O</var>, <var>level</var> )</h1>\n      <p>The abstract operation TestIntegrityLevel is used to determine if the set of own properties of an object are fixed. This abstract operation performs the following steps:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>level</var> is either <code>\"sealed\"</code> or <code>\"frozen\"</code>.</li><li>Let <var>extensible</var> be ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>O</var>).</li><li>If <var>extensible</var> is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>NOTE: If the object is extensible, none of its properties are examined.</li><li>Let <var>keys</var> be ? <var>O</var>.[[OwnPropertyKeys]]().</li><li>For each element <var>k</var> of <var>keys</var>, do<ol><li>Let <var>currentDesc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>k</var>).</li><li>If <var>currentDesc</var> is not <emu-val>undefined</emu-val>, then<ol><li>If <var>currentDesc</var>.[[Configurable]] is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>level</var> is <code>\"frozen\"</code> and <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>currentDesc</var>) is <emu-val>true</emu-val>, then<ol><li>If <var>currentDesc</var>.[[Writable]] is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li></ol></li></ol></li></ol></li><li>Return <emu-val>true</emu-val>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-createsharedbytedatablock": {"num": "6.2.7.2", "title": "#sec-createsharedbytedatablock CreateSharedByteDataBlock ( size )", "html": "<emu-clause id=\"sec-createsharedbytedatablock\" aoid=\"CreateSharedByteDataBlock\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createsharedbytedatablock\">#sec-createsharedbytedatablock</span> CreateSharedByteDataBlock ( <var>size</var> )</h1>\n        <p>When the abstract operation CreateSharedByteDataBlock is called with <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> argument <var>size</var>, the following steps are taken:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>size</var> &#8805; 0.</li><li>Let <var>db</var> be a new <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref> value consisting of <var>size</var> bytes. If it is impossible to create such a <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref>, throw a <emu-val>RangeError</emu-val> exception.</li><li>Let <var>execution</var> be the [[CandidateExecution]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>eventList</var> be the [[EventList]] field of the element in <var>execution</var>.[[EventsRecords]] whose [[AgentSignifier]] is <emu-xref aoid=\"AgentSignifier\"><a href=\"#sec-agentsignifier\">AgentSignifier</a></emu-xref>().</li><li>Let <var>zero</var> be &#171; 0 &#187;.</li><li>For each index <var>i</var> of <var>db</var>, do<ol><li>Append <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> { [[Order]]: <code>\"Init\"</code>, [[NoTear]]: <emu-val>true</emu-val>, [[Block]]: <var>db</var>, [[ByteIndex]]: <var>i</var>, [[ElementSize]]: 1, [[Payload]]: <var>zero</var> } to <var>eventList</var>.</li></ol></li><li>Return <var>db</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-generatoryield": {"num": "25.4.3.6", "title": "#sec-generatoryield GeneratorYield ( iterNextObj )", "html": "<emu-clause id=\"sec-generatoryield\" aoid=\"GeneratorYield\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatoryield\">#sec-generatoryield</span> GeneratorYield ( <var>iterNextObj</var> )</h1>\n        <p>The abstract operation GeneratorYield with argument <var>iterNextObj</var> performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iterNextObj</var> is an Object that implements the <i>IteratorResult</i> interface.</li><li>Let <var>genContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>genContext</var> is the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> of a generator.</li><li>Let <var>generator</var> be the value of the Generator component of <var>genContext</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>() is <emu-const>sync</emu-const>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <code>\"suspendedYield\"</code>.</li><li>Remove <var>genContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the code evaluation state of <var>genContext</var> such that when evaluation is resumed with a <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> <var>resumptionValue</var> the following steps will be performed:<ol><li>Return <var>resumptionValue</var>.</li><li>NOTE: This returns to the evaluation of the <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> that originally called this abstract operation.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>iterNextObj</var>).</li><li>NOTE: This returns to the evaluation of the operation that had most previously resumed evaluation of <var>genContext</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-atomicload": {"num": "24.4.1.12", "title": "#sec-atomicload AtomicLoad ( typedArray, index )", "html": "<emu-clause id=\"sec-atomicload\" aoid=\"AtomicLoad\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomicload\">#sec-atomicload</span> AtomicLoad ( <var>typedArray</var>, <var>index</var> )</h1>\n        <p>The abstract operation AtomicLoad takes two arguments, <var>typedArray</var>, <var>index</var>. The operation atomically loads a value and returns the loaded value. It performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateSharedIntegerTypedArray\"><a href=\"#sec-validatesharedintegertypedarray\">ValidateSharedIntegerTypedArray</a></emu-xref>(<var>typedArray</var>).</li><li>Let <var>i</var> be ?&#160;<emu-xref aoid=\"ValidateAtomicAccess\"><a href=\"#sec-validateatomicaccess\">ValidateAtomicAccess</a></emu-xref>(<var>typedArray</var>, <var>index</var>).</li><li>Let <var>arrayTypeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>elementType</var> be the String value of the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>offset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>Let <var>indexedPosition</var> be (<var>i</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Return <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref>(<var>buffer</var>, <var>indexedPosition</var>, <var>elementType</var>, <emu-val>true</emu-val>, <code>\"SeqCst\"</code>).\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-properties-of-asyncgenerator-intances": {"num": "25.5.2", "title": "#sec-properties-of-asyncgenerator-intances Properties of AsyncGenerator Instances", "html": "<emu-clause id=\"sec-properties-of-asyncgenerator-intances\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-asyncgenerator-intances\">#sec-properties-of-asyncgenerator-intances</span> Properties of AsyncGenerator Instances</h1>\n      <p>AsyncGenerator instances are initially created with the internal slots described below:</p>\n      <emu-table id=\"table-internal-slots-of-asyncgenerator-instances\" caption=\"Internal Slots of AsyncGenerator Instances\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-internal-slots-of-asyncgenerator-instances\">#table-internal-slots-of-asyncgenerator-instances</span>: Internal Slots of AsyncGenerator Instances</figcaption>\n        <table>\n          <tbody>\n          <tr>\n            <th>Internal Slot</th>\n            <th>Description</th>\n          </tr>\n          <tr>\n            <td>[[AsyncGeneratorState]]</td>\n            <td>The current execution state of the async generator. The possible values are: <emu-val>undefined</emu-val>, <code>\"suspendedStart\"</code>, <code>\"suspendedYield\"</code>, <code>\"executing\"</code>, <code>\"awaiting-return\"</code>, and <code>\"completed\"</code>.</td>\n          </tr>\n          <tr>\n            <td>[[AsyncGeneratorContext]]</td>\n            <td>The <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is used when executing the code of this async generator.</td>\n          </tr>\n          <tr>\n            <td>[[AsyncGeneratorQueue]]</td>\n            <td>A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of AsyncGeneratorRequest records which represent requests to resume the async generator.</td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n    </emu-clause>\n\n    "}, "sec-getvaluefrombuffer": {"num": "24.1.1.10", "title": "#sec-getvaluefrombuffer GetValueFromBuffer ( arrayBuffer, byteIndex, type, isTypedArray, order [ , isLittleEndian ] )", "html": "<emu-clause id=\"sec-getvaluefrombuffer\" aoid=\"GetValueFromBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getvaluefrombuffer\">#sec-getvaluefrombuffer</span> GetValueFromBuffer ( <var>arrayBuffer</var>, <var>byteIndex</var>, <var>type</var>, <var>isTypedArray</var>, <var>order</var> [ , <var>isLittleEndian</var> ] )</h1>\n        <p>The abstract operation GetValueFromBuffer takes six parameters, an ArrayBuffer or SharedArrayBuffer <var>arrayBuffer</var>, an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>byteIndex</var>, a String <var>type</var>, a Boolean <var>isTypedArray</var>, a String <var>order</var>, and optionally a Boolean <var>isLittleEndian</var>. This operation performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>false</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: There are sufficient bytes in <var>arrayBuffer</var> starting at <var>byteIndex</var> to represent a value of <var>type</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>byteIndex</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value &#8805; 0.</li><li>Let <var>block</var> be <var>arrayBuffer</var>.[[ArrayBufferData]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for Element Type <var>type</var>.</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>execution</var> be the [[CandidateExecution]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>eventList</var> be the [[EventList]] field of the element in <var>execution</var>.[[EventsRecords]] whose [[AgentSignifier]] is <emu-xref aoid=\"AgentSignifier\"><a href=\"#sec-agentsignifier\">AgentSignifier</a></emu-xref>().</li><li>If <var>isTypedArray</var> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsNoTearConfiguration\"><a href=\"#sec-isnotearconfiguration\">IsNoTearConfiguration</a></emu-xref>(<var>type</var>, <var>order</var>) is <emu-val>true</emu-val>, let <var>noTear</var> be <emu-val>true</emu-val>; otherwise let <var>noTear</var> be <emu-val>false</emu-val>.</li><li>Let <var>rawValue</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of length <var>elementSize</var> of nondeterministically chosen byte values.</li><li>NOTE: In implementations, <var>rawValue</var> is the result of a non-atomic or atomic read instruction on the underlying hardware. The nondeterminism is a semantic prescription of the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> to describe observable behaviour of hardware with weak consistency.</li><li>Let <var>readEvent</var> be <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> { [[Order]]: <var>order</var>, [[NoTear]]: <var>noTear</var>, [[Block]]: <var>block</var>, [[ByteIndex]]: <var>byteIndex</var>, [[ElementSize]]: <var>elementSize</var> }.</li><li>Append <var>readEvent</var> to <var>eventList</var>.</li><li>Append <emu-xref href=\"#sec-chosen-value-records\"><a href=\"#sec-chosen-value-records\">Chosen Value Record</a></emu-xref> { [[Event]]: <var>readEvent</var>, [[ChosenValue]]: <var>rawValue</var> } to <var>execution</var>.[[ChosenValues]].</li></ol></li><li>Else, let <var>rawValue</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <var>elementSize</var> containing, in order, the <var>elementSize</var> sequence of bytes starting with <var>block</var>[<var>byteIndex</var>].</li><li>If <var>isLittleEndian</var> is not present, set <var>isLittleEndian</var> to the value of the [[LittleEndian]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Return <emu-xref aoid=\"RawBytesToNumeric\"><a href=\"#sec-rawbytestonumeric\">RawBytesToNumeric</a></emu-xref>(<var>type</var>, <var>rawValue</var>, <var>isLittleEndian</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-array.prototype.values": {"num": "22.1.3.32", "title": "#sec-array.prototype.values Array.prototype.values ( )", "html": "<emu-clause id=\"sec-array.prototype.values\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.values\">#sec-array.prototype.values</span> Array.prototype.values ( )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Return <emu-xref aoid=\"CreateArrayIterator\"><a href=\"#sec-createarrayiterator\">CreateArrayIterator</a></emu-xref>(<var>O</var>, <code>\"value\"</code>).\n        </li></ol></emu-alg>\n        <p>This function is the  <dfn>%ArrayProto_values%</dfn> intrinsic object.</p>\n      </emu-clause>\n\n      "}, "sec-map.prototype.values": {"num": "23.1.3.11", "title": "#sec-map.prototype.values Map.prototype.values ( )", "html": "<emu-clause id=\"sec-map.prototype.values\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype.values\">#sec-map.prototype.values</span> Map.prototype.values ( )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"CreateMapIterator\"><a href=\"#sec-createmapiterator\">CreateMapIterator</a></emu-xref>(<var>M</var>, <code>\"value\"</code>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-validatesharedintegertypedarray": {"num": "24.4.1.1", "title": "#sec-validatesharedintegertypedarray ValidateSharedIntegerTypedArray ( typedArray [ , waitable ] )", "html": "<emu-clause id=\"sec-validatesharedintegertypedarray\" aoid=\"ValidateSharedIntegerTypedArray\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-validatesharedintegertypedarray\">#sec-validatesharedintegertypedarray</span> ValidateSharedIntegerTypedArray ( <var>typedArray</var> [ , <var>waitable</var> ] )</h1>\n        <p>The abstract operation ValidateSharedIntegerTypedArray takes one argument <var>typedArray</var> and an optional Boolean <var>waitable</var>. It performs the following steps:</p>\n        <emu-alg><ol><li>If <var>waitable</var> is not present, set <var>waitable</var> to <emu-val>false</emu-val>.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>typedArray</var>, [[TypedArrayName]]).</li><li>Let <var>typeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>Let <var>type</var> be the String value of the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>typeName</var>.</li><li>If <var>waitable</var> is <emu-val>true</emu-val>, then<ol><li>If <var>typeName</var> is not <code>\"Int32Array\"</code> or <code>\"BigInt64Array\"</code>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Else,<ol><li>If !&#160;<emu-xref aoid=\"IsUnclampedIntegerElementType\"><a href=\"#sec-isunclampedintegerelementtype\">IsUnclampedIntegerElementType</a></emu-xref>(<var>type</var>) is <emu-val>false</emu-val> and !&#160;<emu-xref aoid=\"IsBigIntElementType\"><a href=\"#sec-isbigintelementtype\">IsBigIntElementType</a></emu-xref>(<var>type</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>typedArray</var> has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>buffer</var> be <var>typedArray</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>buffer</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-dataview.prototype.setuint32": {"num": "24.3.4.24", "title": "#sec-dataview.prototype.setuint32 DataView.prototype.setUint32 ( byteOffset, value [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.setuint32\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.setuint32\">#sec-dataview.prototype.setuint32</span> DataView.prototype.setUint32 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>setUint32</code> method is called with arguments <var>byteOffset</var> and <var>value</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"SetViewValue\"><a href=\"#sec-setviewvalue\">SetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <code>\"Uint32\"</code>, <var>value</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-array.prototype.entries": {"num": "22.1.3.4", "title": "#sec-array.prototype.entries Array.prototype.entries ( )", "html": "<emu-clause id=\"sec-array.prototype.entries\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.entries\">#sec-array.prototype.entries</span> Array.prototype.entries ( )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Return <emu-xref aoid=\"CreateArrayIterator\"><a href=\"#sec-createarrayiterator\">CreateArrayIterator</a></emu-xref>(<var>O</var>, <code>\"key+value\"</code>).\n        </li></ol></emu-alg>\n        <p>This function is the  <dfn>%ArrayProto_entries%</dfn> intrinsic object.</p>\n      </emu-clause>\n\n      "}, "sec-%arrayiteratorprototype%.next": {"num": "22.1.5.2.1", "title": "#sec-%arrayiteratorprototype%.next %ArrayIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%arrayiteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%arrayiteratorprototype%.next\">#sec-%arrayiteratorprototype%.next</span> %ArrayIteratorPrototype%.next ( )</h1>\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>O</var> does not have all of the internal slots of an Array Iterator Instance (<emu-xref href=\"#sec-properties-of-array-iterator-instances\"><a href=\"#sec-properties-of-array-iterator-instances\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-array-iterator-instances\">#sec-properties-of-array-iterator-instances</a></emu-xref>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>a</var> be <var>O</var>.[[IteratedObject]].</li><li>If <var>a</var> is <emu-val>undefined</emu-val>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li><li>Let <var>index</var> be <var>O</var>.[[ArrayIteratorNextIndex]].</li><li>Let <var>itemKind</var> be <var>O</var>.[[ArrayIterationKind]].</li><li>If <var>a</var> has a [[TypedArrayName]] internal slot, then<ol><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>a</var>.[[ViewedArrayBuffer]]) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>len</var> be <var>a</var>.[[ArrayLength]].</li></ol></li><li>Else,<ol><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>a</var>).</li></ol></li><li>If <var>index</var> &#8805; <var>len</var>, then<ol><li>Set <var>O</var>.[[IteratedObject]] to <emu-val>undefined</emu-val>.</li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li></ol></li><li>Set <var>O</var>.[[ArrayIteratorNextIndex]] to <var>index</var> + 1.</li><li>If <var>itemKind</var> is <code>\"key\"</code>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>index</var>, <emu-val>false</emu-val>).</li><li>Let <var>elementKey</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>index</var>).</li><li>Let <var>elementValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>a</var>, <var>elementKey</var>).</li><li>If <var>itemKind</var> is <code>\"value\"</code>, let <var>result</var> be <var>elementValue</var>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>itemKind</var> is <code>\"key+value\"</code>.</li><li>Let <var>result</var> be !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>index</var>, <var>elementValue</var> &#187;).</li></ol></li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>result</var>, <emu-val>false</emu-val>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-object.freeze": {"num": "19.1.2.6", "title": "#sec-object.freeze Object.freeze ( O )", "html": "<emu-clause id=\"sec-object.freeze\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.freeze\">#sec-object.freeze</span> Object.freeze ( <var>O</var> )</h1>\n        <p>When the <code>freeze</code> function is called, the following steps are taken:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, return <var>O</var>.</li><li>Let <var>status</var> be ?&#160;<emu-xref aoid=\"SetIntegrityLevel\"><a href=\"#sec-setintegritylevel\">SetIntegrityLevel</a></emu-xref>(<var>O</var>, <code>\"frozen\"</code>).</li><li>If <var>status</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>O</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-InnerModuleLinking": {"num": "15.2.1.16.1.1", "title": "#sec-InnerModuleLinking InnerModuleLinking ( module, stack, index )", "html": "<emu-clause id=\"sec-InnerModuleLinking\" oldids=\"sec-innermoduleinstantiation\" aoid=\"InnerModuleLinking\">\n            <span id=\"sec-innermoduleinstantiation\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-InnerModuleLinking\">#sec-InnerModuleLinking</span> InnerModuleLinking ( <var>module</var>, <var>stack</var>, <var>index</var> )</h1>\n\n            <p>The InnerModuleLinking abstract operation is used by Link to perform the actual linking process for the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> <var>module</var>, as well as recursively on all other modules in the dependency graph. The <var>stack</var> and <var>index</var> parameters, as well as a module's [[DFSIndex]] and [[DFSAncestorIndex]] fields, keep track of the depth-first search (DFS) traversal. In particular, [[DFSAncestorIndex]] is used to discover strongly connected components (SCCs), such that all modules in an SCC transition to <code>\"linked\"</code> together.</p>\n\n            <p>This abstract operation performs the following steps:</p>\n\n            <emu-alg><ol><li>If <var>module</var> is not a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li>Perform ? <var>module</var>.Link().</li><li>Return <var>index</var>.</li></ol></li><li>If <var>module</var>.[[Status]] is <code>\"linking\"</code>, <code>\"linked\"</code>, or <code>\"evaluated\"</code>, then<ol><li>Return <var>index</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <code>\"unlinked\"</code>.</li><li>Set <var>module</var>.[[Status]] to <code>\"linking\"</code>.</li><li>Set <var>module</var>.[[DFSIndex]] to <var>index</var>.</li><li>Set <var>module</var>.[[DFSAncestorIndex]] to <var>index</var>.</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>Append <var>module</var> to <var>stack</var>.</li><li>For each String <var>required</var> that is an element of <var>module</var>.[[RequestedModules]], do<ol><li>Let <var>requiredModule</var> be ?&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>required</var>).</li><li>Set <var>index</var> to ?&#160;<emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>(<var>requiredModule</var>, <var>stack</var>, <var>index</var>).</li><li>If <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is either <code>\"linking\"</code>, <code>\"linked\"</code>, or <code>\"evaluated\"</code>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is <code>\"linking\"</code> if and only if <var>requiredModule</var> is in <var>stack</var>.</li><li>If <var>requiredModule</var>.[[Status]] is <code>\"linking\"</code>, then<ol><li>Set <var>module</var>.[[DFSAncestorIndex]] to <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>module</var>.[[DFSAncestorIndex]], <var>requiredModule</var>.[[DFSAncestorIndex]]).</li></ol></li></ol></li></ol></li><li>Perform ? <var>module</var>.<emu-xref aoid=\"InitializeEnvironment\"><a href=\"#sec-source-text-module-record-initialize-environment\">InitializeEnvironment</a></emu-xref>().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> occurs exactly once in <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[DFSAncestorIndex]] is less than or equal to <var>module</var>.[[DFSIndex]].</li><li>If <var>module</var>.[[DFSAncestorIndex]] equals <var>module</var>.[[DFSIndex]], then<ol><li>Let <var>done</var> be <emu-val>false</emu-val>.</li><li>Repeat, while <var>done</var> is <emu-val>false</emu-val>,<ol><li>Let <var>requiredModule</var> be the last element in <var>stack</var>.</li><li>Remove the last element of <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>.</li><li>Set <var>requiredModule</var>.[[Status]] to <code>\"linked\"</code>.</li><li>If <var>requiredModule</var> and <var>module</var> are the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, set <var>done</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <var>index</var>.\n            </li></ol></emu-alg>\n          </emu-clause>\n        "}, "sec-dataview.prototype.getfloat32": {"num": "24.3.4.7", "title": "#sec-dataview.prototype.getfloat32 DataView.prototype.getFloat32 ( byteOffset [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.getfloat32\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.getfloat32\">#sec-dataview.prototype.getfloat32</span> DataView.prototype.getFloat32 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>getFloat32</code> method is called with argument <var>byteOffset</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"GetViewValue\"><a href=\"#sec-getviewvalue\">GetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <code>\"Float32\"</code>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-generatorfunction-instances": {"num": "25.2.4", "title": "#sec-generatorfunction-instances GeneratorFunction Instances", "html": "<emu-clause id=\"sec-generatorfunction-instances\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorfunction-instances\">#sec-generatorfunction-instances</span> GeneratorFunction Instances</h1>\n      <p>Every GeneratorFunction instance is an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> and has the internal slots listed in  <emu-xref href=\"#table-27\"><a href=\"#table-27\" class=\"excluded-xref\" excluded-id=\"table-27\">#table-27</a></emu-xref>. The value of the [[FunctionKind]] internal slot for all such instances is <code>\"generator\"</code>.</p>\n      <p>Each GeneratorFunction instance has the following own properties:</p>\n\n      <div id=\"excluded-sec-generatorfunction-instances-length\"><h1><span class=\"secnum\">25.2.4.1</span>#sec-generatorfunction-instances-length length</h1>...</div><div id=\"excluded-sec-generatorfunction-instances-name\"><h1><span class=\"secnum\">25.2.4.2</span>#sec-generatorfunction-instances-name name</h1>...</div><div id=\"excluded-sec-generatorfunction-instances-prototype\"><h1><span class=\"secnum\">25.2.4.3</span>#sec-generatorfunction-instances-prototype prototype</h1>...</div></emu-clause>\n  "}, "sec-dataview.prototype.getuint32": {"num": "24.3.4.14", "title": "#sec-dataview.prototype.getuint32 DataView.prototype.getUint32 ( byteOffset [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.getuint32\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.getuint32\">#sec-dataview.prototype.getuint32</span> DataView.prototype.getUint32 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>getUint32</code> method is called with argument <var>byteOffset</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"GetViewValue\"><a href=\"#sec-getviewvalue\">GetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <code>\"Uint32\"</code>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-internalizejsonproperty": {"num": "24.5.1.1", "title": "#sec-internalizejsonproperty Runtime Semantics: InternalizeJSONProperty ( holder, name )", "html": "<emu-clause id=\"sec-internalizejsonproperty\" aoid=\"InternalizeJSONProperty\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-internalizejsonproperty\">#sec-internalizejsonproperty</span> Runtime Semantics: InternalizeJSONProperty ( <var>holder</var>, <var>name</var> )</h1>\n        <p>The abstract operation InternalizeJSONProperty is a recursive abstract operation that takes two parameters: a <var>holder</var> object and the String <var>name</var> of a property in that object. InternalizeJSONProperty uses the value of <var>reviver</var> that was originally passed to the above parse function.</p>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>This algorithm intentionally does not throw an exception if either [[Delete]] or <emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref> return <emu-val>false</emu-val>.</p>\n        </div></emu-note>\n        <emu-alg><ol><li>Let <var>val</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>holder</var>, <var>name</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>val</var>) is Object, then<ol><li>Let <var>isArray</var> be ?&#160;<emu-xref aoid=\"IsArray\"><a href=\"#sec-isarray\">IsArray</a></emu-xref>(<var>val</var>).</li><li>If <var>isArray</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>I</var> be 0.</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>val</var>).</li><li>Repeat, while <var>I</var> &lt; <var>len</var>,<ol><li>Let <var>newElement</var> be ?&#160;<emu-xref aoid=\"InternalizeJSONProperty\"><a href=\"#sec-internalizejsonproperty\">InternalizeJSONProperty</a></emu-xref>(<var>val</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>I</var>)).</li><li>If <var>newElement</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform ? <var>val</var>.[[Delete]](! <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>I</var>)).</li></ol></li><li>Else,<ol><li>Perform ?&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>val</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>I</var>), <var>newElement</var>).</li><li>NOTE: This algorithm intentionally does not throw an exception if <emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref> returns <emu-val>false</emu-val>.</li></ol></li><li>Set <var>I</var> to <var>I</var> + 1.</li></ol></li></ol></li><li>Else,<ol><li>Let <var>keys</var> be ?&#160;<emu-xref aoid=\"EnumerableOwnPropertyNames\"><a href=\"#sec-enumerableownpropertynames\">EnumerableOwnPropertyNames</a></emu-xref>(<var>val</var>, <code>\"key\"</code>).</li><li>For each String <var>P</var> in <var>keys</var>, do<ol><li>Let <var>newElement</var> be ?&#160;<emu-xref aoid=\"InternalizeJSONProperty\"><a href=\"#sec-internalizejsonproperty\">InternalizeJSONProperty</a></emu-xref>(<var>val</var>, <var>P</var>).</li><li>If <var>newElement</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform ? <var>val</var>.[[Delete]](<var>P</var>).</li></ol></li><li>Else,<ol><li>Perform ?&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>val</var>, <var>P</var>, <var>newElement</var>).</li></ol></li></ol></li></ol></li></ol></li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>reviver</var>, <var>holder</var>, &#171; <var>name</var>, <var>val</var> &#187;).\n        </li></ol></emu-alg>\n        <p>It is not permitted for a conforming implementation of <code>JSON.parse</code> to extend the JSON grammars. If an implementation wishes to support a modified or extended JSON interchange format it must do so by defining a different parse function.</p>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>In the case where there are duplicate name Strings within an object, lexically preceding values for the same key shall be overwritten.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-isnotearconfiguration": {"num": "24.1.1.8", "title": "#sec-isnotearconfiguration IsNoTearConfiguration ( type, order )", "html": "<emu-clause id=\"sec-isnotearconfiguration\" aoid=\"IsNoTearConfiguration\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isnotearconfiguration\">#sec-isnotearconfiguration</span> IsNoTearConfiguration ( <var>type</var>, <var>order</var> )</h1>\n        <p>The abstract operation IsNoTearConfiguration with arguments <var>type</var> and <var>order</var> performs the following steps:</p>\n        <emu-alg><ol><li>If !&#160;<emu-xref aoid=\"IsUnclampedIntegerElementType\"><a href=\"#sec-isunclampedintegerelementtype\">IsUnclampedIntegerElementType</a></emu-xref>(<var>type</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If !&#160;<emu-xref aoid=\"IsBigIntElementType\"><a href=\"#sec-isbigintelementtype\">IsBigIntElementType</a></emu-xref>(<var>type</var>) is <emu-val>true</emu-val> and <var>order</var> is not <code>\"Init\"</code> or <code>\"Unordered\"</code>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-%mapiteratorprototype%.next": {"num": "23.1.5.2.1", "title": "#sec-%mapiteratorprototype%.next %MapIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%mapiteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%mapiteratorprototype%.next\">#sec-%mapiteratorprototype%.next</span> %MapIteratorPrototype%.next ( )</h1>\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>O</var> does not have all of the internal slots of a Map Iterator Instance (<emu-xref href=\"#sec-properties-of-map-iterator-instances\"><a href=\"#sec-properties-of-map-iterator-instances\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-map-iterator-instances\">#sec-properties-of-map-iterator-instances</a></emu-xref>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>m</var> be <var>O</var>.[[Map]].</li><li>Let <var>index</var> be <var>O</var>.[[MapNextIndex]].</li><li>Let <var>itemKind</var> be <var>O</var>.[[MapIterationKind]].</li><li>If <var>m</var> is <emu-val>undefined</emu-val>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>m</var> has a [[MapData]] internal slot.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>m</var>.[[MapData]].</li><li>Let <var>numEntries</var> be the number of elements of <var>entries</var>.</li><li>NOTE: <var>numEntries</var> must be redetermined each time this method is evaluated.</li><li>Repeat, while <var>index</var> is less than <var>numEntries</var>,<ol><li>Let <var>e</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } that is the value of <var>entries</var>[<var>index</var>].</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>Set <var>O</var>.[[MapNextIndex]] to <var>index</var>.</li><li>If <var>e</var>.[[Key]] is not <emu-const>empty</emu-const>, then<ol><li>If <var>itemKind</var> is <code>\"key\"</code>, let <var>result</var> be <var>e</var>.[[Key]].</li><li>Else if <var>itemKind</var> is <code>\"value\"</code>, let <var>result</var> be <var>e</var>.[[Value]].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>itemKind</var> is <code>\"key+value\"</code>.</li><li>Let <var>result</var> be !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>e</var>.[[Key]], <var>e</var>.[[Value]] &#187;).</li></ol></li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>result</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li><li>Set <var>O</var>.[[Map]] to <emu-val>undefined</emu-val>.</li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-dataview.prototype.setbiguint64": {"num": "24.3.4.16", "title": "#sec-dataview.prototype.setbiguint64 DataView.prototype.setBigUint64 ( byteOffset, value [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.setbiguint64\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.setbiguint64\">#sec-dataview.prototype.setbiguint64</span> DataView.prototype.setBigUint64 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>setBigUint64</code> method is called with arguments <var>byteOffset</var> and <var>value</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>undefined</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"SetViewValue\"><a href=\"#sec-setviewvalue\">SetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <code>\"BigUint64\"</code>, <var>value</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-object.issealed": {"num": "19.1.2.16", "title": "#sec-object.issealed Object.isSealed ( O )", "html": "<emu-clause id=\"sec-object.issealed\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.issealed\">#sec-object.issealed</span> Object.isSealed ( <var>O</var> )</h1>\n        <p>When the <code>isSealed</code> function is called with argument <var>O</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, return <emu-val>true</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"TestIntegrityLevel\"><a href=\"#sec-testintegritylevel\">TestIntegrityLevel</a></emu-xref>(<var>O</var>, <code>\"sealed\"</code>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-moduledeclarationlinking": {"num": "15.2.1.16.1", "title": "#sec-moduledeclarationlinking Link ( ) Concrete Method", "html": "<emu-clause id=\"sec-moduledeclarationlinking\" oldids=\"sec-moduledeclarationinstantiation\">\n          <span id=\"sec-moduledeclarationinstantiation\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-moduledeclarationlinking\">#sec-moduledeclarationlinking</span> Link ( ) Concrete Method</h1>\n\n          <p>The Link concrete method of a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> implements the corresponding <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> abstract method.</p>\n          <p>On success, Link transitions this module's [[Status]] from <code>\"unlinked\"</code> to <code>\"linked\"</code>. On failure, an exception is thrown and this module's [[Status]] remains <code>\"unlinked\"</code>.</p>\n\n          <p>This abstract method performs the following steps (most of the work is done by the auxiliary function <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>):</p>\n\n          <emu-alg><ol><li>Let <var>module</var> be this <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is not <code>\"linking\"</code> or <code>\"evaluating\"</code>.</li><li>Let <var>stack</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>(<var>module</var>, <var>stack</var>, 0).</li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>For each <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> <var>m</var> in <var>stack</var>, do<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>m</var>.[[Status]] is <code>\"linking\"</code>.</li><li>Set <var>m</var>.[[Status]] to <code>\"unlinked\"</code>.</li><li>Set <var>m</var>.[[Environment]] to <emu-val>undefined</emu-val>.</li><li>Set <var>m</var>.[[DFSIndex]] to <emu-val>undefined</emu-val>.</li><li>Set <var>m</var>.[[DFSAncestorIndex]] to <emu-val>undefined</emu-val>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <code>\"unlinked\"</code>.</li><li>Return <var>result</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <code>\"linked\"</code> or <code>\"evaluated\"</code>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>stack</var> is empty.</li><li>Return <emu-val>undefined</emu-val>.\n          </li></ol></emu-alg>\n\n          <div id=\"excluded-sec-InnerModuleLinking\"><h1><span class=\"secnum\">15.2.1.16.1.1</span>#sec-InnerModuleLinking InnerModuleLinking ( module, stack, index )</h1>...</div></emu-clause>\n\n        "}, "sec-function-p1-p2-pn-body": {"num": "19.2.1.1", "title": "#sec-function-p1-p2-pn-body Function ( p1, p2, \u2026 , pn, body )", "html": "<emu-clause id=\"sec-function-p1-p2-pn-body\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-p1-p2-pn-body\">#sec-function-p1-p2-pn-body</span> Function ( <var>p1</var>, <var>p2</var>, &#8230; , <var>pn</var>, <var>body</var> )</h1>\n        <p>The last argument specifies the body (executable code) of a function; any preceding arguments specify formal parameters.</p>\n        <p>When the <code>Function</code> function is called with some arguments <var>p1</var>, <var>p2</var>, &#8230; , <var>pn</var>, <var>body</var> (where <var>n</var> might be 0, that is, there are no &#8220; <var>p</var> &#8221; arguments, and where <var>body</var> might also not be provided), the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>C</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>args</var> be the <var>argumentsList</var> that was passed to this function by [[Call]] or [[Construct]].</li><li>Return ?&#160;<emu-xref aoid=\"CreateDynamicFunction\"><a href=\"#sec-createdynamicfunction\">CreateDynamicFunction</a></emu-xref>(<var>C</var>, NewTarget, <code>\"normal\"</code>, <var>args</var>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>It is permissible but not necessary to have one argument for each formal parameter to be specified. For example, all three of the following expressions produce the same result:</p>\n          <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Function</span>(<span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"c\"</span>, <span class=\"hljs-string\">\"return a+b+c\"</span>)\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Function</span>(<span class=\"hljs-string\">\"a, b, c\"</span>, <span class=\"hljs-string\">\"return a+b+c\"</span>)\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Function</span>(<span class=\"hljs-string\">\"a,b\"</span>, <span class=\"hljs-string\">\"c\"</span>, <span class=\"hljs-string\">\"return a+b+c\"</span>)</code></pre>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-createdynamicfunction\"><h1><span class=\"secnum\">19.2.1.1.1</span>#sec-createdynamicfunction Runtime Semantics: CreateDynamicFunction ( constructor, newTarget, kind, args )</h1>...</div></emu-clause>\n    "}, "sec-%typedarray%.prototype.entries": {"num": "22.2.3.6", "title": "#sec-%typedarray%.prototype.entries %TypedArray%.prototype.entries ( )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.entries\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.entries\">#sec-%typedarray%.prototype.entries</span> %TypedArray%.prototype.entries ( )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Return <emu-xref aoid=\"CreateArrayIterator\"><a href=\"#sec-createarrayiterator\">CreateArrayIterator</a></emu-xref>(<var>O</var>, <code>\"key+value\"</code>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-asyncgeneratorenqueue": {"num": "25.5.3.6", "title": "#sec-asyncgeneratorenqueue AsyncGeneratorEnqueue ( generator, completion )", "html": "<emu-clause id=\"sec-asyncgeneratorenqueue\" aoid=\"AsyncGeneratorEnqueue\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorenqueue\">#sec-asyncgeneratorenqueue</span> AsyncGeneratorEnqueue ( <var>generator</var>, <var>completion</var> )</h1>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>completion</var> is a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>.</li><li>Let <var>promiseCapability</var> be !&#160;<emu-xref aoid=\"NewPromiseCapability\"><a href=\"#sec-newpromisecapability\">NewPromiseCapability</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>generator</var>) is not Object, or if <var>generator</var> does not have an [[AsyncGeneratorState]] internal slot, then<ol><li>Let <var>badGeneratorError</var> be a newly created <emu-val>TypeError</emu-val> object.</li><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>badGeneratorError</var> &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></li><li>Let <var>queue</var> be <var>generator</var>.[[AsyncGeneratorQueue]].</li><li>Let <var>request</var> be AsyncGeneratorRequest { [[Completion]]: <var>completion</var>, [[Capability]]: <var>promiseCapability</var> }.</li><li>Append <var>request</var> to the end of <var>queue</var>.</li><li>Let <var>state</var> be <var>generator</var>.[[AsyncGeneratorState]].</li><li>If <var>state</var> is not <code>\"executing\"</code>, then<ol><li>Perform !&#160;<emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref>(<var>generator</var>).</li></ol></li><li>Return <var>promiseCapability</var>.[[Promise]].\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-asyncgeneratoryield": {"num": "25.5.3.7", "title": "#sec-asyncgeneratoryield AsyncGeneratorYield ( value )", "html": "<emu-clause id=\"sec-asyncgeneratoryield\" aoid=\"AsyncGeneratorYield\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratoryield\">#sec-asyncgeneratoryield</span> AsyncGeneratorYield ( <var>value</var> )</h1>\n        <p>The abstract operation AsyncGeneratorYield with argument <var>value</var> performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>genContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>genContext</var> is the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> of a generator.</li><li>Let <var>generator</var> be the value of the Generator component of <var>genContext</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>() is <emu-const>async</emu-const>.</li><li>Set <var>value</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <code>\"suspendedYield\"</code>.</li><li>Remove <var>genContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the code evaluation state of <var>genContext</var> such that when evaluation is resumed with a <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> <var>resumptionValue</var> the following steps will be performed:<ol><li>If <var>resumptionValue</var>.[[Type]] is not <emu-const>return</emu-const>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>resumptionValue</var>).</li><li>Let <var>awaited</var> be <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>resumptionValue</var>.[[Value]]).</li><li>If <var>awaited</var>.[[Type]] is <emu-const>throw</emu-const>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>awaited</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>awaited</var>.[[Type]] is <emu-const>normal</emu-const>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>awaited</var>.[[Value]], [[Target]]: <emu-const>empty</emu-const> }.</li><li>NOTE: When one of the above steps returns, it returns to the evaluation of the <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> production that originally called this abstract operation.</li></ol></li><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorResolve\"><a href=\"#sec-asyncgeneratorresolve\">AsyncGeneratorResolve</a></emu-xref>(<var>generator</var>, <var>value</var>, <emu-val>false</emu-val>).</li><li>NOTE: This returns to the evaluation of the operation that had most previously resumed evaluation of <var>genContext</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-async-functions-abstract-operations-async-function-create": {"num": "9.2.8", "title": "#sec-async-functions-abstract-operations-async-function-create AsyncFunctionCreate ( kind, parameters, body, Scope )", "html": "<emu-clause id=\"sec-async-functions-abstract-operations-async-function-create\" aoid=\"AsyncFunctionCreate\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-functions-abstract-operations-async-function-create\">#sec-async-functions-abstract-operations-async-function-create</span> AsyncFunctionCreate ( <var>kind</var>, <var>parameters</var>, <var>body</var>, <var>Scope</var> )</h1>\n      <p>The abstract operation AsyncFunctionCreate requires the arguments: <var>kind</var> which is one of (<emu-const>Normal</emu-const>, <emu-const>Method</emu-const>, <emu-const>Arrow</emu-const>), a parameter list <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>parameters</var>, a body <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>body</var>, a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> specified by <var>Scope</var>. AsyncFunctionCreate performs the following steps:</p>\n      <emu-alg><ol><li>Let <var>functionPrototype</var> be %AsyncFunction.prototype%.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"FunctionAllocate\"><a href=\"#sec-functionallocate\">FunctionAllocate</a></emu-xref>(<var>functionPrototype</var>, <code>\"async\"</code>).</li><li>Return !&#160;<emu-xref aoid=\"FunctionInitialize\"><a href=\"#sec-functioninitialize\">FunctionInitialize</a></emu-xref>(<var>F</var>, <var>kind</var>, <var>parameters</var>, <var>body</var>, <var>Scope</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-classdefinitionevaluation": {"num": "14.6.13", "title": "#sec-runtime-semantics-classdefinitionevaluation Runtime Semantics: ClassDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-classdefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-classdefinitionevaluation\">#sec-runtime-semantics-classdefinitionevaluation</span> Runtime Semantics: ClassDefinitionEvaluation</h1>\n      <p>With parameters <var>classBinding</var> and <var>className</var>.</p>\n      <emu-grammar><emu-production name=\"ClassTail\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b8ea6aa5\"><emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>{</emu-t><emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lex</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>classScope</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>lex</var>).</li><li>Let <var>classScopeEnvRec</var> be <var>classScope</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScopeEnvRec</var>.CreateImmutableBinding(<var>classBinding</var>, <emu-val>true</emu-val>).</li></ol></li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, then<ol><li>Let <var>protoParent</var> be %Object.prototype%.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else,<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>Let <var>superclassRef</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>lex</var>.</li><li>Let <var>superclass</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>superclassRef</var>).</li><li>If <var>superclass</var> is <emu-val>null</emu-val>, then<ol><li>Let <var>protoParent</var> be <emu-val>null</emu-val>.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else if <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>superclass</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Else,<ol><li>Let <var>protoParent</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>superclass</var>, <code>\"prototype\"</code>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>protoParent</var>) is neither Object nor Null, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorParent</var> be <var>superclass</var>.</li></ol></li></ol></li><li>Let <var>proto</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<var>protoParent</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>constructor</var> be <emu-const>empty</emu-const>.</li><li>Else, let <var>constructor</var> be ConstructorMethod of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>If <var>constructor</var> is <emu-const>empty</emu-const>, then<ol><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, then<ol><li>Set <var>constructor</var> to the result of parsing the source text\n              <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">constructor</span>(...args) { <span class=\"hljs-keyword\">super</span>(...args); }</code></pre>\n              using the syntactic grammar with the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li></ol></li><li>Else,<ol><li>Set <var>constructor</var> to the result of parsing the source text\n              <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">constructor</span>() {}</code></pre>\n              using the syntactic grammar with the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>Let <var>constructorInfo</var> be ! DefineMethod of <var>constructor</var> with arguments <var>proto</var> and <var>constructorParent</var>.</li><li>Let <var>F</var> be <var>constructorInfo</var>.[[Closure]].</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, set <var>F</var>.[[ConstructorKind]] to <code>\"derived\"</code>.</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>, <emu-val>false</emu-val>, <var>proto</var>).</li><li>Perform <emu-xref aoid=\"MakeClassConstructor\"><a href=\"#sec-makeclassconstructor\">MakeClassConstructor</a></emu-xref>(<var>F</var>).</li><li>If <var>className</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>className</var>).</li></ol></li><li>Perform <emu-xref aoid=\"CreateMethodProperty\"><a href=\"#sec-createmethodproperty\">CreateMethodProperty</a></emu-xref>(<var>proto</var>, <code>\"constructor\"</code>, <var>F</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>methods</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Else, let <var>methods</var> be NonConstructorMethodDefinitions of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>For each <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <var>m</var> in order from <var>methods</var>, do<ol><li>If IsStatic of <var>m</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>status</var> be PropertyDefinitionEvaluation of <var>m</var> with arguments <var>proto</var> and <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>status</var> be PropertyDefinitionEvaluation of <var>m</var> with arguments <var>F</var> and <emu-val>false</emu-val>.</li></ol></li><li>If <var>status</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>lex</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>status</var>).</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>lex</var>.</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScopeEnvRec</var>.InitializeBinding(<var>classBinding</var>, <var>F</var>).</li></ol></li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-mathematical-operations": {"num": "5.2.5", "title": "#sec-mathematical-operations Mathematical Operations", "html": "<emu-clause id=\"sec-mathematical-operations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-mathematical-operations\">#sec-mathematical-operations</span> Mathematical Operations</h1>\n      <p>This specification makes reference to two kinds of numeric values:</p>\n      <ul>\n        <li><em>Number</em>: IEEE 754-2008 double-precision floating point values, used as the default numeric type.</li>\n        <li><em><emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">Mathematical value</a></emu-xref></em>: Arbitrary real numbers, used for specific situations.</li>\n      </ul>\n\n      <p>In the language of this specification, numerical values and operations (including addition, subtraction, negation, multiplication, division, and comparison) are distinguished among different numeric kinds using subscripts. The subscript  <sub><dfn id=\"&#120125;\">&#120125;</dfn></sub> refers to Numbers, and the subscript  <sub><dfn id=\"&#8477;\">&#8477;</dfn></sub> refers to mathematical values. A subscript is used following each numeric value and operation.</p>\n      <p>For brevity, the  <sub><emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref></sub> subscript can be omitted on Number values&#8212;a numeric value with no subscript is interpreted to be a Number. An operation with no subscript is interpreted to be a Number operation, unless one of the parameters has a particular subscript, in which case the operation adopts that subscript. For example, 1<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> + 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> = 3<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> is a statement about mathematical values, and 1 + 2 = 3 is a statement about Numbers.</p>\n      <p>In general, when this specification refers to a numerical value, such as in the phrase, \"the length of <var>y</var>\" or \"the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> represented by the four hexadecimal digits ...\", without explicitly specifying a numeric kind, the phrase refers to a Number. Phrases which refer to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> are explicitly annotated as such; for example, \"the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the number of code points in ...\".</p>\n      <p>It is not defined to mix Numbers and mathematical values in either arithmetic or comparison operations, and any such undefined operation would be an editorial error in this specification text.</p>\n      <p>The <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> 0, alternatively written 0<sub><emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref></sub>, is defined as the double-precision floating point positive zero value. In certain contexts, it may also be written as <emu-val>+0</emu-val> for clarity.</p>\n      <p>This specification denotes most numeric values in base 10; it also uses numeric values of the form 0x followed by digits 0-9 or A-F as base-16 values.</p>\n      <p>In certain contexts, an operation is specified which is generic between Numbers and mathematical values. In these cases, the subscript can be a variable; <var>t</var> is often used for this purpose, for example 5<sub><var>t</var></sub> &#215; 10<sub><var>t</var></sub> = 50<sub><var>t</var></sub> for any <var>t</var> ranging over <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref> and <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>, since the values involved are within the range where the semantics coincide.</p>\n      <p>Conversions between mathematical values and numbers are never implicit, and always explicit in this document. A conversion from a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> to a Number is denoted as \"the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>x</var>\", and is defined in  <emu-xref href=\"#sec-ecmascript-language-types-number-type\"><a href=\"#sec-ecmascript-language-types-number-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-number-type\">#sec-ecmascript-language-types-number-type</a></emu-xref>. A conversion from a Number to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> is denoted as \"the  <dfn id=\"mathematical-value\">mathematical value</dfn> of <var>x</var>\", or <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>). Note that the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of non-finite values is not defined, and the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <emu-val>+0</emu-val> and <emu-val>-0</emu-val> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> 0<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>.</p>\n      <p>When the term  <dfn id=\"integer\">integer</dfn> is used in this specification, it refers to a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> whose <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> is in the set of integers, unless otherwise stated: when the term  <dfn id=\"mathematical integer\">mathematical integer</dfn> is used in this specification, it refers to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> which is in the set of integers. As shorthand, <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref><sub><var>t</var></sub> can be used to refer to either of the two, as determined by <var>t</var>.</p>\n      <p>The mathematical function  <emu-eqn id=\"eqn-abs\" aoid=\"abs\" class=\"inline\">abs<sub><var>t</var></sub>(<var>x</var>)</emu-eqn> produces the absolute value of <var>x</var>, which is  <emu-eqn class=\"inline\">-<sub><var>t</var></sub><var>x</var></emu-eqn> if <var>x</var> &lt;<sub><var>t</var></sub> 0<sub><var>t</var></sub> and otherwise is <var>x</var> itself.</p>\n      <p>The mathematical function  <emu-eqn id=\"eqn-min\" aoid=\"min\" class=\"inline\">min<sub><var>t</var></sub>(<var>x1</var>, <var>x2</var>, &#8230; , <var>xN</var>)</emu-eqn> produces the mathematically smallest of  <emu-eqn class=\"inline\"><var>x1</var></emu-eqn> through  <emu-eqn class=\"inline\"><var>xN</var></emu-eqn>. The mathematical function  <emu-eqn id=\"eqn-max\" aoid=\"max\" class=\"inline\">max<sub><var>t</var></sub>(<var>x1</var>, <var>x2</var>, ..., <var>xN</var>)</emu-eqn> produces the mathematically largest of  <emu-eqn class=\"inline\"><var>x1</var></emu-eqn> through  <emu-eqn class=\"inline\"><var>xN</var></emu-eqn>. The domain and range of these mathematical functions include <emu-val>+&#8734;</emu-val> and <emu-val>-&#8734;</emu-val>.</p>\n      <p>The notation &#8220;<emu-eqn id=\"eqn-modulo\" aoid=\"modulo\" class=\"inline\"><var>x</var> modulo<sub><var>t</var></sub> <var>y</var></emu-eqn>&#8221; (<var>y</var> must be finite and nonzero) computes a value <var>k</var> of the same sign as <var>y</var> (or zero) such that  <emu-eqn class=\"inline\"><emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref><sub><var>t</var></sub>(<var>k</var>) &lt;<sub><var>t</var></sub> <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref><sub><var>t</var></sub>(<var>y</var>) and <var>x</var>-<sub><var>t</var></sub><var>k</var> = <var>q</var> &#215;<sub><var>t</var></sub> <var>y</var></emu-eqn> for some <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref><sub><var>t</var></sub> <var>q</var>.</p>\n      <p>The mathematical function  <emu-eqn id=\"eqn-floor\" aoid=\"floor\" class=\"inline\">floor<sub><var>t</var></sub>(<var>x</var>)</emu-eqn> produces the largest <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref><sub><var>t</var></sub> (closest to positive infinity) that is not larger than <var>x</var>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><emu-eqn class=\"inline\"><emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref><sub><var>t</var></sub>(<var>x</var>) = <var>x</var> -<sub><var>t</var></sub> (<var>x</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref><sub><var>t</var></sub> 1<sub><var>t</var></sub>)</emu-eqn>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-properties-of-generator-instances": {"num": "25.4.2", "title": "#sec-properties-of-generator-instances Properties of Generator Instances", "html": "<emu-clause id=\"sec-properties-of-generator-instances\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-generator-instances\">#sec-properties-of-generator-instances</span> Properties of Generator Instances</h1>\n      <p>Generator instances are initially created with the internal slots described in  <emu-xref href=\"#table-56\"><a href=\"#table-56\" class=\"excluded-xref\" excluded-id=\"table-56\">#table-56</a></emu-xref>.</p>\n      <emu-table id=\"table-56\" caption=\"Internal Slots of Generator Instances\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-56\">#table-56</span>: Internal Slots of Generator Instances</figcaption>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Internal Slot\n            \n            </th>\n            <th>\n              Description\n            \n            </th>\n          </tr>\n          <tr>\n            <td>\n              [[GeneratorState]]\n            \n            </td>\n            <td>\n              The current execution state of the generator. The possible values are: <emu-val>undefined</emu-val>, <code>\"suspendedStart\"</code>, <code>\"suspendedYield\"</code>, <code>\"executing\"</code>, and <code>\"completed\"</code>.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[GeneratorContext]]\n            \n            </td>\n            <td>\n              The <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is used when executing the code of this generator.\n            \n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n    </emu-clause>\n\n    "}, "sec-array.prototype.keys": {"num": "22.1.3.16", "title": "#sec-array.prototype.keys Array.prototype.keys ( )", "html": "<emu-clause id=\"sec-array.prototype.keys\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.keys\">#sec-array.prototype.keys</span> Array.prototype.keys ( )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Return <emu-xref aoid=\"CreateArrayIterator\"><a href=\"#sec-createarrayiterator\">CreateArrayIterator</a></emu-xref>(<var>O</var>, <code>\"key\"</code>).\n        </li></ol></emu-alg>\n        <p>This function is the  <dfn>%ArrayProto_keys%</dfn> intrinsic object.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.slice": {"num": "22.2.3.24", "title": "#sec-%typedarray%.prototype.slice %TypedArray%.prototype.slice ( start, end )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.slice\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.slice\">#sec-%typedarray%.prototype.slice</span> %TypedArray%.prototype.slice ( <var>start</var>, <var>end</var> )</h1>\n        <p>The interpretation and use of the arguments of <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.slice</code> are the same as for <code>Array.prototype.slice</code> as defined in  <emu-xref href=\"#sec-array.prototype.slice\"><a href=\"#sec-array.prototype.slice\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.slice\">#sec-array.prototype.slice</a></emu-xref>. The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Let <var>len</var> be <var>O</var>.[[ArrayLength]].</li><li>Let <var>relativeStart</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>start</var>).</li><li>If <var>relativeStart</var> &lt; 0, let <var>k</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeStart</var>), 0); else let <var>k</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeStart</var>, <var>len</var>).</li><li>If <var>end</var> is <emu-val>undefined</emu-val>, let <var>relativeEnd</var> be <var>len</var>; else let <var>relativeEnd</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>end</var>).</li><li>If <var>relativeEnd</var> &lt; 0, let <var>final</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeEnd</var>), 0); else let <var>final</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeEnd</var>, <var>len</var>).</li><li>Let <var>count</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>final</var> - <var>k</var>, 0).</li><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"TypedArraySpeciesCreate\"><a href=\"#typedarray-species-create\">TypedArraySpeciesCreate</a></emu-xref>(<var>O</var>, &#171; <var>count</var> &#187;).</li><li>Let <var>srcName</var> be the String value of <var>O</var>.[[TypedArrayName]].</li><li>Let <var>srcType</var> be the String value of the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>srcName</var>.</li><li>Let <var>targetName</var> be the String value of <var>A</var>.[[TypedArrayName]].</li><li>Let <var>targetType</var> be the String value of the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>targetName</var>.</li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>srcType</var>, <var>targetType</var>) is <emu-val>false</emu-val>, then<ol><li>Let <var>n</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>final</var><ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>Perform !&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>n</var>), <var>kValue</var>, <emu-val>true</emu-val>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li></ol></li><li>Else if <var>count</var> &gt; 0, then<ol><li>Let <var>srcBuffer</var> be <var>O</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>srcBuffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>targetBuffer</var> be <var>A</var>.[[ViewedArrayBuffer]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>srcType</var>.</li><li>NOTE: If <var>srcType</var> and <var>targetType</var> are the same, the transfer must be performed in a manner that preserves the bit-level encoding of the source data.</li><li>Let <var>srcByteOffet</var> be <var>O</var>.[[ByteOffset]].</li><li>Let <var>targetByteIndex</var> be <var>A</var>.[[ByteOffset]].</li><li>Let <var>srcByteIndex</var> be (<var>k</var> &#215; <var>elementSize</var>) + <var>srcByteOffet</var>.</li><li>Let <var>limit</var> be <var>targetByteIndex</var> + <var>count</var> &#215; <var>elementSize</var>.</li><li>Repeat, while <var>targetByteIndex</var> &lt; <var>limit</var><ol><li>Let <var>value</var> be <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref>(<var>srcBuffer</var>, <var>srcByteIndex</var>, <code>\"Uint8\"</code>, <emu-val>true</emu-val>, <code>\"Unordered\"</code>).</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>targetBuffer</var>, <var>targetByteIndex</var>, <code>\"Uint8\"</code>, <var>value</var>, <emu-val>true</emu-val>, <code>\"Unordered\"</code>).</li><li>Set <var>srcByteIndex</var> to <var>srcByteIndex</var> + 1.</li><li>Set <var>targetByteIndex</var> to <var>targetByteIndex</var> + 1.</li></ol></li></ol></li><li>Return <var>A</var>.\n        </li></ol></emu-alg>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n      </emu-clause>\n\n      "}, "sec-string.prototype.trimend": {"num": "21.1.3.29", "title": "#sec-string.prototype.trimend String.prototype.trimEnd ( )", "html": "<emu-clause id=\"sec-string.prototype.trimend\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.trimend\">#sec-string.prototype.trimend</span> String.prototype.trimEnd ( )</h1>\n        <p>This function interprets a String value as a sequence of UTF-16 encoded code points, as described in  <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>.</p>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"TrimString\"><a href=\"#sec-trimstring\">TrimString</a></emu-xref>(<var>S</var>, <code>\"end\"</code>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>trimEnd</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-properties-of-map-iterator-instances": {"num": "23.1.5.3", "title": "#sec-properties-of-map-iterator-instances Properties of Map Iterator Instances", "html": "<emu-clause id=\"sec-properties-of-map-iterator-instances\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-map-iterator-instances\">#sec-properties-of-map-iterator-instances</span> Properties of Map Iterator Instances</h1>\n        <p>Map Iterator instances are ordinary objects that inherit properties from the <emu-xref href=\"#sec-%mapiteratorprototype%-object\"><a href=\"#sec-%mapiteratorprototype%-object\">%MapIteratorPrototype%</a></emu-xref> intrinsic object. Map Iterator instances are initially created with the internal slots described in  <emu-xref href=\"#table-50\"><a href=\"#table-50\" class=\"excluded-xref\" excluded-id=\"table-50\">#table-50</a></emu-xref>.</p>\n        <emu-table id=\"table-50\" caption=\"Internal Slots of Map Iterator Instances\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-50\">#table-50</span>: Internal Slots of Map Iterator Instances</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Internal Slot\n              \n              </th>\n              <th>\n                Description\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[Map]]\n              \n              </td>\n              <td>\n                The Map object that is being iterated.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[MapNextIndex]]\n              \n              </td>\n              <td>\n                The <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> of the next Map data element to be examined by this iterator.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[MapIterationKind]]\n              \n              </td>\n              <td>\n                A String value that identifies what is to be returned for each element of the iteration. The possible values are: <code>\"key\"</code>, <code>\"value\"</code>, <code>\"key+value\"</code>.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n    "}, "sec-copydatablockbytes": {"num": "6.2.7.3", "title": "#sec-copydatablockbytes CopyDataBlockBytes ( toBlock, toIndex, fromBlock, fromIndex, count )", "html": "<emu-clause id=\"sec-copydatablockbytes\" aoid=\"CopyDataBlockBytes\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-copydatablockbytes\">#sec-copydatablockbytes</span> CopyDataBlockBytes ( <var>toBlock</var>, <var>toIndex</var>, <var>fromBlock</var>, <var>fromIndex</var>, <var>count</var> )</h1>\n        <p>When the abstract operation CopyDataBlockBytes is called, the following steps are taken:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fromBlock</var> and <var>toBlock</var> are distinct <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Data Block</a></emu-xref> or <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref> values.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fromIndex</var>, <var>toIndex</var>, and <var>count</var> are <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> values &#8805; 0.</li><li>Let <var>fromSize</var> be the number of bytes in <var>fromBlock</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fromIndex</var> + <var>count</var> &#8804; <var>fromSize</var>.</li><li>Let <var>toSize</var> be the number of bytes in <var>toBlock</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>toIndex</var> + <var>count</var> &#8804; <var>toSize</var>.</li><li>Repeat, while <var>count</var> &gt; 0<ol><li>If <var>fromBlock</var> is a <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref>, then<ol><li>Let <var>execution</var> be the [[CandidateExecution]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>eventList</var> be the [[EventList]] field of the element in <var>execution</var>.[[EventsRecords]] whose [[AgentSignifier]] is <emu-xref aoid=\"AgentSignifier\"><a href=\"#sec-agentsignifier\">AgentSignifier</a></emu-xref>().</li><li>Let <var>bytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of length 1 that contains a nondeterministically chosen byte value.</li><li>NOTE: In implementations, <var>bytes</var> is the result of a non-atomic read instruction on the underlying hardware. The nondeterminism is a semantic prescription of the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> to describe observable behaviour of hardware with weak consistency.</li><li>Let <var>readEvent</var> be <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> { [[Order]]: <code>\"Unordered\"</code>, [[NoTear]]: <emu-val>true</emu-val>, [[Block]]: <var>fromBlock</var>, [[ByteIndex]]: <var>fromIndex</var>, [[ElementSize]]: 1 }.</li><li>Append <var>readEvent</var> to <var>eventList</var>.</li><li>Append <emu-xref href=\"#sec-chosen-value-records\"><a href=\"#sec-chosen-value-records\">Chosen Value Record</a></emu-xref> { [[Event]]: <var>readEvent</var>, [[ChosenValue]]: <var>bytes</var> } to <var>execution</var>.[[ChosenValues]].</li><li>If <var>toBlock</var> is a <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref>, then<ol><li>Append <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> { [[Order]]: <code>\"Unordered\"</code>, [[NoTear]]: <emu-val>true</emu-val>, [[Block]]: <var>toBlock</var>, [[ByteIndex]]: <var>toIndex</var>, [[ElementSize]]: 1, [[Payload]]: <var>bytes</var> } to <var>eventList</var>.</li></ol></li><li>Else,<ol><li>Set <var>toBlock</var>[<var>toIndex</var>] to <var>bytes</var>[0].</li></ol></li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>toBlock</var> is not a <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref>.</li><li>Set <var>toBlock</var>[<var>toIndex</var>] to <var>fromBlock</var>[<var>fromIndex</var>].</li></ol></li><li>Set <var>toIndex</var> to <var>toIndex</var> + 1.</li><li>Set <var>fromIndex</var> to <var>fromIndex</var> + 1.</li><li>Set <var>count</var> to <var>count</var> - 1.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-happens-before": {"num": "27.6.6", "title": "#sec-happens-before happens-before", "html": "<emu-clause id=\"sec-happens-before\" aoid=\"happens-before\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-happens-before\">#sec-happens-before</span> happens-before</h1>\n      <p>For a <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> <var>execution</var>, <var>execution</var>.[[HappensBefore]] is the least <emu-xref href=\"#sec-set-and-relation-specification-type\"><a href=\"#sec-set-and-relation-specification-type\">Relation</a></emu-xref> on events that satisfies the following.</p>\n\n      <ul>\n        <li>For each pair (<var>E</var>, <var>D</var>) in <var>execution</var>.[[AgentOrder]], (<var>E</var>, <var>D</var>) is in <var>execution</var>.[[HappensBefore]].</li>\n        <li>For each pair (<var>E</var>, <var>D</var>) in <var>execution</var>.[[SynchronizesWith]], (<var>E</var>, <var>D</var>) is in <var>execution</var>.[[HappensBefore]].</li>\n        <li>For each pair (<var>E</var>, <var>D</var>) in <emu-xref aoid=\"SharedDataBlockEventSet\"><a href=\"#sec-sharedatablockeventset\">SharedDataBlockEventSet</a></emu-xref>(<var>execution</var>), (<var>E</var>, <var>D</var>) is in <var>execution</var>.[[HappensBefore]] if <var>E</var>.[[Order]] is <code>\"Init\"</code> and <var>E</var> and <var>D</var> have overlapping ranges.</li>\n        <li>For each pair (<var>E</var>, <var>D</var>) in <emu-xref aoid=\"EventSet\"><a href=\"#sec-event-set\">EventSet</a></emu-xref>(<var>execution</var>), (<var>E</var>, <var>D</var>) is in <var>execution</var>.[[HappensBefore]] if there is an event <var>F</var> such that the pairs (<var>E</var>, <var>F</var>) and (<var>F</var>, <var>D</var>) are in <var>execution</var>.[[HappensBefore]].</li>\n      </ul>\n\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Because happens-before is a superset of <emu-xref aoid=\"agent-order\"><a href=\"#sec-agent-order\">agent-order</a></emu-xref>, candidate executions are consistent with the single-thread evaluation semantics of ECMAScript.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-memory-order": {"num": "27.7.4", "title": "#sec-memory-order Sequentially Consistent Atomics", "html": "<emu-clause id=\"sec-memory-order\" aoid=\"memory-order\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-memory-order\">#sec-memory-order</span> Sequentially Consistent Atomics</h1>\n      <p>For a <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> <var>execution</var>, memory-order is a <emu-xref href=\"#sec-set-and-relation-specification-type\"><a href=\"#sec-set-and-relation-specification-type\">strict total order</a></emu-xref> of all events in <emu-xref aoid=\"EventSet\"><a href=\"#sec-event-set\">EventSet</a></emu-xref>(<var>execution</var>) that satisfies the following.</p>\n      <ul>\n        <li>For each pair (<var>E</var>, <var>D</var>) in <var>execution</var>.[[HappensBefore]], (<var>E</var>, <var>D</var>) is in memory-order.</li>\n        <li>\n          <p>For each pair (<var>R</var>, <var>W</var>) in <var>execution</var>.[[ReadsFrom]], there is no <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> event <var>V</var> in <emu-xref aoid=\"SharedDataBlockEventSet\"><a href=\"#sec-sharedatablockeventset\">SharedDataBlockEventSet</a></emu-xref>(<var>execution</var>) such that <var>V</var>.[[Order]] is <code>\"SeqCst\"</code>, the pairs (<var>W</var>, <var>V</var>) and (<var>V</var>, <var>R</var>) are in memory-order, and any of the following conditions are true.</p>\n          <ul>\n            <li>The pair (<var>W</var>, <var>R</var>) is in <var>execution</var>.[[SynchronizesWith]], and <var>V</var> and <var>R</var> have equal ranges.</li>\n            <li>The pairs (<var>W</var>, <var>R</var>) and (<var>V</var>, <var>R</var>) are in <var>execution</var>.[[HappensBefore]], <var>W</var>.[[Order]] is <code>\"SeqCst\"</code>, and <var>W</var> and <var>V</var> have equal ranges.</li>\n            <li>The pairs (<var>W</var>, <var>R</var>) and (<var>W</var>, <var>V</var>) are in <var>execution</var>.[[HappensBefore]], <var>R</var>.[[Order]] is <code>\"SeqCst\"</code>, and <var>V</var> and <var>R</var> have equal ranges.</li>\n          </ul>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>This clause additionally constrains <code>\"SeqCst\"</code> events on equal ranges.</p>\n          </div></emu-note>\n        </li>\n        <li>\n          <p>For each <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> event <var>W</var> in <emu-xref aoid=\"SharedDataBlockEventSet\"><a href=\"#sec-sharedatablockeventset\">SharedDataBlockEventSet</a></emu-xref>(<var>execution</var>), if <var>W</var>.[[Order]] is <code>\"SeqCst\"</code>, then it is not the case that there is an infinite number of <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> events in <emu-xref aoid=\"SharedDataBlockEventSet\"><a href=\"#sec-sharedatablockeventset\">SharedDataBlockEventSet</a></emu-xref>(<var>execution</var>) with equal range that is memory-order before <var>W</var>.</p>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>This clause together with the forward progress guarantee on agents ensure the liveness condition that <code>\"SeqCst\"</code> writes become visible to <code>\"SeqCst\"</code> reads with equal range in finite time.</p>\n          </div></emu-note>\n        </li>\n      </ul>\n      <p>A <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> has sequentially consistent atomics if a memory-order exists.</p>\n\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>While memory-order includes all events in <emu-xref aoid=\"EventSet\"><a href=\"#sec-event-set\">EventSet</a></emu-xref>(<var>execution</var>), those that are not constrained by <emu-xref aoid=\"happens-before\"><a href=\"#sec-happens-before\">happens-before</a></emu-xref> or <emu-xref aoid=\"synchronizes-with\"><a href=\"#sec-synchronizes-with\">synchronizes-with</a></emu-xref> are allowed to occur anywhere in the order.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-typedarray-objects": {"num": "22.2", "title": "#sec-typedarray-objects TypedArray Objects", "html": "<emu-clause id=\"sec-typedarray-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-typedarray-objects\">#sec-typedarray-objects</span> TypedArray Objects</h1>\n    <p><var>TypedArray</var> objects present an array-like view of an underlying binary data buffer (<emu-xref href=\"#sec-arraybuffer-objects\"><a href=\"#sec-arraybuffer-objects\" class=\"excluded-xref\" excluded-id=\"sec-arraybuffer-objects\">#sec-arraybuffer-objects</a></emu-xref>). Each element of a <var>TypedArray</var> instance has the same underlying binary scalar data type. There is a distinct <var>TypedArray</var> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>, listed in  <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref>, for each of the supported element types. Each <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> in  <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> has a corresponding distinct prototype object.</p>\n    <emu-table id=\"table-49\" caption=\"The TypedArray Constructors\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-49\">#table-49</span>: The TypedArray Constructors</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            <emu-xref href=\"#constructor\"><a href=\"#constructor\">Constructor</a></emu-xref> Name and Intrinsic\n          \n          </th>\n          <th>\n            Element Type\n          \n          </th>\n          <th>\n            Element Size\n          \n          </th>\n          <th>\n            Conversion Operation\n          \n          </th>\n          <th>\n            Description\n          \n          </th>\n        </tr>\n        <tr>\n          <td>\n            Int8Array\n            \n            <br>\n            %Int8Array%\n          \n          </td>\n          <td>\n            Int8\n          \n          </td>\n          <td>\n            1\n          \n          </td>\n          <td>\n            <emu-xref aoid=\"ToInt8\"><a href=\"#sec-toint8\">ToInt8</a></emu-xref>\n          \n          </td>\n          <td>\n            8-bit 2's complement signed <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            Uint8Array\n            \n            <br>\n            %Uint8Array%\n          \n          </td>\n          <td>\n            Uint8\n          \n          </td>\n          <td>\n            1\n          \n          </td>\n          <td>\n            <emu-xref aoid=\"ToUint8\"><a href=\"#sec-touint8\">ToUint8</a></emu-xref>\n          \n          </td>\n          <td>\n            8-bit unsigned <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            Uint8ClampedArray\n            \n            <br>\n            %Uint8ClampedArray%\n          \n          </td>\n          <td>\n            Uint8C\n          \n          </td>\n          <td>\n            1\n          \n          </td>\n          <td>\n            <emu-xref aoid=\"ToUint8Clamp\"><a href=\"#sec-touint8clamp\">ToUint8Clamp</a></emu-xref>\n          \n          </td>\n          <td>\n            8-bit unsigned <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> (clamped conversion)\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            Int16Array\n            \n            <br>\n            %Int16Array%\n          \n          </td>\n          <td>\n            Int16\n          \n          </td>\n          <td>\n            2\n          \n          </td>\n          <td>\n            <emu-xref aoid=\"ToInt16\"><a href=\"#sec-toint16\">ToInt16</a></emu-xref>\n          \n          </td>\n          <td>\n            16-bit 2's complement signed <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            Uint16Array\n            \n            <br>\n            %Uint16Array%\n          \n          </td>\n          <td>\n            Uint16\n          \n          </td>\n          <td>\n            2\n          \n          </td>\n          <td>\n            <emu-xref aoid=\"ToUint16\"><a href=\"#sec-touint16\">ToUint16</a></emu-xref>\n          \n          </td>\n          <td>\n            16-bit unsigned <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            Int32Array\n            \n            <br>\n            %Int32Array%\n          \n          </td>\n          <td>\n            Int32\n          \n          </td>\n          <td>\n            4\n          \n          </td>\n          <td>\n            <emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>\n          \n          </td>\n          <td>\n            32-bit 2's complement signed <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            Uint32Array\n            \n            <br>\n            %Uint32Array%\n          \n          </td>\n          <td>\n            Uint32\n          \n          </td>\n          <td>\n            4\n          \n          </td>\n          <td>\n            <emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>\n          \n          </td>\n          <td>\n            32-bit unsigned <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            BigInt64Array\n            \n            <br>\n            %BigInt64Array%\n          \n          </td>\n          <td>\n            BigInt64\n          \n          </td>\n          <td>\n            8\n          \n          </td>\n          <td>\n            <emu-xref aoid=\"ToBigInt64\"><a href=\"#sec-tobigint64\">ToBigInt64</a></emu-xref>\n          \n          </td>\n          <td>\n            64-bit two's complement signed <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            BigUint64Array\n            \n            <br>\n            %BigUint64Array%\n          \n          </td>\n          <td>\n            BigUint64\n          \n          </td>\n          <td>\n            8\n          \n          </td>\n          <td>\n            <emu-xref aoid=\"ToBigUint64\"><a href=\"#sec-tobiguint64\">ToBigUint64</a></emu-xref>\n          \n          </td>\n          <td>\n            64-bit unsigned <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            Float32Array\n            \n            <br>\n            %Float32Array%\n          \n          </td>\n          <td>\n            Float32\n          \n          </td>\n          <td>\n            4\n          \n          </td>\n          <td>\n          </td>\n          <td>\n            32-bit IEEE floating point\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            Float64Array\n            \n            <br>\n            %Float64Array%\n          \n          </td>\n          <td>\n            Float64\n          \n          </td>\n          <td>\n            8\n          \n          </td>\n          <td>\n          </td>\n          <td>\n            64-bit IEEE floating point\n          \n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>In the definitions below, references to <var>TypedArray</var> should be replaced with the appropriate <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> name from the above table. The phrase &#8220;the element size in bytes&#8221; refers to the value in the Element Size column of the table in the row corresponding to the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. The phrase &#8220;element Type&#8221; refers to the value in the Element Type column for that row.</p>\n\n    <div id=\"excluded-sec-%typedarray%-intrinsic-object\"><h1><span class=\"secnum\">22.2.1</span>#sec-%typedarray%-intrinsic-object The %TypedArray% Intrinsic Object</h1>...</div><div id=\"excluded-sec-properties-of-the-%typedarray%-intrinsic-object\"><h1><span class=\"secnum\">22.2.2</span>#sec-properties-of-the-%typedarray%-intrinsic-object Properties of the %TypedArray% Intrinsic Object</h1>...</div><div id=\"excluded-sec-properties-of-the-%typedarrayprototype%-object\"><h1><span class=\"secnum\">22.2.3</span>#sec-properties-of-the-%typedarrayprototype%-object Properties of the %TypedArray.prototype% Object</h1>...</div><div id=\"excluded-sec-typedarray-constructors\"><h1><span class=\"secnum\">22.2.4</span>#sec-typedarray-constructors The TypedArray Constructors</h1>...</div><div id=\"excluded-sec-properties-of-the-typedarray-constructors\"><h1><span class=\"secnum\">22.2.5</span>#sec-properties-of-the-typedarray-constructors Properties of the TypedArray Constructors</h1>...</div><div id=\"excluded-sec-properties-of-typedarray-prototype-objects\"><h1><span class=\"secnum\">22.2.6</span>#sec-properties-of-typedarray-prototype-objects Properties of the TypedArray Prototype Objects</h1>...</div><div id=\"excluded-sec-properties-of-typedarray-instances\"><h1><span class=\"secnum\">22.2.7</span>#sec-properties-of-typedarray-instances Properties of TypedArray Instances</h1>...</div></emu-clause>\n"}, "sec-%typedarray%.prototype.keys": {"num": "22.2.3.16", "title": "#sec-%typedarray%.prototype.keys %TypedArray%.prototype.keys ( )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.keys\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.keys\">#sec-%typedarray%.prototype.keys</span> %TypedArray%.prototype.keys ( )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Return <emu-xref aoid=\"CreateArrayIterator\"><a href=\"#sec-createarrayiterator\">CreateArrayIterator</a></emu-xref>(<var>O</var>, <code>\"key\"</code>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-synchronizes-with": {"num": "27.6.5", "title": "#sec-synchronizes-with synchronizes-with", "html": "<emu-clause id=\"sec-synchronizes-with\" aoid=\"synchronizes-with\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-synchronizes-with\">#sec-synchronizes-with</span> synchronizes-with</h1>\n      <p>For a <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> <var>execution</var>, <var>execution</var>.[[SynchronizesWith]] is the least <emu-xref href=\"#sec-set-and-relation-specification-type\"><a href=\"#sec-set-and-relation-specification-type\">Relation</a></emu-xref> on events that satisfies the following.</p>\n      <ul>\n        <li>\n          For each pair (<var>R</var>, <var>W</var>) in <var>execution</var>.[[ReadsFrom]], (<var>W</var>, <var>R</var>) is in <var>execution</var>.[[SynchronizesWith]] if <var>R</var>.[[Order]] is <code>\"SeqCst\"</code>, <var>W</var>.[[Order]] is <code>\"SeqCst\"</code>, and <var>R</var> and <var>W</var> have equal ranges.\n        \n        </li>\n        <li>\n          For each element <var>eventsRecord</var> of <var>execution</var>.[[EventsRecords]], the following is true.\n          \n          <ul>\n            <li>For each pair (<var>S</var>, <var>Sw</var>) in <var>eventsRecord</var>.[[AgentSynchronizesWith]], (<var>S</var>, <var>Sw</var>) is in <var>execution</var>.[[SynchronizesWith]].</li>\n          </ul>\n        </li>\n        <li>For each pair (<var>E</var>, <var>D</var>) in <var>execution</var>.[[HostSynchronizesWith]], (<var>E</var>, <var>D</var>) is in <var>execution</var>.[[SynchronizesWith]].</li>\n      </ul>\n\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Owing to convention, write events synchronizes-with read events, instead of read events synchronizes-with write events.</p>\n      </div></emu-note>\n\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p><code>\"Init\"</code> events do not participate in synchronizes-with, and are instead constrained directly by <emu-xref aoid=\"happens-before\"><a href=\"#sec-happens-before\">happens-before</a></emu-xref>.</p>\n      </div></emu-note>\n\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>Not all <code>\"SeqCst\"</code> events related by <emu-xref aoid=\"reads-from\"><a href=\"#sec-reads-from\">reads-from</a></emu-xref> are related by synchronizes-with. Only events that also have equal ranges are related by synchronizes-with.</p>\n      </div></emu-note>\n\n      <emu-note><span class=\"note\">Note 4</span><div class=\"note-contents\">\n        <p>For <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref> events <var>R</var> and <var>W</var> such that <var>W</var> synchronizes-with <var>R</var>, <var>R</var> may <emu-xref aoid=\"reads-from\"><a href=\"#sec-reads-from\">reads-from</a></emu-xref> other writes than <var>W</var>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-string.prototype.padend": {"num": "21.1.3.14", "title": "#sec-string.prototype.padend String.prototype.padEnd ( maxLength [ , fillString ] )", "html": "<emu-clause id=\"sec-string.prototype.padend\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.padend\">#sec-string.prototype.padend</span> String.prototype.padEnd ( <var>maxLength</var> [ , <var>fillString</var> ] )</h1>\n        <p>When the <code>padEnd</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Return ?&#160;<emu-xref aoid=\"StringPad\"><a href=\"#sec-stringpad\">StringPad</a></emu-xref>(<var>O</var>, <var>maxLength</var>, <var>fillString</var>, <code>\"end\"</code>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-serializejsonobject": {"num": "24.5.2.4", "title": "#sec-serializejsonobject Runtime Semantics: SerializeJSONObject ( value )", "html": "<emu-clause id=\"sec-serializejsonobject\" aoid=\"SerializeJSONObject\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-serializejsonobject\">#sec-serializejsonobject</span> Runtime Semantics: SerializeJSONObject ( <var>value</var> )</h1>\n        <p>The abstract operation SerializeJSONObject with argument <var>value</var> serializes an object. It has access to the <var>stack</var>, <var>indent</var>, <var>gap</var>, and <var>PropertyList</var> values of the current invocation of the <code>stringify</code> method.</p>\n        <emu-alg><ol><li>If <var>stack</var> contains <var>value</var>, throw a <emu-val>TypeError</emu-val> exception because the structure is cyclical.</li><li>Append <var>value</var> to <var>stack</var>.</li><li>Let <var>stepback</var> be <var>indent</var>.</li><li>Set <var>indent</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>indent</var> and <var>gap</var>.</li><li>If <var>PropertyList</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>K</var> be <var>PropertyList</var>.</li></ol></li><li>Else,<ol><li>Let <var>K</var> be ?&#160;<emu-xref aoid=\"EnumerableOwnPropertyNames\"><a href=\"#sec-enumerableownpropertynames\">EnumerableOwnPropertyNames</a></emu-xref>(<var>value</var>, <code>\"key\"</code>).</li></ol></li><li>Let <var>partial</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>P</var> of <var>K</var>, do<ol><li>Let <var>strP</var> be ?&#160;<emu-xref aoid=\"SerializeJSONProperty\"><a href=\"#sec-serializejsonproperty\">SerializeJSONProperty</a></emu-xref>(<var>P</var>, <var>value</var>).</li><li>If <var>strP</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>member</var> be <emu-xref aoid=\"QuoteJSONString\"><a href=\"#sec-quotejsonstring\">QuoteJSONString</a></emu-xref>(<var>P</var>).</li><li>Set <var>member</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>member</var> and <code>\":\"</code>.</li><li>If <var>gap</var> is not the empty String, then<ol><li>Set <var>member</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>member</var> and the code unit 0x0020 (SPACE).</li></ol></li><li>Set <var>member</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>member</var> and <var>strP</var>.</li><li>Append <var>member</var> to <var>partial</var>.</li></ol></li></ol></li><li>If <var>partial</var> is empty, then<ol><li>Let <var>final</var> be <code>\"{}\"</code>.</li></ol></li><li>Else,<ol><li>If <var>gap</var> is the empty String, then<ol><li>Let <var>properties</var> be the String value formed by concatenating all the element Strings of <var>partial</var> with each adjacent pair of Strings separated with the code unit 0x002C (COMMA). A comma is not inserted either before the first String or after the last String.</li><li>Let <var>final</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <code>\"{\"</code>, <var>properties</var>, and <code>\"}\"</code>.</li></ol></li><li>Else,<ol><li>Let <var>separator</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the code unit 0x002C (COMMA), the code unit 0x000A (LINE FEED), and <var>indent</var>.</li><li>Let <var>properties</var> be the String value formed by concatenating all the element Strings of <var>partial</var> with each adjacent pair of Strings separated with <var>separator</var>. The <var>separator</var> String is not inserted either before the first String or after the last String.</li><li>Let <var>final</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <code>\"{\"</code>, the code unit 0x000A (LINE FEED), <var>indent</var>, <var>properties</var>, the code unit 0x000A (LINE FEED), <var>stepback</var>, and <code>\"}\"</code>.</li></ol></li></ol></li><li>Remove the last element of <var>stack</var>.</li><li>Set <var>indent</var> to <var>stepback</var>.</li><li>Return <var>final</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-cyclic-module-records": {"num": "15.2.1.16", "title": "#sec-cyclic-module-records Cyclic Module Records", "html": "<emu-clause id=\"sec-cyclic-module-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-cyclic-module-records\">#sec-cyclic-module-records</span> Cyclic Module Records</h1>\n        <p>A  <dfn id=\"cyclic-module-record\">Cyclic Module Record</dfn> is used to represent information about a module that can participate in dependency cycles with other modules that are subclasses of the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> type. Module Records that are not subclasses of the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> type must not participate in dependency cycles with Source Text Module Records.</p>\n        <p>In addition to the fields defined in  <emu-xref href=\"#table-36\"><a href=\"#table-36\" class=\"excluded-xref\" excluded-id=\"table-36\">#table-36</a></emu-xref> Cyclic Module Records have the additional fields listed in  <emu-xref href=\"#table-cyclic-module-fields\"><a href=\"#table-cyclic-module-fields\" class=\"excluded-xref\" excluded-id=\"table-cyclic-module-fields\">#table-cyclic-module-fields</a></emu-xref></p>\n        <emu-table id=\"table-cyclic-module-fields\" caption=\"Additional Fields of Cyclic Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-cyclic-module-fields\">#table-cyclic-module-fields</span>: Additional Fields of Cyclic Module Records</figcaption>\n          <table>\n            <tbody>\n              <tr>\n                <th>\n                  Field Name\n                \n                </th>\n                <th>\n                  Value Type\n                \n                </th>\n                <th>\n                  Meaning\n                \n                </th>\n              </tr>\n              <tr>\n                <td>\n                  [[Status]]\n                \n                </td>\n                <td>\n                  String\n                \n                </td>\n                <td>\n                  Initially <code>\"unlinked\"</code>. Transitions to <code>\"linking\"</code>, <code>\"linked\"</code>, <code>\"evaluating\"</code>, <code>\"evaluated\"</code> (in that order) as the module progresses throughout its lifecycle.\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[EvaluationError]]\n                \n                </td>\n                <td>\n                  An <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> | <emu-val>undefined</emu-val>\n                \n                </td>\n                <td>\n                  A completion of type <emu-const>throw</emu-const> representing the exception that occurred during evaluation.  <emu-val>undefined</emu-val> if no exception occurred or if [[Status]] is not <code>\"evaluated\"</code>.\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[DFSIndex]]\n                \n                </td>\n                <td>\n                  <emu-xref href=\"#integer\"><a href=\"#integer\">Integer</a></emu-xref> | <emu-val>undefined</emu-val>\n                \n                </td>\n                <td>\n                  Auxiliary field used during Link and Evaluate only.\n                  If [[Status]] is <code>\"linking\"</code> or <code>\"evaluating\"</code>, this nonnegative number records the point at which the module was first visited during the ongoing depth-first traversal of the dependency graph.\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[DFSAncestorIndex]]\n                \n                </td>\n                <td>\n                  <emu-xref href=\"#integer\"><a href=\"#integer\">Integer</a></emu-xref> | <emu-val>undefined</emu-val>\n                \n                </td>\n                <td>\n                  Auxiliary field used during Link and Evaluate only. If [[Status]] is <code>\"linking\"</code> or <code>\"evaluating\"</code>, this is either the module's own [[DFSIndex]] or that of an \"earlier\" module in the same strongly connected component.\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[RequestedModules]]\n                \n                </td>\n                <td>\n                  <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of String\n                \n                </td>\n                <td>\n                  A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of all the <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> strings used by the module represented by this record to request the importation of a module. The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is source code occurrence ordered.\n                \n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>In addition to the methods defined in  <emu-xref href=\"#table-37\"><a href=\"#table-37\" class=\"excluded-xref\" excluded-id=\"table-37\">#table-37</a></emu-xref> Cyclic Module Records have the additional methods listed in  <emu-xref href=\"#table-cyclic-module-methods\"><a href=\"#table-cyclic-module-methods\" class=\"excluded-xref\" excluded-id=\"table-cyclic-module-methods\">#table-cyclic-module-methods</a></emu-xref></p>\n        <emu-table id=\"table-cyclic-module-methods\" caption=\"Additional Abstract Methods of Cyclic Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-cyclic-module-methods\">#table-cyclic-module-methods</span>: Additional Abstract Methods of Cyclic Module Records</figcaption>\n          <table>\n            <tbody>\n              <tr>\n                <th>\n                  Method\n                \n                </th>\n                <th>\n                  Purpose\n                \n                </th>\n              </tr>\n              <tr>\n                <td>\n                  <emu-xref aoid=\"InitializeEnvironment\"><a href=\"#sec-source-text-module-record-initialize-environment\">InitializeEnvironment</a></emu-xref>()\n                \n                </td>\n                <td>\n                  Initialize the <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> of the module, including resolving all imported bindings, and create the module's <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-xref aoid=\"ExecuteModule\"><a href=\"#sec-source-text-module-record-execute-module\">ExecuteModule</a></emu-xref>()\n                \n                </td>\n                <td>\n                  Evaluate the module's code within its <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n                \n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n\n        <div id=\"excluded-sec-moduledeclarationlinking\"><h1><span class=\"secnum\">15.2.1.16.1</span>#sec-moduledeclarationlinking Link ( ) Concrete Method</h1>...</div><div id=\"excluded-sec-moduleevaluation\"><h1><span class=\"secnum\">15.2.1.16.2</span>#sec-moduleevaluation Evaluate ( ) Concrete Method</h1>...</div><div id=\"excluded-sec-example-cyclic-module-record-graphs\"><h1><span class=\"secnum\">15.2.1.16.3</span>#sec-example-cyclic-module-record-graphs Example Cyclic Module Record Graphs</h1>...</div></emu-clause>\n\n      "}, "sec-dataview.prototype.setuint8": {"num": "24.3.4.22", "title": "#sec-dataview.prototype.setuint8 DataView.prototype.setUint8 ( byteOffset, value )", "html": "<emu-clause id=\"sec-dataview.prototype.setuint8\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.setuint8\">#sec-dataview.prototype.setuint8</span> DataView.prototype.setUint8 ( <var>byteOffset</var>, <var>value</var> )</h1>\n        <p>When the <code>setUint8</code> method is called with arguments <var>byteOffset</var> and <var>value</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"SetViewValue\"><a href=\"#sec-setviewvalue\">SetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <emu-val>true</emu-val>, <code>\"Uint8\"</code>, <var>value</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-string.prototype.padstart": {"num": "21.1.3.15", "title": "#sec-string.prototype.padstart String.prototype.padStart ( maxLength [ , fillString ] )", "html": "<emu-clause id=\"sec-string.prototype.padstart\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.padstart\">#sec-string.prototype.padstart</span> String.prototype.padStart ( <var>maxLength</var> [ , <var>fillString</var> ] )</h1>\n        <p>When the <code>padStart</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Return ?&#160;<emu-xref aoid=\"StringPad\"><a href=\"#sec-stringpad\">StringPad</a></emu-xref>(<var>O</var>, <var>maxLength</var>, <var>fillString</var>, <code>\"start\"</code>).\n        </li></ol></emu-alg>\n\n        <div id=\"excluded-sec-stringpad\"><h1><span class=\"secnum\">21.1.3.15.1</span>#sec-stringpad Runtime Semantics: StringPad ( O, maxLength, fillString, placement )</h1>...</div></emu-clause>\n\n      "}, "sec-atomics.store": {"num": "24.4.9", "title": "#sec-atomics.store Atomics.store ( typedArray, index, value )", "html": "<emu-clause id=\"sec-atomics.store\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.store\">#sec-atomics.store</span> Atomics.store ( <var>typedArray</var>, <var>index</var>, <var>value</var> )</h1>\n      <p>The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateSharedIntegerTypedArray\"><a href=\"#sec-validatesharedintegertypedarray\">ValidateSharedIntegerTypedArray</a></emu-xref>(<var>typedArray</var>).</li><li>Let <var>i</var> be ?&#160;<emu-xref aoid=\"ValidateAtomicAccess\"><a href=\"#sec-validateatomicaccess\">ValidateAtomicAccess</a></emu-xref>(<var>typedArray</var>, <var>index</var>).</li><li>Let <var>arrayTypeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>If <var>arrayTypeName</var> is <code>\"BigUint64Array\"</code> or <code>\"BigInt64Array\"</code>, let <var>v</var> be ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-tobigint\">ToBigInt</a></emu-xref>(<var>value</var>).</li><li>Otherwise, let <var>v</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>value</var>).</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>elementType</var> be the String value of the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>offset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>Let <var>indexedPosition</var> be (<var>i</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>buffer</var>, <var>indexedPosition</var>, <var>elementType</var>, <var>v</var>, <emu-val>true</emu-val>, <code>\"SeqCst\"</code>).</li><li>Return <var>v</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-dataview.prototype.getbigint64": {"num": "24.3.4.5", "title": "#sec-dataview.prototype.getbigint64 DataView.prototype.getBigInt64 ( byteOffset [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.getbigint64\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.getbigint64\">#sec-dataview.prototype.getbigint64</span> DataView.prototype.getBigInt64 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>getBigInt64</code> method is called with argument <var>byteOffset</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>undefined</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"GetViewValue\"><a href=\"#sec-getviewvalue\">GetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <code>\"BigInt64\"</code>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-object.values": {"num": "19.1.2.22", "title": "#sec-object.values Object.values ( O )", "html": "<emu-clause id=\"sec-object.values\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.values\">#sec-object.values</span> Object.values ( <var>O</var> )</h1>\n        <p>When the <code>values</code> function is called with argument <var>O</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>obj</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>O</var>).</li><li>Let <var>nameList</var> be ?&#160;<emu-xref aoid=\"EnumerableOwnPropertyNames\"><a href=\"#sec-enumerableownpropertynames\">EnumerableOwnPropertyNames</a></emu-xref>(<var>obj</var>, <code>\"value\"</code>).</li><li>Return <emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(<var>nameList</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-dataview.prototype.getfloat64": {"num": "24.3.4.8", "title": "#sec-dataview.prototype.getfloat64 DataView.prototype.getFloat64 ( byteOffset [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.getfloat64\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.getfloat64\">#sec-dataview.prototype.getfloat64</span> DataView.prototype.getFloat64 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>getFloat64</code> method is called with argument <var>byteOffset</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"GetViewValue\"><a href=\"#sec-getviewvalue\">GetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <code>\"Float64\"</code>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-map.prototype.entries": {"num": "23.1.3.4", "title": "#sec-map.prototype.entries Map.prototype.entries ( )", "html": "<emu-clause id=\"sec-map.prototype.entries\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype.entries\">#sec-map.prototype.entries</span> Map.prototype.entries ( )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"CreateMapIterator\"><a href=\"#sec-createmapiterator\">CreateMapIterator</a></emu-xref>(<var>M</var>, <code>\"key+value\"</code>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-atomics.compareexchange": {"num": "24.4.4", "title": "#sec-atomics.compareexchange Atomics.compareExchange ( typedArray, index, expectedValue, replacementValue )", "html": "<emu-clause id=\"sec-atomics.compareexchange\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.compareexchange\">#sec-atomics.compareexchange</span> Atomics.compareExchange ( <var>typedArray</var>, <var>index</var>, <var>expectedValue</var>, <var>replacementValue</var> )</h1>\n      <p>The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateSharedIntegerTypedArray\"><a href=\"#sec-validatesharedintegertypedarray\">ValidateSharedIntegerTypedArray</a></emu-xref>(<var>typedArray</var>).</li><li>Let <var>i</var> be ?&#160;<emu-xref aoid=\"ValidateAtomicAccess\"><a href=\"#sec-validateatomicaccess\">ValidateAtomicAccess</a></emu-xref>(<var>typedArray</var>, <var>index</var>).</li><li>Let <var>arrayTypeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>If <var>typedArray</var>.[[ContentType]] is <code>\"BigInt\"</code>, then<ol><li>Let <var>expected</var> be ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-tobigint\">ToBigInt</a></emu-xref>(<var>expectedValue</var>).</li><li>Let <var>replacement</var> be ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-tobigint\">ToBigInt</a></emu-xref>(<var>replacementValue</var>).</li></ol></li><li>Else,<ol><li>Let <var>expected</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>expectedValue</var>).</li><li>Let <var>replacement</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>replacementValue</var>).</li></ol></li><li>Let <var>elementType</var> be the String value of the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>isLittleEndian</var> be the value of the [[LittleEndian]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>expectedBytes</var> be <emu-xref aoid=\"NumericToRawBytes\"><a href=\"#sec-numerictorawbytes\">NumericToRawBytes</a></emu-xref>(<var>elementType</var>, <var>expected</var>, <var>isLittleEndian</var>).</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>offset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>Let <var>indexedPosition</var> be (<var>i</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Let <code>compareExchange</code> denote a semantic function of two <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values arguments that returns the second argument if the first argument is element-wise equal to <var>expectedBytes</var>.</li><li>Return <emu-xref aoid=\"GetModifySetValueInBuffer\"><a href=\"#sec-getmodifysetvalueinbuffer\">GetModifySetValueInBuffer</a></emu-xref>(<var>buffer</var>, <var>indexedPosition</var>, <var>elementType</var>, <var>replacement</var>, <code>compareExchange</code>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-setintegritylevel": {"num": "7.3.14", "title": "#sec-setintegritylevel SetIntegrityLevel ( O, level )", "html": "<emu-clause id=\"sec-setintegritylevel\" aoid=\"SetIntegrityLevel\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-setintegritylevel\">#sec-setintegritylevel</span> SetIntegrityLevel ( <var>O</var>, <var>level</var> )</h1>\n      <p>The abstract operation SetIntegrityLevel is used to fix the set of own properties of an object. This abstract operation performs the following steps:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>level</var> is either <code>\"sealed\"</code> or <code>\"frozen\"</code>.</li><li>Let <var>status</var> be ? <var>O</var>.[[PreventExtensions]]().</li><li>If <var>status</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>keys</var> be ? <var>O</var>.[[OwnPropertyKeys]]().</li><li>If <var>level</var> is <code>\"sealed\"</code>, then<ol><li>For each element <var>k</var> of <var>keys</var>, do<ol><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>k</var>, PropertyDescriptor { [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>level</var> is <code>\"frozen\"</code>.</li><li>For each element <var>k</var> of <var>keys</var>, do<ol><li>Let <var>currentDesc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>k</var>).</li><li>If <var>currentDesc</var> is not <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsAccessorDescriptor\"><a href=\"#sec-isaccessordescriptor\">IsAccessorDescriptor</a></emu-xref>(<var>currentDesc</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>desc</var> be the PropertyDescriptor { [[Configurable]]: <emu-val>false</emu-val> }.</li></ol></li><li>Else,<ol><li>Let <var>desc</var> be the PropertyDescriptor { [[Configurable]]: <emu-val>false</emu-val>, [[Writable]]: <emu-val>false</emu-val> }.</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>k</var>, <var>desc</var>).</li></ol></li></ol></li></ol></li><li>Return <emu-val>true</emu-val>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-performpromisethen": {"num": "25.6.5.4.1", "title": "#sec-performpromisethen PerformPromiseThen ( promise, onFulfilled, onRejected [ , resultCapability ] )", "html": "<emu-clause id=\"sec-performpromisethen\" aoid=\"PerformPromiseThen\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-performpromisethen\">#sec-performpromisethen</span> PerformPromiseThen ( <var>promise</var>, <var>onFulfilled</var>, <var>onRejected</var> [ , <var>resultCapability</var> ] )</h1>\n          <p>The abstract operation PerformPromiseThen performs the &#8220;then&#8221; operation on <var>promise</var> using <var>onFulfilled</var> and <var>onRejected</var> as its settlement actions. If <var>resultCapability</var> is passed, the result is stored by updating <var>resultCapability</var>'s promise. (If it is not passed, then PerformPromiseThen is being called by a specification-internal operation where the result does not matter.)</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPromise\"><a href=\"#sec-ispromise\">IsPromise</a></emu-xref>(<var>promise</var>) is <emu-val>true</emu-val>.</li><li>If <var>resultCapability</var> is present, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>resultCapability</var> is a PromiseCapability <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>.</li></ol></li><li>Else,<ol><li>Set <var>resultCapability</var> to <emu-val>undefined</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>onFulfilled</var>) is <emu-val>false</emu-val>, then<ol><li>Set <var>onFulfilled</var> to <emu-val>undefined</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>onRejected</var>) is <emu-val>false</emu-val>, then<ol><li>Set <var>onRejected</var> to <emu-val>undefined</emu-val>.</li></ol></li><li>Let <var>fulfillReaction</var> be the PromiseReaction { [[Capability]]: <var>resultCapability</var>, [[Type]]: <code>\"Fulfill\"</code>, [[Handler]]: <var>onFulfilled</var> }.</li><li>Let <var>rejectReaction</var> be the PromiseReaction { [[Capability]]: <var>resultCapability</var>, [[Type]]: <code>\"Reject\"</code>, [[Handler]]: <var>onRejected</var> }.</li><li>If <var>promise</var>.[[PromiseState]] is <code>\"pending\"</code>, then<ol><li>Append <var>fulfillReaction</var> as the last element of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>promise</var>.[[PromiseFulfillReactions]].</li><li>Append <var>rejectReaction</var> as the last element of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>promise</var>.[[PromiseRejectReactions]].</li></ol></li><li>Else if <var>promise</var>.[[PromiseState]] is <code>\"fulfilled\"</code>, then<ol><li>Let <var>value</var> be <var>promise</var>.[[PromiseResult]].</li><li>Perform <emu-xref aoid=\"EnqueueJob\"><a href=\"#sec-enqueuejob\">EnqueueJob</a></emu-xref>(<code>\"PromiseJobs\"</code>, <emu-xref aoid=\"PromiseReactionJob\"><a href=\"#sec-promisereactionjob\">PromiseReactionJob</a></emu-xref>, &#171; <var>fulfillReaction</var>, <var>value</var> &#187;).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The value of <var>promise</var>.[[PromiseState]] is <code>\"rejected\"</code>.</li><li>Let <var>reason</var> be <var>promise</var>.[[PromiseResult]].</li><li>If <var>promise</var>.[[PromiseIsHandled]] is <emu-val>false</emu-val>, perform <emu-xref aoid=\"HostPromiseRejectionTracker\"><a href=\"#sec-host-promise-rejection-tracker\">HostPromiseRejectionTracker</a></emu-xref>(<var>promise</var>, <code>\"handle\"</code>).</li><li>Perform <emu-xref aoid=\"EnqueueJob\"><a href=\"#sec-enqueuejob\">EnqueueJob</a></emu-xref>(<code>\"PromiseJobs\"</code>, <emu-xref aoid=\"PromiseReactionJob\"><a href=\"#sec-promisereactionjob\">PromiseReactionJob</a></emu-xref>, &#171; <var>rejectReaction</var>, <var>reason</var> &#187;).</li></ol></li><li>Set <var>promise</var>.[[PromiseIsHandled]] to <emu-val>true</emu-val>.</li><li>If <var>resultCapability</var> is <emu-val>undefined</emu-val>, then<ol><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Else,<ol><li>Return <var>resultCapability</var>.[[Promise]].\n          </li></ol></li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-asyncgeneratorstart": {"num": "25.5.3.2", "title": "#sec-asyncgeneratorstart AsyncGeneratorStart ( generator, generatorBody )", "html": "<emu-clause id=\"sec-asyncgeneratorstart\" aoid=\"AsyncGeneratorStart\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorstart\">#sec-asyncgeneratorstart</span> AsyncGeneratorStart ( <var>generator</var>, <var>generatorBody</var> )</h1>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generator</var> is an AsyncGenerator instance.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generator</var>.[[AsyncGeneratorState]] is <emu-val>undefined</emu-val>.</li><li>Let <var>genContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the Generator component of <var>genContext</var> to <var>generator</var>.</li><li>Set the code evaluation state of <var>genContext</var> such that when evaluation is resumed for that <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> the following steps will be performed:<ol><li>Let <var>result</var> be the result of evaluating <var>generatorBody</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If we return here, the async generator either threw an exception or performed either an implicit or explicit return.</li><li>Remove <var>genContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <code>\"completed\"</code>.</li><li>If <var>result</var> is a normal completion, let <var>resultValue</var> be <emu-val>undefined</emu-val>.</li><li>Else,<ol><li>Let <var>resultValue</var> be <var>result</var>.[[Value]].</li><li>If <var>result</var>.[[Type]] is not <emu-const>return</emu-const>, then<ol><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorReject\"><a href=\"#sec-asyncgeneratorreject\">AsyncGeneratorReject</a></emu-xref>(<var>generator</var>, <var>resultValue</var>).</li></ol></li></ol></li><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorResolve\"><a href=\"#sec-asyncgeneratorresolve\">AsyncGeneratorResolve</a></emu-xref>(<var>generator</var>, <var>resultValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Set <var>generator</var>.[[AsyncGeneratorContext]] to <var>genContext</var>.</li><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <code>\"suspendedStart\"</code>.</li><li>Set <var>generator</var>.[[AsyncGeneratorQueue]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return <emu-val>undefined</emu-val>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-datestring": {"num": "20.4.4.41.2", "title": "#sec-datestring Runtime Semantics: DateString ( tv )", "html": "<emu-clause id=\"sec-datestring\" aoid=\"DateString\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-datestring\">#sec-datestring</span> Runtime Semantics: DateString ( <var>tv</var> )</h1>\n          <p>The following steps are performed:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>tv</var>) is Number.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>tv</var> is not <emu-val>NaN</emu-val>.</li><li>Let <var>weekday</var> be the Name of the entry in <emu-xref href=\"#sec-todatestring-day-names\"><a href=\"#sec-todatestring-day-names\" class=\"excluded-xref\" excluded-id=\"sec-todatestring-day-names\">#sec-todatestring-day-names</a></emu-xref> with the Number <emu-xref aoid=\"WeekDay\"><a href=\"#sec-week-day\">WeekDay</a></emu-xref>(<var>tv</var>).</li><li>Let <var>month</var> be the Name of the entry in <emu-xref href=\"#sec-todatestring-month-names\"><a href=\"#sec-todatestring-month-names\" class=\"excluded-xref\" excluded-id=\"sec-todatestring-month-names\">#sec-todatestring-month-names</a></emu-xref> with the Number <emu-xref aoid=\"MonthFromTime\"><a href=\"#eqn-MonthFromTime\">MonthFromTime</a></emu-xref>(<var>tv</var>).</li><li>Let <var>day</var> be the String representation of <emu-xref aoid=\"DateFromTime\"><a href=\"#sec-date-number\">DateFromTime</a></emu-xref>(<var>tv</var>), formatted as a two-digit decimal number, padded to the left with a zero if necessary.</li><li>Let <var>yv</var> be <emu-xref aoid=\"YearFromTime\"><a href=\"#eqn-YearFromTime\">YearFromTime</a></emu-xref>(<var>tv</var>).</li><li>If <var>yv</var> &#8805; 0, let <var>yearSign</var> be the empty string; otherwise, let <var>yearSign</var> be <code>\"-\"</code>.</li><li>Let <var>year</var> be the String representation of <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>yv</var>), formatted as a decimal number.</li><li>Let <var>paddedYear</var> be !&#160;<emu-xref aoid=\"StringPad\"><a href=\"#sec-stringpad\">StringPad</a></emu-xref>(<var>year</var>, 4, <code>\"0\"</code>, <code>\"start\"</code>).</li><li>Return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>weekday</var>, the code unit 0x0020 (SPACE), <var>month</var>, the code unit 0x0020 (SPACE), <var>day</var>, the code unit 0x0020 (SPACE), <var>yearSign</var>, and <var>paddedYear</var>.\n          </li></ol></emu-alg>\n          <emu-table id=\"sec-todatestring-day-names\" caption=\"Names of days of the week\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"sec-todatestring-day-names\">#sec-todatestring-day-names</span>: Names of days of the week</figcaption>\n            <table>\n              <tbody>\n              <tr>\n                <th>\n                  Number\n                \n                </th>\n                <th>\n                  Name\n                \n                </th>\n              </tr>\n              <tr>\n                <td>\n                  0\n                \n                </td>\n                <td>\n                  <code>\"Sun\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  1\n                \n                </td>\n                <td>\n                  <code>\"Mon\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  2\n                \n                </td>\n                <td>\n                  <code>\"Tue\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  3\n                \n                </td>\n                <td>\n                  <code>\"Wed\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  4\n                \n                </td>\n                <td>\n                  <code>\"Thu\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  5\n                \n                </td>\n                <td>\n                  <code>\"Fri\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  6\n                \n                </td>\n                <td>\n                  <code>\"Sat\"</code>\n                \n                </td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n          <emu-table id=\"sec-todatestring-month-names\" caption=\"Names of months of the year\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"sec-todatestring-month-names\">#sec-todatestring-month-names</span>: Names of months of the year</figcaption>\n            <table>\n              <tbody>\n              <tr>\n                <th>\n                  Number\n                \n                </th>\n                <th>\n                  Name\n                \n                </th>\n              </tr>\n              <tr>\n                <td>\n                  0\n                \n                </td>\n                <td>\n                  <code>\"Jan\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  1\n                \n                </td>\n                <td>\n                  <code>\"Feb\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  2\n                \n                </td>\n                <td>\n                  <code>\"Mar\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  3\n                \n                </td>\n                <td>\n                  <code>\"Apr\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  4\n                \n                </td>\n                <td>\n                  <code>\"May\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  5\n                \n                </td>\n                <td>\n                  <code>\"Jun\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  6\n                \n                </td>\n                <td>\n                  <code>\"Jul\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  7\n                \n                </td>\n                <td>\n                  <code>\"Aug\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  8\n                \n                </td>\n                <td>\n                  <code>\"Sep\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  9\n                \n                </td>\n                <td>\n                  <code>\"Oct\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  10\n                \n                </td>\n                <td>\n                  <code>\"Nov\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  11\n                \n                </td>\n                <td>\n                  <code>\"Dec\"</code>\n                \n                </td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </emu-clause>\n\n        "}, "sec-ecmascript-function-objects-call-thisargument-argumentslist": {"num": "9.2.1", "title": "#sec-ecmascript-function-objects-call-thisargument-argumentslist [[Call]] ( thisArgument, argumentsList )", "html": "<emu-clause id=\"sec-ecmascript-function-objects-call-thisargument-argumentslist\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-function-objects-call-thisargument-argumentslist\">#sec-ecmascript-function-objects-call-thisargument-argumentslist</span> [[Call]] ( <var>thisArgument</var>, <var>argumentsList</var> )</h1>\n      <p>The [[Call]] internal method for an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> <var>F</var> is called with parameters <var>thisArgument</var> and <var>argumentsList</var>, a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values. The following steps are taken:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> is an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>.</li><li>If <var>F</var>.[[FunctionKind]] is <code>\"classConstructor\"</code>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>calleeContext</var> be <emu-xref aoid=\"PrepareForOrdinaryCall\"><a href=\"#sec-prepareforordinarycall\">PrepareForOrdinaryCall</a></emu-xref>(<var>F</var>, <emu-val>undefined</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>calleeContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Perform <emu-xref aoid=\"OrdinaryCallBindThis\"><a href=\"#sec-ordinarycallbindthis\">OrdinaryCallBindThis</a></emu-xref>(<var>F</var>, <var>calleeContext</var>, <var>thisArgument</var>).</li><li>Let <var>result</var> be <emu-xref aoid=\"OrdinaryCallEvaluateBody\"><a href=\"#sec-ordinarycallevaluatebody\">OrdinaryCallEvaluateBody</a></emu-xref>(<var>F</var>, <var>argumentsList</var>).</li><li>Remove <var>calleeContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore <var>callerContext</var> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>result</var>.[[Type]] is <emu-const>return</emu-const>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>result</var>.[[Value]]).</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>result</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When <var>calleeContext</var> is removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> in step 8 it must not be destroyed if it is suspended and retained for later resumption by an accessible generator object.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-prepareforordinarycall\"><h1><span class=\"secnum\">9.2.1.1</span>#sec-prepareforordinarycall PrepareForOrdinaryCall ( F, newTarget )</h1>...</div><div id=\"excluded-sec-ordinarycallbindthis\"><h1><span class=\"secnum\">9.2.1.2</span>#sec-ordinarycallbindthis OrdinaryCallBindThis ( F, calleeContext, thisArgument )</h1>...</div><div id=\"excluded-sec-ordinarycallevaluatebody\"><h1><span class=\"secnum\">9.2.1.3</span>#sec-ordinarycallevaluatebody OrdinaryCallEvaluateBody ( F, argumentsList )</h1>...</div></emu-clause>\n\n    "}, "sec-object.isfrozen": {"num": "19.1.2.15", "title": "#sec-object.isfrozen Object.isFrozen ( O )", "html": "<emu-clause id=\"sec-object.isfrozen\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.isfrozen\">#sec-object.isfrozen</span> Object.isFrozen ( <var>O</var> )</h1>\n        <p>When the <code>isFrozen</code> function is called with argument <var>O</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, return <emu-val>true</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"TestIntegrityLevel\"><a href=\"#sec-testintegritylevel\">TestIntegrityLevel</a></emu-xref>(<var>O</var>, <code>\"frozen\"</code>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-parsemodule": {"num": "15.2.1.17.1", "title": "#sec-parsemodule ParseModule ( sourceText, realm, hostDefined )", "html": "<emu-clause id=\"sec-parsemodule\" aoid=\"ParseModule\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-parsemodule\">#sec-parsemodule</span> ParseModule ( <var>sourceText</var>, <var>realm</var>, <var>hostDefined</var> )</h1>\n          <p>The abstract operation ParseModule with arguments <var>sourceText</var>, <var>realm</var>, and <var>hostDefined</var> creates a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> based upon the result of parsing <var>sourceText</var> as a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. ParseModule performs the following steps:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>sourceText</var> is an ECMAScript source text (see clause <emu-xref href=\"#sec-ecmascript-language-source-code\"><a href=\"#sec-ecmascript-language-source-code\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-source-code\">#sec-ecmascript-language-source-code</a></emu-xref>).</li><li>Parse <var>sourceText</var> using <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> and analyse the parse result for any Early Error conditions. If the parse was successful and no early errors were found, let <var>body</var> be the resulting parse tree. Otherwise, let <var>body</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of one or more <emu-val>SyntaxError</emu-val> objects representing the parsing errors and/or early errors. Parsing and <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> detection may be interweaved in an implementation-dependent manner. If more than one parsing error or <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> is present, the number and ordering of error objects in the list is implementation-dependent, but at least one must be present.</li><li>If <var>body</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, return <var>body</var>.</li><li>Let <var>requestedModules</var> be the ModuleRequests of <var>body</var>.</li><li>Let <var>importEntries</var> be ImportEntries of <var>body</var>.</li><li>Let <var>importedBoundNames</var> be <emu-xref aoid=\"ImportedLocalNames\"><a href=\"#sec-importedlocalnames\">ImportedLocalNames</a></emu-xref>(<var>importEntries</var>).</li><li>Let <var>indirectExportEntries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>localExportEntries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>starExportEntries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>exportEntries</var> be ExportEntries of <var>body</var>.</li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>ee</var> in <var>exportEntries</var>, do<ol><li>If <var>ee</var>.[[ModuleRequest]] is <emu-val>null</emu-val>, then<ol><li>If <var>ee</var>.[[LocalName]] is not an element of <var>importedBoundNames</var>, then<ol><li>Append <var>ee</var> to <var>localExportEntries</var>.</li></ol></li><li>Else,<ol><li>Let <var>ie</var> be the element of <var>importEntries</var> whose [[LocalName]] is the same as <var>ee</var>.[[LocalName]].</li><li>If <var>ie</var>.[[ImportName]] is <code>\"*\"</code>, then<ol><li>NOTE: This is a re-export of an imported module namespace object.</li><li>Append <var>ee</var> to <var>localExportEntries</var>.</li></ol></li><li>Else,<ol><li>NOTE: This is a re-export of a single name.</li><li>Append the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>ie</var>.[[ModuleRequest]], [[ImportName]]: <var>ie</var>.[[ImportName]], [[LocalName]]: <emu-val>null</emu-val>, [[ExportName]]: <var>ee</var>.[[ExportName]] } to <var>indirectExportEntries</var>.</li></ol></li></ol></li></ol></li><li>Else if <var>ee</var>.[[ImportName]] is <code>\"*\"</code> and <var>ee</var>.[[ExportName]] is <emu-val>null</emu-val>, then<ol><li>Append <var>ee</var> to <var>starExportEntries</var>.</li></ol></li><li>Else,<ol><li>Append <var>ee</var> to <var>indirectExportEntries</var>.</li></ol></li></ol></li><li>Return <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> { [[Realm]]: <var>realm</var>, [[Environment]]: <emu-val>undefined</emu-val>, [[Namespace]]: <emu-val>undefined</emu-val>, [[Status]]: <code>\"unlinked\"</code>, [[EvaluationError]]: <emu-val>undefined</emu-val>, [[HostDefined]]: <var>hostDefined</var>, [[ECMAScriptCode]]: <var>body</var>, [[Context]]: <emu-const>empty</emu-const>, [[RequestedModules]]: <var>requestedModules</var>, [[ImportEntries]]: <var>importEntries</var>, [[LocalExportEntries]]: <var>localExportEntries</var>, [[IndirectExportEntries]]: <var>indirectExportEntries</var>, [[StarExportEntries]]: <var>starExportEntries</var>, [[DFSIndex]]: <emu-val>undefined</emu-val>, [[DFSAncestorIndex]]: <emu-val>undefined</emu-val> }.\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>An implementation may parse module source text and analyse it for Early Error conditions prior to the evaluation of ParseModule for that module source text. However, the reporting of any errors must be deferred until the point where this specification actually performs ParseModule upon that source text.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-dataview.prototype.getuint8": {"num": "24.3.4.12", "title": "#sec-dataview.prototype.getuint8 DataView.prototype.getUint8 ( byteOffset )", "html": "<emu-clause id=\"sec-dataview.prototype.getuint8\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.getuint8\">#sec-dataview.prototype.getuint8</span> DataView.prototype.getUint8 ( <var>byteOffset</var> )</h1>\n        <p>When the <code>getUint8</code> method is called with argument <var>byteOffset</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"GetViewValue\"><a href=\"#sec-getviewvalue\">GetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <emu-val>true</emu-val>, <code>\"Uint8\"</code>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-typedarray-typedarray": {"num": "22.2.4.3", "title": "#sec-typedarray-typedarray TypedArray ( typedArray )", "html": "<emu-clause id=\"sec-typedarray-typedarray\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-typedarray-typedarray\">#sec-typedarray-typedarray</span> <var>TypedArray</var> ( <var>typedArray</var> )</h1>\n        <p>This description applies only if the <var>TypedArray</var> function is called with at least one argument and the Type of the first argument is Object and that object has a [[TypedArrayName]] internal slot.</p>\n        <p><var>TypedArray</var> called with argument <var>typedArray</var> performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>typedArray</var>) is Object and <var>typedArray</var> has a [[TypedArrayName]] internal slot.</li><li>If NewTarget is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorName</var> be the String value of the <emu-xref href=\"#constructor\"><a href=\"#constructor\">Constructor</a></emu-xref> Name value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for this <var>TypedArray</var> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</li><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"AllocateTypedArray\"><a href=\"#sec-allocatetypedarray\">AllocateTypedArray</a></emu-xref>(<var>constructorName</var>, NewTarget, <code>\"%<var>TypedArray</var>.prototype%\"</code>).</li><li>Let <var>srcArray</var> be <var>typedArray</var>.</li><li>Let <var>srcData</var> be <var>srcArray</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>srcData</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>elementType</var> be the String value of the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>constructorName</var>.</li><li>Let <var>elementLength</var> be <var>srcArray</var>.[[ArrayLength]].</li><li>Let <var>srcName</var> be the String value of <var>srcArray</var>.[[TypedArrayName]].</li><li>Let <var>srcType</var> be the String value of the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>srcName</var>.</li><li>Let <var>srcElementSize</var> be the Element Size value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>srcName</var>.</li><li>Let <var>srcByteOffset</var> be <var>srcArray</var>.[[ByteOffset]].</li><li>Let <var>elementSize</var> be the Element Size value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>constructorName</var>.</li><li>Let <var>byteLength</var> be <var>elementSize</var> &#215; <var>elementLength</var>.</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>srcData</var>) is <emu-val>false</emu-val>, then<ol><li>Let <var>bufferConstructor</var> be ?&#160;<emu-xref aoid=\"SpeciesConstructor\"><a href=\"#sec-speciesconstructor\">SpeciesConstructor</a></emu-xref>(<var>srcData</var>, <emu-xref href=\"#sec-arraybuffer-constructor\"><a href=\"#sec-arraybuffer-constructor\">%ArrayBuffer%</a></emu-xref>).</li></ol></li><li>Else,<ol><li>Let <var>bufferConstructor</var> be <emu-xref href=\"#sec-arraybuffer-constructor\"><a href=\"#sec-arraybuffer-constructor\">%ArrayBuffer%</a></emu-xref>.</li></ol></li><li>If <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>elementType</var>, <var>srcType</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>data</var> be ?&#160;<emu-xref aoid=\"CloneArrayBuffer\"><a href=\"#sec-clonearraybuffer\">CloneArrayBuffer</a></emu-xref>(<var>srcData</var>, <var>srcByteOffset</var>, <var>byteLength</var>, <var>bufferConstructor</var>).</li></ol></li><li>Else,<ol><li>Let <var>data</var> be ?&#160;<emu-xref aoid=\"AllocateArrayBuffer\"><a href=\"#sec-allocatearraybuffer\">AllocateArrayBuffer</a></emu-xref>(<var>bufferConstructor</var>, <var>byteLength</var>).</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>srcData</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>srcArray</var>.[[ContentType]] is not equal to <var>O</var>.[[ContentType]], throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>srcByteIndex</var> be <var>srcByteOffset</var>.</li><li>Let <var>targetByteIndex</var> be 0.</li><li>Let <var>count</var> be <var>elementLength</var>.</li><li>Repeat, while <var>count</var> &gt; 0<ol><li>Let <var>value</var> be <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref>(<var>srcData</var>, <var>srcByteIndex</var>, <var>srcType</var>, <emu-val>true</emu-val>, <code>\"Unordered\"</code>).</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>data</var>, <var>targetByteIndex</var>, <var>elementType</var>, <var>value</var>, <emu-val>true</emu-val>, <code>\"Unordered\"</code>).</li><li>Set <var>srcByteIndex</var> to <var>srcByteIndex</var> + <var>srcElementSize</var>.</li><li>Set <var>targetByteIndex</var> to <var>targetByteIndex</var> + <var>elementSize</var>.</li><li>Set <var>count</var> to <var>count</var> - 1.</li></ol></li></ol></li><li>Set <var>O</var>.[[ViewedArrayBuffer]] to <var>data</var>.</li><li>Set <var>O</var>.[[ByteLength]] to <var>byteLength</var>.</li><li>Set <var>O</var>.[[ByteOffset]] to 0.</li><li>Set <var>O</var>.[[ArrayLength]] to <var>elementLength</var>.</li><li>Return <var>O</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-allocatetypedarray": {"num": "22.2.4.2.1", "title": "#sec-allocatetypedarray Runtime Semantics: AllocateTypedArray ( constructorName, newTarget, defaultProto [ , length ] )", "html": "<emu-clause id=\"sec-allocatetypedarray\" aoid=\"AllocateTypedArray\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-allocatetypedarray\">#sec-allocatetypedarray</span> Runtime Semantics: AllocateTypedArray ( <var>constructorName</var>, <var>newTarget</var>, <var>defaultProto</var> [ , <var>length</var> ] )</h1>\n          <p>The abstract operation AllocateTypedArray with arguments <var>constructorName</var>, <var>newTarget</var>, <var>defaultProto</var> and optional argument <var>length</var> is used to validate and create an instance of a TypedArray <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. <var>constructorName</var> is required to be the name of a TypedArray <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> in  <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref>. If the <var>length</var> argument is passed, an ArrayBuffer of that length is also allocated and associated with the new TypedArray instance. AllocateTypedArray provides common semantics that is used by all of the <var>TypedArray</var> overloads. AllocateTypedArray performs the following steps:</p>\n          <emu-alg><ol><li>Let <var>proto</var> be ?&#160;<emu-xref aoid=\"GetPrototypeFromConstructor\"><a href=\"#sec-getprototypefromconstructor\">GetPrototypeFromConstructor</a></emu-xref>(<var>newTarget</var>, <var>defaultProto</var>).</li><li>Let <var>obj</var> be <emu-xref aoid=\"IntegerIndexedObjectCreate\"><a href=\"#sec-integerindexedobjectcreate\">IntegerIndexedObjectCreate</a></emu-xref>(<var>proto</var>, &#171; [[ViewedArrayBuffer]], [[TypedArrayName]], [[ContentType]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]] &#187;).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>obj</var>.[[ViewedArrayBuffer]] is <emu-val>undefined</emu-val>.</li><li>Set <var>obj</var>.[[TypedArrayName]] to <var>constructorName</var>.</li><li>If <var>constructorName</var> is <code>\"BigInt64Array\"</code> or <code>\"BigUint64Array\"</code>, set <var>obj</var>.[[ContentType]] to <code>\"BigInt\"</code>.</li><li>Otherwise, set <var>obj</var>.[[ContentType]] to <code>\"Number\"</code>.</li><li>If <var>length</var> is not present, then<ol><li>Set <var>obj</var>.[[ByteLength]] to 0.</li><li>Set <var>obj</var>.[[ByteOffset]] to 0.</li><li>Set <var>obj</var>.[[ArrayLength]] to 0.</li></ol></li><li>Else,<ol><li>Perform ?&#160;<emu-xref aoid=\"AllocateTypedArrayBuffer\"><a href=\"#sec-allocatetypedarraybuffer\">AllocateTypedArrayBuffer</a></emu-xref>(<var>obj</var>, <var>length</var>).</li></ol></li><li>Return <var>obj</var>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-function-environment-records-hasthisbinding": {"num": "8.1.1.3.2", "title": "#sec-function-environment-records-hasthisbinding HasThisBinding ( )", "html": "<emu-clause id=\"sec-function-environment-records-hasthisbinding\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-environment-records-hasthisbinding\">#sec-function-environment-records-hasthisbinding</span> HasThisBinding ( )</h1>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref> for which the method was invoked.</li><li>If <var>envRec</var>.[[ThisBindingStatus]] is <code>\"lexical\"</code>, return <emu-val>false</emu-val>; otherwise, return <emu-val>true</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-function-environment-records-hassuperbinding": {"num": "8.1.1.3.3", "title": "#sec-function-environment-records-hassuperbinding HasSuperBinding ( )", "html": "<emu-clause id=\"sec-function-environment-records-hassuperbinding\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-environment-records-hassuperbinding\">#sec-function-environment-records-hassuperbinding</span> HasSuperBinding ( )</h1>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref> for which the method was invoked.</li><li>If <var>envRec</var>.[[ThisBindingStatus]] is <code>\"lexical\"</code>, return <emu-val>false</emu-val>.</li><li>If <var>envRec</var>.[[HomeObject]] has the value <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>; otherwise, return <emu-val>true</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-async-function-instances": {"num": "25.7.4", "title": "#sec-async-function-instances AsyncFunction Instances", "html": "<emu-clause id=\"sec-async-function-instances\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-instances\">#sec-async-function-instances</span> AsyncFunction Instances</h1>\n\n      <p>Every AsyncFunction instance is an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> and has the internal slots listed in  <emu-xref href=\"#table-27\"><a href=\"#table-27\" class=\"excluded-xref\" excluded-id=\"table-27\">#table-27</a></emu-xref>. The value of the [[FunctionKind]] internal slot for all such instances is <code>\"async\"</code>. AsyncFunction instances are not constructors and do not have a [[Construct]] internal method. AsyncFunction instances do not have a prototype property as they are not constructable.</p>\n      <p>Each AsyncFunction instance has the following own properties:</p>\n      <div id=\"excluded-sec-async-function-instances-length\"><h1><span class=\"secnum\">25.7.4.1</span>#sec-async-function-instances-length length</h1>...</div><div id=\"excluded-sec-async-function-instances-name\"><h1><span class=\"secnum\">25.7.4.2</span>#sec-async-function-instances-name name</h1>...</div></emu-clause>\n\n    "}, "sec-dataview.prototype.setfloat64": {"num": "24.3.4.18", "title": "#sec-dataview.prototype.setfloat64 DataView.prototype.setFloat64 ( byteOffset, value [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.setfloat64\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.setfloat64\">#sec-dataview.prototype.setfloat64</span> DataView.prototype.setFloat64 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>setFloat64</code> method is called with arguments <var>byteOffset</var> and <var>value</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"SetViewValue\"><a href=\"#sec-setviewvalue\">SetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <code>\"Float64\"</code>, <var>value</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-asyncgeneratorresumenext": {"num": "25.5.3.5", "title": "#sec-asyncgeneratorresumenext AsyncGeneratorResumeNext ( generator )", "html": "<emu-clause id=\"sec-asyncgeneratorresumenext\" aoid=\"AsyncGeneratorResumeNext\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorresumenext\">#sec-asyncgeneratorresumenext</span> AsyncGeneratorResumeNext ( <var>generator</var> )</h1>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generator</var> is an AsyncGenerator instance.</li><li>Let <var>state</var> be <var>generator</var>.[[AsyncGeneratorState]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>state</var> is not <code>\"executing\"</code>.</li><li>If <var>state</var> is <code>\"awaiting-return\"</code>, return <emu-val>undefined</emu-val>.</li><li>Let <var>queue</var> be <var>generator</var>.[[AsyncGeneratorQueue]].</li><li>If <var>queue</var> is an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>, return <emu-val>undefined</emu-val>.</li><li>Let <var>next</var> be the value of the first element of <var>queue</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>next</var> is an AsyncGeneratorRequest record.</li><li>Let <var>completion</var> be <var>next</var>.[[Completion]].</li><li>If <var>completion</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>If <var>state</var> is <code>\"suspendedStart\"</code>, then<ol><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <code>\"completed\"</code>.</li><li>Set <var>state</var> to <code>\"completed\"</code>.</li></ol></li><li>If <var>state</var> is <code>\"completed\"</code>, then<ol><li>If <var>completion</var>.[[Type]] is <emu-const>return</emu-const>, then<ol><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <code>\"awaiting-return\"</code>.</li><li>Let <var>promise</var> be ?&#160;<emu-xref aoid=\"PromiseResolve\"><a href=\"#sec-promise-resolve\">PromiseResolve</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>, <var>completion</var>.[[Value]]).</li><li>Let <var>stepsFulfilled</var> be the algorithm steps defined in <emu-xref href=\"#async-generator-resume-next-return-processor-fulfilled\" title=\"\"><a href=\"#async-generator-resume-next-return-processor-fulfilled\">AsyncGeneratorResumeNext Return Processor Fulfilled Functions</a></emu-xref>.</li><li>Let <var>onFulfilled</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>stepsFulfilled</var>, &#171; [[Generator]] &#187;).</li><li>Set <var>onFulfilled</var>.[[Generator]] to <var>generator</var>.</li><li>Let <var>stepsRejected</var> be the algorithm steps defined in <emu-xref href=\"#async-generator-resume-next-return-processor-rejected\" title=\"\"><a href=\"#async-generator-resume-next-return-processor-rejected\">AsyncGeneratorResumeNext Return Processor Rejected Functions</a></emu-xref>.</li><li>Let <var>onRejected</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>stepsRejected</var>, &#171; [[Generator]] &#187;).</li><li>Set <var>onRejected</var>.[[Generator]] to <var>generator</var>.</li><li>Perform !&#160;<emu-xref aoid=\"PerformPromiseThen\"><a href=\"#sec-performpromisethen\">PerformPromiseThen</a></emu-xref>(<var>promise</var>, <var>onFulfilled</var>, <var>onRejected</var>).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>completion</var>.[[Type]] is <emu-const>throw</emu-const>.</li><li>Perform !&#160;<emu-xref aoid=\"AsyncGeneratorReject\"><a href=\"#sec-asyncgeneratorreject\">AsyncGeneratorReject</a></emu-xref>(<var>generator</var>, <var>completion</var>.[[Value]]).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li></ol></li></ol></li><li>Else if <var>state</var> is <code>\"completed\"</code>, return !&#160;<emu-xref aoid=\"AsyncGeneratorResolve\"><a href=\"#sec-asyncgeneratorresolve\">AsyncGeneratorResolve</a></emu-xref>(<var>generator</var>, <emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>state</var> is either <code>\"suspendedStart\"</code> or <code>\"suspendedYield\"</code>.</li><li>Let <var>genContext</var> be <var>generator</var>.[[AsyncGeneratorContext]].</li><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref aoid=\"Suspend\"><a href=\"#sec-suspend\">Suspend</a></emu-xref> <var>callerContext</var>.</li><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <code>\"executing\"</code>.</li><li>Push <var>genContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>genContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>genContext</var> using <var>completion</var> as the result of the operation that suspended it. Let <var>result</var> be the completion record returned by the resumed computation.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>result</var> is never an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we return here, <var>genContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>callerContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-val>undefined</emu-val>.\n        </li></ol></emu-alg>\n\n        <emu-clause id=\"async-generator-resume-next-return-processor-fulfilled\">\n          <h1><span class=\"secnum\">25.5.3.5.1</span> AsyncGeneratorResumeNext Return Processor Fulfilled Functions</h1>\n\n          <p>An <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor fulfilled function is an anonymous built-in function that is used as part of the <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> specification device to unwrap promises passed in to the  <emu-xref href=\"#sec-asyncgenerator-prototype-return\" title=\"\"><a href=\"#sec-asyncgenerator-prototype-return\">AsyncGenerator.prototype.return ( <var>value</var> )</a></emu-xref> method. Each <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor fulfilled function has a [[Generator]] internal slot.</p>\n\n          <p>When an <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor fulfilled function is called with argument <var>value</var>, the following steps are taken:</p>\n\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Set <var>F</var>.[[Generator]].[[AsyncGeneratorState]] to <code>\"completed\"</code>.</li><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorResolve\"><a href=\"#sec-asyncgeneratorresolve\">AsyncGeneratorResolve</a></emu-xref>(<var>F</var>.[[Generator]], <var>value</var>, <emu-val>true</emu-val>).\n          </li></ol></emu-alg>\n\n          <p>The <code>\"length\"</code> property of an <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor fulfilled function is 1.</p>\n        </emu-clause>\n\n        <emu-clause id=\"async-generator-resume-next-return-processor-rejected\">\n          <h1><span class=\"secnum\">25.5.3.5.2</span> AsyncGeneratorResumeNext Return Processor Rejected Functions</h1>\n\n          <p>An <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor rejected function is an anonymous built-in function that is used as part of the <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> specification device to unwrap promises passed in to the  <emu-xref href=\"#sec-asyncgenerator-prototype-return\" title=\"\"><a href=\"#sec-asyncgenerator-prototype-return\">AsyncGenerator.prototype.return ( <var>value</var> )</a></emu-xref> method. Each <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor rejected function has a [[Generator]] internal slot.</p>\n\n          <p>When an <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor rejected function is called with argument <var>reason</var>, the following steps are taken:</p>\n\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Set <var>F</var>.[[Generator]].[[AsyncGeneratorState]] to <code>\"completed\"</code>.</li><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorReject\"><a href=\"#sec-asyncgeneratorreject\">AsyncGeneratorReject</a></emu-xref>(<var>F</var>.[[Generator]], <var>reason</var>).\n          </li></ol></emu-alg>\n\n          <p>The <code>\"length\"</code> property of an <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor rejected function is 1.</p>\n        </emu-clause>\n      </emu-clause>\n\n      "}, "sec-promisereaction-records": {"num": "25.6.1.2", "title": "#sec-promisereaction-records PromiseReaction Records", "html": "<emu-clause id=\"sec-promisereaction-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promisereaction-records\">#sec-promisereaction-records</span> PromiseReaction Records</h1>\n        <p>The PromiseReaction is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> value used to store information about how a promise should react when it becomes resolved or rejected with a given value. PromiseReaction records are created by the <emu-xref aoid=\"PerformPromiseThen\"><a href=\"#sec-performpromisethen\">PerformPromiseThen</a></emu-xref> abstract operation, and are used by a <emu-xref aoid=\"PromiseReactionJob\"><a href=\"#sec-promisereactionjob\">PromiseReactionJob</a></emu-xref>.</p>\n        <p>PromiseReaction records have the fields listed in  <emu-xref href=\"#table-58\"><a href=\"#table-58\" class=\"excluded-xref\" excluded-id=\"table-58\">#table-58</a></emu-xref>.</p>\n        <emu-table id=\"table-58\" caption=\"PromiseReaction Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-58\">#table-58</span>: PromiseReaction <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> Fields</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              \n              </th>\n              <th>\n                Value\n              \n              </th>\n              <th>\n                Meaning\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[Capability]]\n              \n              </td>\n              <td>\n                A PromiseCapability <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>, or <emu-val>undefined</emu-val>\n              \n              </td>\n              <td>\n                The capabilities of the promise for which this record provides a reaction handler.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Type]]\n              \n              </td>\n              <td>\n                Either <code>\"Fulfill\"</code> or <code>\"Reject\"</code>.\n              \n              </td>\n              <td>\n                The [[Type]] is used when [[Handler]] is <emu-val>undefined</emu-val> to allow for behaviour specific to the settlement type.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Handler]]\n              \n              </td>\n              <td>\n                A <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> or <emu-val>undefined</emu-val>.\n              \n              </td>\n              <td>\n                The function that should be applied to the incoming value, and whose return value will govern what happens to the derived promise. If [[Handler]] is <emu-val>undefined</emu-val>, a function that depends on the value of [[Type]] will be used instead.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n\n      "}, "sec-generatorresumeabrupt": {"num": "25.4.3.4", "title": "#sec-generatorresumeabrupt GeneratorResumeAbrupt ( generator, abruptCompletion )", "html": "<emu-clause id=\"sec-generatorresumeabrupt\" aoid=\"GeneratorResumeAbrupt\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorresumeabrupt\">#sec-generatorresumeabrupt</span> GeneratorResumeAbrupt ( <var>generator</var>, <var>abruptCompletion</var> )</h1>\n        <p>The abstract operation GeneratorResumeAbrupt with arguments <var>generator</var> and <var>abruptCompletion</var> performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>state</var> be ?&#160;<emu-xref aoid=\"GeneratorValidate\"><a href=\"#sec-generatorvalidate\">GeneratorValidate</a></emu-xref>(<var>generator</var>).</li><li>If <var>state</var> is <code>\"suspendedStart\"</code>, then<ol><li>Set <var>generator</var>.[[GeneratorState]] to <code>\"completed\"</code>.</li><li>Once a generator enters the <code>\"completed\"</code> state it never leaves it and its associated <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is never resumed. Any execution state associated with <var>generator</var> can be discarded at this point.</li><li>Set <var>state</var> to <code>\"completed\"</code>.</li></ol></li><li>If <var>state</var> is <code>\"completed\"</code>, then<ol><li>If <var>abruptCompletion</var>.[[Type]] is <emu-const>return</emu-const>, then<ol><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>abruptCompletion</var>.[[Value]], <emu-val>true</emu-val>).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>abruptCompletion</var>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>state</var> is <code>\"suspendedYield\"</code>.</li><li>Let <var>genContext</var> be <var>generator</var>.[[GeneratorContext]].</li><li>Let <var>methodContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref aoid=\"Suspend\"><a href=\"#sec-suspend\">Suspend</a></emu-xref> <var>methodContext</var>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <code>\"executing\"</code>.</li><li>Push <var>genContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>genContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>genContext</var> using <var>abruptCompletion</var> as the result of the operation that suspended it. Let <var>result</var> be the completion record returned by the resumed computation.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we return here, <var>genContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>methodContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-parseint-string-radix": {"num": "18.2.5", "title": "#sec-parseint-string-radix parseInt ( string, radix )", "html": "<emu-clause id=\"sec-parseint-string-radix\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-parseint-string-radix\">#sec-parseint-string-radix</span> parseInt ( <var>string</var>, <var>radix</var> )</h1>\n      <p>The <code>parseInt</code> function produces an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value dictated by interpretation of the contents of the <var>string</var> argument according to the specified <var>radix</var>. Leading white space in <var>string</var> is ignored. If <var>radix</var> is <emu-val>undefined</emu-val> or 0, it is assumed to be 10 except when the number begins with the code unit pairs <code>0x</code> or <code>0X</code>, in which case a radix of 16 is assumed. If <var>radix</var> is 16, the number may also optionally begin with the code unit pairs <code>0x</code> or <code>0X</code>.</p>\n      <p>The <code>parseInt</code> function is the  <dfn>%parseInt%</dfn> intrinsic object. When the <code>parseInt</code> function is called, the following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>inputString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Let <var>S</var> be !&#160;<emu-xref aoid=\"TrimString\"><a href=\"#sec-trimstring\">TrimString</a></emu-xref>(<var>inputString</var>, <code>\"start\"</code>).</li><li>Let <var>sign</var> be 1.</li><li>If <var>S</var> is not empty and the first code unit of <var>S</var> is the code unit 0x002D (HYPHEN-MINUS), set <var>sign</var> to -1.</li><li>If <var>S</var> is not empty and the first code unit of <var>S</var> is the code unit 0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS), remove the first code unit from <var>S</var>.</li><li>Let <var>R</var> be ?&#160;<emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>(<var>radix</var>).</li><li>Let <var>stripPrefix</var> be <emu-val>true</emu-val>.</li><li>If <var>R</var> &#8800; 0, then<ol><li>If <var>R</var> &lt; 2 or <var>R</var> &gt; 36, return <emu-val>NaN</emu-val>.</li><li>If <var>R</var> &#8800; 16, set <var>stripPrefix</var> to <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>Set <var>R</var> to 10.</li></ol></li><li>If <var>stripPrefix</var> is <emu-val>true</emu-val>, then<ol><li>If the length of <var>S</var> is at least 2 and the first two code units of <var>S</var> are either <code>\"0x\"</code> or <code>\"0X\"</code>, then<ol><li>Remove the first two code units from <var>S</var>.</li><li>Set <var>R</var> to 16.</li></ol></li></ol></li><li>If <var>S</var> contains a code unit that is not a radix-<var>R</var> digit, let <var>Z</var> be the substring of <var>S</var> consisting of all code units before the first such code unit; otherwise, let <var>Z</var> be <var>S</var>.</li><li>If <var>Z</var> is empty, return <emu-val>NaN</emu-val>.</li><li>Let <var>mathInt</var> be the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> value that is represented by <var>Z</var> in radix-<var>R</var> notation, using the letters <b>A</b>-<b>Z</b> and <b>a</b>-<b>z</b> for digits with values 10 through 35. (However, if <var>R</var> is 10 and <var>Z</var> contains more than 20 significant digits, every significant digit after the 20th may be replaced by a 0 digit, at the option of the implementation; and if <var>R</var> is not 2, 4, 8, 10, 16, or 32, then <var>mathInt</var> may be an implementation-dependent approximation to the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> value that is represented by <var>Z</var> in radix-<var>R</var> notation.)</li><li>If <var>mathInt</var> = 0<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>, then<ol><li>If <var>sign</var> = -1, return <emu-val>-0</emu-val>.</li><li>Return <emu-val>+0</emu-val>.</li></ol></li><li>Let <var>number</var> be the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>mathInt</var>.</li><li>Return <var>sign</var> &#215; <var>number</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><code>parseInt</code> may interpret only a leading portion of <var>string</var> as an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value; it ignores any code units that cannot be interpreted as part of the notation of an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, and no indication is given that any such code units were ignored.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-date.prototype.toutcstring": {"num": "20.4.4.43", "title": "#sec-date.prototype.toutcstring Date.prototype.toUTCString ( )", "html": "<emu-clause id=\"sec-date.prototype.toutcstring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-date.prototype.toutcstring\">#sec-date.prototype.toutcstring</span> Date.prototype.toUTCString ( )</h1>\n        <p>The <code>toUTCString</code> method returns a String value representing the instance in time corresponding to <emu-xref href=\"#this-time-value\"><a href=\"#this-time-value\">this time value</a></emu-xref>. The format of the String is based upon \"HTTP-date\" from RFC 7231, generalized to support the full range of times supported by ECMAScript Date objects. It performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>O</var> be <emu-xref href=\"#this-Date-object\"><a href=\"#this-Date-object\">this Date object</a></emu-xref>.</li><li>Let <var>tv</var> be ?&#160;<emu-xref href=\"#sec-thistimevalue\"><a href=\"#sec-thistimevalue\">thisTimeValue</a></emu-xref>(<var>O</var>).</li><li>If <var>tv</var> is <emu-val>NaN</emu-val>, return <code>\"Invalid Date\"</code>.</li><li>Let <var>weekday</var> be the Name of the entry in <emu-xref href=\"#sec-todatestring-day-names\"><a href=\"#sec-todatestring-day-names\" class=\"excluded-xref\" excluded-id=\"sec-todatestring-day-names\">#sec-todatestring-day-names</a></emu-xref> with the Number <emu-xref aoid=\"WeekDay\"><a href=\"#sec-week-day\">WeekDay</a></emu-xref>(<var>tv</var>).</li><li>Let <var>month</var> be the Name of the entry in <emu-xref href=\"#sec-todatestring-month-names\"><a href=\"#sec-todatestring-month-names\" class=\"excluded-xref\" excluded-id=\"sec-todatestring-month-names\">#sec-todatestring-month-names</a></emu-xref> with the Number <emu-xref aoid=\"MonthFromTime\"><a href=\"#eqn-MonthFromTime\">MonthFromTime</a></emu-xref>(<var>tv</var>).</li><li>Let <var>day</var> be the String representation of <emu-xref aoid=\"DateFromTime\"><a href=\"#sec-date-number\">DateFromTime</a></emu-xref>(<var>tv</var>), formatted as a two-digit decimal number, padded to the left with a zero if necessary.</li><li>Let <var>yv</var> be <emu-xref aoid=\"YearFromTime\"><a href=\"#eqn-YearFromTime\">YearFromTime</a></emu-xref>(<var>tv</var>).</li><li>If <var>yv</var> &#8805; 0, let <var>yearSign</var> be the empty string; otherwise, let <var>yearSign</var> be <code>\"-\"</code>.</li><li>Let <var>year</var> be the String representation of <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>yv</var>), formatted as a decimal number.</li><li>Let <var>paddedYear</var> be !&#160;<emu-xref aoid=\"StringPad\"><a href=\"#sec-stringpad\">StringPad</a></emu-xref>(<var>year</var>, 4, <code>\"0\"</code>, <code>\"start\"</code>).</li><li>Return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>weekday</var>, <code>\",\"</code>, the code unit 0x0020 (SPACE), <var>day</var>, the code unit 0x0020 (SPACE), <var>month</var>, the code unit 0x0020 (SPACE), <var>yearSign</var>, <var>paddedYear</var>, the code unit 0x0020 (SPACE), and <emu-xref aoid=\"TimeString\"><a href=\"#sec-timestring\">TimeString</a></emu-xref>(<var>tv</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-object.entries": {"num": "19.1.2.5", "title": "#sec-object.entries Object.entries ( O )", "html": "<emu-clause id=\"sec-object.entries\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.entries\">#sec-object.entries</span> Object.entries ( <var>O</var> )</h1>\n        <p>When the <code>entries</code> function is called with argument <var>O</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>obj</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>O</var>).</li><li>Let <var>nameList</var> be ?&#160;<emu-xref aoid=\"EnumerableOwnPropertyNames\"><a href=\"#sec-enumerableownpropertynames\">EnumerableOwnPropertyNames</a></emu-xref>(<var>obj</var>, <code>\"key+value\"</code>).</li><li>Return <emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(<var>nameList</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-generatorvalidate": {"num": "25.4.3.2", "title": "#sec-generatorvalidate GeneratorValidate ( generator )", "html": "<emu-clause id=\"sec-generatorvalidate\" aoid=\"GeneratorValidate\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorvalidate\">#sec-generatorvalidate</span> GeneratorValidate ( <var>generator</var> )</h1>\n        <p>The abstract operation GeneratorValidate with argument <var>generator</var> performs the following steps:</p>\n        <emu-alg><ol><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>generator</var>, [[GeneratorState]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generator</var> also has a [[GeneratorContext]] internal slot.</li><li>Let <var>state</var> be <var>generator</var>.[[GeneratorState]].</li><li>If <var>state</var> is <code>\"executing\"</code>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>state</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-ecmascript-function-objects": {"num": "9.2", "title": "#sec-ecmascript-function-objects ECMAScript Function Objects", "html": "<emu-clause id=\"sec-ecmascript-function-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-function-objects\">#sec-ecmascript-function-objects</span> ECMAScript Function Objects</h1>\n    <p>ECMAScript function objects encapsulate parameterized ECMAScript code closed over a lexical environment and support the dynamic evaluation of that code. An ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is an ordinary object and has the same internal slots and the same internal methods as other ordinary objects. The code of an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> may be either <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> (<emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\" class=\"excluded-xref\" excluded-id=\"sec-strict-mode-code\">#sec-strict-mode-code</a></emu-xref>) or <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>. An ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> whose code is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> is called a  <dfn id=\"strict-function\">strict function</dfn>. One whose code is not <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> is called a  <dfn id=\"non-strict-function\">non-strict function</dfn>.</p>\n    <p>ECMAScript function objects have the additional internal slots listed in  <emu-xref href=\"#table-27\"><a href=\"#table-27\" class=\"excluded-xref\" excluded-id=\"table-27\">#table-27</a></emu-xref>.</p>\n    <emu-table id=\"table-27\" caption=\"Internal Slots of ECMAScript Function Objects\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-27\">#table-27</span>: Internal Slots of ECMAScript Function Objects</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Internal Slot\n          \n          </th>\n          <th>\n            Type\n          \n          </th>\n          <th>\n            Description\n          \n          </th>\n        </tr>\n        <tr>\n          <td>\n            [[Environment]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref>\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> that the function was closed over. Used as the outer environment when evaluating the code of the function.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[FormalParameters]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n          \n          </td>\n          <td>\n            The root parse node of the source text that defines the function's formal parameter list.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[FunctionKind]]\n          \n          </td>\n          <td>\n            String\n          \n          </td>\n          <td>\n            Either <code>\"normal\"</code>, <code>\"classConstructor\"</code>, <code>\"generator\"</code>, <code>\"async\"</code>, or <code>\"async generator\"</code>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ECMAScriptCode]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n          \n          </td>\n          <td>\n            The root parse node of the source text that defines the function's body.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ConstructorKind]]\n          \n          </td>\n          <td>\n            String\n          \n          </td>\n          <td>\n            Either <code>\"base\"</code> or <code>\"derived\"</code>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Realm]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> in which the function was created and which provides any intrinsic objects that are accessed when evaluating the function.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ScriptOrModule]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>\n          \n          </td>\n          <td>\n            The script or module in which the function was created.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ThisMode]]\n          \n          </td>\n          <td>\n            (lexical, strict, global)\n          \n          </td>\n          <td>\n            Defines how <code>this</code> references are interpreted within the formal parameters and code body of the function. <emu-const>lexical</emu-const> means that <code>this</code> refers to the <emu-val>this</emu-val> value of a lexically enclosing function. <emu-const>strict</emu-const> means that the <emu-val>this</emu-val> value is used exactly as provided by an invocation of the function. <emu-const>global</emu-const> means that a <emu-val>this</emu-val> value of <emu-val>undefined</emu-val> is interpreted as a reference to the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Strict]]\n          \n          </td>\n          <td>\n            Boolean\n          \n          </td>\n          <td>\n            <emu-val>true</emu-val> if this is a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref>, <emu-val>false</emu-val> if this is a <emu-xref href=\"#non-strict-function\"><a href=\"#non-strict-function\">non-strict function</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[HomeObject]]\n          \n          </td>\n          <td>\n            Object\n          \n          </td>\n          <td>\n            If the function uses <code>super</code>, this is the object whose [[GetPrototypeOf]] provides the object where <code>super</code> property lookups begin.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[SourceText]]\n          \n          </td>\n          <td>\n            String\n          \n          </td>\n          <td>\n            The  <emu-xref href=\"#sec-source-text\"><a href=\"#sec-source-text\">source text</a></emu-xref> that defines the function.\n          \n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>All ECMAScript function objects have the [[Call]] internal method defined here. ECMAScript functions that are also constructors in addition have the [[Construct]] internal method.</p>\n\n    <div id=\"excluded-sec-ecmascript-function-objects-call-thisargument-argumentslist\"><h1><span class=\"secnum\">9.2.1</span>#sec-ecmascript-function-objects-call-thisargument-argumentslist [[Call]] ( thisArgument, argumentsList )</h1>...</div><div id=\"excluded-sec-ecmascript-function-objects-construct-argumentslist-newtarget\"><h1><span class=\"secnum\">9.2.2</span>#sec-ecmascript-function-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )</h1>...</div><div id=\"excluded-sec-functionallocate\"><h1><span class=\"secnum\">9.2.3</span>#sec-functionallocate FunctionAllocate ( functionPrototype, functionKind )</h1>...</div><div id=\"excluded-sec-functioninitialize\"><h1><span class=\"secnum\">9.2.4</span>#sec-functioninitialize FunctionInitialize ( F, kind, ParameterList, Body, Scope )</h1>...</div><div id=\"excluded-sec-functioncreate\"><h1><span class=\"secnum\">9.2.5</span>#sec-functioncreate FunctionCreate ( kind, ParameterList, Body, Scope [ , prototype ] )</h1>...</div><div id=\"excluded-sec-generatorfunctioncreate\"><h1><span class=\"secnum\">9.2.6</span>#sec-generatorfunctioncreate GeneratorFunctionCreate ( kind, ParameterList, Body, Scope )</h1>...</div><div id=\"excluded-sec-asyncgeneratorfunctioncreate\"><h1><span class=\"secnum\">9.2.7</span>#sec-asyncgeneratorfunctioncreate AsyncGeneratorFunctionCreate ( kind, ParameterList, Body, Scope )</h1>...</div><div id=\"excluded-sec-async-functions-abstract-operations-async-function-create\"><h1><span class=\"secnum\">9.2.8</span>#sec-async-functions-abstract-operations-async-function-create AsyncFunctionCreate ( kind, parameters, body, Scope )</h1>...</div><div id=\"excluded-sec-addrestrictedfunctionproperties\"><h1><span class=\"secnum\">9.2.9</span>#sec-addrestrictedfunctionproperties AddRestrictedFunctionProperties ( F, realm )</h1>...</div><div id=\"excluded-sec-makeconstructor\"><h1><span class=\"secnum\">9.2.10</span>#sec-makeconstructor MakeConstructor ( F [ , writablePrototype [ , prototype ] ] )</h1>...</div><div id=\"excluded-sec-makeclassconstructor\"><h1><span class=\"secnum\">9.2.11</span>#sec-makeclassconstructor MakeClassConstructor ( F )</h1>...</div><div id=\"excluded-sec-makemethod\"><h1><span class=\"secnum\">9.2.12</span>#sec-makemethod MakeMethod ( F, homeObject )</h1>...</div><div id=\"excluded-sec-setfunctionname\"><h1><span class=\"secnum\">9.2.13</span>#sec-setfunctionname SetFunctionName ( F, name [ , prefix ] )</h1>...</div><div id=\"excluded-sec-setfunctionlength\"><h1><span class=\"secnum\">9.2.14</span>#sec-setfunctionlength SetFunctionLength ( F, length )</h1>...</div><div id=\"excluded-sec-functiondeclarationinstantiation\"><h1><span class=\"secnum\">9.2.15</span>#sec-functiondeclarationinstantiation FunctionDeclarationInstantiation ( func, argumentsList )</h1>...</div></emu-clause>\n\n  "}, "sec-dataview.prototype.setint8": {"num": "24.3.4.19", "title": "#sec-dataview.prototype.setint8 DataView.prototype.setInt8 ( byteOffset, value )", "html": "<emu-clause id=\"sec-dataview.prototype.setint8\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.setint8\">#sec-dataview.prototype.setint8</span> DataView.prototype.setInt8 ( <var>byteOffset</var>, <var>value</var> )</h1>\n        <p>When the <code>setInt8</code> method is called with arguments <var>byteOffset</var> and <var>value</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"SetViewValue\"><a href=\"#sec-setviewvalue\">SetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <emu-val>true</emu-val>, <code>\"Int8\"</code>, <var>value</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-functioncreate": {"num": "9.2.5", "title": "#sec-functioncreate FunctionCreate ( kind, ParameterList, Body, Scope [ , prototype ] )", "html": "<emu-clause id=\"sec-functioncreate\" aoid=\"FunctionCreate\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-functioncreate\">#sec-functioncreate</span> FunctionCreate ( <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var> [ , <var>prototype</var> ] )</h1>\n      <p>The abstract operation FunctionCreate requires the arguments: <var>kind</var> which is one of (Normal, Method, Arrow), a parameter list <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>ParameterList</var>, a body <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>Body</var>, a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> specified by <var>Scope</var>, and optionally, an object <var>prototype</var>. FunctionCreate performs the following steps:</p>\n      <emu-alg><ol><li>If <var>prototype</var> is not present, then<ol><li>Set <var>prototype</var> to <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>If <var>kind</var> is not <emu-const>Normal</emu-const>, let <var>allocKind</var> be <code>\"non-constructor\"</code>.</li><li>Else, let <var>allocKind</var> be <code>\"normal\"</code>.</li><li>Let <var>F</var> be <emu-xref aoid=\"FunctionAllocate\"><a href=\"#sec-functionallocate\">FunctionAllocate</a></emu-xref>(<var>prototype</var>, <var>allocKind</var>).</li><li>Return <emu-xref aoid=\"FunctionInitialize\"><a href=\"#sec-functioninitialize\">FunctionInitialize</a></emu-xref>(<var>F</var>, <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-%typedarray%.prototype.copywithin": {"num": "22.2.3.5", "title": "#sec-%typedarray%.prototype.copywithin %TypedArray%.prototype.copyWithin ( target, start [ , end ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.copywithin\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.copywithin\">#sec-%typedarray%.prototype.copywithin</span> %TypedArray%.prototype.copyWithin ( <var>target</var>, <var>start</var> [ , <var>end</var> ] )</h1>\n        <p>The interpretation and use of the arguments of <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.copyWithin</code> are the same as for <code>Array.prototype.copyWithin</code> as defined in  <emu-xref href=\"#sec-array.prototype.copywithin\"><a href=\"#sec-array.prototype.copywithin\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.copywithin\">#sec-array.prototype.copywithin</a></emu-xref>.</p>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Let <var>len</var> be <var>O</var>.[[ArrayLength]].</li><li>Let <var>relativeTarget</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>target</var>).</li><li>If <var>relativeTarget</var> &lt; 0, let <var>to</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeTarget</var>), 0); else let <var>to</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeTarget</var>, <var>len</var>).</li><li>Let <var>relativeStart</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>start</var>).</li><li>If <var>relativeStart</var> &lt; 0, let <var>from</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeStart</var>), 0); else let <var>from</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeStart</var>, <var>len</var>).</li><li>If <var>end</var> is <emu-val>undefined</emu-val>, let <var>relativeEnd</var> be <var>len</var>; else let <var>relativeEnd</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>end</var>).</li><li>If <var>relativeEnd</var> &lt; 0, let <var>final</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeEnd</var>), 0); else let <var>final</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeEnd</var>, <var>len</var>).</li><li>Let <var>count</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>final</var> - <var>from</var>, <var>len</var> - <var>to</var>).</li><li>If <var>count</var> &gt; 0, then<ol><li>NOTE: The copying must be performed in a manner that preserves the bit-level encoding of the source data.</li><li>Let <var>buffer</var> be <var>O</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>typedArrayName</var> be the String value of <var>O</var>.[[TypedArrayName]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>typedArrayName</var>.</li><li>Let <var>byteOffset</var> be <var>O</var>.[[ByteOffset]].</li><li>Let <var>toByteIndex</var> be <var>to</var> &#215; <var>elementSize</var> + <var>byteOffset</var>.</li><li>Let <var>fromByteIndex</var> be <var>from</var> &#215; <var>elementSize</var> + <var>byteOffset</var>.</li><li>Let <var>countBytes</var> be <var>count</var> &#215; <var>elementSize</var>.</li><li>If <var>fromByteIndex</var> &lt; <var>toByteIndex</var> and <var>toByteIndex</var> &lt; <var>fromByteIndex</var> + <var>countBytes</var>, then<ol><li>Let <var>direction</var> be -1.</li><li>Set <var>fromByteIndex</var> to <var>fromByteIndex</var> + <var>countBytes</var> - 1.</li><li>Set <var>toByteIndex</var> to <var>toByteIndex</var> + <var>countBytes</var> - 1.</li></ol></li><li>Else,<ol><li>Let <var>direction</var> be 1.</li></ol></li><li>Repeat, while <var>countBytes</var> &gt; 0<ol><li>Let <var>value</var> be <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref>(<var>buffer</var>, <var>fromByteIndex</var>, <code>\"Uint8\"</code>, <emu-val>true</emu-val>, <code>\"Unordered\"</code>).</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>buffer</var>, <var>toByteIndex</var>, <code>\"Uint8\"</code>, <var>value</var>, <emu-val>true</emu-val>, <code>\"Unordered\"</code>).</li><li>Set <var>fromByteIndex</var> to <var>fromByteIndex</var> + <var>direction</var>.</li><li>Set <var>toByteIndex</var> to <var>toByteIndex</var> + <var>direction</var>.</li><li>Set <var>countBytes</var> to <var>countBytes</var> - 1.</li></ol></li></ol></li><li>Return <var>O</var>.\n        </li></ol></emu-alg>\n\n        <div id=\"excluded-sec-validatetypedarray\"><h1><span class=\"secnum\">22.2.3.5.1</span>#sec-validatetypedarray Runtime Semantics: ValidateTypedArray ( O )</h1>...</div></emu-clause>\n\n      "}, "sec-setvalueinbuffer": {"num": "24.1.1.12", "title": "#sec-setvalueinbuffer SetValueInBuffer ( arrayBuffer, byteIndex, type, value, isTypedArray, order [ , isLittleEndian ] )", "html": "<emu-clause id=\"sec-setvalueinbuffer\" aoid=\"SetValueInBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-setvalueinbuffer\">#sec-setvalueinbuffer</span> SetValueInBuffer ( <var>arrayBuffer</var>, <var>byteIndex</var>, <var>type</var>, <var>value</var>, <var>isTypedArray</var>, <var>order</var> [ , <var>isLittleEndian</var> ] )</h1>\n        <p>The abstract operation SetValueInBuffer takes seven parameters, an ArrayBuffer or SharedArrayBuffer <var>arrayBuffer</var>, an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>byteIndex</var>, a String <var>type</var>, a Number or BigInt <var>value</var>, a Boolean <var>isTypedArray</var>, a String <var>order</var>, and optionally a Boolean <var>isLittleEndian</var>. This operation performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>false</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: There are sufficient bytes in <var>arrayBuffer</var> starting at <var>byteIndex</var> to represent a value of <var>type</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>byteIndex</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value &#8805; 0.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is BigInt if !&#160;<emu-xref aoid=\"IsBigIntElementType\"><a href=\"#sec-isbigintelementtype\">IsBigIntElementType</a></emu-xref>(<var>type</var>) is <emu-val>true</emu-val>; otherwise, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Number.</li><li>Let <var>block</var> be <var>arrayBuffer</var>.[[ArrayBufferData]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for Element Type <var>type</var>.</li><li>If <var>isLittleEndian</var> is not present, set <var>isLittleEndian</var> to the value of the [[LittleEndian]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>rawBytes</var> be <emu-xref aoid=\"NumericToRawBytes\"><a href=\"#sec-numerictorawbytes\">NumericToRawBytes</a></emu-xref>(<var>type</var>, <var>value</var>, <var>isLittleEndian</var>).</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>execution</var> be the [[CandidateExecution]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>eventList</var> be the [[EventList]] field of the element in <var>execution</var>.[[EventsRecords]] whose [[AgentSignifier]] is <emu-xref aoid=\"AgentSignifier\"><a href=\"#sec-agentsignifier\">AgentSignifier</a></emu-xref>().</li><li>If <var>isTypedArray</var> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsNoTearConfiguration\"><a href=\"#sec-isnotearconfiguration\">IsNoTearConfiguration</a></emu-xref>(<var>type</var>, <var>order</var>) is <emu-val>true</emu-val>, let <var>noTear</var> be <emu-val>true</emu-val>; otherwise let <var>noTear</var> be <emu-val>false</emu-val>.</li><li>Append <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> { [[Order]]: <var>order</var>, [[NoTear]]: <var>noTear</var>, [[Block]]: <var>block</var>, [[ByteIndex]]: <var>byteIndex</var>, [[ElementSize]]: <var>elementSize</var>, [[Payload]]: <var>rawBytes</var> } to <var>eventList</var>.</li></ol></li><li>Else, store the individual bytes of <var>rawBytes</var> into <var>block</var>, in order, starting at <var>block</var>[<var>byteIndex</var>].</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-set.prototype.values": {"num": "23.2.3.10", "title": "#sec-set.prototype.values Set.prototype.values ( )", "html": "<emu-clause id=\"sec-set.prototype.values\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set.prototype.values\">#sec-set.prototype.values</span> Set.prototype.values ( )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"CreateSetIterator\"><a href=\"#sec-createsetiterator\">CreateSetIterator</a></emu-xref>(<var>S</var>, <code>\"value\"</code>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-enumerableownpropertynames": {"num": "7.3.22", "title": "#sec-enumerableownpropertynames EnumerableOwnPropertyNames ( O, kind )", "html": "<emu-clause id=\"sec-enumerableownpropertynames\" aoid=\"EnumerableOwnPropertyNames\" oldids=\"sec-enumerableownproperties\">\n      <span id=\"sec-enumerableownproperties\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-enumerableownpropertynames\">#sec-enumerableownpropertynames</span> EnumerableOwnPropertyNames ( <var>O</var>, <var>kind</var> )</h1>\n      <p>When the abstract operation EnumerableOwnPropertyNames is called with Object <var>O</var> and String <var>kind</var> the following steps are taken:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Let <var>ownKeys</var> be ? <var>O</var>.[[OwnPropertyKeys]]().</li><li>Let <var>properties</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>key</var> of <var>ownKeys</var> in <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is String, then<ol><li>Let <var>desc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>key</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val> and <var>desc</var>.[[Enumerable]] is <emu-val>true</emu-val>, then<ol><li>If <var>kind</var> is <code>\"key\"</code>, append <var>key</var> to <var>properties</var>.</li><li>Else,<ol><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>key</var>).</li><li>If <var>kind</var> is <code>\"value\"</code>, append <var>value</var> to <var>properties</var>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <code>\"key+value\"</code>.</li><li>Let <var>entry</var> be !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>key</var>, <var>value</var> &#187;).</li><li>Append <var>entry</var> to <var>properties</var>.</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>Order the elements of <var>properties</var> so they are in the same relative order as would be produced by the Iterator that would be returned if the <emu-xref aoid=\"EnumerateObjectProperties\"><a href=\"#sec-enumerate-object-properties\">EnumerateObjectProperties</a></emu-xref> internal method were invoked with <var>O</var>.</li><li>Return <var>properties</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {"figure-module-graph-simple": "Figure 2", "figure-module-graph-missing": "Figure 3", "figure-module-graph-cycle": "Figure 4", "table-1": "Table 1", "table-2": "Table 3", "table-3": "Table 4", "table-5": "Table 6", "table-15": "Table 16", "table-16": "Table 17", "table-17": "Table 18", "table-27": "Table 29", "table-36": "Table 39", "table-37": "Table 40", "table-cyclic-module-fields": "Table 41", "table-cyclic-module-methods": "Table 42", "table-dynamic-function-sourcetext-prefixes": "Table 49", "sec-todatestring-day-names": "Table 51", "sec-todatestring-month-names": "Table 52", "table-48": "Table 61", "table-49": "Table 62", "table-50": "Table 63", "table-51": "Table 64", "table-56": "Table 74", "table-internal-slots-of-asyncgenerator-instances": "Table 75", "table-58": "Table 78", "table-59": "Table 79", "table-readsharedmemory-fields": "Table 80", "table-writesharedmemory-fields": "Table 81", "table-rmwsharedmemory-fields": "Table 82"}}, "to": {"secList": ["sec-integerindexedelementget", "sec-generatorfunction", "sec-parsefloat-string", "sec-trimstring", "sec-forward-progress", "sec-%typedarray%.prototype.set-typedarray-offset", "sec-gettemplateobject", "sec-rawbytestonumeric", "sec-dataview.prototype.getuint16", "sec-bindthisvalue", "sec-dataview.prototype.setuint16", "sec-performeval", "sec-dataview.prototype.setint32", "sec-integerindexedelementset", "sec-asyncgeneratorfunction-instances", "sec-atomicreadmodifywrite", "sec-set.prototype.entries", "sec-ecmascript-function-objects-construct-argumentslist-newtarget", "sec-function-environment-records", "sec-dataview.prototype.getint16", "sec-isunclampedintegerelementtype", "sec-function-environment-records-getthisbinding", "sec-makeclassconstructor", "sec-functionallocate", "sec-memory-model-fundamentals", "sec-stringpad", "sec-properties-of-array-iterator-instances", "sec-innermoduleevaluation", "sec-map.prototype.keys", "sec-dataview.prototype.getint8", "sec-ordinarycallbindthis", "sec-fulfillpromise", "sec-string.prototype.trimstart", "sec-string.prototype.trim", "sec-shared-memory-guidelines", "sec-createdynamicfunction", "sec-dataview.prototype.setint16", "sec-newfunctionenvironment", "sec-generatorstart", "sec-built-in-function-objects", "sec-rejectpromise", "sec-%setiteratorprototype%.next", "sec-%typedarray%.prototype.fill", "sec-%typedarray%.prototype.set-array-offset", "sec-dataview.prototype.getbiguint64", "sec-data-races", "sec-isunsignedelementtype", "sec-getmodulenamespace", "sec-moduleevaluation", "sec-isbigintelementtype", "sec-async-function-constructor-arguments", "sec-dataview.prototype.setbigint64", "sec-dataview.prototype.setfloat32", "sec-dataview.prototype.getint32", "sec-asyncgeneratorfunction", "sec-getviewvalue", "sec-object.keys", "sec-promise-executor", "sec-example-cyclic-module-record-graphs", "sec-numerictorawbytes", "sec-promisereactionjob", "sec-%typedarray%.prototype.values", "sec-setviewvalue", "sec-functioninitialize", "sec-asyncgeneratorfunctioncreate", "sec-algorithm-conventions", "sec-generatorfunctioncreate", "sec-generatorresume", "sec-object.seal", "sec-properties-of-promise-instances", "sec-getmodifysetvalueinbuffer", "sec-properties-of-set-iterator-instances", "sec-testintegritylevel", "sec-createsharedbytedatablock", "sec-generatoryield", "sec-atomicload", "sec-properties-of-asyncgenerator-intances", "sec-getvaluefrombuffer", "sec-array.prototype.values", "sec-map.prototype.values", "sec-validatesharedintegertypedarray", "sec-dataview.prototype.setuint32", "sec-array.prototype.entries", "sec-%arrayiteratorprototype%.next", "sec-object.freeze", "sec-InnerModuleLinking", "sec-dataview.prototype.getfloat32", "sec-generatorfunction-instances", "sec-dataview.prototype.getuint32", "sec-internalizejsonproperty", "sec-isnotearconfiguration", "sec-%mapiteratorprototype%.next", "sec-dataview.prototype.setbiguint64", "sec-object.issealed", "sec-moduledeclarationlinking", "sec-function-p1-p2-pn-body", "sec-%typedarray%.prototype.entries", "sec-asyncgeneratorenqueue", "sec-asyncgeneratoryield", "sec-async-functions-abstract-operations-async-function-create", "sec-runtime-semantics-classdefinitionevaluation", "sec-mathematical-operations", "sec-properties-of-generator-instances", "sec-array.prototype.keys", "sec-%typedarray%.prototype.slice", "sec-string.prototype.trimend", "sec-properties-of-map-iterator-instances", "sec-copydatablockbytes", "sec-happens-before", "sec-memory-order", "sec-typedarray-objects", "sec-%typedarray%.prototype.keys", "sec-synchronizes-with", "sec-string.prototype.padend", "sec-serializejsonobject", "sec-cyclic-module-records", "sec-dataview.prototype.setuint8", "sec-string.prototype.padstart", "sec-atomics.store", "sec-dataview.prototype.getbigint64", "sec-object.values", "sec-dataview.prototype.getfloat64", "sec-map.prototype.entries", "sec-atomics.compareexchange", "sec-setintegritylevel", "sec-performpromisethen", "sec-asyncgeneratorstart", "sec-datestring", "sec-ecmascript-function-objects-call-thisargument-argumentslist", "sec-object.isfrozen", "sec-parsemodule", "sec-dataview.prototype.getuint8", "sec-typedarray-typedarray", "sec-allocatetypedarray", "sec-function-environment-records-hasthisbinding", "sec-function-environment-records-hassuperbinding", "sec-async-function-instances", "sec-dataview.prototype.setfloat64", "sec-asyncgeneratorresumenext", "sec-promisereaction-records", "sec-generatorresumeabrupt", "sec-parseint-string-radix", "sec-date.prototype.toutcstring", "sec-object.entries", "sec-value-notation", "sec-generatorvalidate", "sec-ecmascript-function-objects", "sec-dataview.prototype.setint8", "sec-functioncreate", "sec-%typedarray%.prototype.copywithin", "sec-setvalueinbuffer", "sec-set.prototype.values", "sec-enumerableownpropertynames"], "secData": {"sec-integerindexedelementget": {"num": "9.4.5.8", "title": "#sec-integerindexedelementget IntegerIndexedElementGet ( O, index )", "html": "<emu-clause id=\"sec-integerindexedelementget\" aoid=\"IntegerIndexedElementGet\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-integerindexedelementget\">#sec-integerindexedelementget</span> IntegerIndexedElementGet ( <var>O</var>, <var>index</var> )</h1>\n        <p>The abstract operation IntegerIndexedElementGet with arguments <var>O</var> and <var>index</var> performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>index</var>) is Number.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> is an Object that has [[ViewedArrayBuffer]], [[ArrayLength]], [[ByteOffset]], [[ContentType]], and [[TypedArrayName]] internal slots.</li><li>Let <var>buffer</var> be <var>O</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"IsInteger\"><a href=\"#sec-isinteger\">IsInteger</a></emu-xref>(<var>index</var>) is <emu-val>false</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <var>index</var> = <emu-val>-0</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Let <var>length</var> be <var>O</var>.[[ArrayLength]].</li><li>If <var>index</var> &lt; 0 or <var>index</var> &#8805; <var>length</var>, return <emu-val>undefined</emu-val>.</li><li>Let <var>offset</var> be <var>O</var>.[[ByteOffset]].</li><li>Let <var>arrayTypeName</var> be the String value of <var>O</var>.[[TypedArrayName]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>indexedPosition</var> be (<var>index</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Let <var>elementType</var> be the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Return <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref>(<var>buffer</var>, <var>indexedPosition</var>, <var>elementType</var>, <emu-val>true</emu-val>, <emu-const>Unordered</emu-const>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-generatorfunction": {"num": "25.2.1.1", "title": "#sec-generatorfunction GeneratorFunction ( p1, p2, \u2026 , pn, body )", "html": "<emu-clause id=\"sec-generatorfunction\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorfunction\">#sec-generatorfunction</span> GeneratorFunction ( <var>p1</var>, <var>p2</var>, &#8230; , <var>pn</var>, <var>body</var> )</h1>\n        <p>The last argument specifies the body (executable code) of a generator function; any preceding arguments specify formal parameters.</p>\n        <p>When the <code>GeneratorFunction</code> function is called with some arguments <var>p1</var>, <var>p2</var>, &#8230; , <var>pn</var>, <var>body</var> (where <var>n</var> might be 0, that is, there are no &#8220;<var>p</var>&#8221; arguments, and where <var>body</var> might also not be provided), the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>C</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>args</var> be the <var>argumentsList</var> that was passed to this function by [[Call]] or [[Construct]].</li><li>Return ?&#160;<emu-xref aoid=\"CreateDynamicFunction\"><a href=\"#sec-createdynamicfunction\">CreateDynamicFunction</a></emu-xref>(<var>C</var>, NewTarget, <emu-const>generator</emu-const>, <var>args</var>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>See NOTE for  <emu-xref href=\"#sec-function-p1-p2-pn-body\"><a href=\"#sec-function-p1-p2-pn-body\" class=\"excluded-xref\" excluded-id=\"sec-function-p1-p2-pn-body\">#sec-function-p1-p2-pn-body</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-parsefloat-string": {"num": "18.2.4", "title": "#sec-parsefloat-string parseFloat ( string )", "html": "<emu-clause id=\"sec-parsefloat-string\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-parsefloat-string\">#sec-parsefloat-string</span> parseFloat ( <var>string</var> )</h1>\n      <p>The <code>parseFloat</code> function produces a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> dictated by interpretation of the contents of the <var>string</var> argument as a decimal literal.</p>\n      <p>The <code>parseFloat</code> function is the  <dfn>%parseFloat%</dfn> intrinsic object. When the <code>parseFloat</code> function is called with one argument <var>string</var>, the following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>inputString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Let <var>trimmedString</var> be !&#160;<emu-xref aoid=\"TrimString\"><a href=\"#sec-trimstring\">TrimString</a></emu-xref>(<var>inputString</var>, <emu-const>start</emu-const>).</li><li>If neither <var>trimmedString</var> nor any prefix of <var>trimmedString</var> satisfies the syntax of a <emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt> (see <emu-xref href=\"#sec-tonumber-applied-to-the-string-type\"><a href=\"#sec-tonumber-applied-to-the-string-type\" class=\"excluded-xref\" excluded-id=\"sec-tonumber-applied-to-the-string-type\">#sec-tonumber-applied-to-the-string-type</a></emu-xref>), return <emu-val>NaN</emu-val>.</li><li>Let <var>numberString</var> be the longest prefix of <var>trimmedString</var>, which might be <var>trimmedString</var> itself, that satisfies the syntax of a <emu-nt><a href=\"#prod-StrDecimalLiteral\">StrDecimalLiteral</a></emu-nt>.</li><li>Let <var>mathFloat</var> be MV of <var>numberString</var>.</li><li>If <var>mathFloat</var> = 0<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>, then<ol><li>If the first code unit of <var>trimmedString</var> is the code unit 0x002D (HYPHEN-MINUS), return <emu-val>-0</emu-val>.</li><li>Return <emu-val>+0</emu-val>.</li></ol></li><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>mathFloat</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><code>parseFloat</code> may interpret only a leading portion of <var>string</var> as a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref>; it ignores any code units that cannot be interpreted as part of the notation of a decimal literal, and no indication is given that any such code units were ignored.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-trimstring": {"num": "21.1.3.28.1", "title": "#sec-trimstring Runtime Semantics: TrimString ( string, where )", "html": "<emu-clause id=\"sec-trimstring\" aoid=\"TrimString\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-trimstring\">#sec-trimstring</span> Runtime Semantics: TrimString ( <var>string</var>, <var>where</var> )</h1>\n          <p>The abstract operation TrimString is called with arguments <var>string</var> and <var>where</var>, and interprets the String value <var>string</var> as a sequence of UTF-16 encoded code points, as described in  <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>. It performs the following steps:</p>\n          <emu-alg><ol><li>Let <var>str</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<var>string</var>).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>str</var>).</li><li>If <var>where</var> is <emu-const>start</emu-const>, let <var>T</var> be the String value that is a copy of <var>S</var> with leading white space removed.</li><li>Else if <var>where</var> is <emu-const>end</emu-const>, let <var>T</var> be the String value that is a copy of <var>S</var> with trailing white space removed.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>where</var> is <emu-const>start+end</emu-const>.</li><li>Let <var>T</var> be the String value that is a copy of <var>S</var> with both leading and trailing white space removed.</li></ol></li><li>Return <var>T</var>.\n          </li></ol></emu-alg>\n          <p>The definition of white space is the union of <emu-nt><a href=\"#prod-WhiteSpace\">WhiteSpace</a></emu-nt> and <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt>. When determining whether a Unicode code point is in Unicode general category &#8220;Space_Separator&#8221; (&#8220;Zs&#8221;), code unit sequences are interpreted as UTF-16 encoded code point sequences as specified in  <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>.</p>\n        </emu-clause>\n      "}, "sec-forward-progress": {"num": "8.9", "title": "#sec-forward-progress Forward Progress", "html": "<emu-clause id=\"sec-forward-progress\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-forward-progress\">#sec-forward-progress</span> Forward Progress</h1>\n    <p>For an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> to  <em>make forward progress</em> is for it to perform an evaluation step according to this specification.</p>\n    <p>An <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> becomes  <em>blocked</em> when its <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref> waits synchronously and indefinitely for an external event. Only agents whose <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>'s [[CanBlock]] property is <emu-val>true</emu-val> can become blocked in this sense.  An  <em>unblocked</em> <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> is one that is not blocked.</p>\n\n    <p>Implementations must ensure that:</p>\n    <ul>\n      <li>every unblocked <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> with a dedicated <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref> eventually makes forward progress</li>\n      <li>in a set of agents that share an <emu-xref href=\"#executing-thread\"><a href=\"#executing-thread\">executing thread</a></emu-xref>, one <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> eventually makes forward progress</li>\n      <li>an <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> does not cause another <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> to become blocked except via explicit APIs that provide blocking.</li>\n    </ul>\n\n    <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n      <p>This, along with the liveness guarantee in the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>, ensures that all <emu-const>SeqCst</emu-const> writes eventually become observable to all agents.</p>\n    </div></emu-note>\n  </emu-clause>\n\n"}, "sec-%typedarray%.prototype.set-typedarray-offset": {"num": "22.2.3.23.2", "title": "#sec-%typedarray%.prototype.set-typedarray-offset %TypedArray%.prototype.set ( typedArray [ , offset ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.set-typedarray-offset\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.set-typedarray-offset\">#sec-%typedarray%.prototype.set-typedarray-offset</span> %TypedArray%.prototype.set ( <var>typedArray</var> [ , <var>offset</var> ] )</h1>\n          <p>Sets multiple values in this <var>TypedArray</var>, reading the values from the <var>typedArray</var> argument object. The optional <var>offset</var> value indicates the first element index in this <var>TypedArray</var> where values are written. If omitted, it is assumed to be 0.</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>typedArray</var> has a [[TypedArrayName]] internal slot. If it does not, the definition in <emu-xref href=\"#sec-%typedarray%.prototype.set-array-offset\"><a href=\"#sec-%typedarray%.prototype.set-array-offset\" class=\"excluded-xref\" excluded-id=\"sec-%typedarray%.prototype.set-array-offset\">#sec-%typedarray%.prototype.set-array-offset</a></emu-xref> applies.</li><li>Let <var>target</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>target</var>, [[TypedArrayName]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>target</var> has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>targetOffset</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>offset</var>).</li><li>If <var>targetOffset</var> &lt; 0, throw a <emu-val>RangeError</emu-val> exception.</li><li>Let <var>targetBuffer</var> be <var>target</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>targetBuffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>targetLength</var> be <var>target</var>.[[ArrayLength]].</li><li>Let <var>srcBuffer</var> be <var>typedArray</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>srcBuffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>targetName</var> be the String value of <var>target</var>.[[TypedArrayName]].</li><li>Let <var>targetType</var> be the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>targetName</var>.</li><li>Let <var>targetElementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>targetName</var>.</li><li>Let <var>targetByteOffset</var> be <var>target</var>.[[ByteOffset]].</li><li>Let <var>srcName</var> be the String value of <var>typedArray</var>.[[TypedArrayName]].</li><li>Let <var>srcType</var> be the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>srcName</var>.</li><li>Let <var>srcElementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>srcName</var>.</li><li>Let <var>srcLength</var> be <var>typedArray</var>.[[ArrayLength]].</li><li>Let <var>srcByteOffset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>If <var>srcLength</var> + <var>targetOffset</var> &gt; <var>targetLength</var>, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>target</var>.[[ContentType]] is not equal to <var>typedArray</var>.[[ContentType]], throw a <emu-val>TypeError</emu-val> exception.</li><li>If both <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>srcBuffer</var>) and <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>targetBuffer</var>) are <emu-val>true</emu-val>, then<ol><li>If <var>srcBuffer</var>.[[ArrayBufferData]] and <var>targetBuffer</var>.[[ArrayBufferData]] are the same <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref> values, let <var>same</var> be <emu-val>true</emu-val>; else let <var>same</var> be <emu-val>false</emu-val>.</li></ol></li><li>Else, let <var>same</var> be <emu-xref aoid=\"SameValue\"><a href=\"#sec-samevalue\">SameValue</a></emu-xref>(<var>srcBuffer</var>, <var>targetBuffer</var>).</li><li>If <var>same</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>srcByteLength</var> be <var>typedArray</var>.[[ByteLength]].</li><li>Set <var>srcBuffer</var> to ?&#160;<emu-xref aoid=\"CloneArrayBuffer\"><a href=\"#sec-clonearraybuffer\">CloneArrayBuffer</a></emu-xref>(<var>srcBuffer</var>, <var>srcByteOffset</var>, <var>srcByteLength</var>, <emu-xref href=\"#sec-arraybuffer-constructor\"><a href=\"#sec-arraybuffer-constructor\">%ArrayBuffer%</a></emu-xref>).</li><li>NOTE: <emu-xref href=\"#sec-arraybuffer-constructor\"><a href=\"#sec-arraybuffer-constructor\">%ArrayBuffer%</a></emu-xref> is used to clone <var>srcBuffer</var> because is it known to not have any observable side-effects.</li><li>Let <var>srcByteIndex</var> be 0.</li></ol></li><li>Else, let <var>srcByteIndex</var> be <var>srcByteOffset</var>.</li><li>Let <var>targetByteIndex</var> be <var>targetOffset</var> &#215; <var>targetElementSize</var> + <var>targetByteOffset</var>.</li><li>Let <var>limit</var> be <var>targetByteIndex</var> + <var>targetElementSize</var> &#215; <var>srcLength</var>.</li><li>If <var>srcType</var> is the same as <var>targetType</var>, then<ol><li>NOTE: If <var>srcType</var> and <var>targetType</var> are the same, the transfer must be performed in a manner that preserves the bit-level encoding of the source data.</li><li>Repeat, while <var>targetByteIndex</var> &lt; <var>limit</var><ol><li>Let <var>value</var> be <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref>(<var>srcBuffer</var>, <var>srcByteIndex</var>, <emu-const>Uint8</emu-const>, <emu-val>true</emu-val>, <emu-const>Unordered</emu-const>).</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>targetBuffer</var>, <var>targetByteIndex</var>, <emu-const>Uint8</emu-const>, <var>value</var>, <emu-val>true</emu-val>, <emu-const>Unordered</emu-const>).</li><li>Set <var>srcByteIndex</var> to <var>srcByteIndex</var> + 1.</li><li>Set <var>targetByteIndex</var> to <var>targetByteIndex</var> + 1.</li></ol></li></ol></li><li>Else,<ol><li>Repeat, while <var>targetByteIndex</var> &lt; <var>limit</var><ol><li>Let <var>value</var> be <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref>(<var>srcBuffer</var>, <var>srcByteIndex</var>, <var>srcType</var>, <emu-val>true</emu-val>, <emu-const>Unordered</emu-const>).</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>targetBuffer</var>, <var>targetByteIndex</var>, <var>targetType</var>, <var>value</var>, <emu-val>true</emu-val>, <emu-const>Unordered</emu-const>).</li><li>Set <var>srcByteIndex</var> to <var>srcByteIndex</var> + <var>srcElementSize</var>.</li><li>Set <var>targetByteIndex</var> to <var>targetByteIndex</var> + <var>targetElementSize</var>.</li></ol></li></ol></li><li>Return <emu-val>undefined</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-gettemplateobject": {"num": "12.2.9.4", "title": "#sec-gettemplateobject Runtime Semantics: GetTemplateObject ( templateLiteral )", "html": "<emu-clause id=\"sec-gettemplateobject\" aoid=\"GetTemplateObject\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-gettemplateobject\">#sec-gettemplateobject</span> Runtime Semantics: GetTemplateObject ( <var>templateLiteral</var> )</h1>\n        <p>The abstract operation GetTemplateObject is called with a <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>, <var>templateLiteral</var>, as an argument. It performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>rawStrings</var> be TemplateStrings of <var>templateLiteral</var> with argument <emu-val>true</emu-val>.</li><li>Let <var>realm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Let <var>templateRegistry</var> be <var>realm</var>.[[TemplateMap]].</li><li>For each element <var>e</var> of <var>templateRegistry</var>, do<ol><li>If <var>e</var>.[[Site]] is <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">the same Parse Node</a></emu-xref> as <var>templateLiteral</var>, then<ol><li>Return <var>e</var>.[[Array]].</li></ol></li></ol></li><li>Let <var>cookedStrings</var> be TemplateStrings of <var>templateLiteral</var> with argument <emu-val>false</emu-val>.</li><li>Let <var>count</var> be the number of elements in the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>cookedStrings</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>count</var> &#8804; 2<sup>32</sup> - 1.</li><li>Let <var>template</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(<var>count</var>).</li><li>Let <var>rawObj</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(<var>count</var>).</li><li>Let <var>index</var> be 0.</li><li>Repeat, while <var>index</var> &lt; <var>count</var><ol><li>Let <var>prop</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>index</var>).</li><li>Let <var>cookedValue</var> be the String value <var>cookedStrings</var>[<var>index</var>].</li><li>Call <var>template</var>.[[DefineOwnProperty]](<var>prop</var>, PropertyDescriptor { [[Value]]: <var>cookedValue</var>, [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Let <var>rawValue</var> be the String value <var>rawStrings</var>[<var>index</var>].</li><li>Call <var>rawObj</var>.[[DefineOwnProperty]](<var>prop</var>, PropertyDescriptor { [[Value]]: <var>rawValue</var>, [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Set <var>index</var> to <var>index</var> + 1.</li></ol></li><li>Perform <emu-xref aoid=\"SetIntegrityLevel\"><a href=\"#sec-setintegritylevel\">SetIntegrityLevel</a></emu-xref>(<var>rawObj</var>, <emu-const>frozen</emu-const>).</li><li>Call <var>template</var>.[[DefineOwnProperty]](<code>\"raw\"</code>, PropertyDescriptor { [[Value]]: <var>rawObj</var>, [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <emu-xref aoid=\"SetIntegrityLevel\"><a href=\"#sec-setintegritylevel\">SetIntegrityLevel</a></emu-xref>(<var>template</var>, <emu-const>frozen</emu-const>).</li><li>Append the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Site]]: <var>templateLiteral</var>, [[Array]]: <var>template</var> } to <var>templateRegistry</var>.</li><li>Return <var>template</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The creation of a template object cannot result in an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>Each <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt> in the program code of a <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> is associated with a unique template object that is used in the evaluation of tagged Templates (<emu-xref href=\"#sec-template-literals-runtime-semantics-evaluation\"><a href=\"#sec-template-literals-runtime-semantics-evaluation\" class=\"excluded-xref\" excluded-id=\"sec-template-literals-runtime-semantics-evaluation\">#sec-template-literals-runtime-semantics-evaluation</a></emu-xref>). The template objects are frozen and the same template object is used each time a specific tagged Template is evaluated. Whether template objects are created lazily upon first evaluation of the <emu-nt><a href=\"#prod-TemplateLiteral\">TemplateLiteral</a></emu-nt> or eagerly prior to first evaluation is an implementation choice that is not observable to ECMAScript code.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n          <p>Future editions of this specification may define additional non-enumerable properties of template objects.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-rawbytestonumeric": {"num": "24.1.1.9", "title": "#sec-rawbytestonumeric RawBytesToNumeric ( type, rawBytes, isLittleEndian )", "html": "<emu-clause id=\"sec-rawbytestonumeric\" aoid=\"RawBytesToNumeric\" oldids=\"sec-rawbytestonumber\">\n        <span id=\"sec-rawbytestonumber\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-rawbytestonumeric\">#sec-rawbytestonumeric</span> RawBytesToNumeric ( <var>type</var>, <var>rawBytes</var>, <var>isLittleEndian</var> )</h1>\n        <p>The abstract operation RawBytesToNumeric takes three parameters, a TypedArray element type <var>type</var>, a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> <var>rawBytes</var>, and a Boolean <var>isLittleEndian</var>. This operation performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for Element Type <var>type</var>.</li><li>If <var>isLittleEndian</var> is <emu-val>false</emu-val>, reverse the order of the elements of <var>rawBytes</var>.</li><li>If <var>type</var> is <emu-const>Float32</emu-const>, then<ol><li>Let <var>value</var> be the byte elements of <var>rawBytes</var> concatenated and interpreted as a little-endian bit string encoding of an IEEE 754-2008 binary32 value.</li><li>If <var>value</var> is an IEEE 754-2008 binary32 NaN value, return the <emu-val>NaN</emu-val> <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref>.</li><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> that corresponds to <var>value</var>.</li></ol></li><li>If <var>type</var> is <emu-const>Float64</emu-const>, then<ol><li>Let <var>value</var> be the byte elements of <var>rawBytes</var> concatenated and interpreted as a little-endian bit string encoding of an IEEE 754-2008 binary64 value.</li><li>If <var>value</var> is an IEEE 754-2008 binary64 NaN value, return the <emu-val>NaN</emu-val> <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref>.</li><li>Return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> that corresponds to <var>value</var>.</li></ol></li><li>If !&#160;<emu-xref aoid=\"IsUnsignedElementType\"><a href=\"#sec-isunsignedelementtype\">IsUnsignedElementType</a></emu-xref>(<var>type</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>intValue</var> be the byte elements of <var>rawBytes</var> concatenated and interpreted as a bit string encoding of an unsigned little-endian binary number.</li></ol></li><li>Else,<ol><li>Let <var>intValue</var> be the byte elements of <var>rawBytes</var> concatenated and interpreted as a bit string encoding of a binary little-endian 2's complement number of bit length <var>elementSize</var> &#215; 8.</li></ol></li><li>If !&#160;<emu-xref aoid=\"IsBigIntElementType\"><a href=\"#sec-isbigintelementtype\">IsBigIntElementType</a></emu-xref>(<var>type</var>) is <emu-val>true</emu-val>, return the BigInt value that corresponds to <var>intValue</var>.</li><li>Otherwise, return the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> that corresponds to <var>intValue</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-dataview.prototype.getuint16": {"num": "24.3.4.13", "title": "#sec-dataview.prototype.getuint16 DataView.prototype.getUint16 ( byteOffset [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.getuint16\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.getuint16\">#sec-dataview.prototype.getuint16</span> DataView.prototype.getUint16 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>getUint16</code> method is called with argument <var>byteOffset</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"GetViewValue\"><a href=\"#sec-getviewvalue\">GetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <emu-const>Uint16</emu-const>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-bindthisvalue": {"num": "8.1.1.3.1", "title": "#sec-bindthisvalue BindThisValue ( V )", "html": "<emu-clause id=\"sec-bindthisvalue\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bindthisvalue\">#sec-bindthisvalue</span> BindThisValue ( <var>V</var> )</h1>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var>.[[ThisBindingStatus]] is not <emu-const>lexical</emu-const>.</li><li>If <var>envRec</var>.[[ThisBindingStatus]] is <emu-const>initialized</emu-const>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Set <var>envRec</var>.[[ThisValue]] to <var>V</var>.</li><li>Set <var>envRec</var>.[[ThisBindingStatus]] to <emu-const>initialized</emu-const>.</li><li>Return <var>V</var>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-dataview.prototype.setuint16": {"num": "24.3.4.23", "title": "#sec-dataview.prototype.setuint16 DataView.prototype.setUint16 ( byteOffset, value [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.setuint16\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.setuint16\">#sec-dataview.prototype.setuint16</span> DataView.prototype.setUint16 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>setUint16</code> method is called with arguments <var>byteOffset</var> and <var>value</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"SetViewValue\"><a href=\"#sec-setviewvalue\">SetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <emu-const>Uint16</emu-const>, <var>value</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-performeval": {"num": "18.2.1.1", "title": "#sec-performeval Runtime Semantics: PerformEval ( x, callerRealm, strictCaller, direct )", "html": "<emu-clause id=\"sec-performeval\" aoid=\"PerformEval\" oldids=\"sec-performeval-rules-outside-functions,sec-performeval-rules-outside-methods,sec-performeval-rules-outside-constructors\">\n        <span id=\"sec-performeval-rules-outside-constructors\"></span><span id=\"sec-performeval-rules-outside-methods\"></span><span id=\"sec-performeval-rules-outside-functions\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-performeval\">#sec-performeval</span> Runtime Semantics: PerformEval ( <var>x</var>, <var>callerRealm</var>, <var>strictCaller</var>, <var>direct</var> )</h1>\n        <p>The abstract operation PerformEval with arguments <var>x</var>, <var>callerRealm</var>, <var>strictCaller</var>, and <var>direct</var> performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>direct</var> is <emu-val>false</emu-val>, then <var>strictCaller</var> is also <emu-val>false</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) is not String, return <var>x</var>.</li><li>Let <var>evalRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>callerRealm</var>, <var>evalRealm</var>).</li><li>Let <var>thisEnvRec</var> be !&#160;<emu-xref aoid=\"GetThisEnvironment\"><a href=\"#sec-getthisenvironment\">GetThisEnvironment</a></emu-xref>().</li><li>If <var>thisEnvRec</var> is a <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref>, then<ol><li>Let <var>F</var> be <var>thisEnvRec</var>.[[FunctionObject]].</li><li>Let <var>inFunction</var> be <emu-val>true</emu-val>.</li><li>Let <var>inMethod</var> be <var>thisEnvRec</var>.HasSuperBinding().</li><li>If <var>F</var>.[[ConstructorKind]] is <emu-const>derived</emu-const>, let <var>inDerivedConstructor</var> be <emu-val>true</emu-val>; otherwise, let <var>inDerivedConstructor</var> be <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>inFunction</var> be <emu-val>false</emu-val>.</li><li>Let <var>inMethod</var> be <emu-val>false</emu-val>.</li><li>Let <var>inDerivedConstructor</var> be <emu-val>false</emu-val>.</li></ol></li><li>Perform the following substeps in an implementation-dependent order, possibly interleaving parsing and error detection:<ol><li>Let <var>script</var> be the ECMAScript code that is the result of parsing <var>x</var>, interpreted as UTF-16 encoded Unicode text as described in <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>, for the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt><a href=\"#prod-Script\">Script</a></emu-nt>. If the parse fails, throw a <emu-val>SyntaxError</emu-val> exception. If any early errors are detected, throw a <emu-val>SyntaxError</emu-val> exception (but see also clause <emu-xref href=\"#sec-error-handling-and-language-extensions\"><a href=\"#sec-error-handling-and-language-extensions\" class=\"excluded-xref\" excluded-id=\"sec-error-handling-and-language-extensions\">#sec-error-handling-and-language-extensions</a></emu-xref>).</li><li>If <var>script</var> Contains <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> is <emu-val>false</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Let <var>body</var> be the <emu-nt><a href=\"#prod-ScriptBody\">ScriptBody</a></emu-nt> of <var>script</var>.</li><li>If <var>inFunction</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-NewTarget\">NewTarget</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>inMethod</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>inDerivedConstructor</var> is <emu-val>false</emu-val>, and <var>body</var> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>If <var>strictCaller</var> is <emu-val>true</emu-val>, let <var>strictEval</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>strictEval</var> be IsStrict of <var>script</var>.</li><li>Let <var>ctx</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>NOTE: If <var>direct</var> is <emu-val>true</emu-val>, <var>ctx</var> will be the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that performed the <emu-xref href=\"#sec-function-calls-runtime-semantics-evaluation\"><a href=\"#sec-function-calls-runtime-semantics-evaluation\">direct eval</a></emu-xref>. If <var>direct</var> is <emu-val>false</emu-val>, <var>ctx</var> will be the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> for the invocation of the <code>eval</code> function.</li><li>If <var>direct</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>ctx</var>'s LexicalEnvironment).</li><li>Let <var>varEnv</var> be <var>ctx</var>'s VariableEnvironment.</li></ol></li><li>Else,<ol><li>Let <var>lexEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>evalRealm</var>.[[GlobalEnv]]).</li><li>Let <var>varEnv</var> be <var>evalRealm</var>.[[GlobalEnv]].</li></ol></li><li>If <var>strictEval</var> is <emu-val>true</emu-val>, set <var>varEnv</var> to <var>lexEnv</var>.</li><li>If <var>ctx</var> is not already suspended, suspend <var>ctx</var>.</li><li>Let <var>evalCxt</var> be a new ECMAScript code <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.</li><li>Set the <var>evalCxt</var>'s Function to <emu-val>null</emu-val>.</li><li>Set the <var>evalCxt</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref> to <var>evalRealm</var>.</li><li>Set the <var>evalCxt</var>'s ScriptOrModule to <var>ctx</var>'s ScriptOrModule.</li><li>Set the <var>evalCxt</var>'s VariableEnvironment to <var>varEnv</var>.</li><li>Set the <var>evalCxt</var>'s LexicalEnvironment to <var>lexEnv</var>.</li><li>Push <var>evalCxt</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>evalCxt</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"EvalDeclarationInstantiation\"><a href=\"#sec-evaldeclarationinstantiation\">EvalDeclarationInstantiation</a></emu-xref>(<var>body</var>, <var>varEnv</var>, <var>lexEnv</var>, <var>strictEval</var>).</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Set <var>result</var> to the result of evaluating <var>body</var>.</li></ol></li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const> and <var>result</var>.[[Value]] is <emu-const>empty</emu-const>, then<ol><li>Set <var>result</var> to <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></li><li><emu-xref aoid=\"Suspend\"><a href=\"#sec-suspend\">Suspend</a></emu-xref> <var>evalCxt</var> and remove it from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Resume the context that is now on the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The eval code cannot instantiate variable or function bindings in the variable environment of the calling context that invoked the eval if the calling context is evaluating formal parameter initializers or if either the code of the calling context or the eval code is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>. Instead such bindings are instantiated in a new VariableEnvironment that is only accessible to the eval code. Bindings introduced by <code>let</code>, <code>const</code>, or <code>class</code> declarations are always instantiated in a new LexicalEnvironment.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-dataview.prototype.setint32": {"num": "24.3.4.21", "title": "#sec-dataview.prototype.setint32 DataView.prototype.setInt32 ( byteOffset, value [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.setint32\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.setint32\">#sec-dataview.prototype.setint32</span> DataView.prototype.setInt32 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>setInt32</code> method is called with arguments <var>byteOffset</var> and <var>value</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"SetViewValue\"><a href=\"#sec-setviewvalue\">SetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <emu-const>Int32</emu-const>, <var>value</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-integerindexedelementset": {"num": "9.4.5.9", "title": "#sec-integerindexedelementset IntegerIndexedElementSet ( O, index, value )", "html": "<emu-clause id=\"sec-integerindexedelementset\" aoid=\"IntegerIndexedElementSet\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-integerindexedelementset\">#sec-integerindexedelementset</span> IntegerIndexedElementSet ( <var>O</var>, <var>index</var>, <var>value</var> )</h1>\n        <p>The abstract operation IntegerIndexedElementSet with arguments <var>O</var>, <var>index</var>, and <var>value</var> performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>index</var>) is Number.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> is an Object that has [[ViewedArrayBuffer]], [[ArrayLength]], [[ByteOffset]], [[ContentType]], and [[TypedArrayName]] internal slots.</li><li>If <var>O</var>.[[ContentType]] is <emu-const>BigInt</emu-const>, let <var>numValue</var> be ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-tobigint\">ToBigInt</a></emu-xref>(<var>value</var>).</li><li>Otherwise, let <var>numValue</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>value</var>).</li><li>Let <var>buffer</var> be <var>O</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"IsInteger\"><a href=\"#sec-isinteger\">IsInteger</a></emu-xref>(<var>index</var>) is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>index</var> = <emu-val>-0</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>length</var> be <var>O</var>.[[ArrayLength]].</li><li>If <var>index</var> &lt; 0 or <var>index</var> &#8805; <var>length</var>, return <emu-val>false</emu-val>.</li><li>Let <var>offset</var> be <var>O</var>.[[ByteOffset]].</li><li>Let <var>arrayTypeName</var> be the String value of <var>O</var>.[[TypedArrayName]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>indexedPosition</var> be (<var>index</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Let <var>elementType</var> be the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>buffer</var>, <var>indexedPosition</var>, <var>elementType</var>, <var>numValue</var>, <emu-val>true</emu-val>, <emu-const>Unordered</emu-const>).</li><li>Return <emu-val>true</emu-val>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-asyncgeneratorfunction-instances": {"num": "25.3.4", "title": "#sec-asyncgeneratorfunction-instances AsyncGeneratorFunction Instances", "html": "<emu-clause id=\"sec-asyncgeneratorfunction-instances\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorfunction-instances\">#sec-asyncgeneratorfunction-instances</span> AsyncGeneratorFunction Instances</h1>\n      <p>Every AsyncGeneratorFunction instance is an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> and has the internal slots listed in  <emu-xref href=\"#table-27\"><a href=\"#table-27\" class=\"excluded-xref\" excluded-id=\"table-27\">#table-27</a></emu-xref>. The value of the [[FunctionKind]] internal slot for all such instances is <emu-const>generator</emu-const>.</p>\n      <p>Each AsyncGeneratorFunction instance has the following own properties:</p>\n\n      <div id=\"excluded-sec-asyncgeneratorfunction-instance-length\"><h1><span class=\"secnum\">25.3.4.1</span>#sec-asyncgeneratorfunction-instance-length length</h1>...</div><div id=\"excluded-sec-asyncgeneratorfunction-instance-name\"><h1><span class=\"secnum\">25.3.4.2</span>#sec-asyncgeneratorfunction-instance-name name</h1>...</div><div id=\"excluded-sec-asyncgeneratorfunction-instance-prototype\"><h1><span class=\"secnum\">25.3.4.3</span>#sec-asyncgeneratorfunction-instance-prototype prototype</h1>...</div></emu-clause>\n  "}, "sec-atomicreadmodifywrite": {"num": "24.4.1.11", "title": "#sec-atomicreadmodifywrite AtomicReadModifyWrite ( typedArray, index, value, op )", "html": "<emu-clause id=\"sec-atomicreadmodifywrite\" aoid=\"AtomicReadModifyWrite\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomicreadmodifywrite\">#sec-atomicreadmodifywrite</span> AtomicReadModifyWrite ( <var>typedArray</var>, <var>index</var>, <var>value</var>, <var>op</var> )</h1>\n        <p>The abstract operation AtomicReadModifyWrite takes four arguments, <var>typedArray</var>, <var>index</var>, <var>value</var>, and a pure combining operation <var>op</var>. The pure combining operation <var>op</var> takes two <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values arguments and returns a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values. The operation atomically loads a value, combines it with another value, and stores the result of the combination. It returns the loaded value. It performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateSharedIntegerTypedArray\"><a href=\"#sec-validatesharedintegertypedarray\">ValidateSharedIntegerTypedArray</a></emu-xref>(<var>typedArray</var>).</li><li>Let <var>i</var> be ?&#160;<emu-xref aoid=\"ValidateAtomicAccess\"><a href=\"#sec-validateatomicaccess\">ValidateAtomicAccess</a></emu-xref>(<var>typedArray</var>, <var>index</var>).</li><li>Let <var>arrayTypeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>If <var>typedArray</var>.[[ContentType]] is <emu-const>BigInt</emu-const>, let <var>v</var> be ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-tobigint\">ToBigInt</a></emu-xref>(<var>value</var>).</li><li>Otherwise, let <var>v</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>value</var>).</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>elementType</var> be the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>offset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>Let <var>indexedPosition</var> be (<var>i</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Return <emu-xref aoid=\"GetModifySetValueInBuffer\"><a href=\"#sec-getmodifysetvalueinbuffer\">GetModifySetValueInBuffer</a></emu-xref>(<var>buffer</var>, <var>indexedPosition</var>, <var>elementType</var>, <var>v</var>, <var>op</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-set.prototype.entries": {"num": "23.2.3.5", "title": "#sec-set.prototype.entries Set.prototype.entries ( )", "html": "<emu-clause id=\"sec-set.prototype.entries\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set.prototype.entries\">#sec-set.prototype.entries</span> Set.prototype.entries ( )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"CreateSetIterator\"><a href=\"#sec-createsetiterator\">CreateSetIterator</a></emu-xref>(<var>S</var>, <emu-const>key+value</emu-const>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>For iteration purposes, a Set appears similar to a Map where each entry has the same value for its key and value.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-ecmascript-function-objects-construct-argumentslist-newtarget": {"num": "9.2.2", "title": "#sec-ecmascript-function-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )", "html": "<emu-clause id=\"sec-ecmascript-function-objects-construct-argumentslist-newtarget\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-function-objects-construct-argumentslist-newtarget\">#sec-ecmascript-function-objects-construct-argumentslist-newtarget</span> [[Construct]] ( <var>argumentsList</var>, <var>newTarget</var> )</h1>\n      <p>The [[Construct]] internal method for an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> <var>F</var> is called with parameters <var>argumentsList</var> and <var>newTarget</var>. <var>argumentsList</var> is a possibly empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values. The following steps are taken:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> is an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>newTarget</var>) is Object.</li><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>kind</var> be <var>F</var>.[[ConstructorKind]].</li><li>If <var>kind</var> is <emu-const>base</emu-const>, then<ol><li>Let <var>thisArgument</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(<var>newTarget</var>, <code>\"%Object.prototype%\"</code>).</li></ol></li><li>Let <var>calleeContext</var> be <emu-xref aoid=\"PrepareForOrdinaryCall\"><a href=\"#sec-prepareforordinarycall\">PrepareForOrdinaryCall</a></emu-xref>(<var>F</var>, <var>newTarget</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>calleeContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>kind</var> is <emu-const>base</emu-const>, perform <emu-xref aoid=\"OrdinaryCallBindThis\"><a href=\"#sec-ordinarycallbindthis\">OrdinaryCallBindThis</a></emu-xref>(<var>F</var>, <var>calleeContext</var>, <var>thisArgument</var>).</li><li>Let <var>constructorEnv</var> be the LexicalEnvironment of <var>calleeContext</var>.</li><li>Let <var>envRec</var> be <var>constructorEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"OrdinaryCallEvaluateBody\"><a href=\"#sec-ordinarycallevaluatebody\">OrdinaryCallEvaluateBody</a></emu-xref>(<var>F</var>, <var>argumentsList</var>).</li><li>Remove <var>calleeContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore <var>callerContext</var> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>result</var>.[[Type]] is <emu-const>return</emu-const>, then<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>result</var>.[[Value]]) is Object, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>result</var>.[[Value]]).</li><li>If <var>kind</var> is <emu-const>base</emu-const>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>thisArgument</var>).</li><li>If <var>result</var>.[[Value]] is not <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Else, <emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>result</var>).</li><li>Return ? <var>envRec</var>.GetThisBinding().\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-function-environment-records": {"num": "8.1.1.3", "title": "#sec-function-environment-records Function Environment Records", "html": "<emu-clause id=\"sec-function-environment-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-environment-records\">#sec-function-environment-records</span> Function Environment Records</h1>\n        <p>A  <dfn>function Environment Record</dfn> is a declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> that is used to represent the top-level scope of a function and, if the function is not an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, provides a <code>this</code> binding. If a function is not an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> function and references <code>super</code>, its function Environment Record also contains the state that is used to perform <code>super</code> method invocations from within the function.</p>\n        <p>Function Environment Records have the additional state fields listed in  <emu-xref href=\"#table-16\"><a href=\"#table-16\" class=\"excluded-xref\" excluded-id=\"table-16\">#table-16</a></emu-xref>.</p>\n        <emu-table id=\"table-16\" caption=\"Additional Fields of Function Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-16\">#table-16</span>: Additional Fields of Function Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              \n              </th>\n              <th>\n                Value\n              \n              </th>\n              <th>\n                Meaning\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[ThisValue]]\n              \n              </td>\n              <td>\n                Any\n              \n              </td>\n              <td>\n                This is the <emu-val>this</emu-val> value used for this invocation of the function.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ThisBindingStatus]]\n              \n              </td>\n              <td>\n                <emu-const>lexical</emu-const> | <emu-const>initialized</emu-const> | <emu-const>uninitialized</emu-const>\n              \n              </td>\n              <td>\n                If the value is <emu-const>lexical</emu-const>, this is an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> and does not have a local <emu-val>this</emu-val> value.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[FunctionObject]]\n              \n              </td>\n              <td>\n                Object\n              \n              </td>\n              <td>\n                The <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> whose invocation caused this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> to be created.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[HomeObject]]\n              \n              </td>\n              <td>\n                Object | <emu-val>undefined</emu-val>\n              \n              </td>\n              <td>\n                If the associated function has <code>super</code> property accesses and is not an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>, [[HomeObject]] is the object that the function is bound to as a method. The default value for [[HomeObject]] is <emu-val>undefined</emu-val>.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[NewTarget]]\n              \n              </td>\n              <td>\n                Object | <emu-val>undefined</emu-val>\n              \n              </td>\n              <td>\n                If this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> was created by the [[Construct]] internal method, [[NewTarget]] is the value of the [[Construct]] <var>newTarget</var> parameter. Otherwise, its value is <emu-val>undefined</emu-val>.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>Function Environment Records support all of the declarative <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref> methods listed in  <emu-xref href=\"#table-15\"><a href=\"#table-15\" class=\"excluded-xref\" excluded-id=\"table-15\">#table-15</a></emu-xref> and share the same specifications for all of those methods except for HasThisBinding and HasSuperBinding. In addition, function Environment Records support the methods listed in  <emu-xref href=\"#table-17\"><a href=\"#table-17\" class=\"excluded-xref\" excluded-id=\"table-17\">#table-17</a></emu-xref>:</p>\n        <emu-table id=\"table-17\" caption=\"Additional Methods of Function Environment Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-17\">#table-17</span>: Additional Methods of Function Environment Records</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Method\n              \n              </th>\n              <th>\n                Purpose\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                BindThisValue(V)\n              \n              </td>\n              <td>\n                Set the [[ThisValue]] and record that it has been initialized.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                GetThisBinding()\n              \n              </td>\n              <td>\n                Return the value of this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s <code>this</code> binding. Throws a <emu-val>ReferenceError</emu-val> if the <code>this</code> binding has not been initialized.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                GetSuperBase()\n              \n              </td>\n              <td>\n                Return the object that is the base for <code>super</code> property accesses bound in this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>. The object is derived from this <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>'s [[HomeObject]] field. The value <emu-val>undefined</emu-val> indicates that <code>super</code> property accesses will produce runtime errors.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>The behaviour of the additional concrete specification methods for function Environment Records is defined by the following algorithms:</p>\n\n        <div id=\"excluded-sec-bindthisvalue\"><h1><span class=\"secnum\">8.1.1.3.1</span>#sec-bindthisvalue BindThisValue ( V )</h1>...</div><div id=\"excluded-sec-function-environment-records-hasthisbinding\"><h1><span class=\"secnum\">8.1.1.3.2</span>#sec-function-environment-records-hasthisbinding HasThisBinding ( )</h1>...</div><div id=\"excluded-sec-function-environment-records-hassuperbinding\"><h1><span class=\"secnum\">8.1.1.3.3</span>#sec-function-environment-records-hassuperbinding HasSuperBinding ( )</h1>...</div><div id=\"excluded-sec-function-environment-records-getthisbinding\"><h1><span class=\"secnum\">8.1.1.3.4</span>#sec-function-environment-records-getthisbinding GetThisBinding ( )</h1>...</div><div id=\"excluded-sec-getsuperbase\"><h1><span class=\"secnum\">8.1.1.3.5</span>#sec-getsuperbase GetSuperBase ( )</h1>...</div></emu-clause>\n\n      "}, "sec-dataview.prototype.getint16": {"num": "24.3.4.10", "title": "#sec-dataview.prototype.getint16 DataView.prototype.getInt16 ( byteOffset [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.getint16\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.getint16\">#sec-dataview.prototype.getint16</span> DataView.prototype.getInt16 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>getInt16</code> method is called with argument <var>byteOffset</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"GetViewValue\"><a href=\"#sec-getviewvalue\">GetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <emu-const>Int16</emu-const>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-isunclampedintegerelementtype": {"num": "24.1.1.6", "title": "#sec-isunclampedintegerelementtype IsUnclampedIntegerElementType ( type )", "html": "<emu-clause id=\"sec-isunclampedintegerelementtype\" aoid=\"IsUnclampedIntegerElementType\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isunclampedintegerelementtype\">#sec-isunclampedintegerelementtype</span> IsUnclampedIntegerElementType ( <var>type</var> )</h1>\n        <p>The abstract operation IsUnclampedIntegerElementType verifies if the argument <var>type</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">Integer</a></emu-xref> TypedArray element type not including <emu-const>Uint8C</emu-const>. This operation performs the following steps:</p>\n        <emu-alg><ol><li>If <var>type</var> is <emu-const>Int8</emu-const>, <emu-const>Uint8</emu-const>, <emu-const>Int16</emu-const>, <emu-const>Uint16</emu-const>, <emu-const>Int32</emu-const>, or <emu-const>Uint32</emu-const>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-function-environment-records-getthisbinding": {"num": "8.1.1.3.4", "title": "#sec-function-environment-records-getthisbinding GetThisBinding ( )", "html": "<emu-clause id=\"sec-function-environment-records-getthisbinding\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-environment-records-getthisbinding\">#sec-function-environment-records-getthisbinding</span> GetThisBinding ( )</h1>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref> for which the method was invoked.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var>.[[ThisBindingStatus]] is not <emu-const>lexical</emu-const>.</li><li>If <var>envRec</var>.[[ThisBindingStatus]] is <emu-const>uninitialized</emu-const>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Return <var>envRec</var>.[[ThisValue]].\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-makeclassconstructor": {"num": "9.2.11", "title": "#sec-makeclassconstructor MakeClassConstructor ( F )", "html": "<emu-clause id=\"sec-makeclassconstructor\" aoid=\"MakeClassConstructor\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-makeclassconstructor\">#sec-makeclassconstructor</span> MakeClassConstructor ( <var>F</var> )</h1>\n      <p>The abstract operation MakeClassConstructor with argument <var>F</var> performs the following steps:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> is an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var>.[[FunctionKind]] is <emu-const>normal</emu-const>.</li><li>Set <var>F</var>.[[FunctionKind]] to <emu-const>classConstructor</emu-const>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-functionallocate": {"num": "9.2.3", "title": "#sec-functionallocate FunctionAllocate ( functionPrototype, functionKind )", "html": "<emu-clause id=\"sec-functionallocate\" aoid=\"FunctionAllocate\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-functionallocate\">#sec-functionallocate</span> FunctionAllocate ( <var>functionPrototype</var>, <var>functionKind</var> )</h1>\n      <p>The abstract operation FunctionAllocate requires the two arguments <var>functionPrototype</var> and <var>functionKind</var>. FunctionAllocate performs the following steps:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>functionPrototype</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>functionKind</var> is either <emu-const>normal</emu-const>, <emu-const>non-<emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref></emu-const>, <emu-const>generator</emu-const>, <emu-const>async</emu-const>, or <emu-const>asyncGenerator</emu-const>.</li><li>If <var>functionKind</var> is <emu-const>normal</emu-const>, let <var>needsConstruct</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>needsConstruct</var> be <emu-val>false</emu-val>.</li><li>If <var>functionKind</var> is <emu-const>non-<emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref></emu-const>, set <var>functionKind</var> to <emu-const>normal</emu-const>.</li><li>Let <var>F</var> be a newly created ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> with the internal slots listed in <emu-xref href=\"#table-27\"><a href=\"#table-27\" class=\"excluded-xref\" excluded-id=\"table-27\">#table-27</a></emu-xref>.</li><li>Set <var>F</var>'s essential internal methods to the default ordinary object definitions specified in <emu-xref href=\"#sec-ordinary-object-internal-methods-and-internal-slots\"><a href=\"#sec-ordinary-object-internal-methods-and-internal-slots\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-object-internal-methods-and-internal-slots\">#sec-ordinary-object-internal-methods-and-internal-slots</a></emu-xref>.</li><li>Set <var>F</var>.[[Call]] to the definition specified in <emu-xref href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\"><a href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects-call-thisargument-argumentslist\">#sec-ecmascript-function-objects-call-thisargument-argumentslist</a></emu-xref>.</li><li>If <var>needsConstruct</var> is <emu-val>true</emu-val>, then<ol><li>Set <var>F</var>.[[Construct]] to the definition specified in <emu-xref href=\"#sec-ecmascript-function-objects-construct-argumentslist-newtarget\"><a href=\"#sec-ecmascript-function-objects-construct-argumentslist-newtarget\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects-construct-argumentslist-newtarget\">#sec-ecmascript-function-objects-construct-argumentslist-newtarget</a></emu-xref>.</li><li>Set <var>F</var>.[[ConstructorKind]] to <emu-const>base</emu-const>.</li></ol></li><li>Set <var>F</var>.[[FunctionKind]] to <var>functionKind</var>.</li><li>Set <var>F</var>.[[Prototype]] to <var>functionPrototype</var>.</li><li>Set <var>F</var>.[[Extensible]] to <emu-val>true</emu-val>.</li><li>Set <var>F</var>.[[Realm]] to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-memory-model-fundamentals": {"num": "27.1", "title": "#sec-memory-model-fundamentals Memory Model Fundamentals", "html": "<emu-clause id=\"sec-memory-model-fundamentals\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-memory-model-fundamentals\">#sec-memory-model-fundamentals</span> Memory Model Fundamentals</h1>\n    <p>Shared memory accesses (reads and writes) are divided into two groups, atomic accesses and data accesses, defined below. Atomic accesses are sequentially consistent, i.e., there is a strict total ordering of events agreed upon by all agents in an <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref>. Non-atomic accesses do not have a strict total ordering agreed upon by all agents, i.e., unordered.</p>\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p>No orderings weaker than sequentially consistent and stronger than unordered, such as release-acquire, are supported.</p>\n    </div></emu-note>\n    <p>A  <dfn>Shared Data Block event</dfn> is either a  <dfn>ReadSharedMemory</dfn>,  <dfn>WriteSharedMemory</dfn>, or  <dfn>ReadModifyWriteSharedMemory</dfn> <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>.</p>\n\n    <emu-table id=\"table-readsharedmemory-fields\" caption=\"ReadSharedMemory Event Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-readsharedmemory-fields\">#table-readsharedmemory-fields</span>: <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> Event Fields</figcaption>\n      <table>\n        <tbody>\n          <tr>\n            <th>Field Name</th>\n            <th>Value</th>\n            <th>Meaning</th>\n          </tr>\n          <tr>\n            <td>[[Order]]</td>\n            <td><emu-const>SeqCst</emu-const> | <emu-const>Unordered</emu-const></td>\n            <td>The weakest ordering guaranteed by the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> for the event.</td>\n          </tr>\n          <tr>\n            <td>[[NoTear]]</td>\n            <td>A Boolean</td>\n            <td>Whether this event is allowed to read from multiple write events on equal range as this event.</td>\n          </tr>\n          <tr>\n            <td>[[Block]]</td>\n            <td>A <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref></td>\n            <td>The block the event operates on.</td>\n          </tr>\n          <tr>\n            <td>[[ByteIndex]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The byte address of the read in [[Block]].</td>\n          </tr>\n          <tr>\n            <td>[[ElementSize]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The size of the read.</td>\n          </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <emu-table id=\"table-writesharedmemory-fields\" caption=\"WriteSharedMemory Event Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-writesharedmemory-fields\">#table-writesharedmemory-fields</span>: <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> Event Fields</figcaption>\n      <table>\n        <tbody>\n          <tr>\n            <th>Field Name</th>\n            <th>Value</th>\n            <th>Meaning</th>\n          </tr>\n          <tr>\n            <td>[[Order]]</td>\n            <td><emu-const>SeqCst</emu-const> | <emu-const>Unordered</emu-const> | <emu-const>Init</emu-const></td>\n            <td>The weakest ordering guaranteed by the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> for the event.</td>\n          </tr>\n          <tr>\n            <td>[[NoTear]]</td>\n            <td>A Boolean</td>\n            <td>Whether this event is allowed to be read from multiple read events with equal range as this event.</td>\n          </tr>\n          <tr>\n            <td>[[Block]]</td>\n            <td>A <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref></td>\n            <td>The block the event operates on.</td>\n          </tr>\n          <tr>\n            <td>[[ByteIndex]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The byte address of the write in [[Block]].</td>\n          </tr>\n          <tr>\n            <td>[[ElementSize]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The size of the write.</td>\n          </tr>\n          <tr>\n            <td>[[Payload]]</td>\n            <td>A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref></td>\n            <td>The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values to be read by other events.</td>\n          </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <emu-table id=\"table-rmwsharedmemory-fields\" caption=\"ReadModifyWriteSharedMemory Event Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-rmwsharedmemory-fields\">#table-rmwsharedmemory-fields</span>: <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> Event Fields</figcaption>\n      <table>\n        <tbody>\n          <tr>\n            <th>Field Name</th>\n            <th>Value</th>\n            <th>Meaning</th>\n          </tr>\n          <tr>\n            <td>[[Order]]</td>\n            <td><emu-const>SeqCst</emu-const></td>\n            <td>Read-modify-write events are always sequentially consistent.</td>\n          </tr>\n          <tr>\n            <td>[[NoTear]]</td>\n            <td><emu-val>true</emu-val></td>\n            <td>Read-modify-write events cannot tear.</td>\n          </tr>\n          <tr>\n            <td>[[Block]]</td>\n            <td>A <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref></td>\n            <td>The block the event operates on.</td>\n          </tr>\n          <tr>\n            <td>[[ByteIndex]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The byte address of the read-modify-write in [[Block]].</td>\n          </tr>\n          <tr>\n            <td>[[ElementSize]]</td>\n            <td>A nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref></td>\n            <td>The size of the read-modify-write.</td>\n          </tr>\n          <tr>\n            <td>[[Payload]]</td>\n            <td>A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref></td>\n            <td>The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values to be passed to [[ModifyOp]].</td>\n          </tr>\n          <tr>\n            <td>[[ModifyOp]]</td>\n            <td>A semantic function</td>\n            <td>A pure semantic function that returns a modified <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values from a read <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values and [[Payload]].</td>\n          </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n\n    <p>These events are introduced by <emu-xref href=\"#sec-algorithm-conventions-abstract-operations\"><a href=\"#sec-algorithm-conventions-abstract-operations\">abstract operations</a></emu-xref> or by methods on the Atomics object.</p>\n    <p>Some operations may also introduce  <dfn>Synchronize</dfn> events. A  <dfn>Synchronize event</dfn> has no fields, and exists purely to directly constrain the permitted orderings of other events.</p>\n    <p>In addition to <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref> and Synchronize events, there are host-specific events.</p>\n    <p>Let the range of a ReadSharedMemory, WriteSharedMemory, or ReadModifyWriteSharedMemory event be the Set of contiguous integers from its [[ByteIndex]] to [[ByteIndex]] + [[ElementSize]] - 1. Two events' ranges are equal when the events have the same [[Block]], and the ranges are element-wise equal. Two events' ranges are overlapping when the events have the same [[Block]], the ranges are not equal and their intersection is non-empty. Two events' ranges are disjoint when the events do not have the same [[Block]] or their ranges are neither equal nor overlapping.</p>\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>Examples of host-specific synchronizing events that should be accounted for are: sending a SharedArrayBuffer from one <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> to another (e.g., by <code>postMessage</code> in a browser), starting and stopping agents, and communicating within the <emu-xref href=\"#sec-agent-clusters\"><a href=\"#sec-agent-clusters\">agent cluster</a></emu-xref> via channels other than shared memory. It is assumed those events are appended to <emu-xref aoid=\"agent-order\"><a href=\"#sec-agent-order\">agent-order</a></emu-xref> during evaluation like the other SharedArrayBuffer events.</p>\n    </div></emu-note>\n    <p>Events are ordered within candidate executions by the relations defined below.</p>\n  </emu-clause>\n\n  "}, "sec-stringpad": {"num": "21.1.3.15.1", "title": "#sec-stringpad Runtime Semantics: StringPad ( O, maxLength, fillString, placement )", "html": "<emu-clause id=\"sec-stringpad\" aoid=\"StringPad\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-stringpad\">#sec-stringpad</span> Runtime Semantics: StringPad ( <var>O</var>, <var>maxLength</var>, <var>fillString</var>, <var>placement</var> )</h1>\n          <p>When the abstract operation StringPad is called with arguments <var>O</var>, <var>maxLength</var>, <var>fillString</var>, and <var>placement</var>, the following steps are taken:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>placement</var> is <emu-const>start</emu-const> or <emu-const>end</emu-const>.</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>intMaxLength</var> be ?&#160;<emu-xref aoid=\"ToLength\"><a href=\"#sec-tolength\">ToLength</a></emu-xref>(<var>maxLength</var>).</li><li>Let <var>stringLength</var> be the length of <var>S</var>.</li><li>If <var>intMaxLength</var> is not greater than <var>stringLength</var>, return <var>S</var>.</li><li>If <var>fillString</var> is <emu-val>undefined</emu-val>, let <var>filler</var> be the String value consisting solely of the code unit 0x0020 (SPACE).</li><li>Else, let <var>filler</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>fillString</var>).</li><li>If <var>filler</var> is the empty String, return <var>S</var>.</li><li>Let <var>fillLen</var> be <var>intMaxLength</var> - <var>stringLength</var>.</li><li>Let <var>truncatedStringFiller</var> be the String value consisting of repeated concatenations of <var>filler</var> truncated to length <var>fillLen</var>.</li><li>If <var>placement</var> is <emu-const>start</emu-const>, return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>truncatedStringFiller</var> and <var>S</var>.</li><li>Else, return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>S</var> and <var>truncatedStringFiller</var>.\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>The argument <var>maxLength</var> will be clamped such that it can be no smaller than the length of <var>S</var>.</p>\n          </div></emu-note>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>The argument <var>fillString</var> defaults to <code>\" \"</code> (the String value consisting of the code unit 0x0020 SPACE).</p>\n          </div></emu-note>\n        </emu-clause>\n      "}, "sec-properties-of-array-iterator-instances": {"num": "22.1.5.3", "title": "#sec-properties-of-array-iterator-instances Properties of Array Iterator Instances", "html": "<emu-clause id=\"sec-properties-of-array-iterator-instances\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-array-iterator-instances\">#sec-properties-of-array-iterator-instances</span> Properties of Array Iterator Instances</h1>\n        <p>Array Iterator instances are ordinary objects that inherit properties from the <emu-xref href=\"#sec-%arrayiteratorprototype%-object\"><a href=\"#sec-%arrayiteratorprototype%-object\">%ArrayIteratorPrototype%</a></emu-xref> intrinsic object. Array Iterator instances are initially created with the internal slots listed in  <emu-xref href=\"#table-48\"><a href=\"#table-48\" class=\"excluded-xref\" excluded-id=\"table-48\">#table-48</a></emu-xref>.</p>\n        <emu-table id=\"table-48\" caption=\"Internal Slots of Array Iterator Instances\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-48\">#table-48</span>: Internal Slots of Array Iterator Instances</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Internal Slot\n              \n              </th>\n              <th>\n                Description\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[IteratedObject]]\n              \n              </td>\n              <td>\n                The object whose array elements are being iterated.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ArrayIteratorNextIndex]]\n              \n              </td>\n              <td>\n                The <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> of the next <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> to be examined by this iteration.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[ArrayIterationKind]]\n              \n              </td>\n              <td>\n                A String value that identifies what is returned for each element of the iteration. The possible values are: <emu-const>key</emu-const>, <emu-const>value</emu-const>, <emu-const>key+value</emu-const>.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n    "}, "sec-innermoduleevaluation": {"num": "15.2.1.16.2.1", "title": "#sec-innermoduleevaluation InnerModuleEvaluation ( module, stack, index )", "html": "<emu-clause id=\"sec-innermoduleevaluation\" aoid=\"InnerModuleEvaluation\">\n            <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-innermoduleevaluation\">#sec-innermoduleevaluation</span> InnerModuleEvaluation ( <var>module</var>, <var>stack</var>, <var>index</var> )</h1>\n\n            <p>The InnerModuleEvaluation abstract operation is used by Evaluate to perform the actual evaluation process for the <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> <var>module</var>, as well as recursively on all other modules in the dependency graph. The <var>stack</var> and <var>index</var> parameters, as well as <var>module</var>'s [[DFSIndex]] and [[DFSAncestorIndex]] fields, are used the same way as in <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>.</p>\n\n            <p>This abstract operation performs the following steps:</p>\n\n            <emu-alg><ol><li>If <var>module</var> is not a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li>Perform ? <var>module</var>.Evaluate().</li><li>Return <var>index</var>.</li></ol></li><li>If <var>module</var>.[[Status]] is <emu-const>evaluated</emu-const>, then<ol><li>If <var>module</var>.[[EvaluationError]] is <emu-val>undefined</emu-val>, return <var>index</var>.</li><li>Otherwise, return <var>module</var>.[[EvaluationError]].</li></ol></li><li>If <var>module</var>.[[Status]] is <emu-const>evaluating</emu-const>, return <var>index</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>linked</emu-const>.</li><li>Set <var>module</var>.[[Status]] to <emu-const>evaluating</emu-const>.</li><li>Set <var>module</var>.[[DFSIndex]] to <var>index</var>.</li><li>Set <var>module</var>.[[DFSAncestorIndex]] to <var>index</var>.</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>Append <var>module</var> to <var>stack</var>.</li><li>For each String <var>required</var> that is an element of <var>module</var>.[[RequestedModules]], do<ol><li>Let <var>requiredModule</var> be !&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>required</var>).</li><li>NOTE: Link must be completed successfully prior to invoking this method, so every requested module is guaranteed to resolve successfully.</li><li>Set <var>index</var> to ?&#160;<emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref>(<var>requiredModule</var>, <var>stack</var>, <var>index</var>).</li><li>If <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is either <emu-const>evaluating</emu-const> or <emu-const>evaluated</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is <emu-const>evaluating</emu-const> if and only if <var>requiredModule</var> is in <var>stack</var>.</li><li>If <var>requiredModule</var>.[[Status]] is <emu-const>evaluating</emu-const>, then<ol><li>Set <var>module</var>.[[DFSAncestorIndex]] to <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>module</var>.[[DFSAncestorIndex]], <var>requiredModule</var>.[[DFSAncestorIndex]]).</li></ol></li></ol></li></ol></li><li>Perform ? <var>module</var>.<emu-xref aoid=\"ExecuteModule\"><a href=\"#sec-source-text-module-record-execute-module\">ExecuteModule</a></emu-xref>().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> occurs exactly once in <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[DFSAncestorIndex]] is less than or equal to <var>module</var>.[[DFSIndex]].</li><li>If <var>module</var>.[[DFSAncestorIndex]] equals <var>module</var>.[[DFSIndex]], then<ol><li>Let <var>done</var> be <emu-val>false</emu-val>.</li><li>Repeat, while <var>done</var> is <emu-val>false</emu-val>,<ol><li>Let <var>requiredModule</var> be the last element in <var>stack</var>.</li><li>Remove the last element of <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>.</li><li>Set <var>requiredModule</var>.[[Status]] to <emu-const>evaluated</emu-const>.</li><li>If <var>requiredModule</var> and <var>module</var> are the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, set <var>done</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <var>index</var>.\n            </li></ol></emu-alg>\n          </emu-clause>\n        "}, "sec-map.prototype.keys": {"num": "23.1.3.8", "title": "#sec-map.prototype.keys Map.prototype.keys ( )", "html": "<emu-clause id=\"sec-map.prototype.keys\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype.keys\">#sec-map.prototype.keys</span> Map.prototype.keys ( )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"CreateMapIterator\"><a href=\"#sec-createmapiterator\">CreateMapIterator</a></emu-xref>(<var>M</var>, <emu-const>key</emu-const>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-dataview.prototype.getint8": {"num": "24.3.4.9", "title": "#sec-dataview.prototype.getint8 DataView.prototype.getInt8 ( byteOffset )", "html": "<emu-clause id=\"sec-dataview.prototype.getint8\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.getint8\">#sec-dataview.prototype.getint8</span> DataView.prototype.getInt8 ( <var>byteOffset</var> )</h1>\n        <p>When the <code>getInt8</code> method is called with argument <var>byteOffset</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"GetViewValue\"><a href=\"#sec-getviewvalue\">GetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <emu-val>true</emu-val>, <emu-const>Int8</emu-const>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-ordinarycallbindthis": {"num": "9.2.1.2", "title": "#sec-ordinarycallbindthis OrdinaryCallBindThis ( F, calleeContext, thisArgument )", "html": "<emu-clause id=\"sec-ordinarycallbindthis\" aoid=\"OrdinaryCallBindThis\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinarycallbindthis\">#sec-ordinarycallbindthis</span> OrdinaryCallBindThis ( <var>F</var>, <var>calleeContext</var>, <var>thisArgument</var> )</h1>\n        <p>When the abstract operation OrdinaryCallBindThis is called with <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> <var>F</var>, <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> <var>calleeContext</var>, and ECMAScript value <var>thisArgument</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>thisMode</var> be <var>F</var>.[[ThisMode]].</li><li>If <var>thisMode</var> is <emu-const>lexical</emu-const>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Let <var>calleeRealm</var> be <var>F</var>.[[Realm]].</li><li>Let <var>localEnv</var> be the LexicalEnvironment of <var>calleeContext</var>.</li><li>If <var>thisMode</var> is <emu-const>strict</emu-const>, let <var>thisValue</var> be <var>thisArgument</var>.</li><li>Else,<ol><li>If <var>thisArgument</var> is <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, then<ol><li>Let <var>globalEnv</var> be <var>calleeRealm</var>.[[GlobalEnv]].</li><li>Let <var>globalEnvRec</var> be <var>globalEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>globalEnvRec</var> is a global <emu-xref href=\"#sec-environment-records\"><a href=\"#sec-environment-records\">Environment Record</a></emu-xref>.</li><li>Let <var>thisValue</var> be <var>globalEnvRec</var>.[[GlobalThisValue]].</li></ol></li><li>Else,<ol><li>Let <var>thisValue</var> be !&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>thisArgument</var>).</li><li>NOTE: <emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref> produces wrapper objects using <var>calleeRealm</var>.</li></ol></li></ol></li><li>Let <var>envRec</var> be <var>localEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>envRec</var> is a <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The next step never returns an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> because <var>envRec</var>.[[ThisBindingStatus]] is not <emu-const>initialized</emu-const>.</li><li>Return <var>envRec</var>.BindThisValue(<var>thisValue</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-fulfillpromise": {"num": "25.6.1.4", "title": "#sec-fulfillpromise FulfillPromise ( promise, value )", "html": "<emu-clause id=\"sec-fulfillpromise\" aoid=\"FulfillPromise\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-fulfillpromise\">#sec-fulfillpromise</span> FulfillPromise ( <var>promise</var>, <var>value</var> )</h1>\n        <p>When the FulfillPromise abstract operation is called with arguments <var>promise</var> and <var>value</var>, the following steps are taken:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The value of <var>promise</var>.[[PromiseState]] is <emu-const>pending</emu-const>.</li><li>Let <var>reactions</var> be <var>promise</var>.[[PromiseFulfillReactions]].</li><li>Set <var>promise</var>.[[PromiseResult]] to <var>value</var>.</li><li>Set <var>promise</var>.[[PromiseFulfillReactions]] to <emu-val>undefined</emu-val>.</li><li>Set <var>promise</var>.[[PromiseRejectReactions]] to <emu-val>undefined</emu-val>.</li><li>Set <var>promise</var>.[[PromiseState]] to <emu-const>fulfilled</emu-const>.</li><li>Return <emu-xref aoid=\"TriggerPromiseReactions\"><a href=\"#sec-triggerpromisereactions\">TriggerPromiseReactions</a></emu-xref>(<var>reactions</var>, <var>value</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-string.prototype.trimstart": {"num": "21.1.3.30", "title": "#sec-string.prototype.trimstart String.prototype.trimStart ( )", "html": "<emu-clause id=\"sec-string.prototype.trimstart\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.trimstart\">#sec-string.prototype.trimstart</span> String.prototype.trimStart ( )</h1>\n        <p>This function interprets a String value as a sequence of UTF-16 encoded code points, as described in  <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>.</p>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"TrimString\"><a href=\"#sec-trimstring\">TrimString</a></emu-xref>(<var>S</var>, <emu-const>start</emu-const>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>trimStart</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-string.prototype.trim": {"num": "21.1.3.28", "title": "#sec-string.prototype.trim String.prototype.trim ( )", "html": "<emu-clause id=\"sec-string.prototype.trim\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.trim\">#sec-string.prototype.trim</span> String.prototype.trim ( )</h1>\n        <p>This function interprets a String value as a sequence of UTF-16 encoded code points, as described in  <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>.</p>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"TrimString\"><a href=\"#sec-trimstring\">TrimString</a></emu-xref>(<var>S</var>, <emu-const>start+end</emu-const>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>trim</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-trimstring\"><h1><span class=\"secnum\">21.1.3.28.1</span>#sec-trimstring Runtime Semantics: TrimString ( string, where )</h1>...</div></emu-clause>\n\n      "}, "sec-shared-memory-guidelines": {"num": "27.11", "title": "#sec-shared-memory-guidelines Shared Memory Guidelines", "html": "<emu-clause id=\"sec-shared-memory-guidelines\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-shared-memory-guidelines\">#sec-shared-memory-guidelines</span> Shared Memory Guidelines</h1>\n    <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n      <p>The following are guidelines for ECMAScript programmers working with shared memory.</p>\n      <p>We recommend programs be kept data race free, i.e., make it so that it is impossible for there to be concurrent non-atomic operations on the same memory location. Data race free programs have interleaving semantics where each step in the evaluation semantics of each <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> are interleaved with each other. For data race free programs, it is not necessary to understand the details of the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref>. The details are unlikely to build intuition that will help one to better write ECMAScript.</p>\n      <p>More generally, even if a program is not data race free it may have predictable behaviour, so long as atomic operations are not involved in any data races and the operations that race all have the same access size. The simplest way to arrange for atomics not to be involved in races is to ensure that different memory cells are used by atomic and non-atomic operations and that atomic accesses of different sizes are not used to access the same cells at the same time. Effectively, the program should treat shared memory as strongly typed as much as possible. One still cannot depend on the ordering and timing of non-atomic accesses that race, but if memory is treated as strongly typed the racing accesses will not \"tear\" (bits of their values will not be mixed).</p>\n    </div></emu-note>\n\n    <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n      <p>The following are guidelines for ECMAScript implementers writing compiler transformations for programs using shared memory.</p>\n      <p>It is desirable to allow most program transformations that are valid in a single-<emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> setting in a multi-<emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> setting, to ensure that the performance of each <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> in a multi-<emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> program is as good as it would be in a single-<emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> setting. Frequently these transformations are hard to judge. We outline some rules about program transformations that are intended to be taken as normative (in that they are implied by the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> or stronger than what the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> implies) but which are likely not exhaustive. These rules are intended to apply to program transformations that precede the introductions of the events that make up the <emu-xref aoid=\"agent-order\"><a href=\"#sec-agent-order\">agent-order</a></emu-xref>.</p>\n      <p>Let an  <dfn>agent-order slice</dfn> be the subset of the <emu-xref aoid=\"agent-order\"><a href=\"#sec-agent-order\">agent-order</a></emu-xref> pertaining to a single <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref>.</p>\n      <p>Let  <dfn>possible read values</dfn> of a read event be the set of all values of <emu-xref aoid=\"ValueOfReadEvent\"><a href=\"#sec-valueofreadevent\">ValueOfReadEvent</a></emu-xref> for that event across all valid executions.</p>\n      <p>Any transformation of an agent-order slice that is valid in the absence of shared memory is valid in the presence of shared memory, with the following exceptions.</p>\n      <ul>\n        <li>\n          <p><em>Atomics are carved in stone</em>: Program transformations must not cause the <emu-const>SeqCst</emu-const> events in an agent-order slice to be reordered with its <emu-const>Unordered</emu-const> operations, nor its <emu-const>SeqCst</emu-const> operations to be reordered with each other, nor may a program transformation remove a <emu-const>SeqCst</emu-const> operation from the <emu-xref aoid=\"agent-order\"><a href=\"#sec-agent-order\">agent-order</a></emu-xref>.</p>\n          <p>(In practice, the prohibition on reorderings forces a compiler to assume that every <emu-const>SeqCst</emu-const> operation is a synchronization and included in the final <emu-xref aoid=\"memory-order\"><a href=\"#sec-memory-order\">memory-order</a></emu-xref>, which it would usually have to assume anyway in the absence of inter-<emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> program analysis. It also forces the compiler to assume that every call where the callee's effects on the <emu-xref aoid=\"memory-order\"><a href=\"#sec-memory-order\">memory-order</a></emu-xref> are unknown may contain <emu-const>SeqCst</emu-const> operations.)</p>\n        </li>\n        <li>\n          <p><em>Reads must be stable</em>: Any given shared memory read must only observe a single value in an execution.</p>\n          <p>(For example, if what is semantically a single read in the program is executed multiple times then the program is subsequently allowed to observe only one of the values read. A transformation known as rematerialization can violate this rule.)</p>\n        </li>\n        <li>\n          <p><em>Writes must be stable</em>: All observable writes to shared memory must follow from program semantics in an execution.</p>\n          <p>(For example, a transformation may not introduce certain observable writes, such as by using read-modify-write operations on a larger location to write a smaller datum, writing a value to memory that the program could not have written, or writing a just-read value back to the location it was read from, if that location could have been overwritten by another <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> after the read.)</p>\n        </li>\n        <li>\n          <p><em>Possible read values must be nonempty</em>: Program transformations cannot cause the possible read values of a shared memory read to become empty.</p>\n          <p>(Counterintuitively, this rule in effect restricts transformations on writes, because writes have force in <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> insofar as to be read by read events. For example, writes may be moved and coalesced and sometimes reordered between two <emu-const>SeqCst</emu-const> operations, but the transformation may not remove every write that updates a location; some write must be preserved.)</p>\n        </li>\n      </ul>\n      <p>Examples of transformations that remain valid are: merging multiple non-atomic reads from the same location, reordering non-atomic reads, introducing speculative non-atomic reads, merging multiple non-atomic writes to the same location, reordering non-atomic writes to different locations, and hoisting non-atomic reads out of loops even if that affects termination. Note in general that aliased TypedArrays make it hard to prove that locations are different.</p>\n    </div></emu-note>\n\n    <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n      <p>The following are guidelines for ECMAScript implementers generating machine code for shared memory accesses.</p>\n      <p>For architectures with memory models no weaker than those of ARM or Power, non-atomic stores and loads may be compiled to bare stores and loads on the target architecture. Atomic stores and loads may be compiled down to instructions that guarantee sequential consistency. If no such instructions exist, memory barriers are to be employed, such as placing barriers on both sides of a bare store or load. Read-modify-write operations may be compiled to read-modify-write instructions on the target architecture, such as  <code>LOCK</code>-prefixed instructions on x86, load-exclusive/store-exclusive instructions on ARM, and load-link/store-conditional instructions on Power.</p>\n      <p>Specifically, the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> is intended to allow code generation as follows.</p>\n      <ul>\n        <li>Every atomic operation in the program is assumed to be necessary.</li>\n        <li>Atomic operations are never rearranged with each other or with non-atomic operations.</li>\n        <li>Functions are always assumed to perform atomic operations.</li>\n        <li>Atomic operations are never implemented as read-modify-write operations on larger data, but as non-lock-free atomics if the platform does not have atomic operations of the appropriate size. (We already assume that every platform has normal memory access operations of every interesting size.)</li>\n      </ul>\n      <p>Naive code generation uses these patterns:</p>\n      <ul>\n        <li>Regular loads and stores compile to single load and store instructions.</li>\n        <li>Lock-free atomic loads and stores compile to a full (sequentially consistent) fence, a regular load or store, and a full fence.</li>\n        <li>Lock-free atomic read-modify-write accesses compile to a full fence, an atomic read-modify-write instruction sequence, and a full fence.</li>\n        <li>Non-lock-free atomics compile to a spinlock acquire, a full fence, a series of non-atomic load and store instructions, a full fence, and a spinlock release.</li>\n      </ul>\n      <p>That mapping is correct so long as an atomic operation on an address range does not race with a non-atomic write or with an atomic operation of different size. However, that is all we need: the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> effectively demotes the atomic operations involved in a race to non-atomic status. On the other hand, the naive mapping is quite strong: it allows atomic operations to be used as sequentially consistent fences, which the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> does not actually guarantee.</p>\n      <p>A number of local improvements to those basic patterns are also intended to be legal:</p>\n      <ul>\n        <li>There are obvious platform-dependent improvements that remove redundant fences.  For example, on x86 the fences around lock-free atomic loads and stores can always be omitted except for the fence following a store, and no fence is needed for lock-free read-modify-write instructions, as these all use LOCK-prefixed instructions. On many platforms there are fences of several strengths, and weaker fences can be used in certain contexts without destroying sequential consistency.</li>\n        <li>Most modern platforms support lock-free atomics for all the data sizes required by ECMAScript atomics. Should non-lock-free atomics be needed, the fences surrounding the body of the atomic operation can usually be folded into the lock and unlock steps. The simplest solution for non-lock-free atomics is to have a single lock word per SharedArrayBuffer.</li>\n        <li>There are also more complicated platform-dependent local improvements, requiring some code analysis. For example, two back-to-back fences often have the same effect as a single fence, so if code is generated for two atomic operations in sequence, only a single fence need separate them.  On x86, even a single fence separating atomic stores can be omitted, as the fence following a store is only needed to separate the store from a subsequent load.</li>\n      </ul>\n    </div></emu-note>\n  </emu-clause>\n"}, "sec-createdynamicfunction": {"num": "19.2.1.1.1", "title": "#sec-createdynamicfunction Runtime Semantics: CreateDynamicFunction ( constructor, newTarget, kind, args )", "html": "<emu-clause id=\"sec-createdynamicfunction\" aoid=\"CreateDynamicFunction\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createdynamicfunction\">#sec-createdynamicfunction</span> Runtime Semantics: CreateDynamicFunction ( <var>constructor</var>, <var>newTarget</var>, <var>kind</var>, <var>args</var> )</h1>\n          <p>The abstract operation CreateDynamicFunction is called with arguments <var>constructor</var>, <var>newTarget</var>, <var>kind</var>, and <var>args</var>. <var>constructor</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> function that is performing this action, <var>newTarget</var> is the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> that <code>new</code> was initially applied to, <var>kind</var> is either <emu-const>normal</emu-const>, <emu-const>generator</emu-const>, <emu-const>async</emu-const>, or <emu-const>asyncGenerator</emu-const>, and <var>args</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the actual argument values that were passed to <var>constructor</var>. The following steps are taken:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> has at least two elements.</li><li>Let <var>callerContext</var> be the second to top element of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>.</li><li>Let <var>callerRealm</var> be <var>callerContext</var>'s <emu-xref href=\"#realm\"><a href=\"#realm\">Realm</a></emu-xref>.</li><li>Let <var>calleeRealm</var> be <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Perform ?&#160;<emu-xref aoid=\"HostEnsureCanCompileStrings\"><a href=\"#sec-hostensurecancompilestrings\">HostEnsureCanCompileStrings</a></emu-xref>(<var>callerRealm</var>, <var>calleeRealm</var>).</li><li>If <var>newTarget</var> is <emu-val>undefined</emu-val>, set <var>newTarget</var> to <var>constructor</var>.</li><li>If <var>kind</var> is <emu-const>normal</emu-const>, then<ol><li>Let <var>goal</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FunctionBody\">FunctionBody</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <code>\"%Function.prototype%\"</code>.</li></ol></li><li>Else if <var>kind</var> is <emu-const>generator</emu-const>, then<ol><li>Let <var>goal</var> be the grammar symbol <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"+Yield, ~Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <code>\"%Generator%\"</code>.</li></ol></li><li>Else if <var>kind</var> is <emu-const>async</emu-const>, then<ol><li>Let <var>goal</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"~Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[~Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <code>\"%AsyncFunction.prototype%\"</code>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>asyncGenerator</emu-const>.</li><li>Let <var>goal</var> be the grammar symbol <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>.</li><li>Let <var>parameterGoal</var> be the grammar symbol <emu-nt params=\"+Yield, +Await\"><a href=\"#prod-FormalParameters\">FormalParameters</a><emu-mods><emu-params>[+Yield, +Await]</emu-params></emu-mods></emu-nt>.</li><li>Let <var>fallbackProto</var> be <code>\"%AsyncGenerator%\"</code>.</li></ol></li><li>Let <var>argCount</var> be the number of elements in <var>args</var>.</li><li>Let <var>P</var> be the empty String.</li><li>If <var>argCount</var> = 0, let <var>bodyText</var> be the empty String.</li><li>Else if <var>argCount</var> = 1, let <var>bodyText</var> be <var>args</var>[0].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>argCount</var> &gt; 1.</li><li>Let <var>firstArg</var> be <var>args</var>[0].</li><li>Set <var>P</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>firstArg</var>).</li><li>Let <var>k</var> be 1.</li><li>Repeat, while <var>k</var> &lt; <var>argCount</var> - 1<ol><li>Let <var>nextArg</var> be <var>args</var>[<var>k</var>].</li><li>Let <var>nextArgString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>nextArg</var>).</li><li>Set <var>P</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the previous value of <var>P</var>, <code>\",\"</code> (a comma), and <var>nextArgString</var>.</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Let <var>bodyText</var> be <var>args</var>[<var>k</var>].</li></ol></li><li>Set <var>bodyText</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>bodyText</var>).</li><li>Perform the following substeps in an implementation-dependent order, possibly interleaving parsing and error detection:<ol><li>Let <var>parameters</var> be the result of parsing <var>P</var>, interpreted as UTF-16 encoded Unicode text as described in <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>, using <var>parameterGoal</var> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>. Throw a <emu-val>SyntaxError</emu-val> exception if the parse fails.</li><li>Let <var>body</var> be the result of parsing <var>bodyText</var>, interpreted as UTF-16 encoded Unicode text as described in <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>, using <var>goal</var> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref>. Throw a <emu-val>SyntaxError</emu-val> exception if the parse fails.</li><li>Let <var>strict</var> be ContainsUseStrict of <var>body</var>.</li><li>If any <emu-xref href=\"#sec-static-semantic-rules\"><a href=\"#sec-static-semantic-rules\">static semantics</a></emu-xref> errors are detected for <var>parameters</var> or <var>body</var>, throw a <emu-val>SyntaxError</emu-val> exception. If <var>strict</var> is <emu-val>true</emu-val>, the Early Error rules for <emu-grammar><emu-production name=\"UniqueFormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0218c6f5\"><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar> are applied.</li><li>If <var>strict</var> is <emu-val>true</emu-val> and IsSimpleParameterList of <var>parameters</var> is <emu-val>false</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If any element of the BoundNames of <var>parameters</var> also occurs in the LexicallyDeclaredNames of <var>body</var>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>body</var> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-SuperCall\">SuperCall</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>body</var> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-SuperProperty\">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>kind</var> is <emu-const>generator</emu-const> or <emu-const>asyncGenerator</emu-const>, then<ol><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>If <var>kind</var> is <emu-const>async</emu-const> or <emu-const>asyncGenerator</emu-const>, then<ol><li>If <var>parameters</var> Contains <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>If <var>strict</var> is <emu-val>true</emu-val>, then<ol><li>If BoundNames of <var>parameters</var> contains any duplicate elements, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li></ol></li><li>Let <var>proto</var> be ?&#160;<emu-xref aoid=\"GetPrototypeFromConstructor\"><a href=\"#sec-getprototypefromconstructor\">GetPrototypeFromConstructor</a></emu-xref>(<var>newTarget</var>, <var>fallbackProto</var>).</li><li>Let <var>F</var> be <emu-xref aoid=\"FunctionAllocate\"><a href=\"#sec-functionallocate\">FunctionAllocate</a></emu-xref>(<var>proto</var>, <var>kind</var>).</li><li>Let <var>realmF</var> be <var>F</var>.[[Realm]].</li><li>Let <var>scope</var> be <var>realmF</var>.[[GlobalEnv]].</li><li>Perform <emu-xref aoid=\"FunctionInitialize\"><a href=\"#sec-functioninitialize\">FunctionInitialize</a></emu-xref>(<var>F</var>, <emu-const>Normal</emu-const>, <var>parameters</var>, <var>body</var>, <var>scope</var>).</li><li>If <var>kind</var> is <emu-const>generator</emu-const>, then<ol><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%Generator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <code>\"prototype\"</code>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <emu-const>asyncGenerator</emu-const>, then<ol><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%AsyncGenerator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <code>\"prototype\"</code>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li><li>Else if <var>kind</var> is <emu-const>normal</emu-const>, perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>NOTE: Async functions are not constructable and do not have a [[Construct]] internal method or a <code>\"prototype\"</code> property.</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <code>\"anonymous\"</code>).</li><li>Let <var>prefix</var> be the prefix associated with <var>kind</var> in <emu-xref href=\"#table-dynamic-function-sourcetext-prefixes\"><a href=\"#table-dynamic-function-sourcetext-prefixes\" class=\"excluded-xref\" excluded-id=\"table-dynamic-function-sourcetext-prefixes\">#table-dynamic-function-sourcetext-prefixes</a></emu-xref>.</li><li>Let <var>sourceText</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>prefix</var>, <code>\" anonymous(\"</code>, <var>P</var>, 0x000A (LINE FEED), <code>\") {\"</code>, 0x000A (LINE FEED), <var>bodyText</var>, 0x000A (LINE FEED), and <code>\"}\"</code>.</li><li>Set <var>F</var>.[[SourceText]] to <var>sourceText</var>.</li><li>Return <var>F</var>.\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>A <code>\"prototype\"</code> property is created for every non-async function created using CreateDynamicFunction to provide for the possibility that the function will be used as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</p>\n          </div></emu-note>\n\n          <emu-table id=\"table-dynamic-function-sourcetext-prefixes\" caption=\"Dynamic Function SourceText Prefixes\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-dynamic-function-sourcetext-prefixes\">#table-dynamic-function-sourcetext-prefixes</span>: Dynamic Function SourceText Prefixes</figcaption>\n            <table>\n              <tbody>\n                <tr><th>Kind</th><th>Prefix</th></tr>\n                <tr><td><emu-const>normal</emu-const></td><td><code>\"function\"</code></td></tr>\n                <tr><td><emu-const>generator</emu-const></td><td><code>\"function*\"</code></td></tr>\n                <tr><td><emu-const>async</emu-const></td><td><code>\"async function\"</code></td></tr>\n                <tr><td><emu-const>asyncGenerator</emu-const></td><td><code>\"async function*\"</code></td></tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </emu-clause>\n      "}, "sec-dataview.prototype.setint16": {"num": "24.3.4.20", "title": "#sec-dataview.prototype.setint16 DataView.prototype.setInt16 ( byteOffset, value [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.setint16\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.setint16\">#sec-dataview.prototype.setint16</span> DataView.prototype.setInt16 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>setInt16</code> method is called with arguments <var>byteOffset</var> and <var>value</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"SetViewValue\"><a href=\"#sec-setviewvalue\">SetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <emu-const>Int16</emu-const>, <var>value</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-newfunctionenvironment": {"num": "8.1.2.4", "title": "#sec-newfunctionenvironment NewFunctionEnvironment ( F, newTarget )", "html": "<emu-clause id=\"sec-newfunctionenvironment\" aoid=\"NewFunctionEnvironment\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-newfunctionenvironment\">#sec-newfunctionenvironment</span> NewFunctionEnvironment ( <var>F</var>, <var>newTarget</var> )</h1>\n        <p>When the abstract operation NewFunctionEnvironment is called with arguments <var>F</var> and <var>newTarget</var> the following steps are performed:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> is an ECMAScript function.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>newTarget</var>) is Undefined or Object.</li><li>Let <var>env</var> be a new <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref>.</li><li>Let <var>envRec</var> be a new <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref> containing no bindings.</li><li>Set <var>envRec</var>.[[FunctionObject]] to <var>F</var>.</li><li>If <var>F</var>.[[ThisMode]] is <emu-const>lexical</emu-const>, set <var>envRec</var>.[[ThisBindingStatus]] to <emu-const>lexical</emu-const>.</li><li>Else, set <var>envRec</var>.[[ThisBindingStatus]] to <emu-const>uninitialized</emu-const>.</li><li>Let <var>home</var> be <var>F</var>.[[HomeObject]].</li><li>Set <var>envRec</var>.[[HomeObject]] to <var>home</var>.</li><li>Set <var>envRec</var>.[[NewTarget]] to <var>newTarget</var>.</li><li>Set <var>env</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref> to <var>envRec</var>.</li><li>Set the outer lexical environment reference of <var>env</var> to <var>F</var>.[[Environment]].</li><li>Return <var>env</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-generatorstart": {"num": "25.4.3.1", "title": "#sec-generatorstart GeneratorStart ( generator, generatorBody )", "html": "<emu-clause id=\"sec-generatorstart\" aoid=\"GeneratorStart\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorstart\">#sec-generatorstart</span> GeneratorStart ( <var>generator</var>, <var>generatorBody</var> )</h1>\n        <p>The abstract operation GeneratorStart with arguments <var>generator</var> and <var>generatorBody</var> performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The value of <var>generator</var>.[[GeneratorState]] is <emu-val>undefined</emu-val>.</li><li>Let <var>genContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the Generator component of <var>genContext</var> to <var>generator</var>.</li><li>Set the code evaluation state of <var>genContext</var> such that when evaluation is resumed for that <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> the following steps will be performed:<ol><li>Let <var>result</var> be the result of evaluating <var>generatorBody</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If we return here, the generator either threw an exception or performed either an implicit or explicit return.</li><li>Remove <var>genContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>completed</emu-const>.</li><li>Once a generator enters the <emu-const>completed</emu-const> state it never leaves it and its associated <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is never resumed. Any execution state associated with <var>generator</var> can be discarded at this point.</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, let <var>resultValue</var> be <emu-val>undefined</emu-val>.</li><li>Else if <var>result</var>.[[Type]] is <emu-const>return</emu-const>, let <var>resultValue</var> be <var>result</var>.[[Value]].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>result</var>.[[Type]] is <emu-const>throw</emu-const>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).</li></ol></li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>resultValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Set <var>generator</var>.[[GeneratorContext]] to <var>genContext</var>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>suspendedStart</emu-const>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-built-in-function-objects": {"num": "9.3", "title": "#sec-built-in-function-objects Built-in Function Objects", "html": "<emu-clause id=\"sec-built-in-function-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-built-in-function-objects\">#sec-built-in-function-objects</span> Built-in Function Objects</h1>\n    <p>The built-in function objects defined in this specification may be implemented as either ECMAScript function objects (<emu-xref href=\"#sec-ecmascript-function-objects\"><a href=\"#sec-ecmascript-function-objects\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects\">#sec-ecmascript-function-objects</a></emu-xref>) whose behaviour is provided using ECMAScript code or as implementation provided function exotic objects whose behaviour is provided in some other manner. In either case, the effect of calling such functions must conform to their specifications. An implementation may also provide additional built-in function objects that are not defined in this specification.</p>\n    <p>If a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is implemented as an <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> it must have the ordinary object behaviour specified in  <emu-xref href=\"#sec-ordinary-object-internal-methods-and-internal-slots\"><a href=\"#sec-ordinary-object-internal-methods-and-internal-slots\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-object-internal-methods-and-internal-slots\">#sec-ordinary-object-internal-methods-and-internal-slots</a></emu-xref>. All such function exotic objects also have [[Prototype]], [[Extensible]], [[Realm]], and [[ScriptOrModule]] internal slots.</p>\n    <p>Unless otherwise specified every built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has the <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref> object as the initial value of its [[Prototype]] internal slot.</p>\n    <p>The behaviour specified for each built-in function via algorithm steps or other means is the specification of the function body behaviour for both [[Call]] and [[Construct]] invocations of the function. However, [[Construct]] invocation is not supported by all built-in functions. For each built-in function, when invoked with [[Call]], the [[Call]] <var>thisArgument</var> provides the <emu-val>this</emu-val> value, the [[Call]] <var>argumentsList</var> provides the named parameters, and the NewTarget value is <emu-val>undefined</emu-val>. When invoked with [[Construct]], the <emu-val>this</emu-val> value is uninitialized, the [[Construct]] <var>argumentsList</var> provides the named parameters, and the [[Construct]] <var>newTarget</var> parameter provides the NewTarget value. If the built-in function is implemented as an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> then this specified behaviour must be implemented by the ECMAScript code that is the body of the function. Built-in functions that are ECMAScript function objects must be strict functions. If a built-in <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> has any [[Call]] behaviour other than throwing a <emu-val>TypeError</emu-val> exception, an ECMAScript implementation of the function must be done in a manner that does not cause the function's [[FunctionKind]] internal slot to have the value <emu-const>classConstructor</emu-const>.</p>\n    <p>Built-in function objects that are not identified as constructors do not implement the [[Construct]] internal method unless otherwise specified in the description of a particular function. When a built-in <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is called as part of a <code>new</code> expression the <var>argumentsList</var> parameter of the invoked [[Construct]] internal method provides the values for the built-in <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>'s named parameters.</p>\n    <p>Built-in functions that are not constructors do not have a <code>\"prototype\"</code> property unless otherwise specified in the description of a particular function.</p>\n    <p>If a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is not implemented as an ECMAScript function it must provide [[Call]] and [[Construct]] internal methods that conform to the following definitions:</p>\n\n    <div id=\"excluded-sec-built-in-function-objects-call-thisargument-argumentslist\"><h1><span class=\"secnum\">9.3.1</span>#sec-built-in-function-objects-call-thisargument-argumentslist [[Call]] ( thisArgument, argumentsList )</h1>...</div><div id=\"excluded-sec-built-in-function-objects-construct-argumentslist-newtarget\"><h1><span class=\"secnum\">9.3.2</span>#sec-built-in-function-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )</h1>...</div><div id=\"excluded-sec-createbuiltinfunction\"><h1><span class=\"secnum\">9.3.3</span>#sec-createbuiltinfunction CreateBuiltinFunction ( steps, internalSlotsList [ , realm [ , prototype ] ] )</h1>...</div></emu-clause>\n\n  "}, "sec-rejectpromise": {"num": "25.6.1.7", "title": "#sec-rejectpromise RejectPromise ( promise, reason )", "html": "<emu-clause id=\"sec-rejectpromise\" aoid=\"RejectPromise\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-rejectpromise\">#sec-rejectpromise</span> RejectPromise ( <var>promise</var>, <var>reason</var> )</h1>\n        <p>When the RejectPromise abstract operation is called with arguments <var>promise</var> and <var>reason</var>, the following steps are taken:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The value of <var>promise</var>.[[PromiseState]] is <emu-const>pending</emu-const>.</li><li>Let <var>reactions</var> be <var>promise</var>.[[PromiseRejectReactions]].</li><li>Set <var>promise</var>.[[PromiseResult]] to <var>reason</var>.</li><li>Set <var>promise</var>.[[PromiseFulfillReactions]] to <emu-val>undefined</emu-val>.</li><li>Set <var>promise</var>.[[PromiseRejectReactions]] to <emu-val>undefined</emu-val>.</li><li>Set <var>promise</var>.[[PromiseState]] to <emu-const>rejected</emu-const>.</li><li>If <var>promise</var>.[[PromiseIsHandled]] is <emu-val>false</emu-val>, perform <emu-xref aoid=\"HostPromiseRejectionTracker\"><a href=\"#sec-host-promise-rejection-tracker\">HostPromiseRejectionTracker</a></emu-xref>(<var>promise</var>, <code>\"reject\"</code>).</li><li>Return <emu-xref aoid=\"TriggerPromiseReactions\"><a href=\"#sec-triggerpromisereactions\">TriggerPromiseReactions</a></emu-xref>(<var>reactions</var>, <var>reason</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-%setiteratorprototype%.next": {"num": "23.2.5.2.1", "title": "#sec-%setiteratorprototype%.next %SetIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%setiteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%setiteratorprototype%.next\">#sec-%setiteratorprototype%.next</span> %SetIteratorPrototype%.next ( )</h1>\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>O</var> does not have all of the internal slots of a Set Iterator Instance (<emu-xref href=\"#sec-properties-of-set-iterator-instances\"><a href=\"#sec-properties-of-set-iterator-instances\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-set-iterator-instances\">#sec-properties-of-set-iterator-instances</a></emu-xref>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>s</var> be <var>O</var>.[[IteratedSet]].</li><li>Let <var>index</var> be <var>O</var>.[[SetNextIndex]].</li><li>Let <var>itemKind</var> be <var>O</var>.[[SetIterationKind]].</li><li>If <var>s</var> is <emu-val>undefined</emu-val>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>s</var> has a [[SetData]] internal slot.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>s</var>.[[SetData]].</li><li>Let <var>numEntries</var> be the number of elements of <var>entries</var>.</li><li>NOTE: <var>numEntries</var> must be redetermined each time this method is evaluated.</li><li>Repeat, while <var>index</var> is less than <var>numEntries</var>,<ol><li>Let <var>e</var> be <var>entries</var>[<var>index</var>].</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>Set <var>O</var>.[[SetNextIndex]] to <var>index</var>.</li><li>If <var>e</var> is not <emu-const>empty</emu-const>, then<ol><li>If <var>itemKind</var> is <emu-const>key+value</emu-const>, then<ol><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>e</var>, <var>e</var> &#187;), <emu-val>false</emu-val>).</li></ol></li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>e</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li><li>Set <var>O</var>.[[IteratedSet]] to <emu-val>undefined</emu-val>.</li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-%typedarray%.prototype.fill": {"num": "22.2.3.8", "title": "#sec-%typedarray%.prototype.fill %TypedArray%.prototype.fill ( value [ , start [ , end ] ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.fill\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.fill\">#sec-%typedarray%.prototype.fill</span> %TypedArray%.prototype.fill ( <var>value</var> [ , <var>start</var> [ , <var>end</var> ] ] )</h1>\n        <p>The interpretation and use of the arguments of <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.fill</code> are the same as for <code>Array.prototype.fill</code> as defined in  <emu-xref href=\"#sec-array.prototype.fill\"><a href=\"#sec-array.prototype.fill\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.fill\">#sec-array.prototype.fill</a></emu-xref>.</p>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Let <var>len</var> be <var>O</var>.[[ArrayLength]].</li><li>If <var>O</var>.[[ContentType]] is <emu-const>BigInt</emu-const>, set <var>value</var> to ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-tobigint\">ToBigInt</a></emu-xref>(<var>value</var>).</li><li>Otherwise, set <var>value</var> to ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>value</var>).</li><li>Let <var>relativeStart</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>start</var>).</li><li>If <var>relativeStart</var> &lt; 0, let <var>k</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeStart</var>), 0); else let <var>k</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeStart</var>, <var>len</var>).</li><li>If <var>end</var> is <emu-val>undefined</emu-val>, let <var>relativeEnd</var> be <var>len</var>; else let <var>relativeEnd</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>end</var>).</li><li>If <var>relativeEnd</var> &lt; 0, let <var>final</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeEnd</var>), 0); else let <var>final</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeEnd</var>, <var>len</var>).</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>O</var>.[[ViewedArrayBuffer]]) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Repeat, while <var>k</var> &lt; <var>final</var><ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Perform !&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>Pk</var>, <var>value</var>, <emu-val>true</emu-val>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <var>O</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.set-array-offset": {"num": "22.2.3.23.1", "title": "#sec-%typedarray%.prototype.set-array-offset %TypedArray%.prototype.set ( array [ , offset ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.set-array-offset\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.set-array-offset\">#sec-%typedarray%.prototype.set-array-offset</span> %TypedArray%.prototype.set ( <var>array</var> [ , <var>offset</var> ] )</h1>\n          <p>Sets multiple values in this <var>TypedArray</var>, reading the values from the object <var>array</var>. The optional <var>offset</var> value indicates the first element index in this <var>TypedArray</var> where values are written. If omitted, it is assumed to be 0.</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>array</var> is any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> other than an Object with a [[TypedArrayName]] internal slot. If it is such an Object, the definition in <emu-xref href=\"#sec-%typedarray%.prototype.set-typedarray-offset\"><a href=\"#sec-%typedarray%.prototype.set-typedarray-offset\" class=\"excluded-xref\" excluded-id=\"sec-%typedarray%.prototype.set-typedarray-offset\">#sec-%typedarray%.prototype.set-typedarray-offset</a></emu-xref> applies.</li><li>Let <var>target</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>target</var>, [[TypedArrayName]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>target</var> has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>targetOffset</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>offset</var>).</li><li>If <var>targetOffset</var> &lt; 0, throw a <emu-val>RangeError</emu-val> exception.</li><li>Let <var>targetBuffer</var> be <var>target</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>targetBuffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>targetLength</var> be <var>target</var>.[[ArrayLength]].</li><li>Let <var>targetName</var> be the String value of <var>target</var>.[[TypedArrayName]].</li><li>Let <var>targetElementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>targetName</var>.</li><li>Let <var>targetType</var> be the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>targetName</var>.</li><li>Let <var>targetByteOffset</var> be <var>target</var>.[[ByteOffset]].</li><li>Let <var>src</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>array</var>).</li><li>Let <var>srcLength</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>src</var>).</li><li>If <var>srcLength</var> + <var>targetOffset</var> &gt; <var>targetLength</var>, throw a <emu-val>RangeError</emu-val> exception.</li><li>Let <var>targetByteIndex</var> be <var>targetOffset</var> &#215; <var>targetElementSize</var> + <var>targetByteOffset</var>.</li><li>Let <var>k</var> be 0.</li><li>Let <var>limit</var> be <var>targetByteIndex</var> + <var>targetElementSize</var> &#215; <var>srcLength</var>.</li><li>Repeat, while <var>targetByteIndex</var> &lt; <var>limit</var><ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>src</var>, <var>Pk</var>).</li><li>If <var>target</var>.[[ContentType]] is <emu-const>BigInt</emu-const>, set <var>value</var> to ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-tobigint\">ToBigInt</a></emu-xref>(<var>value</var>).</li><li>Otherwise, set <var>value</var> to ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>value</var>).</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>targetBuffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>targetBuffer</var>, <var>targetByteIndex</var>, <var>targetType</var>, <var>value</var>, <emu-val>true</emu-val>, <emu-const>Unordered</emu-const>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li><li>Set <var>targetByteIndex</var> to <var>targetByteIndex</var> + <var>targetElementSize</var>.</li></ol></li><li>Return <emu-val>undefined</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-dataview.prototype.getbiguint64": {"num": "24.3.4.6", "title": "#sec-dataview.prototype.getbiguint64 DataView.prototype.getBigUint64 ( byteOffset [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.getbiguint64\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.getbiguint64\">#sec-dataview.prototype.getbiguint64</span> DataView.prototype.getBigUint64 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>getBigUint64</code> method is called with argument <var>byteOffset</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>undefined</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"GetViewValue\"><a href=\"#sec-getviewvalue\">GetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <emu-const>BigUint64</emu-const>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-data-races": {"num": "27.9", "title": "#sec-data-races Data Races", "html": "<emu-clause id=\"sec-data-races\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-data-races\">#sec-data-races</span> Data Races</h1>\n    <p>For an execution <var>execution</var>, two events <var>E</var> and <var>D</var> in <emu-xref aoid=\"SharedDataBlockEventSet\"><a href=\"#sec-sharedatablockeventset\">SharedDataBlockEventSet</a></emu-xref>(<var>execution</var>) are in a data race if the following abstract operation returns <emu-val>true</emu-val>.</p>\n    <emu-alg><ol><li>If <var>E</var> and <var>D</var> are in a race in <var>execution</var>, then<ol><li>If <var>E</var>.[[Order]] is not <emu-const>SeqCst</emu-const> or <var>D</var>.[[Order]] is not <emu-const>SeqCst</emu-const>, then<ol><li>Return <emu-val>true</emu-val>.</li></ol></li><li>If <var>E</var> and <var>D</var> have overlapping ranges, then<ol><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <emu-val>false</emu-val>.\n    </li></ol></emu-alg>\n  </emu-clause>\n\n  "}, "sec-isunsignedelementtype": {"num": "24.1.1.5", "title": "#sec-isunsignedelementtype IsUnsignedElementType ( type )", "html": "<emu-clause id=\"sec-isunsignedelementtype\" aoid=\"IsUnsignedElementType\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isunsignedelementtype\">#sec-isunsignedelementtype</span> IsUnsignedElementType ( <var>type</var> )</h1>\n        <p>The abstract operation IsUnsignedElementType verifies if the argument <var>type</var> is an unsigned TypedArray element type. This operation performs the following steps:</p>\n        <emu-alg><ol><li>If <var>type</var> is <emu-const>Uint8</emu-const>, <emu-const>Uint8C</emu-const>, <emu-const>Uint16</emu-const>, <emu-const>Uint32</emu-const>, or <emu-const>BigUint64</emu-const>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-getmodulenamespace": {"num": "15.2.1.21", "title": "#sec-getmodulenamespace Runtime Semantics: GetModuleNamespace ( module )", "html": "<emu-clause id=\"sec-getmodulenamespace\" aoid=\"GetModuleNamespace\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getmodulenamespace\">#sec-getmodulenamespace</span> Runtime Semantics: GetModuleNamespace ( <var>module</var> )</h1>\n\n        <p>The GetModuleNamespace abstract operation retrieves the Module Namespace <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">Exotic object</a></emu-xref> representing <var>module</var>'s exports, lazily creating it the first time it was requested, and storing it in <var>module</var>.[[Namespace]] for future retrieval.</p>\n\n        <p>This abstract operation performs the following steps:</p>\n\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> is an instance of a concrete subclass of <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If <var>module</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then <var>module</var>.[[Status]] is not <emu-const>unlinked</emu-const>.</li><li>Let <var>namespace</var> be <var>module</var>.[[Namespace]].</li><li>If <var>namespace</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>exportedNames</var> be ? <var>module</var>.GetExportedNames().</li><li>Let <var>unambiguousNames</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <var>name</var> that is an element of <var>exportedNames</var>, do<ol><li>Let <var>resolution</var> be ? <var>module</var>.ResolveExport(<var>name</var>).</li><li>If <var>resolution</var> is a <emu-xref href=\"#resolvedbinding-record\"><a href=\"#resolvedbinding-record\">ResolvedBinding Record</a></emu-xref>, append <var>name</var> to <var>unambiguousNames</var>.</li></ol></li><li>Set <var>namespace</var> to <emu-xref aoid=\"ModuleNamespaceCreate\"><a href=\"#sec-modulenamespacecreate\">ModuleNamespaceCreate</a></emu-xref>(<var>module</var>, <var>unambiguousNames</var>).</li></ol></li><li>Return <var>namespace</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The only way GetModuleNamespace can throw is via one of the triggered <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> calls. Unresolvable names are simply excluded from the namespace at this point. They will lead to a real linking error later unless they are all ambiguous star exports that are not explicitly requested anywhere.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-moduleevaluation": {"num": "15.2.1.16.2", "title": "#sec-moduleevaluation Evaluate ( ) Concrete Method", "html": "<emu-clause id=\"sec-moduleevaluation\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-moduleevaluation\">#sec-moduleevaluation</span> Evaluate ( ) Concrete Method</h1>\n\n          <p>The Evaluate concrete method of a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> implements the corresponding <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> abstract method.</p>\n          <p>Evaluate transitions this module's [[Status]] from <emu-const>linked</emu-const> to <emu-const>evaluated</emu-const>.</p>\n\n          <p>If execution results in an exception, that exception is recorded in the [[EvaluationError]] field and rethrown by future invocations of Evaluate.</p>\n\n          <p>This abstract method performs the following steps (most of the work is done by the auxiliary function <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref>):</p>\n\n          <emu-alg><ol><li>Let <var>module</var> be this <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>linked</emu-const> or <emu-const>evaluated</emu-const>.</li><li>Let <var>stack</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref>(<var>module</var>, <var>stack</var>, 0).</li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>For each <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> <var>m</var> in <var>stack</var>, do<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>m</var>.[[Status]] is <emu-const>evaluating</emu-const>.</li><li>Set <var>m</var>.[[Status]] to <emu-const>evaluated</emu-const>.</li><li>Set <var>m</var>.[[EvaluationError]] to <var>result</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>evaluated</emu-const> and <var>module</var>.[[EvaluationError]] is <var>result</var>.</li><li>Return <var>result</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>evaluated</emu-const> and <var>module</var>.[[EvaluationError]] is <emu-val>undefined</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>stack</var> is empty.</li><li>Return <emu-val>undefined</emu-val>.\n          </li></ol></emu-alg>\n\n          <div id=\"excluded-sec-innermoduleevaluation\"><h1><span class=\"secnum\">15.2.1.16.2.1</span>#sec-innermoduleevaluation InnerModuleEvaluation ( module, stack, index )</h1>...</div></emu-clause>\n\n        "}, "sec-isbigintelementtype": {"num": "24.1.1.7", "title": "#sec-isbigintelementtype IsBigIntElementType ( type )", "html": "<emu-clause id=\"sec-isbigintelementtype\" aoid=\"IsBigIntElementType\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isbigintelementtype\">#sec-isbigintelementtype</span> IsBigIntElementType ( <var>type</var> )</h1>\n        <p>The abstract operation IsBigIntElementType verifies if the argument <var>type</var> is a BigInt TypedArray element type. This operation performs the following steps:</p>\n        <emu-alg><ol><li>If <var>type</var> is <emu-const>BigUint64</emu-const> or <emu-const>BigInt64</emu-const>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-async-function-constructor-arguments": {"num": "25.7.1.1", "title": "#sec-async-function-constructor-arguments AsyncFunction ( p1, p2, \u2026 , pn, body )", "html": "<emu-clause id=\"sec-async-function-constructor-arguments\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-constructor-arguments\">#sec-async-function-constructor-arguments</span> AsyncFunction ( <var>p1</var>, <var>p2</var>, &#8230; , <var>pn</var>, <var>body</var> )</h1>\n\n        <p>The last argument specifies the body (executable code) of an async function. Any preceding arguments specify formal parameters.</p>\n\n        <p>When the <code>AsyncFunction</code> function is called with some arguments <var>p1</var>, <var>p2</var>, &#8230; , <var>pn</var>, <var>body</var> (where <var>n</var> might be 0, that is, there are no <var>p</var> arguments, and where <var>body</var> might also not be provided), the following steps are taken:</p>\n\n        <emu-alg><ol><li>Let <var>C</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>args</var> be the <var>argumentsList</var> that was passed to this function by [[Call]] or [[Construct]].</li><li>Return <emu-xref aoid=\"CreateDynamicFunction\"><a href=\"#sec-createdynamicfunction\">CreateDynamicFunction</a></emu-xref>(<var>C</var>, NewTarget, <emu-const>async</emu-const>, <var>args</var>).\n        </li></ol></emu-alg>\n\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">See NOTE for  <emu-xref href=\"#sec-function-p1-p2-pn-body\"><a href=\"#sec-function-p1-p2-pn-body\" class=\"excluded-xref\" excluded-id=\"sec-function-p1-p2-pn-body\">#sec-function-p1-p2-pn-body</a></emu-xref>.</div></emu-note>\n      </emu-clause>\n    "}, "sec-dataview.prototype.setbigint64": {"num": "24.3.4.15", "title": "#sec-dataview.prototype.setbigint64 DataView.prototype.setBigInt64 ( byteOffset, value [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.setbigint64\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.setbigint64\">#sec-dataview.prototype.setbigint64</span> DataView.prototype.setBigInt64 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>setBigInt64</code> method is called with arguments <var>byteOffset</var> and <var>value</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>undefined</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"SetViewValue\"><a href=\"#sec-setviewvalue\">SetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <emu-const>BigInt64</emu-const>, <var>value</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-dataview.prototype.setfloat32": {"num": "24.3.4.17", "title": "#sec-dataview.prototype.setfloat32 DataView.prototype.setFloat32 ( byteOffset, value [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.setfloat32\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.setfloat32\">#sec-dataview.prototype.setfloat32</span> DataView.prototype.setFloat32 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>setFloat32</code> method is called with arguments <var>byteOffset</var> and <var>value</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"SetViewValue\"><a href=\"#sec-setviewvalue\">SetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <emu-const>Float32</emu-const>, <var>value</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-dataview.prototype.getint32": {"num": "24.3.4.11", "title": "#sec-dataview.prototype.getint32 DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.getint32\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.getint32\">#sec-dataview.prototype.getint32</span> DataView.prototype.getInt32 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>getInt32</code> method is called with argument <var>byteOffset</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"GetViewValue\"><a href=\"#sec-getviewvalue\">GetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <emu-const>Int32</emu-const>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-asyncgeneratorfunction": {"num": "25.3.1.1", "title": "#sec-asyncgeneratorfunction AsyncGeneratorFunction ( p1, p2, \u2026 , pn, body )", "html": "<emu-clause id=\"sec-asyncgeneratorfunction\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorfunction\">#sec-asyncgeneratorfunction</span> AsyncGeneratorFunction ( <var>p1</var>, <var>p2</var>, &#8230; , <var>pn</var>, <var>body</var> )</h1>\n        <p>The last argument specifies the body (executable code) of an async generator function; any preceding arguments specify formal parameters.</p>\n        <p>When the <code>AsyncGeneratorFunction</code> function is called with some arguments <var>p1</var>, <var>p2</var>, &#8230; , <var>pn</var>, <var>body</var> (where <var>n</var> might be 0, that is, there are no \"<var>p</var>\" arguments, and where <var>body</var> might also not be provided), the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>C</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>args</var> be the <var>argumentsList</var> that was passed to this function by [[Call]] or [[Construct]].</li><li>Return ?&#160;<emu-xref aoid=\"CreateDynamicFunction\"><a href=\"#sec-createdynamicfunction\">CreateDynamicFunction</a></emu-xref>(<var>C</var>, NewTarget, <emu-const>asyncGenerator</emu-const>, <var>args</var>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>See NOTE for  <emu-xref href=\"#sec-function-p1-p2-pn-body\"><a href=\"#sec-function-p1-p2-pn-body\" class=\"excluded-xref\" excluded-id=\"sec-function-p1-p2-pn-body\">#sec-function-p1-p2-pn-body</a></emu-xref>.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-getviewvalue": {"num": "24.3.1.1", "title": "#sec-getviewvalue GetViewValue ( view, requestIndex, isLittleEndian, type )", "html": "<emu-clause id=\"sec-getviewvalue\" aoid=\"GetViewValue\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getviewvalue\">#sec-getviewvalue</span> GetViewValue ( <var>view</var>, <var>requestIndex</var>, <var>isLittleEndian</var>, <var>type</var> )</h1>\n        <p>The abstract operation GetViewValue with arguments <var>view</var>, <var>requestIndex</var>, <var>isLittleEndian</var>, and <var>type</var> is used by functions on DataView instances to retrieve values from the view's buffer. It performs the following steps:</p>\n        <emu-alg><ol><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>view</var>, [[DataView]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>view</var> has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>getIndex</var> be ?&#160;<emu-xref aoid=\"ToIndex\"><a href=\"#sec-toindex\">ToIndex</a></emu-xref>(<var>requestIndex</var>).</li><li>Set <var>isLittleEndian</var> to !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(<var>isLittleEndian</var>).</li><li>Let <var>buffer</var> be <var>view</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>viewOffset</var> be <var>view</var>.[[ByteOffset]].</li><li>Let <var>viewSize</var> be <var>view</var>.[[ByteLength]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for Element Type <var>type</var>.</li><li>If <var>getIndex</var> + <var>elementSize</var> &gt; <var>viewSize</var>, throw a <emu-val>RangeError</emu-val> exception.</li><li>Let <var>bufferIndex</var> be <var>getIndex</var> + <var>viewOffset</var>.</li><li>Return <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref>(<var>buffer</var>, <var>bufferIndex</var>, <var>type</var>, <emu-val>false</emu-val>, <emu-const>Unordered</emu-const>, <var>isLittleEndian</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-object.keys": {"num": "19.1.2.17", "title": "#sec-object.keys Object.keys ( O )", "html": "<emu-clause id=\"sec-object.keys\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.keys\">#sec-object.keys</span> Object.keys ( <var>O</var> )</h1>\n        <p>When the <code>keys</code> function is called with argument <var>O</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>obj</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>O</var>).</li><li>Let <var>nameList</var> be ?&#160;<emu-xref aoid=\"EnumerableOwnPropertyNames\"><a href=\"#sec-enumerableownpropertynames\">EnumerableOwnPropertyNames</a></emu-xref>(<var>obj</var>, <emu-const>key</emu-const>).</li><li>Return <emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(<var>nameList</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-promise-executor": {"num": "25.6.3.1", "title": "#sec-promise-executor Promise ( executor )", "html": "<emu-clause id=\"sec-promise-executor\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promise-executor\">#sec-promise-executor</span> Promise ( <var>executor</var> )</h1>\n        <p>When the <code>Promise</code> function is called with argument <var>executor</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>If NewTarget is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>executor</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>promise</var> be ?&#160;<emu-xref aoid=\"OrdinaryCreateFromConstructor\"><a href=\"#sec-ordinarycreatefromconstructor\">OrdinaryCreateFromConstructor</a></emu-xref>(NewTarget, <code>\"%Promise.prototype%\"</code>, &#171; [[PromiseState]], [[PromiseResult]], [[PromiseFulfillReactions]], [[PromiseRejectReactions]], [[PromiseIsHandled]] &#187;).</li><li>Set <var>promise</var>.[[PromiseState]] to <emu-const>pending</emu-const>.</li><li>Set <var>promise</var>.[[PromiseFulfillReactions]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Set <var>promise</var>.[[PromiseRejectReactions]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Set <var>promise</var>.[[PromiseIsHandled]] to <emu-val>false</emu-val>.</li><li>Let <var>resolvingFunctions</var> be <emu-xref aoid=\"CreateResolvingFunctions\"><a href=\"#sec-createresolvingfunctions\">CreateResolvingFunctions</a></emu-xref>(<var>promise</var>).</li><li>Let <var>completion</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>executor</var>, <emu-val>undefined</emu-val>, &#171; <var>resolvingFunctions</var>.[[Resolve]], <var>resolvingFunctions</var>.[[Reject]] &#187;).</li><li>If <var>completion</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Perform ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>resolvingFunctions</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>completion</var>.[[Value]] &#187;).</li></ol></li><li>Return <var>promise</var>.\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <var>executor</var> argument must be a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. It is called for initiating and reporting completion of the possibly deferred action represented by this Promise object. The executor is called with two arguments: <var>resolve</var> and <var>reject</var>. These are functions that may be used by the <var>executor</var> function to report eventual completion or failure of the deferred computation. Returning from the executor function does not mean that the deferred action has been completed but only that the request to eventually perform the deferred action has been accepted.</p>\n          <p>The <var>resolve</var> function that is passed to an <var>executor</var> function accepts a single argument. The <var>executor</var> code may eventually call the <var>resolve</var> function to indicate that it wishes to resolve the associated Promise object. The argument passed to the <var>resolve</var> function represents the eventual value of the deferred action and can be either the actual fulfillment value or another Promise object which will provide the value if it is fulfilled.</p>\n          <p>The <var>reject</var> function that is passed to an <var>executor</var> function accepts a single argument. The <var>executor</var> code may eventually call the <var>reject</var> function to indicate that the associated Promise is rejected and will never be fulfilled. The argument passed to the <var>reject</var> function is used as the rejection value of the promise. Typically it will be an <code>Error</code> object.</p>\n          <p>The resolve and reject functions passed to an <var>executor</var> function by the Promise <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> have the capability to actually resolve and reject the associated promise. Subclasses may have different <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> behaviour that passes in customized values for resolve and reject.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-example-cyclic-module-record-graphs": {"num": "15.2.1.16.3", "title": "#sec-example-cyclic-module-record-graphs Example Cyclic Module Record Graphs", "html": "<emu-clause id=\"sec-example-cyclic-module-record-graphs\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-example-cyclic-module-record-graphs\">#sec-example-cyclic-module-record-graphs</span> Example Cyclic Module Record Graphs</h1>\n\n          <p>This non-normative section gives a series of examples of the linking and evaluation of a few common module graphs, with a specific focus on how errors can occur.</p>\n\n          <p>First consider the following simple module graph:</p>\n\n          <emu-figure id=\"figure-module-graph-simple\" caption=\"A simple module graph\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-simple\">#figure-module-graph-simple</span>: A simple module graph</figcaption>\n            <img alt=\"A module graph in which module A depends on module B, and module B depends on module C\" width=\"121\" height=\"211\" src=\"img/module-graph-simple.svg\">\n          </figure></emu-figure>\n\n          <p>Let's first assume that there are no error conditions. When a host first calls <var>A</var>.Link(), this will complete successfully by assumption, and recursively link modules <var>B</var> and <var>C</var> as well, such that <var>A</var>.[[Status]] = <var>B</var>.[[Status]] = <var>C</var>.[[Status]] = <emu-const>linked</emu-const>. This preparatory step can be performed at any time. Later, when the host is ready to incur any possible side effects of the modules, it can call <var>A</var>.Evaluate(), which will complete successfully (again by assumption), recursively having evaluated first <var>C</var> and then <var>B</var>. Each module's [[Status]] at this point will be <emu-const>evaluated</emu-const>.</p>\n\n          <p>Consider then cases involving linking errors. If <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> of <var>C</var> succeeds but, thereafter, fails for <var>B</var>, for example because it imports something that <var>C</var> does not provide, then the original <var>A</var>.Link() will fail, and both <var>A</var> and <var>B</var>'s [[Status]] remain <emu-const>unlinked</emu-const>. <var>C</var>'s [[Status]] has become <emu-const>linked</emu-const>, though.</p>\n\n          <p>Finally, consider a case involving evaluation errors. If <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> of <var>C</var> succeeds but, thereafter, fails for <var>B</var>, for example because <var>B</var> contains code that throws an exception, then the original <var>A</var>.Evaluate() will fail. The resulting exception will be recorded in both <var>A</var> and <var>B</var>'s [[EvaluationError]] fields, and their [[Status]] will become <emu-const>evaluated</emu-const>. <var>C</var> will also become <emu-const>evaluated</emu-const> but, in contrast to <var>A</var> and <var>B</var>, will remain without an [[EvaluationError]], as it successfully completed evaluation. Storing the exception ensures that any time a host tries to reuse <var>A</var> or <var>B</var> by calling their Evaluate() method, it will encounter the same exception. (Hosts are not required to reuse Cyclic Module Records; similarly, hosts are not required to expose the exception objects thrown by these  methods. However, the specification enables such uses.)</p>\n\n          <p>The difference here between linking and evaluation errors is due to how evaluation must be only performed once, as it can cause side effects; it is thus important to remember whether evaluation has already been performed, even if unsuccessfully. (In the error case, it makes sense to also remember the exception because otherwise subsequent Evaluate() calls would have to synthesize a new one.) Linking, on the other hand, is side-effect-free, and thus even if it fails, it can be retried at a later time with no issues.</p>\n\n          <p>Now consider a different type of error condition:</p>\n\n          <emu-figure id=\"figure-module-graph-missing\" caption=\"A module graph with an unresolvable module\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-missing\">#figure-module-graph-missing</span>: A module graph with an unresolvable module</figcaption>\n            <img alt=\"A module graph in which module A depends on a missing (unresolvable) module, represented by ???\" width=\"121\" height=\"121\" src=\"img/module-graph-missing.svg\">\n          </figure></emu-figure>\n\n          <p>In this scenario, module <var>A</var> declares a dependency on some other module, but no <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> exists for that module, i.e. <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref> throws an exception when asked for it. This could occur for a variety of reasons, such as the corresponding resource not existing, or the resource existing but <emu-xref aoid=\"ParseModule\"><a href=\"#sec-parsemodule\">ParseModule</a></emu-xref> throwing an exception when trying to parse the resulting source text. Hosts can choose to expose the cause of failure via the exception they throw from <emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>. In any case, this exception causes a linking failure, which as before results in <var>A</var>'s [[Status]] remaining <emu-const>unlinked</emu-const>.</p>\n\n          <p>Lastly, consider a module graph with a cycle:</p>\n\n          <emu-figure id=\"figure-module-graph-cycle\" caption=\"A cyclic module graph\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"figure-module-graph-cycle\">#figure-module-graph-cycle</span>: A cyclic module graph</figcaption>\n            <img alt=\"A module graph in which module A depends on module B and C, but module B also depends on module A\" width=\"181\" height=\"121\" src=\"img/module-graph-cycle.svg\">\n          </figure></emu-figure>\n\n          <p>Here we assume that the entry point is module <var>A</var>, so that the host proceeds by calling <var>A</var>.Link(), which performs <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>. This in turn calls <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>B</var>. Because of the cycle, this again triggers <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>, but at this point it is a no-op since <var>A</var>.[[Status]] is already <emu-const>linking</emu-const>. <var>B</var>.[[Status]] itself remains <emu-const>linking</emu-const> when control gets back to <var>A</var> and <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> is triggered on <var>C</var>. After this returns with <var>C</var>.[[Status]] being <emu-const>linked</emu-const> , both <var>A</var> and <var>B</var> transition from <emu-const>linking</emu-const> to <emu-const>linked</emu-const> together; this is by design, since they form a strongly connected component.</p>\n\n          <p>An analogous story occurs for the evaluation phase of a cyclic module graph, in the success case.</p>\n\n          <p>Now consider a case where <var>A</var> has an linking error; for example, it tries to import a binding from <var>C</var> that does not exist. In that case, the above steps still occur, including the early return from the second call to <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>. However, once we unwind back to the original <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref> on <var>A</var>, it fails during ModuleDeclarationEnvironmentSetup, namely right after <var>C</var>.ResolveExport(). The thrown <emu-val>SyntaxError</emu-val> exception propagates up to <var>A</var>.Link, which resets all modules that are currently on its <var>stack</var> (these are always exactly the modules that are still <emu-const>linking</emu-const>). Hence both <var>A</var> and <var>B</var> become <emu-const>unlinked</emu-const>. Note that <var>C</var> is left as <emu-const>linked</emu-const>.</p>\n\n          <p>Finally, consider a case where <var>A</var> has an evaluation error; for example, its source code throws an exception. In that case, the evaluation-time analog of the above steps still occurs, including the early return from the second call to <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>A</var>. However, once we unwind back to the original <emu-xref aoid=\"InnerModuleEvaluation\"><a href=\"#sec-innermoduleevaluation\">InnerModuleEvaluation</a></emu-xref> on <var>A</var>, it fails by assumption. The exception thrown propagates up to <var>A</var>.Evaluate(), which records the error in all modules that are currently on its <var>stack</var> (i.e., the modules that are still <emu-const>evaluating</emu-const>). Hence both <var>A</var> and <var>B</var> become <emu-const>evaluated</emu-const> and the exception is recorded in both <var>A</var> and <var>B</var>'s [[EvaluationError]] fields, while <var>C</var> is left as <emu-const>evaluated</emu-const> with no [[EvaluationError]].</p>\n        </emu-clause>\n      "}, "sec-numerictorawbytes": {"num": "24.1.1.11", "title": "#sec-numerictorawbytes NumericToRawBytes ( type, value, isLittleEndian )", "html": "<emu-clause id=\"sec-numerictorawbytes\" aoid=\"NumericToRawBytes\" oldids=\"sec-numbertorawbytes\">\n        <span id=\"sec-numbertorawbytes\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-numerictorawbytes\">#sec-numerictorawbytes</span> NumericToRawBytes ( <var>type</var>, <var>value</var>, <var>isLittleEndian</var> )</h1>\n        <p>The abstract operation NumericToRawBytes takes three parameters, a TypedArray element type <var>type</var>, a BigInt or a Number <var>value</var>, and a Boolean <var>isLittleEndian</var>. This operation performs the following steps:</p>\n        <emu-alg><ol><li>If <var>type</var> is <emu-const>Float32</emu-const>, then<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the 4 bytes that are the result of converting <var>value</var> to IEEE 754-2008 binary32 format using roundTiesToEven mode. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are arranged in big endian order. Otherwise, the bytes are arranged in little endian order. If <var>value</var> is <emu-val>NaN</emu-val>, <var>rawBytes</var> may be set to any implementation chosen IEEE 754-2008 binary32 format Not-a-Number encoding. An implementation must always choose the same encoding for each implementation distinguishable <emu-val>NaN</emu-val> value.</li></ol></li><li>Else if <var>type</var> is <emu-const>Float64</emu-const>, then<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the 8 bytes that are the IEEE 754-2008 binary64 format encoding of <var>value</var>. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are arranged in big endian order. Otherwise, the bytes are arranged in little endian order. If <var>value</var> is <emu-val>NaN</emu-val>, <var>rawBytes</var> may be set to any implementation chosen IEEE 754-2008 binary64 format Not-a-Number encoding. An implementation must always choose the same encoding for each implementation distinguishable <emu-val>NaN</emu-val> value.</li></ol></li><li>Else,<ol><li>Let <var>n</var> be the Element Size specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for Element Type <var>type</var>.</li><li>Let <var>convOp</var> be the abstract operation named in the Conversion Operation column in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for Element Type <var>type</var>.</li><li>Let <var>intValue</var> be <var>convOp</var>(<var>value</var>) treated as a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref>, whether the result is a BigInt or Number.</li><li>If <var>intValue</var> &#8805; 0<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>, then<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the <var>n</var>-byte binary encoding of <var>intValue</var>. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are ordered in big endian order. Otherwise, the bytes are ordered in little endian order.</li></ol></li><li>Else,<ol><li>Let <var>rawBytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> containing the <var>n</var>-byte binary 2's complement encoding of <var>intValue</var>. If <var>isLittleEndian</var> is <emu-val>false</emu-val>, the bytes are ordered in big endian order. Otherwise, the bytes are ordered in little endian order.</li></ol></li></ol></li><li>Return <var>rawBytes</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-promisereactionjob": {"num": "25.6.2.1", "title": "#sec-promisereactionjob PromiseReactionJob ( reaction, argument )", "html": "<emu-clause id=\"sec-promisereactionjob\" aoid=\"PromiseReactionJob\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promisereactionjob\">#sec-promisereactionjob</span> PromiseReactionJob ( <var>reaction</var>, <var>argument</var> )</h1>\n        <p>The job PromiseReactionJob with parameters <var>reaction</var> and <var>argument</var> applies the appropriate handler to the incoming value, and uses the handler's return value to resolve or reject the derived promise associated with that handler.</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>reaction</var> is a PromiseReaction <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>.</li><li>Let <var>promiseCapability</var> be <var>reaction</var>.[[Capability]].</li><li>Let <var>type</var> be <var>reaction</var>.[[Type]].</li><li>Let <var>handler</var> be <var>reaction</var>.[[Handler]].</li><li>If <var>handler</var> is <emu-val>undefined</emu-val>, then<ol><li>If <var>type</var> is <emu-const>Fulfill</emu-const>, let <var>handlerResult</var> be <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>argument</var>).</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>type</var> is <emu-const>Reject</emu-const>.</li><li>Let <var>handlerResult</var> be <emu-xref aoid=\"ThrowCompletion\"><a href=\"#sec-throwcompletion\">ThrowCompletion</a></emu-xref>(<var>argument</var>).</li></ol></li></ol></li><li>Else, let <var>handlerResult</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>handler</var>, <emu-val>undefined</emu-val>, &#171; <var>argument</var> &#187;).</li><li>If <var>promiseCapability</var> is <emu-val>undefined</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>handlerResult</var> is not an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li>If <var>handlerResult</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>handlerResult</var>.[[Value]] &#187;).</li></ol></li><li>Else,<ol><li>Let <var>status</var> be <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Resolve]], <emu-val>undefined</emu-val>, &#171; <var>handlerResult</var>.[[Value]] &#187;).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>status</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.values": {"num": "22.2.3.30", "title": "#sec-%typedarray%.prototype.values %TypedArray%.prototype.values ( )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.values\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.values\">#sec-%typedarray%.prototype.values</span> %TypedArray%.prototype.values ( )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Return <emu-xref aoid=\"CreateArrayIterator\"><a href=\"#sec-createarrayiterator\">CreateArrayIterator</a></emu-xref>(<var>O</var>, <emu-const>value</emu-const>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-setviewvalue": {"num": "24.3.1.2", "title": "#sec-setviewvalue SetViewValue ( view, requestIndex, isLittleEndian, type, value )", "html": "<emu-clause id=\"sec-setviewvalue\" aoid=\"SetViewValue\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-setviewvalue\">#sec-setviewvalue</span> SetViewValue ( <var>view</var>, <var>requestIndex</var>, <var>isLittleEndian</var>, <var>type</var>, <var>value</var> )</h1>\n        <p>The abstract operation SetViewValue with arguments <var>view</var>, <var>requestIndex</var>, <var>isLittleEndian</var>, <var>type</var>, and <var>value</var> is used by functions on DataView instances to store values into the view's buffer. It performs the following steps:</p>\n        <emu-alg><ol><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>view</var>, [[DataView]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>view</var> has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>getIndex</var> be ?&#160;<emu-xref aoid=\"ToIndex\"><a href=\"#sec-toindex\">ToIndex</a></emu-xref>(<var>requestIndex</var>).</li><li>If !&#160;<emu-xref aoid=\"IsBigIntElementType\"><a href=\"#sec-isbigintelementtype\">IsBigIntElementType</a></emu-xref>(<var>type</var>) is <emu-val>true</emu-val>, let <var>numberValue</var> be ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-tobigint\">ToBigInt</a></emu-xref>(<var>value</var>).</li><li>Otherwise, let <var>numberValue</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>value</var>).</li><li>Set <var>isLittleEndian</var> to !&#160;<emu-xref aoid=\"ToBoolean\"><a href=\"#sec-toboolean\">ToBoolean</a></emu-xref>(<var>isLittleEndian</var>).</li><li>Let <var>buffer</var> be <var>view</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>viewOffset</var> be <var>view</var>.[[ByteOffset]].</li><li>Let <var>viewSize</var> be <var>view</var>.[[ByteLength]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for Element Type <var>type</var>.</li><li>If <var>getIndex</var> + <var>elementSize</var> &gt; <var>viewSize</var>, throw a <emu-val>RangeError</emu-val> exception.</li><li>Let <var>bufferIndex</var> be <var>getIndex</var> + <var>viewOffset</var>.</li><li>Return <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>buffer</var>, <var>bufferIndex</var>, <var>type</var>, <var>numberValue</var>, <emu-val>false</emu-val>, <emu-const>Unordered</emu-const>, <var>isLittleEndian</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-functioninitialize": {"num": "9.2.4", "title": "#sec-functioninitialize FunctionInitialize ( F, kind, ParameterList, Body, Scope )", "html": "<emu-clause id=\"sec-functioninitialize\" aoid=\"FunctionInitialize\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-functioninitialize\">#sec-functioninitialize</span> FunctionInitialize ( <var>F</var>, <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var> )</h1>\n      <p>The abstract operation FunctionInitialize requires the arguments: a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> <var>F</var>, <var>kind</var> which is one of (<emu-const>Normal</emu-const>, <emu-const>Method</emu-const>, <emu-const>Arrow</emu-const>), a parameter list <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>ParameterList</var>, a body <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>Body</var>, a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> specified by <var>Scope</var>. FunctionInitialize performs the following steps:</p>\n      <emu-alg><ol><li>Let <var>len</var> be the ExpectedArgumentCount of <var>ParameterList</var>.</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionLength\"><a href=\"#sec-setfunctionlength\">SetFunctionLength</a></emu-xref>(<var>F</var>, <var>len</var>).</li><li>If the source text matching <var>Body</var> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>Strict</var> be <emu-val>true</emu-val>; else let <var>Strict</var> be <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Strict]] to <var>Strict</var>.</li><li>Set <var>F</var>.[[Environment]] to <var>Scope</var>.</li><li>Set <var>F</var>.[[FormalParameters]] to <var>ParameterList</var>.</li><li>Set <var>F</var>.[[ECMAScriptCode]] to <var>Body</var>.</li><li>Set <var>F</var>.[[ScriptOrModule]] to <emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>().</li><li>If <var>kind</var> is <emu-const>Arrow</emu-const>, set <var>F</var>.[[ThisMode]] to <emu-const>lexical</emu-const>.</li><li>Else if <var>Strict</var> is <emu-val>true</emu-val>, set <var>F</var>.[[ThisMode]] to <emu-const>strict</emu-const>.</li><li>Else, set <var>F</var>.[[ThisMode]] to <emu-const>global</emu-const>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-asyncgeneratorfunctioncreate": {"num": "9.2.7", "title": "#sec-asyncgeneratorfunctioncreate AsyncGeneratorFunctionCreate ( kind, ParameterList, Body, Scope )", "html": "<emu-clause id=\"sec-asyncgeneratorfunctioncreate\" aoid=\"AsyncGeneratorFunctionCreate\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorfunctioncreate\">#sec-asyncgeneratorfunctioncreate</span> AsyncGeneratorFunctionCreate ( <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var> )</h1>\n      <p>The abstract operation AsyncGeneratorFunctionCreate requires the arguments: <var>kind</var> which is one of (<emu-const>Normal</emu-const>, <emu-const>Method</emu-const>), a parameter list <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>ParameterList</var>, a body <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>Body</var>, a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> specified by <var>Scope</var>. AsyncGeneratorFunctionCreate performs the following steps:</p>\n      <emu-alg><ol><li>Let <var>functionPrototype</var> be <emu-xref href=\"#sec-asyncgeneratorfunction-prototype\"><a href=\"#sec-asyncgeneratorfunction-prototype\">%AsyncGenerator%</a></emu-xref>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"FunctionAllocate\"><a href=\"#sec-functionallocate\">FunctionAllocate</a></emu-xref>(<var>functionPrototype</var>, <emu-const>generator</emu-const>).</li><li>Return !&#160;<emu-xref aoid=\"FunctionInitialize\"><a href=\"#sec-functioninitialize\">FunctionInitialize</a></emu-xref>(<var>F</var>, <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-algorithm-conventions": {"num": "5.2", "title": "#sec-algorithm-conventions Algorithm Conventions", "html": "<emu-clause id=\"sec-algorithm-conventions\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-algorithm-conventions\">#sec-algorithm-conventions</span> Algorithm Conventions</h1>\n    <p>The specification often uses a numbered list to specify steps in an algorithm. These algorithms are used to precisely specify the required semantics of ECMAScript language constructs. The algorithms are not intended to imply the use of any specific implementation technique. In practice, there may be more efficient algorithms available to implement a given feature.</p>\n    <p>Algorithms may be explicitly parameterized, in which case the names and usage of the parameters must be provided as part of the algorithm's definition.</p>\n    <p>Algorithm steps may be subdivided into sequential substeps. Substeps are indented and may themselves be further divided into indented substeps. Outline numbering conventions are used to identify substeps with the first level of substeps labelled with lower case alphabetic characters and the second level of substeps labelled with lower case roman numerals. If more than three levels are required these rules repeat with the fourth level using numeric labels. For example:</p>\n    <emu-alg><ol><li>Top-level step<ol><li>Substep.</li><li>Substep.<ol><li>Subsubstep.<ol><li>Subsubsubstep<ol><li>Subsubsubsubstep<ol><li>Subsubsubsubsubstep\n    </li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></emu-alg>\n    <p>A step or substep may be written as an &#8220;if&#8221; predicate that conditions its substeps. In this case, the substeps are only applied if the predicate is true. If a step or substep begins with the word &#8220;else&#8221;, it is a predicate that is the negation of the preceding &#8220;if&#8221; predicate step at the same level.</p>\n    <p>A step may specify the iterative application of its substeps.</p>\n    <p>A step that begins with &#8220;<dfn id=\"assert\">Assert</dfn>:&#8221; asserts an invariant condition of its algorithm. Such assertions are used to make explicit algorithmic invariants that would otherwise be implicit. Such assertions add no additional semantic requirements and hence need not be checked by an implementation. They are used simply to clarify algorithms.</p>\n    <p>Algorithm steps may declare named aliases for any value using the form &#8220;Let <var>x</var> be <var>someValue</var>&#8221;. These aliases are reference-like in that both <var>x</var> and <var>someValue</var> refer to the same underlying data and modifications to either are visible to both. Algorithm steps that want to avoid this reference-like behaviour should explicitly make a copy of the right-hand side: &#8220;Let <var>x</var> be a copy of <var>someValue</var>&#8221; creates a shallow copy of <var>someValue</var>.</p>\n    <p>Once declared, an alias may be referenced in any subsequent steps and must not be referenced from steps prior to the alias's declaration. Aliases may be modified using the form &#8220;Set <var>x</var> to <var>someOtherValue</var>&#8221;.</p>\n\n    <div id=\"excluded-sec-algorithm-conventions-abstract-operations\"><h1><span class=\"secnum\">5.2.1</span>#sec-algorithm-conventions-abstract-operations Abstract Operations</h1>...</div><div id=\"excluded-sec-algorithm-conventions-syntax-directed-operations\"><h1><span class=\"secnum\">5.2.2</span>#sec-algorithm-conventions-syntax-directed-operations Syntax-Directed Operations</h1>...</div><div id=\"excluded-sec-runtime-semantics\"><h1><span class=\"secnum\">5.2.3</span>#sec-runtime-semantics Runtime Semantics</h1>...</div><div id=\"excluded-sec-static-semantic-rules\"><h1><span class=\"secnum\">5.2.4</span>#sec-static-semantic-rules Static Semantics</h1>...</div><div id=\"excluded-sec-mathematical-operations\"><h1><span class=\"secnum\">5.2.5</span>#sec-mathematical-operations Mathematical Operations</h1>...</div><div id=\"excluded-sec-value-notation\"><h1><span class=\"secnum\">5.2.6</span>#sec-value-notation Value Notation</h1>...</div></emu-clause>\n"}, "sec-generatorfunctioncreate": {"num": "9.2.6", "title": "#sec-generatorfunctioncreate GeneratorFunctionCreate ( kind, ParameterList, Body, Scope )", "html": "<emu-clause id=\"sec-generatorfunctioncreate\" aoid=\"GeneratorFunctionCreate\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorfunctioncreate\">#sec-generatorfunctioncreate</span> GeneratorFunctionCreate ( <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var> )</h1>\n      <p>The abstract operation GeneratorFunctionCreate requires the arguments: <var>kind</var> which is one of (<emu-const>Normal</emu-const>, <emu-const>Method</emu-const>), a parameter list <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>ParameterList</var>, a body <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>Body</var>, a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> specified by <var>Scope</var>. GeneratorFunctionCreate performs the following steps:</p>\n      <emu-alg><ol><li>Let <var>functionPrototype</var> be <emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%Generator%</a></emu-xref>.</li><li>Let <var>F</var> be <emu-xref aoid=\"FunctionAllocate\"><a href=\"#sec-functionallocate\">FunctionAllocate</a></emu-xref>(<var>functionPrototype</var>, <emu-const>generator</emu-const>).</li><li>Return <emu-xref aoid=\"FunctionInitialize\"><a href=\"#sec-functioninitialize\">FunctionInitialize</a></emu-xref>(<var>F</var>, <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-generatorresume": {"num": "25.4.3.3", "title": "#sec-generatorresume GeneratorResume ( generator, value )", "html": "<emu-clause id=\"sec-generatorresume\" aoid=\"GeneratorResume\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorresume\">#sec-generatorresume</span> GeneratorResume ( <var>generator</var>, <var>value</var> )</h1>\n        <p>The abstract operation GeneratorResume with arguments <var>generator</var> and <var>value</var> performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>state</var> be ?&#160;<emu-xref aoid=\"GeneratorValidate\"><a href=\"#sec-generatorvalidate\">GeneratorValidate</a></emu-xref>(<var>generator</var>).</li><li>If <var>state</var> is <emu-const>completed</emu-const>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>state</var> is either <emu-const>suspendedStart</emu-const> or <emu-const>suspendedYield</emu-const>.</li><li>Let <var>genContext</var> be <var>generator</var>.[[GeneratorContext]].</li><li>Let <var>methodContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref aoid=\"Suspend\"><a href=\"#sec-suspend\">Suspend</a></emu-xref> <var>methodContext</var>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>executing</emu-const>.</li><li>Push <var>genContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>genContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>genContext</var> using <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>value</var>) as the result of the operation that suspended it. Let <var>result</var> be the value returned by the resumed computation.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we return here, <var>genContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>methodContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-object.seal": {"num": "19.1.2.20", "title": "#sec-object.seal Object.seal ( O )", "html": "<emu-clause id=\"sec-object.seal\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.seal\">#sec-object.seal</span> Object.seal ( <var>O</var> )</h1>\n        <p>When the <code>seal</code> function is called, the following steps are taken:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, return <var>O</var>.</li><li>Let <var>status</var> be ?&#160;<emu-xref aoid=\"SetIntegrityLevel\"><a href=\"#sec-setintegritylevel\">SetIntegrityLevel</a></emu-xref>(<var>O</var>, <emu-const>sealed</emu-const>).</li><li>If <var>status</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>O</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-properties-of-promise-instances": {"num": "25.6.6", "title": "#sec-properties-of-promise-instances Properties of Promise Instances", "html": "<emu-clause id=\"sec-properties-of-promise-instances\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-promise-instances\">#sec-properties-of-promise-instances</span> Properties of Promise Instances</h1>\n      <p>Promise instances are ordinary objects that inherit properties from the Promise prototype object (the intrinsic, %Promise.prototype%). Promise instances are initially created with the internal slots described in  <emu-xref href=\"#table-59\"><a href=\"#table-59\" class=\"excluded-xref\" excluded-id=\"table-59\">#table-59</a></emu-xref>.</p>\n      <emu-table id=\"table-59\" caption=\"Internal Slots of Promise Instances\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-59\">#table-59</span>: Internal Slots of Promise Instances</figcaption>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Internal Slot\n            \n            </th>\n            <th>\n              Description\n            \n            </th>\n          </tr>\n          <tr>\n            <td>\n              [[PromiseState]]\n            \n            </td>\n            <td>\n              One of <emu-const>pending</emu-const>, <emu-const>fulfilled</emu-const>, or <emu-const>rejected</emu-const>. Governs how a promise will react to incoming calls to its <code>then</code> method.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[PromiseResult]]\n            \n            </td>\n            <td>\n              The value with which the promise has been fulfilled or rejected, if any. Only meaningful if [[PromiseState]] is not <emu-const>pending</emu-const>.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[PromiseFulfillReactions]]\n            \n            </td>\n            <td>\n              A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of PromiseReaction records to be processed when/if the promise transitions from the <emu-const>pending</emu-const> state to the <emu-const>fulfilled</emu-const> state.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[PromiseRejectReactions]]\n            \n            </td>\n            <td>\n              A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of PromiseReaction records to be processed when/if the promise transitions from the <emu-const>pending</emu-const> state to the <emu-const>rejected</emu-const> state.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[PromiseIsHandled]]\n            \n            </td>\n            <td>\n              A boolean indicating whether the promise has ever had a fulfillment or rejection handler; used in unhandled rejection tracking.\n            \n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n    </emu-clause>\n  "}, "sec-getmodifysetvalueinbuffer": {"num": "24.1.1.13", "title": "#sec-getmodifysetvalueinbuffer GetModifySetValueInBuffer ( arrayBuffer, byteIndex, type, value, op [ , isLittleEndian ] )", "html": "<emu-clause id=\"sec-getmodifysetvalueinbuffer\" aoid=\"GetModifySetValueInBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getmodifysetvalueinbuffer\">#sec-getmodifysetvalueinbuffer</span> GetModifySetValueInBuffer ( <var>arrayBuffer</var>, <var>byteIndex</var>, <var>type</var>, <var>value</var>, <var>op</var> [ , <var>isLittleEndian</var> ] )</h1>\n        <p>The abstract operation GetModifySetValueInBuffer takes six parameters, a SharedArrayBuffer <var>arrayBuffer</var>, a nonnegative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>byteIndex</var>, a TypedArray element type <var>type</var>, a Number or BigInt <var>value</var>, a semantic function <var>op</var>, and optionally a Boolean <var>isLittleEndian</var>. This operation performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>true</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: There are sufficient bytes in <var>arrayBuffer</var> starting at <var>byteIndex</var> to represent a value of <var>type</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>byteIndex</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value &#8805; 0.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is BigInt if !&#160;<emu-xref aoid=\"IsBigIntElementType\"><a href=\"#sec-isbigintelementtype\">IsBigIntElementType</a></emu-xref>(<var>type</var>) is <emu-val>true</emu-val>; otherwise, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Number.</li><li>Let <var>block</var> be <var>arrayBuffer</var>.[[ArrayBufferData]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for Element Type <var>type</var>.</li><li>If <var>isLittleEndian</var> is not present, set <var>isLittleEndian</var> to the value of the [[LittleEndian]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>rawBytes</var> be <emu-xref aoid=\"NumericToRawBytes\"><a href=\"#sec-numerictorawbytes\">NumericToRawBytes</a></emu-xref>(<var>type</var>, <var>value</var>, <var>isLittleEndian</var>).</li><li>Let <var>execution</var> be the [[CandidateExecution]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>eventList</var> be the [[EventList]] field of the element in <var>execution</var>.[[EventsRecords]] whose [[AgentSignifier]] is <emu-xref aoid=\"AgentSignifier\"><a href=\"#sec-agentsignifier\">AgentSignifier</a></emu-xref>().</li><li>Let <var>rawBytesRead</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of length <var>elementSize</var> of nondeterministically chosen byte values.</li><li>NOTE: In implementations, <var>rawBytesRead</var> is the result of a load-link, of a load-exclusive, or of an operand of a read-modify-write instruction on the underlying hardware. The nondeterminism is a semantic prescription of the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> to describe observable behaviour of hardware with weak consistency.</li><li>Let <var>rmwEvent</var> be <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> { [[Order]]: <emu-const>SeqCst</emu-const>, [[NoTear]]: <emu-val>true</emu-val>, [[Block]]: <var>block</var>, [[ByteIndex]]: <var>byteIndex</var>, [[ElementSize]]: <var>elementSize</var>, [[Payload]]: <var>rawBytes</var>, [[ModifyOp]]: <var>op</var> }.</li><li>Append <var>rmwEvent</var> to <var>eventList</var>.</li><li>Append <emu-xref href=\"#sec-chosen-value-records\"><a href=\"#sec-chosen-value-records\">Chosen Value Record</a></emu-xref> { [[Event]]: <var>rmwEvent</var>, [[ChosenValue]]: <var>rawBytesRead</var> } to <var>execution</var>.[[ChosenValues]].</li><li>Return <emu-xref aoid=\"RawBytesToNumeric\"><a href=\"#sec-rawbytestonumeric\">RawBytesToNumeric</a></emu-xref>(<var>type</var>, <var>rawBytesRead</var>, <var>isLittleEndian</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-properties-of-set-iterator-instances": {"num": "23.2.5.3", "title": "#sec-properties-of-set-iterator-instances Properties of Set Iterator Instances", "html": "<emu-clause id=\"sec-properties-of-set-iterator-instances\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-set-iterator-instances\">#sec-properties-of-set-iterator-instances</span> Properties of Set Iterator Instances</h1>\n        <p>Set Iterator instances are ordinary objects that inherit properties from the <emu-xref href=\"#sec-%setiteratorprototype%-object\"><a href=\"#sec-%setiteratorprototype%-object\">%SetIteratorPrototype%</a></emu-xref> intrinsic object. Set Iterator instances are initially created with the internal slots specified in  <emu-xref href=\"#table-51\"><a href=\"#table-51\" class=\"excluded-xref\" excluded-id=\"table-51\">#table-51</a></emu-xref>.</p>\n        <emu-table id=\"table-51\" caption=\"Internal Slots of Set Iterator Instances\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-51\">#table-51</span>: Internal Slots of Set Iterator Instances</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Internal Slot\n              \n              </th>\n              <th>\n                Description\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[IteratedSet]]\n              \n              </td>\n              <td>\n                The Set object that is being iterated.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[SetNextIndex]]\n              \n              </td>\n              <td>\n                The <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> of the next Set data element to be examined by this iterator\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[SetIterationKind]]\n              \n              </td>\n              <td>\n                A String value that identifies what is to be returned for each element of the iteration. The possible values are: <emu-const>key</emu-const>, <emu-const>value</emu-const>, <emu-const>key+value</emu-const>. <emu-const>key</emu-const> and <emu-const>value</emu-const> have the same meaning.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n    "}, "sec-testintegritylevel": {"num": "7.3.15", "title": "#sec-testintegritylevel TestIntegrityLevel ( O, level )", "html": "<emu-clause id=\"sec-testintegritylevel\" aoid=\"TestIntegrityLevel\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-testintegritylevel\">#sec-testintegritylevel</span> TestIntegrityLevel ( <var>O</var>, <var>level</var> )</h1>\n      <p>The abstract operation TestIntegrityLevel is used to determine if the set of own properties of an object are fixed. This abstract operation performs the following steps:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>level</var> is either <emu-const>sealed</emu-const> or <emu-const>frozen</emu-const>.</li><li>Let <var>extensible</var> be ?&#160;<emu-xref aoid=\"IsExtensible\"><a href=\"#sec-isextensible-o\">IsExtensible</a></emu-xref>(<var>O</var>).</li><li>If <var>extensible</var> is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>NOTE: If the object is extensible, none of its properties are examined.</li><li>Let <var>keys</var> be ? <var>O</var>.[[OwnPropertyKeys]]().</li><li>For each element <var>k</var> of <var>keys</var>, do<ol><li>Let <var>currentDesc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>k</var>).</li><li>If <var>currentDesc</var> is not <emu-val>undefined</emu-val>, then<ol><li>If <var>currentDesc</var>.[[Configurable]] is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>level</var> is <emu-const>frozen</emu-const> and <emu-xref aoid=\"IsDataDescriptor\"><a href=\"#sec-isdatadescriptor\">IsDataDescriptor</a></emu-xref>(<var>currentDesc</var>) is <emu-val>true</emu-val>, then<ol><li>If <var>currentDesc</var>.[[Writable]] is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li></ol></li></ol></li></ol></li><li>Return <emu-val>true</emu-val>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-createsharedbytedatablock": {"num": "6.2.7.2", "title": "#sec-createsharedbytedatablock CreateSharedByteDataBlock ( size )", "html": "<emu-clause id=\"sec-createsharedbytedatablock\" aoid=\"CreateSharedByteDataBlock\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createsharedbytedatablock\">#sec-createsharedbytedatablock</span> CreateSharedByteDataBlock ( <var>size</var> )</h1>\n        <p>When the abstract operation CreateSharedByteDataBlock is called with <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> argument <var>size</var>, the following steps are taken:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>size</var> &#8805; 0.</li><li>Let <var>db</var> be a new <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref> value consisting of <var>size</var> bytes. If it is impossible to create such a <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref>, throw a <emu-val>RangeError</emu-val> exception.</li><li>Let <var>execution</var> be the [[CandidateExecution]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>eventList</var> be the [[EventList]] field of the element in <var>execution</var>.[[EventsRecords]] whose [[AgentSignifier]] is <emu-xref aoid=\"AgentSignifier\"><a href=\"#sec-agentsignifier\">AgentSignifier</a></emu-xref>().</li><li>Let <var>zero</var> be &#171; 0 &#187;.</li><li>For each index <var>i</var> of <var>db</var>, do<ol><li>Append <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> { [[Order]]: <emu-const>Init</emu-const>, [[NoTear]]: <emu-val>true</emu-val>, [[Block]]: <var>db</var>, [[ByteIndex]]: <var>i</var>, [[ElementSize]]: 1, [[Payload]]: <var>zero</var> } to <var>eventList</var>.</li></ol></li><li>Return <var>db</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-generatoryield": {"num": "25.4.3.6", "title": "#sec-generatoryield GeneratorYield ( iterNextObj )", "html": "<emu-clause id=\"sec-generatoryield\" aoid=\"GeneratorYield\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatoryield\">#sec-generatoryield</span> GeneratorYield ( <var>iterNextObj</var> )</h1>\n        <p>The abstract operation GeneratorYield with argument <var>iterNextObj</var> performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>iterNextObj</var> is an Object that implements the <i>IteratorResult</i> interface.</li><li>Let <var>genContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>genContext</var> is the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> of a generator.</li><li>Let <var>generator</var> be the value of the Generator component of <var>genContext</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>() is <emu-const>sync</emu-const>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>suspendedYield</emu-const>.</li><li>Remove <var>genContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the code evaluation state of <var>genContext</var> such that when evaluation is resumed with a <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> <var>resumptionValue</var> the following steps will be performed:<ol><li>Return <var>resumptionValue</var>.</li><li>NOTE: This returns to the evaluation of the <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> that originally called this abstract operation.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>iterNextObj</var>).</li><li>NOTE: This returns to the evaluation of the operation that had most previously resumed evaluation of <var>genContext</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-atomicload": {"num": "24.4.1.12", "title": "#sec-atomicload AtomicLoad ( typedArray, index )", "html": "<emu-clause id=\"sec-atomicload\" aoid=\"AtomicLoad\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomicload\">#sec-atomicload</span> AtomicLoad ( <var>typedArray</var>, <var>index</var> )</h1>\n        <p>The abstract operation AtomicLoad takes two arguments, <var>typedArray</var>, <var>index</var>. The operation atomically loads a value and returns the loaded value. It performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateSharedIntegerTypedArray\"><a href=\"#sec-validatesharedintegertypedarray\">ValidateSharedIntegerTypedArray</a></emu-xref>(<var>typedArray</var>).</li><li>Let <var>i</var> be ?&#160;<emu-xref aoid=\"ValidateAtomicAccess\"><a href=\"#sec-validateatomicaccess\">ValidateAtomicAccess</a></emu-xref>(<var>typedArray</var>, <var>index</var>).</li><li>Let <var>arrayTypeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>elementType</var> be the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>offset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>Let <var>indexedPosition</var> be (<var>i</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Return <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref>(<var>buffer</var>, <var>indexedPosition</var>, <var>elementType</var>, <emu-val>true</emu-val>, <emu-const>SeqCst</emu-const>).\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-properties-of-asyncgenerator-intances": {"num": "25.5.2", "title": "#sec-properties-of-asyncgenerator-intances Properties of AsyncGenerator Instances", "html": "<emu-clause id=\"sec-properties-of-asyncgenerator-intances\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-asyncgenerator-intances\">#sec-properties-of-asyncgenerator-intances</span> Properties of AsyncGenerator Instances</h1>\n      <p>AsyncGenerator instances are initially created with the internal slots described below:</p>\n      <emu-table id=\"table-internal-slots-of-asyncgenerator-instances\" caption=\"Internal Slots of AsyncGenerator Instances\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-internal-slots-of-asyncgenerator-instances\">#table-internal-slots-of-asyncgenerator-instances</span>: Internal Slots of AsyncGenerator Instances</figcaption>\n        <table>\n          <tbody>\n          <tr>\n            <th>Internal Slot</th>\n            <th>Description</th>\n          </tr>\n          <tr>\n            <td>[[AsyncGeneratorState]]</td>\n            <td>The current execution state of the async generator. The possible values are: <emu-val>undefined</emu-val>, <emu-const>suspendedStart</emu-const>, <emu-const>suspendedYield</emu-const>, <emu-const>executing</emu-const>, <emu-const>awaiting-return</emu-const>, and <emu-const>completed</emu-const>.</td>\n          </tr>\n          <tr>\n            <td>[[AsyncGeneratorContext]]</td>\n            <td>The <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is used when executing the code of this async generator.</td>\n          </tr>\n          <tr>\n            <td>[[AsyncGeneratorQueue]]</td>\n            <td>A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of AsyncGeneratorRequest records which represent requests to resume the async generator.</td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n    </emu-clause>\n\n    "}, "sec-getvaluefrombuffer": {"num": "24.1.1.10", "title": "#sec-getvaluefrombuffer GetValueFromBuffer ( arrayBuffer, byteIndex, type, isTypedArray, order [ , isLittleEndian ] )", "html": "<emu-clause id=\"sec-getvaluefrombuffer\" aoid=\"GetValueFromBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-getvaluefrombuffer\">#sec-getvaluefrombuffer</span> GetValueFromBuffer ( <var>arrayBuffer</var>, <var>byteIndex</var>, <var>type</var>, <var>isTypedArray</var>, <var>order</var> [ , <var>isLittleEndian</var> ] )</h1>\n        <p>The abstract operation GetValueFromBuffer takes six parameters, an ArrayBuffer or SharedArrayBuffer <var>arrayBuffer</var>, an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>byteIndex</var>, a TypedArray element type <var>type</var>, a Boolean <var>isTypedArray</var>, <var>order</var> which is one of (<emu-const>SeqCst</emu-const>, <emu-const>Unordered</emu-const>), and optionally a Boolean <var>isLittleEndian</var>. This operation performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>false</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: There are sufficient bytes in <var>arrayBuffer</var> starting at <var>byteIndex</var> to represent a value of <var>type</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>byteIndex</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value &#8805; 0.</li><li>Let <var>block</var> be <var>arrayBuffer</var>.[[ArrayBufferData]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for Element Type <var>type</var>.</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>execution</var> be the [[CandidateExecution]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>eventList</var> be the [[EventList]] field of the element in <var>execution</var>.[[EventsRecords]] whose [[AgentSignifier]] is <emu-xref aoid=\"AgentSignifier\"><a href=\"#sec-agentsignifier\">AgentSignifier</a></emu-xref>().</li><li>If <var>isTypedArray</var> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsNoTearConfiguration\"><a href=\"#sec-isnotearconfiguration\">IsNoTearConfiguration</a></emu-xref>(<var>type</var>, <var>order</var>) is <emu-val>true</emu-val>, let <var>noTear</var> be <emu-val>true</emu-val>; otherwise let <var>noTear</var> be <emu-val>false</emu-val>.</li><li>Let <var>rawValue</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of length <var>elementSize</var> of nondeterministically chosen byte values.</li><li>NOTE: In implementations, <var>rawValue</var> is the result of a non-atomic or atomic read instruction on the underlying hardware. The nondeterminism is a semantic prescription of the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> to describe observable behaviour of hardware with weak consistency.</li><li>Let <var>readEvent</var> be <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> { [[Order]]: <var>order</var>, [[NoTear]]: <var>noTear</var>, [[Block]]: <var>block</var>, [[ByteIndex]]: <var>byteIndex</var>, [[ElementSize]]: <var>elementSize</var> }.</li><li>Append <var>readEvent</var> to <var>eventList</var>.</li><li>Append <emu-xref href=\"#sec-chosen-value-records\"><a href=\"#sec-chosen-value-records\">Chosen Value Record</a></emu-xref> { [[Event]]: <var>readEvent</var>, [[ChosenValue]]: <var>rawValue</var> } to <var>execution</var>.[[ChosenValues]].</li></ol></li><li>Else, let <var>rawValue</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of <var>elementSize</var> containing, in order, the <var>elementSize</var> sequence of bytes starting with <var>block</var>[<var>byteIndex</var>].</li><li>If <var>isLittleEndian</var> is not present, set <var>isLittleEndian</var> to the value of the [[LittleEndian]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Return <emu-xref aoid=\"RawBytesToNumeric\"><a href=\"#sec-rawbytestonumeric\">RawBytesToNumeric</a></emu-xref>(<var>type</var>, <var>rawValue</var>, <var>isLittleEndian</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-array.prototype.values": {"num": "22.1.3.32", "title": "#sec-array.prototype.values Array.prototype.values ( )", "html": "<emu-clause id=\"sec-array.prototype.values\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.values\">#sec-array.prototype.values</span> Array.prototype.values ( )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Return <emu-xref aoid=\"CreateArrayIterator\"><a href=\"#sec-createarrayiterator\">CreateArrayIterator</a></emu-xref>(<var>O</var>, <emu-const>value</emu-const>).\n        </li></ol></emu-alg>\n        <p>This function is the  <dfn>%ArrayProto_values%</dfn> intrinsic object.</p>\n      </emu-clause>\n\n      "}, "sec-map.prototype.values": {"num": "23.1.3.11", "title": "#sec-map.prototype.values Map.prototype.values ( )", "html": "<emu-clause id=\"sec-map.prototype.values\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype.values\">#sec-map.prototype.values</span> Map.prototype.values ( )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"CreateMapIterator\"><a href=\"#sec-createmapiterator\">CreateMapIterator</a></emu-xref>(<var>M</var>, <emu-const>value</emu-const>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-validatesharedintegertypedarray": {"num": "24.4.1.1", "title": "#sec-validatesharedintegertypedarray ValidateSharedIntegerTypedArray ( typedArray [ , waitable ] )", "html": "<emu-clause id=\"sec-validatesharedintegertypedarray\" aoid=\"ValidateSharedIntegerTypedArray\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-validatesharedintegertypedarray\">#sec-validatesharedintegertypedarray</span> ValidateSharedIntegerTypedArray ( <var>typedArray</var> [ , <var>waitable</var> ] )</h1>\n        <p>The abstract operation ValidateSharedIntegerTypedArray takes one argument <var>typedArray</var> and an optional Boolean <var>waitable</var>. It performs the following steps:</p>\n        <emu-alg><ol><li>If <var>waitable</var> is not present, set <var>waitable</var> to <emu-val>false</emu-val>.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>typedArray</var>, [[TypedArrayName]]).</li><li>Let <var>typeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>Let <var>type</var> be the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>typeName</var>.</li><li>If <var>waitable</var> is <emu-val>true</emu-val>, then<ol><li>If <var>typeName</var> is not <code>\"Int32Array\"</code> or <code>\"BigInt64Array\"</code>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Else,<ol><li>If !&#160;<emu-xref aoid=\"IsUnclampedIntegerElementType\"><a href=\"#sec-isunclampedintegerelementtype\">IsUnclampedIntegerElementType</a></emu-xref>(<var>type</var>) is <emu-val>false</emu-val> and !&#160;<emu-xref aoid=\"IsBigIntElementType\"><a href=\"#sec-isbigintelementtype\">IsBigIntElementType</a></emu-xref>(<var>type</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>typedArray</var> has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>buffer</var> be <var>typedArray</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>buffer</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-dataview.prototype.setuint32": {"num": "24.3.4.24", "title": "#sec-dataview.prototype.setuint32 DataView.prototype.setUint32 ( byteOffset, value [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.setuint32\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.setuint32\">#sec-dataview.prototype.setuint32</span> DataView.prototype.setUint32 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>setUint32</code> method is called with arguments <var>byteOffset</var> and <var>value</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"SetViewValue\"><a href=\"#sec-setviewvalue\">SetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <emu-const>Uint32</emu-const>, <var>value</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-array.prototype.entries": {"num": "22.1.3.4", "title": "#sec-array.prototype.entries Array.prototype.entries ( )", "html": "<emu-clause id=\"sec-array.prototype.entries\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.entries\">#sec-array.prototype.entries</span> Array.prototype.entries ( )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Return <emu-xref aoid=\"CreateArrayIterator\"><a href=\"#sec-createarrayiterator\">CreateArrayIterator</a></emu-xref>(<var>O</var>, <emu-const>key+value</emu-const>).\n        </li></ol></emu-alg>\n        <p>This function is the  <dfn>%ArrayProto_entries%</dfn> intrinsic object.</p>\n      </emu-clause>\n\n      "}, "sec-%arrayiteratorprototype%.next": {"num": "22.1.5.2.1", "title": "#sec-%arrayiteratorprototype%.next %ArrayIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%arrayiteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%arrayiteratorprototype%.next\">#sec-%arrayiteratorprototype%.next</span> %ArrayIteratorPrototype%.next ( )</h1>\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>O</var> does not have all of the internal slots of an Array Iterator Instance (<emu-xref href=\"#sec-properties-of-array-iterator-instances\"><a href=\"#sec-properties-of-array-iterator-instances\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-array-iterator-instances\">#sec-properties-of-array-iterator-instances</a></emu-xref>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>a</var> be <var>O</var>.[[IteratedObject]].</li><li>If <var>a</var> is <emu-val>undefined</emu-val>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li><li>Let <var>index</var> be <var>O</var>.[[ArrayIteratorNextIndex]].</li><li>Let <var>itemKind</var> be <var>O</var>.[[ArrayIterationKind]].</li><li>If <var>a</var> has a [[TypedArrayName]] internal slot, then<ol><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>a</var>.[[ViewedArrayBuffer]]) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>len</var> be <var>a</var>.[[ArrayLength]].</li></ol></li><li>Else,<ol><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>a</var>).</li></ol></li><li>If <var>index</var> &#8805; <var>len</var>, then<ol><li>Set <var>O</var>.[[IteratedObject]] to <emu-val>undefined</emu-val>.</li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li></ol></li><li>Set <var>O</var>.[[ArrayIteratorNextIndex]] to <var>index</var> + 1.</li><li>If <var>itemKind</var> is <emu-const>key</emu-const>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>index</var>, <emu-val>false</emu-val>).</li><li>Let <var>elementKey</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>index</var>).</li><li>Let <var>elementValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>a</var>, <var>elementKey</var>).</li><li>If <var>itemKind</var> is <emu-const>value</emu-const>, let <var>result</var> be <var>elementValue</var>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>itemKind</var> is <emu-const>key+value</emu-const>.</li><li>Let <var>result</var> be !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>index</var>, <var>elementValue</var> &#187;).</li></ol></li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>result</var>, <emu-val>false</emu-val>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-object.freeze": {"num": "19.1.2.6", "title": "#sec-object.freeze Object.freeze ( O )", "html": "<emu-clause id=\"sec-object.freeze\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.freeze\">#sec-object.freeze</span> Object.freeze ( <var>O</var> )</h1>\n        <p>When the <code>freeze</code> function is called, the following steps are taken:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, return <var>O</var>.</li><li>Let <var>status</var> be ?&#160;<emu-xref aoid=\"SetIntegrityLevel\"><a href=\"#sec-setintegritylevel\">SetIntegrityLevel</a></emu-xref>(<var>O</var>, <emu-const>frozen</emu-const>).</li><li>If <var>status</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>O</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-InnerModuleLinking": {"num": "15.2.1.16.1.1", "title": "#sec-InnerModuleLinking InnerModuleLinking ( module, stack, index )", "html": "<emu-clause id=\"sec-InnerModuleLinking\" oldids=\"sec-innermoduleinstantiation\" aoid=\"InnerModuleLinking\">\n            <span id=\"sec-innermoduleinstantiation\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-InnerModuleLinking\">#sec-InnerModuleLinking</span> InnerModuleLinking ( <var>module</var>, <var>stack</var>, <var>index</var> )</h1>\n\n            <p>The InnerModuleLinking abstract operation is used by Link to perform the actual linking process for the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> <var>module</var>, as well as recursively on all other modules in the dependency graph. The <var>stack</var> and <var>index</var> parameters, as well as a module's [[DFSIndex]] and [[DFSAncestorIndex]] fields, keep track of the depth-first search (DFS) traversal. In particular, [[DFSAncestorIndex]] is used to discover strongly connected components (SCCs), such that all modules in an SCC transition to <emu-const>linked</emu-const> together.</p>\n\n            <p>This abstract operation performs the following steps:</p>\n\n            <emu-alg><ol><li>If <var>module</var> is not a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li>Perform ? <var>module</var>.Link().</li><li>Return <var>index</var>.</li></ol></li><li>If <var>module</var>.[[Status]] is <emu-const>linking</emu-const>, <emu-const>linked</emu-const>, or <emu-const>evaluated</emu-const>, then<ol><li>Return <var>index</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>unlinked</emu-const>.</li><li>Set <var>module</var>.[[Status]] to <emu-const>linking</emu-const>.</li><li>Set <var>module</var>.[[DFSIndex]] to <var>index</var>.</li><li>Set <var>module</var>.[[DFSAncestorIndex]] to <var>index</var>.</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>Append <var>module</var> to <var>stack</var>.</li><li>For each String <var>required</var> that is an element of <var>module</var>.[[RequestedModules]], do<ol><li>Let <var>requiredModule</var> be ?&#160;<emu-xref aoid=\"HostResolveImportedModule\"><a href=\"#sec-hostresolveimportedmodule\">HostResolveImportedModule</a></emu-xref>(<var>module</var>, <var>required</var>).</li><li>Set <var>index</var> to ?&#160;<emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>(<var>requiredModule</var>, <var>stack</var>, <var>index</var>).</li><li>If <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is either <emu-const>linking</emu-const>, <emu-const>linked</emu-const>, or <emu-const>evaluated</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var>.[[Status]] is <emu-const>linking</emu-const> if and only if <var>requiredModule</var> is in <var>stack</var>.</li><li>If <var>requiredModule</var>.[[Status]] is <emu-const>linking</emu-const>, then<ol><li>Set <var>module</var>.[[DFSAncestorIndex]] to <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>module</var>.[[DFSAncestorIndex]], <var>requiredModule</var>.[[DFSAncestorIndex]]).</li></ol></li></ol></li></ol></li><li>Perform ? <var>module</var>.<emu-xref aoid=\"InitializeEnvironment\"><a href=\"#sec-source-text-module-record-initialize-environment\">InitializeEnvironment</a></emu-xref>().</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var> occurs exactly once in <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[DFSAncestorIndex]] is less than or equal to <var>module</var>.[[DFSIndex]].</li><li>If <var>module</var>.[[DFSAncestorIndex]] equals <var>module</var>.[[DFSIndex]], then<ol><li>Let <var>done</var> be <emu-val>false</emu-val>.</li><li>Repeat, while <var>done</var> is <emu-val>false</emu-val>,<ol><li>Let <var>requiredModule</var> be the last element in <var>stack</var>.</li><li>Remove the last element of <var>stack</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>requiredModule</var> is a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>.</li><li>Set <var>requiredModule</var>.[[Status]] to <emu-const>linked</emu-const>.</li><li>If <var>requiredModule</var> and <var>module</var> are the same <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>, set <var>done</var> to <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <var>index</var>.\n            </li></ol></emu-alg>\n          </emu-clause>\n        "}, "sec-dataview.prototype.getfloat32": {"num": "24.3.4.7", "title": "#sec-dataview.prototype.getfloat32 DataView.prototype.getFloat32 ( byteOffset [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.getfloat32\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.getfloat32\">#sec-dataview.prototype.getfloat32</span> DataView.prototype.getFloat32 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>getFloat32</code> method is called with argument <var>byteOffset</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"GetViewValue\"><a href=\"#sec-getviewvalue\">GetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <emu-const>Float32</emu-const>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-generatorfunction-instances": {"num": "25.2.4", "title": "#sec-generatorfunction-instances GeneratorFunction Instances", "html": "<emu-clause id=\"sec-generatorfunction-instances\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorfunction-instances\">#sec-generatorfunction-instances</span> GeneratorFunction Instances</h1>\n      <p>Every GeneratorFunction instance is an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> and has the internal slots listed in  <emu-xref href=\"#table-27\"><a href=\"#table-27\" class=\"excluded-xref\" excluded-id=\"table-27\">#table-27</a></emu-xref>. The value of the [[FunctionKind]] internal slot for all such instances is <emu-const>generator</emu-const>.</p>\n      <p>Each GeneratorFunction instance has the following own properties:</p>\n\n      <div id=\"excluded-sec-generatorfunction-instances-length\"><h1><span class=\"secnum\">25.2.4.1</span>#sec-generatorfunction-instances-length length</h1>...</div><div id=\"excluded-sec-generatorfunction-instances-name\"><h1><span class=\"secnum\">25.2.4.2</span>#sec-generatorfunction-instances-name name</h1>...</div><div id=\"excluded-sec-generatorfunction-instances-prototype\"><h1><span class=\"secnum\">25.2.4.3</span>#sec-generatorfunction-instances-prototype prototype</h1>...</div></emu-clause>\n  "}, "sec-dataview.prototype.getuint32": {"num": "24.3.4.14", "title": "#sec-dataview.prototype.getuint32 DataView.prototype.getUint32 ( byteOffset [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.getuint32\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.getuint32\">#sec-dataview.prototype.getuint32</span> DataView.prototype.getUint32 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>getUint32</code> method is called with argument <var>byteOffset</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"GetViewValue\"><a href=\"#sec-getviewvalue\">GetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <emu-const>Uint32</emu-const>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-internalizejsonproperty": {"num": "24.5.1.1", "title": "#sec-internalizejsonproperty Runtime Semantics: InternalizeJSONProperty ( holder, name )", "html": "<emu-clause id=\"sec-internalizejsonproperty\" aoid=\"InternalizeJSONProperty\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-internalizejsonproperty\">#sec-internalizejsonproperty</span> Runtime Semantics: InternalizeJSONProperty ( <var>holder</var>, <var>name</var> )</h1>\n        <p>The abstract operation InternalizeJSONProperty is a recursive abstract operation that takes two parameters: a <var>holder</var> object and the String <var>name</var> of a property in that object. InternalizeJSONProperty uses the value of <var>reviver</var> that was originally passed to the above parse function.</p>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>This algorithm intentionally does not throw an exception if either [[Delete]] or <emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref> return <emu-val>false</emu-val>.</p>\n        </div></emu-note>\n        <emu-alg><ol><li>Let <var>val</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>holder</var>, <var>name</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>val</var>) is Object, then<ol><li>Let <var>isArray</var> be ?&#160;<emu-xref aoid=\"IsArray\"><a href=\"#sec-isarray\">IsArray</a></emu-xref>(<var>val</var>).</li><li>If <var>isArray</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>I</var> be 0.</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>val</var>).</li><li>Repeat, while <var>I</var> &lt; <var>len</var>,<ol><li>Let <var>newElement</var> be ?&#160;<emu-xref aoid=\"InternalizeJSONProperty\"><a href=\"#sec-internalizejsonproperty\">InternalizeJSONProperty</a></emu-xref>(<var>val</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>I</var>)).</li><li>If <var>newElement</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform ? <var>val</var>.[[Delete]](! <emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>I</var>)).</li></ol></li><li>Else,<ol><li>Perform ?&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>val</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>I</var>), <var>newElement</var>).</li><li>NOTE: This algorithm intentionally does not throw an exception if <emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref> returns <emu-val>false</emu-val>.</li></ol></li><li>Set <var>I</var> to <var>I</var> + 1.</li></ol></li></ol></li><li>Else,<ol><li>Let <var>keys</var> be ?&#160;<emu-xref aoid=\"EnumerableOwnPropertyNames\"><a href=\"#sec-enumerableownpropertynames\">EnumerableOwnPropertyNames</a></emu-xref>(<var>val</var>, <emu-const>key</emu-const>).</li><li>For each String <var>P</var> in <var>keys</var>, do<ol><li>Let <var>newElement</var> be ?&#160;<emu-xref aoid=\"InternalizeJSONProperty\"><a href=\"#sec-internalizejsonproperty\">InternalizeJSONProperty</a></emu-xref>(<var>val</var>, <var>P</var>).</li><li>If <var>newElement</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform ? <var>val</var>.[[Delete]](<var>P</var>).</li></ol></li><li>Else,<ol><li>Perform ?&#160;<emu-xref aoid=\"CreateDataProperty\"><a href=\"#sec-createdataproperty\">CreateDataProperty</a></emu-xref>(<var>val</var>, <var>P</var>, <var>newElement</var>).</li></ol></li></ol></li></ol></li></ol></li><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>reviver</var>, <var>holder</var>, &#171; <var>name</var>, <var>val</var> &#187;).\n        </li></ol></emu-alg>\n        <p>It is not permitted for a conforming implementation of <code>JSON.parse</code> to extend the JSON grammars. If an implementation wishes to support a modified or extended JSON interchange format it must do so by defining a different parse function.</p>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>In the case where there are duplicate name Strings within an object, lexically preceding values for the same key shall be overwritten.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-isnotearconfiguration": {"num": "24.1.1.8", "title": "#sec-isnotearconfiguration IsNoTearConfiguration ( type, order )", "html": "<emu-clause id=\"sec-isnotearconfiguration\" aoid=\"IsNoTearConfiguration\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-isnotearconfiguration\">#sec-isnotearconfiguration</span> IsNoTearConfiguration ( <var>type</var>, <var>order</var> )</h1>\n        <p>The abstract operation IsNoTearConfiguration with arguments <var>type</var> and <var>order</var> performs the following steps:</p>\n        <emu-alg><ol><li>If !&#160;<emu-xref aoid=\"IsUnclampedIntegerElementType\"><a href=\"#sec-isunclampedintegerelementtype\">IsUnclampedIntegerElementType</a></emu-xref>(<var>type</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If !&#160;<emu-xref aoid=\"IsBigIntElementType\"><a href=\"#sec-isbigintelementtype\">IsBigIntElementType</a></emu-xref>(<var>type</var>) is <emu-val>true</emu-val> and <var>order</var> is not <emu-const>Init</emu-const> or <emu-const>Unordered</emu-const>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-%mapiteratorprototype%.next": {"num": "23.1.5.2.1", "title": "#sec-%mapiteratorprototype%.next %MapIteratorPrototype%.next ( )", "html": "<emu-clause id=\"sec-%mapiteratorprototype%.next\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%mapiteratorprototype%.next\">#sec-%mapiteratorprototype%.next</span> %MapIteratorPrototype%.next ( )</h1>\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>O</var> does not have all of the internal slots of a Map Iterator Instance (<emu-xref href=\"#sec-properties-of-map-iterator-instances\"><a href=\"#sec-properties-of-map-iterator-instances\" class=\"excluded-xref\" excluded-id=\"sec-properties-of-map-iterator-instances\">#sec-properties-of-map-iterator-instances</a></emu-xref>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>m</var> be <var>O</var>.[[Map]].</li><li>Let <var>index</var> be <var>O</var>.[[MapNextIndex]].</li><li>Let <var>itemKind</var> be <var>O</var>.[[MapIterationKind]].</li><li>If <var>m</var> is <emu-val>undefined</emu-val>, return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>m</var> has a [[MapData]] internal slot.</li><li>Let <var>entries</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>m</var>.[[MapData]].</li><li>Let <var>numEntries</var> be the number of elements of <var>entries</var>.</li><li>NOTE: <var>numEntries</var> must be redetermined each time this method is evaluated.</li><li>Repeat, while <var>index</var> is less than <var>numEntries</var>,<ol><li>Let <var>e</var> be the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]], [[Value]] } that is the value of <var>entries</var>[<var>index</var>].</li><li>Set <var>index</var> to <var>index</var> + 1.</li><li>Set <var>O</var>.[[MapNextIndex]] to <var>index</var>.</li><li>If <var>e</var>.[[Key]] is not <emu-const>empty</emu-const>, then<ol><li>If <var>itemKind</var> is <emu-const>key</emu-const>, let <var>result</var> be <var>e</var>.[[Key]].</li><li>Else if <var>itemKind</var> is <emu-const>value</emu-const>, let <var>result</var> be <var>e</var>.[[Value]].</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>itemKind</var> is <emu-const>key+value</emu-const>.</li><li>Let <var>result</var> be !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>e</var>.[[Key]], <var>e</var>.[[Value]] &#187;).</li></ol></li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>result</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li><li>Set <var>O</var>.[[Map]] to <emu-val>undefined</emu-val>.</li><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-dataview.prototype.setbiguint64": {"num": "24.3.4.16", "title": "#sec-dataview.prototype.setbiguint64 DataView.prototype.setBigUint64 ( byteOffset, value [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.setbiguint64\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.setbiguint64\">#sec-dataview.prototype.setbiguint64</span> DataView.prototype.setBigUint64 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>setBigUint64</code> method is called with arguments <var>byteOffset</var> and <var>value</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>undefined</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"SetViewValue\"><a href=\"#sec-setviewvalue\">SetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <emu-const>BigUint64</emu-const>, <var>value</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-object.issealed": {"num": "19.1.2.16", "title": "#sec-object.issealed Object.isSealed ( O )", "html": "<emu-clause id=\"sec-object.issealed\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.issealed\">#sec-object.issealed</span> Object.isSealed ( <var>O</var> )</h1>\n        <p>When the <code>isSealed</code> function is called with argument <var>O</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, return <emu-val>true</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"TestIntegrityLevel\"><a href=\"#sec-testintegritylevel\">TestIntegrityLevel</a></emu-xref>(<var>O</var>, <emu-const>sealed</emu-const>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-moduledeclarationlinking": {"num": "15.2.1.16.1", "title": "#sec-moduledeclarationlinking Link ( ) Concrete Method", "html": "<emu-clause id=\"sec-moduledeclarationlinking\" oldids=\"sec-moduledeclarationinstantiation\">\n          <span id=\"sec-moduledeclarationinstantiation\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-moduledeclarationlinking\">#sec-moduledeclarationlinking</span> Link ( ) Concrete Method</h1>\n\n          <p>The Link concrete method of a <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> implements the corresponding <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref> abstract method.</p>\n          <p>On success, Link transitions this module's [[Status]] from <emu-const>unlinked</emu-const> to <emu-const>linked</emu-const>. On failure, an exception is thrown and this module's [[Status]] remains <emu-const>unlinked</emu-const>.</p>\n\n          <p>This abstract method performs the following steps (most of the work is done by the auxiliary function <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>):</p>\n\n          <emu-alg><ol><li>Let <var>module</var> be this <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is not <emu-const>linking</emu-const> or <emu-const>evaluating</emu-const>.</li><li>Let <var>stack</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid=\"InnerModuleLinking\"><a href=\"#sec-InnerModuleLinking\">InnerModuleLinking</a></emu-xref>(<var>module</var>, <var>stack</var>, 0).</li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>For each <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> <var>m</var> in <var>stack</var>, do<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>m</var>.[[Status]] is <emu-const>linking</emu-const>.</li><li>Set <var>m</var>.[[Status]] to <emu-const>unlinked</emu-const>.</li><li>Set <var>m</var>.[[Environment]] to <emu-val>undefined</emu-val>.</li><li>Set <var>m</var>.[[DFSIndex]] to <emu-val>undefined</emu-val>.</li><li>Set <var>m</var>.[[DFSAncestorIndex]] to <emu-val>undefined</emu-val>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>unlinked</emu-const>.</li><li>Return <var>result</var>.</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>module</var>.[[Status]] is <emu-const>linked</emu-const> or <emu-const>evaluated</emu-const>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>stack</var> is empty.</li><li>Return <emu-val>undefined</emu-val>.\n          </li></ol></emu-alg>\n\n          <div id=\"excluded-sec-InnerModuleLinking\"><h1><span class=\"secnum\">15.2.1.16.1.1</span>#sec-InnerModuleLinking InnerModuleLinking ( module, stack, index )</h1>...</div></emu-clause>\n\n        "}, "sec-function-p1-p2-pn-body": {"num": "19.2.1.1", "title": "#sec-function-p1-p2-pn-body Function ( p1, p2, \u2026 , pn, body )", "html": "<emu-clause id=\"sec-function-p1-p2-pn-body\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-p1-p2-pn-body\">#sec-function-p1-p2-pn-body</span> Function ( <var>p1</var>, <var>p2</var>, &#8230; , <var>pn</var>, <var>body</var> )</h1>\n        <p>The last argument specifies the body (executable code) of a function; any preceding arguments specify formal parameters.</p>\n        <p>When the <code>Function</code> function is called with some arguments <var>p1</var>, <var>p2</var>, &#8230; , <var>pn</var>, <var>body</var> (where <var>n</var> might be 0, that is, there are no &#8220; <var>p</var> &#8221; arguments, and where <var>body</var> might also not be provided), the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>C</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Let <var>args</var> be the <var>argumentsList</var> that was passed to this function by [[Call]] or [[Construct]].</li><li>Return ?&#160;<emu-xref aoid=\"CreateDynamicFunction\"><a href=\"#sec-createdynamicfunction\">CreateDynamicFunction</a></emu-xref>(<var>C</var>, NewTarget, <emu-const>normal</emu-const>, <var>args</var>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>It is permissible but not necessary to have one argument for each formal parameter to be specified. For example, all three of the following expressions produce the same result:</p>\n          <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Function</span>(<span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"c\"</span>, <span class=\"hljs-string\">\"return a+b+c\"</span>)\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Function</span>(<span class=\"hljs-string\">\"a, b, c\"</span>, <span class=\"hljs-string\">\"return a+b+c\"</span>)\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Function</span>(<span class=\"hljs-string\">\"a,b\"</span>, <span class=\"hljs-string\">\"c\"</span>, <span class=\"hljs-string\">\"return a+b+c\"</span>)</code></pre>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-createdynamicfunction\"><h1><span class=\"secnum\">19.2.1.1.1</span>#sec-createdynamicfunction Runtime Semantics: CreateDynamicFunction ( constructor, newTarget, kind, args )</h1>...</div></emu-clause>\n    "}, "sec-%typedarray%.prototype.entries": {"num": "22.2.3.6", "title": "#sec-%typedarray%.prototype.entries %TypedArray%.prototype.entries ( )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.entries\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.entries\">#sec-%typedarray%.prototype.entries</span> %TypedArray%.prototype.entries ( )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Return <emu-xref aoid=\"CreateArrayIterator\"><a href=\"#sec-createarrayiterator\">CreateArrayIterator</a></emu-xref>(<var>O</var>, <emu-const>key+value</emu-const>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-asyncgeneratorenqueue": {"num": "25.5.3.6", "title": "#sec-asyncgeneratorenqueue AsyncGeneratorEnqueue ( generator, completion )", "html": "<emu-clause id=\"sec-asyncgeneratorenqueue\" aoid=\"AsyncGeneratorEnqueue\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorenqueue\">#sec-asyncgeneratorenqueue</span> AsyncGeneratorEnqueue ( <var>generator</var>, <var>completion</var> )</h1>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>completion</var> is a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>.</li><li>Let <var>promiseCapability</var> be !&#160;<emu-xref aoid=\"NewPromiseCapability\"><a href=\"#sec-newpromisecapability\">NewPromiseCapability</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>generator</var>) is not Object, or if <var>generator</var> does not have an [[AsyncGeneratorState]] internal slot, then<ol><li>Let <var>badGeneratorError</var> be a newly created <emu-val>TypeError</emu-val> object.</li><li>Perform !&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>promiseCapability</var>.[[Reject]], <emu-val>undefined</emu-val>, &#171; <var>badGeneratorError</var> &#187;).</li><li>Return <var>promiseCapability</var>.[[Promise]].</li></ol></li><li>Let <var>queue</var> be <var>generator</var>.[[AsyncGeneratorQueue]].</li><li>Let <var>request</var> be AsyncGeneratorRequest { [[Completion]]: <var>completion</var>, [[Capability]]: <var>promiseCapability</var> }.</li><li>Append <var>request</var> to the end of <var>queue</var>.</li><li>Let <var>state</var> be <var>generator</var>.[[AsyncGeneratorState]].</li><li>If <var>state</var> is not <emu-const>executing</emu-const>, then<ol><li>Perform !&#160;<emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref>(<var>generator</var>).</li></ol></li><li>Return <var>promiseCapability</var>.[[Promise]].\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-asyncgeneratoryield": {"num": "25.5.3.7", "title": "#sec-asyncgeneratoryield AsyncGeneratorYield ( value )", "html": "<emu-clause id=\"sec-asyncgeneratoryield\" aoid=\"AsyncGeneratorYield\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratoryield\">#sec-asyncgeneratoryield</span> AsyncGeneratorYield ( <var>value</var> )</h1>\n        <p>The abstract operation AsyncGeneratorYield with argument <var>value</var> performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>genContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>genContext</var> is the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> of a generator.</li><li>Let <var>generator</var> be the value of the Generator component of <var>genContext</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>() is <emu-const>async</emu-const>.</li><li>Set <var>value</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).</li><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <emu-const>suspendedYield</emu-const>.</li><li>Remove <var>genContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the code evaluation state of <var>genContext</var> such that when evaluation is resumed with a <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> <var>resumptionValue</var> the following steps will be performed:<ol><li>If <var>resumptionValue</var>.[[Type]] is not <emu-const>return</emu-const>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>resumptionValue</var>).</li><li>Let <var>awaited</var> be <emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>resumptionValue</var>.[[Value]]).</li><li>If <var>awaited</var>.[[Type]] is <emu-const>throw</emu-const>, return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>awaited</var>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>awaited</var>.[[Type]] is <emu-const>normal</emu-const>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>awaited</var>.[[Value]], [[Target]]: <emu-const>empty</emu-const> }.</li><li>NOTE: When one of the above steps returns, it returns to the evaluation of the <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt> production that originally called this abstract operation.</li></ol></li><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorResolve\"><a href=\"#sec-asyncgeneratorresolve\">AsyncGeneratorResolve</a></emu-xref>(<var>generator</var>, <var>value</var>, <emu-val>false</emu-val>).</li><li>NOTE: This returns to the evaluation of the operation that had most previously resumed evaluation of <var>genContext</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-async-functions-abstract-operations-async-function-create": {"num": "9.2.8", "title": "#sec-async-functions-abstract-operations-async-function-create AsyncFunctionCreate ( kind, parameters, body, Scope )", "html": "<emu-clause id=\"sec-async-functions-abstract-operations-async-function-create\" aoid=\"AsyncFunctionCreate\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-functions-abstract-operations-async-function-create\">#sec-async-functions-abstract-operations-async-function-create</span> AsyncFunctionCreate ( <var>kind</var>, <var>parameters</var>, <var>body</var>, <var>Scope</var> )</h1>\n      <p>The abstract operation AsyncFunctionCreate requires the arguments: <var>kind</var> which is one of (<emu-const>Normal</emu-const>, <emu-const>Method</emu-const>, <emu-const>Arrow</emu-const>), a parameter list <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>parameters</var>, a body <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>body</var>, a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> specified by <var>Scope</var>. AsyncFunctionCreate performs the following steps:</p>\n      <emu-alg><ol><li>Let <var>functionPrototype</var> be %AsyncFunction.prototype%.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"FunctionAllocate\"><a href=\"#sec-functionallocate\">FunctionAllocate</a></emu-xref>(<var>functionPrototype</var>, <emu-const>async</emu-const>).</li><li>Return !&#160;<emu-xref aoid=\"FunctionInitialize\"><a href=\"#sec-functioninitialize\">FunctionInitialize</a></emu-xref>(<var>F</var>, <var>kind</var>, <var>parameters</var>, <var>body</var>, <var>Scope</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-runtime-semantics-classdefinitionevaluation": {"num": "14.6.13", "title": "#sec-runtime-semantics-classdefinitionevaluation Runtime Semantics: ClassDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-classdefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-classdefinitionevaluation\">#sec-runtime-semantics-classdefinitionevaluation</span> Runtime Semantics: ClassDefinitionEvaluation</h1>\n      <p>With parameters <var>classBinding</var> and <var>className</var>.</p>\n      <emu-grammar><emu-production name=\"ClassTail\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b8ea6aa5\"><emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>{</emu-t><emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>lex</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>classScope</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>lex</var>).</li><li>Let <var>classScopeEnvRec</var> be <var>classScope</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScopeEnvRec</var>.CreateImmutableBinding(<var>classBinding</var>, <emu-val>true</emu-val>).</li></ol></li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, then<ol><li>Let <var>protoParent</var> be %Object.prototype%.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else,<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>Let <var>superclassRef</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>lex</var>.</li><li>Let <var>superclass</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>superclassRef</var>).</li><li>If <var>superclass</var> is <emu-val>null</emu-val>, then<ol><li>Let <var>protoParent</var> be <emu-val>null</emu-val>.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else if <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>superclass</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Else,<ol><li>Let <var>protoParent</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>superclass</var>, <code>\"prototype\"</code>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>protoParent</var>) is neither Object nor Null, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorParent</var> be <var>superclass</var>.</li></ol></li></ol></li><li>Let <var>proto</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(<var>protoParent</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>constructor</var> be <emu-const>empty</emu-const>.</li><li>Else, let <var>constructor</var> be ConstructorMethod of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>If <var>constructor</var> is <emu-const>empty</emu-const>, then<ol><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, then<ol><li>Set <var>constructor</var> to the result of parsing the source text\n              <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">constructor</span>(...args) { <span class=\"hljs-keyword\">super</span>(...args); }</code></pre>\n              using the syntactic grammar with the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li></ol></li><li>Else,<ol><li>Set <var>constructor</var> to the result of parsing the source text\n              <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\">constructor</span>() {}</code></pre>\n              using the syntactic grammar with the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> <emu-nt params=\"~Yield, ~Await\"><a href=\"#prod-MethodDefinition\">MethodDefinition</a><emu-mods><emu-params>[~Yield, ~Await]</emu-params></emu-mods></emu-nt>.</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>Let <var>constructorInfo</var> be ! DefineMethod of <var>constructor</var> with arguments <var>proto</var> and <var>constructorParent</var>.</li><li>Let <var>F</var> be <var>constructorInfo</var>.[[Closure]].</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, set <var>F</var>.[[ConstructorKind]] to <emu-const>derived</emu-const>.</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>, <emu-val>false</emu-val>, <var>proto</var>).</li><li>Perform <emu-xref aoid=\"MakeClassConstructor\"><a href=\"#sec-makeclassconstructor\">MakeClassConstructor</a></emu-xref>(<var>F</var>).</li><li>If <var>className</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>className</var>).</li></ol></li><li>Perform <emu-xref aoid=\"CreateMethodProperty\"><a href=\"#sec-createmethodproperty\">CreateMethodProperty</a></emu-xref>(<var>proto</var>, <code>\"constructor\"</code>, <var>F</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>methods</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Else, let <var>methods</var> be NonConstructorMethodDefinitions of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>For each <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <var>m</var> in order from <var>methods</var>, do<ol><li>If IsStatic of <var>m</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>status</var> be PropertyDefinitionEvaluation of <var>m</var> with arguments <var>proto</var> and <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>status</var> be PropertyDefinitionEvaluation of <var>m</var> with arguments <var>F</var> and <emu-val>false</emu-val>.</li></ol></li><li>If <var>status</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>lex</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>status</var>).</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>lex</var>.</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScopeEnvRec</var>.InitializeBinding(<var>classBinding</var>, <var>F</var>).</li></ol></li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-mathematical-operations": {"num": "5.2.5", "title": "#sec-mathematical-operations Mathematical Operations", "html": "<emu-clause id=\"sec-mathematical-operations\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-mathematical-operations\">#sec-mathematical-operations</span> Mathematical Operations</h1>\n      <p>This specification makes reference to two kinds of numeric values:</p>\n      <ul>\n        <li><em>Number</em>: IEEE 754-2008 double-precision floating point values, used as the default numeric type.</li>\n        <li><em><emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">Mathematical value</a></emu-xref></em>: Arbitrary real numbers, used for specific situations.</li>\n      </ul>\n\n      <p>In the language of this specification, numerical values and operations (including addition, subtraction, negation, multiplication, division, and comparison) are distinguished among different numeric kinds using subscripts. The subscript  <sub><dfn id=\"&#120125;\">&#120125;</dfn></sub> refers to Numbers, and the subscript  <sub><dfn id=\"&#8477;\">&#8477;</dfn></sub> refers to mathematical values. A subscript is used following each numeric value and operation.</p>\n      <p>For brevity, the  <sub><emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref></sub> subscript can be omitted on Number values&#8212;a numeric value with no subscript is interpreted to be a Number. An operation with no subscript is interpreted to be a Number operation, unless one of the parameters has a particular subscript, in which case the operation adopts that subscript. For example, 1<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> + 2<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> = 3<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub> is a statement about mathematical values, and 1 + 2 = 3 is a statement about Numbers.</p>\n      <p>In general, when this specification refers to a numerical value, such as in the phrase, \"the length of <var>y</var>\" or \"the <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> represented by the four hexadecimal digits ...\", without explicitly specifying a numeric kind, the phrase refers to a Number. Phrases which refer to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> are explicitly annotated as such; for example, \"the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of the number of code points in ...\".</p>\n      <p>It is not defined to mix Numbers and mathematical values in either arithmetic or comparison operations, and any such undefined operation would be an editorial error in this specification text.</p>\n      <p>The <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> 0, alternatively written 0<sub><emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref></sub>, is defined as the double-precision floating point positive zero value. In certain contexts, it may also be written as <emu-val>+0</emu-val> for clarity.</p>\n      <p>This specification denotes most numeric values in base 10; it also uses numeric values of the form 0x followed by digits 0-9 or A-F as base-16 values.</p>\n      <p>In certain contexts, an operation is specified which is generic between Numbers and mathematical values. In these cases, the subscript can be a variable; <var>t</var> is often used for this purpose, for example 5<sub><var>t</var></sub> &#215; 10<sub><var>t</var></sub> = 50<sub><var>t</var></sub> for any <var>t</var> ranging over <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref> and <emu-xref href=\"#%F0%9D%94%BD\"><a href=\"#%F0%9D%94%BD\">&#120125;</a></emu-xref>, since the values involved are within the range where the semantics coincide.</p>\n      <p>Conversions between mathematical values and numbers are never implicit, and always explicit in this document. A conversion from a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> to a Number is denoted as \"the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>x</var>\", and is defined in  <emu-xref href=\"#sec-ecmascript-language-types-number-type\"><a href=\"#sec-ecmascript-language-types-number-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-number-type\">#sec-ecmascript-language-types-number-type</a></emu-xref>. A conversion from a Number to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> is denoted as \"the  <dfn id=\"mathematical-value\">mathematical value</dfn> of <var>x</var>\", or <emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref>(<var>x</var>). Note that the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of non-finite values is not defined, and the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> of <emu-val>+0</emu-val> and <emu-val>-0</emu-val> is the <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> 0<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>.</p>\n      <p>When the term  <dfn id=\"integer\">integer</dfn> is used in this specification, it refers to a <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> whose <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> is in the set of integers, unless otherwise stated: when the term  <dfn id=\"mathematical integer\">mathematical integer</dfn> is used in this specification, it refers to a <emu-xref href=\"#mathematical-value\"><a href=\"#mathematical-value\">mathematical value</a></emu-xref> which is in the set of integers. As shorthand, <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref><sub><var>t</var></sub> can be used to refer to either of the two, as determined by <var>t</var>.</p>\n      <p>The mathematical function  <emu-eqn id=\"eqn-abs\" aoid=\"abs\" class=\"inline\">abs<sub><var>t</var></sub>(<var>x</var>)</emu-eqn> produces the absolute value of <var>x</var>, which is  <emu-eqn class=\"inline\">-<sub><var>t</var></sub><var>x</var></emu-eqn> if <var>x</var> &lt;<sub><var>t</var></sub> 0<sub><var>t</var></sub> and otherwise is <var>x</var> itself.</p>\n      <p>The mathematical function  <emu-eqn id=\"eqn-min\" aoid=\"min\" class=\"inline\">min<sub><var>t</var></sub>(<var>x1</var>, <var>x2</var>, &#8230; , <var>xN</var>)</emu-eqn> produces the mathematically smallest of  <emu-eqn class=\"inline\"><var>x1</var></emu-eqn> through  <emu-eqn class=\"inline\"><var>xN</var></emu-eqn>. The mathematical function  <emu-eqn id=\"eqn-max\" aoid=\"max\" class=\"inline\">max<sub><var>t</var></sub>(<var>x1</var>, <var>x2</var>, ..., <var>xN</var>)</emu-eqn> produces the mathematically largest of  <emu-eqn class=\"inline\"><var>x1</var></emu-eqn> through  <emu-eqn class=\"inline\"><var>xN</var></emu-eqn>. The domain and range of these mathematical functions include <emu-val>+&#8734;</emu-val> and <emu-val>-&#8734;</emu-val>.</p>\n      <p>The notation &#8220;<emu-eqn id=\"eqn-modulo\" aoid=\"modulo\" class=\"inline\"><var>x</var> modulo<sub><var>t</var></sub> <var>y</var></emu-eqn>&#8221; (<var>y</var> must be finite and nonzero) computes a value <var>k</var> of the same sign as <var>y</var> (or zero) such that  <emu-eqn class=\"inline\"><emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref><sub><var>t</var></sub>(<var>k</var>) &lt;<sub><var>t</var></sub> <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref><sub><var>t</var></sub>(<var>y</var>) and <var>x</var>-<sub><var>t</var></sub><var>k</var> = <var>q</var> &#215;<sub><var>t</var></sub> <var>y</var></emu-eqn> for some <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref><sub><var>t</var></sub> <var>q</var>.</p>\n      <p>The mathematical function  <emu-eqn id=\"eqn-floor\" aoid=\"floor\" class=\"inline\">floor<sub><var>t</var></sub>(<var>x</var>)</emu-eqn> produces the largest <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref><sub><var>t</var></sub> (closest to positive infinity) that is not larger than <var>x</var>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><emu-eqn class=\"inline\"><emu-xref aoid=\"floor\"><a href=\"#eqn-floor\">floor</a></emu-xref><sub><var>t</var></sub>(<var>x</var>) = <var>x</var> -<sub><var>t</var></sub> (<var>x</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref><sub><var>t</var></sub> 1<sub><var>t</var></sub>)</emu-eqn>.</p>\n      </div></emu-note>\n    </emu-clause>\n    "}, "sec-properties-of-generator-instances": {"num": "25.4.2", "title": "#sec-properties-of-generator-instances Properties of Generator Instances", "html": "<emu-clause id=\"sec-properties-of-generator-instances\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-generator-instances\">#sec-properties-of-generator-instances</span> Properties of Generator Instances</h1>\n      <p>Generator instances are initially created with the internal slots described in  <emu-xref href=\"#table-56\"><a href=\"#table-56\" class=\"excluded-xref\" excluded-id=\"table-56\">#table-56</a></emu-xref>.</p>\n      <emu-table id=\"table-56\" caption=\"Internal Slots of Generator Instances\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-56\">#table-56</span>: Internal Slots of Generator Instances</figcaption>\n        <table>\n          <tbody>\n          <tr>\n            <th>\n              Internal Slot\n            \n            </th>\n            <th>\n              Description\n            \n            </th>\n          </tr>\n          <tr>\n            <td>\n              [[GeneratorState]]\n            \n            </td>\n            <td>\n              The current execution state of the generator. The possible values are: <emu-val>undefined</emu-val>, <emu-const>suspendedStart</emu-const>, <emu-const>suspendedYield</emu-const>, <emu-const>executing</emu-const>, and <emu-const>completed</emu-const>.\n            \n            </td>\n          </tr>\n          <tr>\n            <td>\n              [[GeneratorContext]]\n            \n            </td>\n            <td>\n              The <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is used when executing the code of this generator.\n            \n            </td>\n          </tr>\n          </tbody>\n        </table>\n      </figure></emu-table>\n    </emu-clause>\n\n    "}, "sec-array.prototype.keys": {"num": "22.1.3.16", "title": "#sec-array.prototype.keys Array.prototype.keys ( )", "html": "<emu-clause id=\"sec-array.prototype.keys\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.keys\">#sec-array.prototype.keys</span> Array.prototype.keys ( )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Return <emu-xref aoid=\"CreateArrayIterator\"><a href=\"#sec-createarrayiterator\">CreateArrayIterator</a></emu-xref>(<var>O</var>, <emu-const>key</emu-const>).\n        </li></ol></emu-alg>\n        <p>This function is the  <dfn>%ArrayProto_keys%</dfn> intrinsic object.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.slice": {"num": "22.2.3.24", "title": "#sec-%typedarray%.prototype.slice %TypedArray%.prototype.slice ( start, end )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.slice\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.slice\">#sec-%typedarray%.prototype.slice</span> %TypedArray%.prototype.slice ( <var>start</var>, <var>end</var> )</h1>\n        <p>The interpretation and use of the arguments of <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.slice</code> are the same as for <code>Array.prototype.slice</code> as defined in  <emu-xref href=\"#sec-array.prototype.slice\"><a href=\"#sec-array.prototype.slice\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.slice\">#sec-array.prototype.slice</a></emu-xref>. The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Let <var>len</var> be <var>O</var>.[[ArrayLength]].</li><li>Let <var>relativeStart</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>start</var>).</li><li>If <var>relativeStart</var> &lt; 0, let <var>k</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeStart</var>), 0); else let <var>k</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeStart</var>, <var>len</var>).</li><li>If <var>end</var> is <emu-val>undefined</emu-val>, let <var>relativeEnd</var> be <var>len</var>; else let <var>relativeEnd</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>end</var>).</li><li>If <var>relativeEnd</var> &lt; 0, let <var>final</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeEnd</var>), 0); else let <var>final</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeEnd</var>, <var>len</var>).</li><li>Let <var>count</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>final</var> - <var>k</var>, 0).</li><li>Let <var>A</var> be ?&#160;<emu-xref aoid=\"TypedArraySpeciesCreate\"><a href=\"#typedarray-species-create\">TypedArraySpeciesCreate</a></emu-xref>(<var>O</var>, &#171; <var>count</var> &#187;).</li><li>Let <var>srcName</var> be the String value of <var>O</var>.[[TypedArrayName]].</li><li>Let <var>srcType</var> be the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>srcName</var>.</li><li>Let <var>targetName</var> be the String value of <var>A</var>.[[TypedArrayName]].</li><li>Let <var>targetType</var> be the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>targetName</var>.</li><li>If <var>srcType</var> is different from <var>targetType</var>, then<ol><li>Let <var>n</var> be 0.</li><li>Repeat, while <var>k</var> &lt; <var>final</var><ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>kValue</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>Pk</var>).</li><li>Perform !&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>n</var>), <var>kValue</var>, <emu-val>true</emu-val>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li></ol></li><li>Else if <var>count</var> &gt; 0, then<ol><li>Let <var>srcBuffer</var> be <var>O</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>srcBuffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>targetBuffer</var> be <var>A</var>.[[ViewedArrayBuffer]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>srcType</var>.</li><li>NOTE: If <var>srcType</var> and <var>targetType</var> are the same, the transfer must be performed in a manner that preserves the bit-level encoding of the source data.</li><li>Let <var>srcByteOffet</var> be <var>O</var>.[[ByteOffset]].</li><li>Let <var>targetByteIndex</var> be <var>A</var>.[[ByteOffset]].</li><li>Let <var>srcByteIndex</var> be (<var>k</var> &#215; <var>elementSize</var>) + <var>srcByteOffet</var>.</li><li>Let <var>limit</var> be <var>targetByteIndex</var> + <var>count</var> &#215; <var>elementSize</var>.</li><li>Repeat, while <var>targetByteIndex</var> &lt; <var>limit</var><ol><li>Let <var>value</var> be <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref>(<var>srcBuffer</var>, <var>srcByteIndex</var>, <emu-const>Uint8</emu-const>, <emu-val>true</emu-val>, <emu-const>Unordered</emu-const>).</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>targetBuffer</var>, <var>targetByteIndex</var>, <emu-const>Uint8</emu-const>, <var>value</var>, <emu-val>true</emu-val>, <emu-const>Unordered</emu-const>).</li><li>Set <var>srcByteIndex</var> to <var>srcByteIndex</var> + 1.</li><li>Set <var>targetByteIndex</var> to <var>targetByteIndex</var> + 1.</li></ol></li></ol></li><li>Return <var>A</var>.\n        </li></ol></emu-alg>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n      </emu-clause>\n\n      "}, "sec-string.prototype.trimend": {"num": "21.1.3.29", "title": "#sec-string.prototype.trimend String.prototype.trimEnd ( )", "html": "<emu-clause id=\"sec-string.prototype.trimend\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.trimend\">#sec-string.prototype.trimend</span> String.prototype.trimEnd ( )</h1>\n        <p>This function interprets a String value as a sequence of UTF-16 encoded code points, as described in  <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-types-string-type\">#sec-ecmascript-language-types-string-type</a></emu-xref>.</p>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"TrimString\"><a href=\"#sec-trimstring\">TrimString</a></emu-xref>(<var>S</var>, <emu-const>end</emu-const>).\n        </li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>trimEnd</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-properties-of-map-iterator-instances": {"num": "23.1.5.3", "title": "#sec-properties-of-map-iterator-instances Properties of Map Iterator Instances", "html": "<emu-clause id=\"sec-properties-of-map-iterator-instances\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-properties-of-map-iterator-instances\">#sec-properties-of-map-iterator-instances</span> Properties of Map Iterator Instances</h1>\n        <p>Map Iterator instances are ordinary objects that inherit properties from the <emu-xref href=\"#sec-%mapiteratorprototype%-object\"><a href=\"#sec-%mapiteratorprototype%-object\">%MapIteratorPrototype%</a></emu-xref> intrinsic object. Map Iterator instances are initially created with the internal slots described in  <emu-xref href=\"#table-50\"><a href=\"#table-50\" class=\"excluded-xref\" excluded-id=\"table-50\">#table-50</a></emu-xref>.</p>\n        <emu-table id=\"table-50\" caption=\"Internal Slots of Map Iterator Instances\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-50\">#table-50</span>: Internal Slots of Map Iterator Instances</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Internal Slot\n              \n              </th>\n              <th>\n                Description\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[Map]]\n              \n              </td>\n              <td>\n                The Map object that is being iterated.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[MapNextIndex]]\n              \n              </td>\n              <td>\n                The <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> of the next Map data element to be examined by this iterator.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[MapIterationKind]]\n              \n              </td>\n              <td>\n                A String value that identifies what is to be returned for each element of the iteration. The possible values are: <emu-const>key</emu-const>, <emu-const>value</emu-const>, <emu-const>key+value</emu-const>.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n    "}, "sec-copydatablockbytes": {"num": "6.2.7.3", "title": "#sec-copydatablockbytes CopyDataBlockBytes ( toBlock, toIndex, fromBlock, fromIndex, count )", "html": "<emu-clause id=\"sec-copydatablockbytes\" aoid=\"CopyDataBlockBytes\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-copydatablockbytes\">#sec-copydatablockbytes</span> CopyDataBlockBytes ( <var>toBlock</var>, <var>toIndex</var>, <var>fromBlock</var>, <var>fromIndex</var>, <var>count</var> )</h1>\n        <p>When the abstract operation CopyDataBlockBytes is called, the following steps are taken:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fromBlock</var> and <var>toBlock</var> are distinct <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Data Block</a></emu-xref> or <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref> values.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fromIndex</var>, <var>toIndex</var>, and <var>count</var> are <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> values &#8805; 0.</li><li>Let <var>fromSize</var> be the number of bytes in <var>fromBlock</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fromIndex</var> + <var>count</var> &#8804; <var>fromSize</var>.</li><li>Let <var>toSize</var> be the number of bytes in <var>toBlock</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>toIndex</var> + <var>count</var> &#8804; <var>toSize</var>.</li><li>Repeat, while <var>count</var> &gt; 0<ol><li>If <var>fromBlock</var> is a <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref>, then<ol><li>Let <var>execution</var> be the [[CandidateExecution]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>eventList</var> be the [[EventList]] field of the element in <var>execution</var>.[[EventsRecords]] whose [[AgentSignifier]] is <emu-xref aoid=\"AgentSignifier\"><a href=\"#sec-agentsignifier\">AgentSignifier</a></emu-xref>().</li><li>Let <var>bytes</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of length 1 that contains a nondeterministically chosen byte value.</li><li>NOTE: In implementations, <var>bytes</var> is the result of a non-atomic read instruction on the underlying hardware. The nondeterminism is a semantic prescription of the <emu-xref href=\"#sec-memory-model\"><a href=\"#sec-memory-model\">memory model</a></emu-xref> to describe observable behaviour of hardware with weak consistency.</li><li>Let <var>readEvent</var> be <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> { [[Order]]: <emu-const>Unordered</emu-const>, [[NoTear]]: <emu-val>true</emu-val>, [[Block]]: <var>fromBlock</var>, [[ByteIndex]]: <var>fromIndex</var>, [[ElementSize]]: 1 }.</li><li>Append <var>readEvent</var> to <var>eventList</var>.</li><li>Append <emu-xref href=\"#sec-chosen-value-records\"><a href=\"#sec-chosen-value-records\">Chosen Value Record</a></emu-xref> { [[Event]]: <var>readEvent</var>, [[ChosenValue]]: <var>bytes</var> } to <var>execution</var>.[[ChosenValues]].</li><li>If <var>toBlock</var> is a <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref>, then<ol><li>Append <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> { [[Order]]: <emu-const>Unordered</emu-const>, [[NoTear]]: <emu-val>true</emu-val>, [[Block]]: <var>toBlock</var>, [[ByteIndex]]: <var>toIndex</var>, [[ElementSize]]: 1, [[Payload]]: <var>bytes</var> } to <var>eventList</var>.</li></ol></li><li>Else,<ol><li>Set <var>toBlock</var>[<var>toIndex</var>] to <var>bytes</var>[0].</li></ol></li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>toBlock</var> is not a <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref>.</li><li>Set <var>toBlock</var>[<var>toIndex</var>] to <var>fromBlock</var>[<var>fromIndex</var>].</li></ol></li><li>Set <var>toIndex</var> to <var>toIndex</var> + 1.</li><li>Set <var>fromIndex</var> to <var>fromIndex</var> + 1.</li><li>Set <var>count</var> to <var>count</var> - 1.</li></ol></li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-happens-before": {"num": "27.6.6", "title": "#sec-happens-before happens-before", "html": "<emu-clause id=\"sec-happens-before\" aoid=\"happens-before\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-happens-before\">#sec-happens-before</span> happens-before</h1>\n      <p>For a <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> <var>execution</var>, <var>execution</var>.[[HappensBefore]] is the least <emu-xref href=\"#sec-set-and-relation-specification-type\"><a href=\"#sec-set-and-relation-specification-type\">Relation</a></emu-xref> on events that satisfies the following.</p>\n\n      <ul>\n        <li>For each pair (<var>E</var>, <var>D</var>) in <var>execution</var>.[[AgentOrder]], (<var>E</var>, <var>D</var>) is in <var>execution</var>.[[HappensBefore]].</li>\n        <li>For each pair (<var>E</var>, <var>D</var>) in <var>execution</var>.[[SynchronizesWith]], (<var>E</var>, <var>D</var>) is in <var>execution</var>.[[HappensBefore]].</li>\n        <li>For each pair (<var>E</var>, <var>D</var>) in <emu-xref aoid=\"SharedDataBlockEventSet\"><a href=\"#sec-sharedatablockeventset\">SharedDataBlockEventSet</a></emu-xref>(<var>execution</var>), (<var>E</var>, <var>D</var>) is in <var>execution</var>.[[HappensBefore]] if <var>E</var>.[[Order]] is <emu-const>Init</emu-const> and <var>E</var> and <var>D</var> have overlapping ranges.</li>\n        <li>For each pair (<var>E</var>, <var>D</var>) in <emu-xref aoid=\"EventSet\"><a href=\"#sec-event-set\">EventSet</a></emu-xref>(<var>execution</var>), (<var>E</var>, <var>D</var>) is in <var>execution</var>.[[HappensBefore]] if there is an event <var>F</var> such that the pairs (<var>E</var>, <var>F</var>) and (<var>F</var>, <var>D</var>) are in <var>execution</var>.[[HappensBefore]].</li>\n      </ul>\n\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>Because happens-before is a superset of <emu-xref aoid=\"agent-order\"><a href=\"#sec-agent-order\">agent-order</a></emu-xref>, candidate executions are consistent with the single-thread evaluation semantics of ECMAScript.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-memory-order": {"num": "27.7.4", "title": "#sec-memory-order Sequentially Consistent Atomics", "html": "<emu-clause id=\"sec-memory-order\" aoid=\"memory-order\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-memory-order\">#sec-memory-order</span> Sequentially Consistent Atomics</h1>\n      <p>For a <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> <var>execution</var>, memory-order is a <emu-xref href=\"#sec-set-and-relation-specification-type\"><a href=\"#sec-set-and-relation-specification-type\">strict total order</a></emu-xref> of all events in <emu-xref aoid=\"EventSet\"><a href=\"#sec-event-set\">EventSet</a></emu-xref>(<var>execution</var>) that satisfies the following.</p>\n      <ul>\n        <li>For each pair (<var>E</var>, <var>D</var>) in <var>execution</var>.[[HappensBefore]], (<var>E</var>, <var>D</var>) is in memory-order.</li>\n        <li>\n          <p>For each pair (<var>R</var>, <var>W</var>) in <var>execution</var>.[[ReadsFrom]], there is no <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> event <var>V</var> in <emu-xref aoid=\"SharedDataBlockEventSet\"><a href=\"#sec-sharedatablockeventset\">SharedDataBlockEventSet</a></emu-xref>(<var>execution</var>) such that <var>V</var>.[[Order]] is <emu-const>SeqCst</emu-const>, the pairs (<var>W</var>, <var>V</var>) and (<var>V</var>, <var>R</var>) are in memory-order, and any of the following conditions are true.</p>\n          <ul>\n            <li>The pair (<var>W</var>, <var>R</var>) is in <var>execution</var>.[[SynchronizesWith]], and <var>V</var> and <var>R</var> have equal ranges.</li>\n            <li>The pairs (<var>W</var>, <var>R</var>) and (<var>V</var>, <var>R</var>) are in <var>execution</var>.[[HappensBefore]], <var>W</var>.[[Order]] is <emu-const>SeqCst</emu-const>, and <var>W</var> and <var>V</var> have equal ranges.</li>\n            <li>The pairs (<var>W</var>, <var>R</var>) and (<var>W</var>, <var>V</var>) are in <var>execution</var>.[[HappensBefore]], <var>R</var>.[[Order]] is <emu-const>SeqCst</emu-const>, and <var>V</var> and <var>R</var> have equal ranges.</li>\n          </ul>\n          <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n            <p>This clause additionally constrains <emu-const>SeqCst</emu-const> events on equal ranges.</p>\n          </div></emu-note>\n        </li>\n        <li>\n          <p>For each <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> event <var>W</var> in <emu-xref aoid=\"SharedDataBlockEventSet\"><a href=\"#sec-sharedatablockeventset\">SharedDataBlockEventSet</a></emu-xref>(<var>execution</var>), if <var>W</var>.[[Order]] is <emu-const>SeqCst</emu-const>, then it is not the case that there is an infinite number of <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadSharedMemory</a></emu-xref> or <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">ReadModifyWriteSharedMemory</a></emu-xref> events in <emu-xref aoid=\"SharedDataBlockEventSet\"><a href=\"#sec-sharedatablockeventset\">SharedDataBlockEventSet</a></emu-xref>(<var>execution</var>) with equal range that is memory-order before <var>W</var>.</p>\n          <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n            <p>This clause together with the forward progress guarantee on agents ensure the liveness condition that <emu-const>SeqCst</emu-const> writes become visible to <emu-const>SeqCst</emu-const> reads with equal range in finite time.</p>\n          </div></emu-note>\n        </li>\n      </ul>\n      <p>A <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> has sequentially consistent atomics if a memory-order exists.</p>\n\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>While memory-order includes all events in <emu-xref aoid=\"EventSet\"><a href=\"#sec-event-set\">EventSet</a></emu-xref>(<var>execution</var>), those that are not constrained by <emu-xref aoid=\"happens-before\"><a href=\"#sec-happens-before\">happens-before</a></emu-xref> or <emu-xref aoid=\"synchronizes-with\"><a href=\"#sec-synchronizes-with\">synchronizes-with</a></emu-xref> are allowed to occur anywhere in the order.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-typedarray-objects": {"num": "22.2", "title": "#sec-typedarray-objects TypedArray Objects", "html": "<emu-clause id=\"sec-typedarray-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-typedarray-objects\">#sec-typedarray-objects</span> TypedArray Objects</h1>\n    <p><var>TypedArray</var> objects present an array-like view of an underlying binary data buffer (<emu-xref href=\"#sec-arraybuffer-objects\"><a href=\"#sec-arraybuffer-objects\" class=\"excluded-xref\" excluded-id=\"sec-arraybuffer-objects\">#sec-arraybuffer-objects</a></emu-xref>). Each element of a <var>TypedArray</var> instance has the same underlying binary scalar data type. There is a distinct <var>TypedArray</var> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>, listed in  <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref>, for each of the supported element types. Each <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> in  <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> has a corresponding distinct prototype object.</p>\n    <emu-table id=\"table-49\" caption=\"The TypedArray Constructors\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-49\">#table-49</span>: The TypedArray Constructors</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            <emu-xref href=\"#constructor\"><a href=\"#constructor\">Constructor</a></emu-xref> Name and Intrinsic\n          \n          </th>\n          <th>\n            Element Type\n          \n          </th>\n          <th>\n            Element Size\n          \n          </th>\n          <th>\n            Conversion Operation\n          \n          </th>\n          <th>\n            Description\n          \n          </th>\n        </tr>\n        <tr>\n          <td>\n            Int8Array\n            \n            <br>\n            %Int8Array%\n          \n          </td>\n          <td>\n            <emu-const>Int8</emu-const>\n          \n          </td>\n          <td>\n            1\n          \n          </td>\n          <td>\n            <emu-xref aoid=\"ToInt8\"><a href=\"#sec-toint8\">ToInt8</a></emu-xref>\n          \n          </td>\n          <td>\n            8-bit 2's complement signed <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            Uint8Array\n            \n            <br>\n            %Uint8Array%\n          \n          </td>\n          <td>\n            <emu-const>Uint8</emu-const>\n          \n          </td>\n          <td>\n            1\n          \n          </td>\n          <td>\n            <emu-xref aoid=\"ToUint8\"><a href=\"#sec-touint8\">ToUint8</a></emu-xref>\n          \n          </td>\n          <td>\n            8-bit unsigned <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            Uint8ClampedArray\n            \n            <br>\n            %Uint8ClampedArray%\n          \n          </td>\n          <td>\n            <emu-const>Uint8C</emu-const>\n          \n          </td>\n          <td>\n            1\n          \n          </td>\n          <td>\n            <emu-xref aoid=\"ToUint8Clamp\"><a href=\"#sec-touint8clamp\">ToUint8Clamp</a></emu-xref>\n          \n          </td>\n          <td>\n            8-bit unsigned <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> (clamped conversion)\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            Int16Array\n            \n            <br>\n            %Int16Array%\n          \n          </td>\n          <td>\n            <emu-const>Int16</emu-const>\n          \n          </td>\n          <td>\n            2\n          \n          </td>\n          <td>\n            <emu-xref aoid=\"ToInt16\"><a href=\"#sec-toint16\">ToInt16</a></emu-xref>\n          \n          </td>\n          <td>\n            16-bit 2's complement signed <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            Uint16Array\n            \n            <br>\n            %Uint16Array%\n          \n          </td>\n          <td>\n            <emu-const>Uint16</emu-const>\n          \n          </td>\n          <td>\n            2\n          \n          </td>\n          <td>\n            <emu-xref aoid=\"ToUint16\"><a href=\"#sec-touint16\">ToUint16</a></emu-xref>\n          \n          </td>\n          <td>\n            16-bit unsigned <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            Int32Array\n            \n            <br>\n            %Int32Array%\n          \n          </td>\n          <td>\n            <emu-const>Int32</emu-const>\n          \n          </td>\n          <td>\n            4\n          \n          </td>\n          <td>\n            <emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>\n          \n          </td>\n          <td>\n            32-bit 2's complement signed <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            Uint32Array\n            \n            <br>\n            %Uint32Array%\n          \n          </td>\n          <td>\n            <emu-const>Uint32</emu-const>\n          \n          </td>\n          <td>\n            4\n          \n          </td>\n          <td>\n            <emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>\n          \n          </td>\n          <td>\n            32-bit unsigned <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            BigInt64Array\n            \n            <br>\n            %BigInt64Array%\n          \n          </td>\n          <td>\n            <emu-const>BigInt64</emu-const>\n          \n          </td>\n          <td>\n            8\n          \n          </td>\n          <td>\n            <emu-xref aoid=\"ToBigInt64\"><a href=\"#sec-tobigint64\">ToBigInt64</a></emu-xref>\n          \n          </td>\n          <td>\n            64-bit two's complement signed <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            BigUint64Array\n            \n            <br>\n            %BigUint64Array%\n          \n          </td>\n          <td>\n            <emu-const>BigUint64</emu-const>\n          \n          </td>\n          <td>\n            8\n          \n          </td>\n          <td>\n            <emu-xref aoid=\"ToBigUint64\"><a href=\"#sec-tobiguint64\">ToBigUint64</a></emu-xref>\n          \n          </td>\n          <td>\n            64-bit unsigned <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            Float32Array\n            \n            <br>\n            %Float32Array%\n          \n          </td>\n          <td>\n            <emu-const>Float32</emu-const>\n          \n          </td>\n          <td>\n            4\n          \n          </td>\n          <td>\n          </td>\n          <td>\n            32-bit IEEE floating point\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            Float64Array\n            \n            <br>\n            %Float64Array%\n          \n          </td>\n          <td>\n            <emu-const>Float64</emu-const>\n          \n          </td>\n          <td>\n            8\n          \n          </td>\n          <td>\n          </td>\n          <td>\n            64-bit IEEE floating point\n          \n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>In the definitions below, references to <var>TypedArray</var> should be replaced with the appropriate <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> name from the above table. The phrase &#8220;the element size in bytes&#8221; refers to the value in the Element Size column of the table in the row corresponding to the <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. The phrase &#8220;element Type&#8221; refers to the value in the Element Type column for that row.</p>\n\n    <div id=\"excluded-sec-%typedarray%-intrinsic-object\"><h1><span class=\"secnum\">22.2.1</span>#sec-%typedarray%-intrinsic-object The %TypedArray% Intrinsic Object</h1>...</div><div id=\"excluded-sec-properties-of-the-%typedarray%-intrinsic-object\"><h1><span class=\"secnum\">22.2.2</span>#sec-properties-of-the-%typedarray%-intrinsic-object Properties of the %TypedArray% Intrinsic Object</h1>...</div><div id=\"excluded-sec-properties-of-the-%typedarrayprototype%-object\"><h1><span class=\"secnum\">22.2.3</span>#sec-properties-of-the-%typedarrayprototype%-object Properties of the %TypedArray.prototype% Object</h1>...</div><div id=\"excluded-sec-typedarray-constructors\"><h1><span class=\"secnum\">22.2.4</span>#sec-typedarray-constructors The TypedArray Constructors</h1>...</div><div id=\"excluded-sec-properties-of-the-typedarray-constructors\"><h1><span class=\"secnum\">22.2.5</span>#sec-properties-of-the-typedarray-constructors Properties of the TypedArray Constructors</h1>...</div><div id=\"excluded-sec-properties-of-typedarray-prototype-objects\"><h1><span class=\"secnum\">22.2.6</span>#sec-properties-of-typedarray-prototype-objects Properties of the TypedArray Prototype Objects</h1>...</div><div id=\"excluded-sec-properties-of-typedarray-instances\"><h1><span class=\"secnum\">22.2.7</span>#sec-properties-of-typedarray-instances Properties of TypedArray Instances</h1>...</div></emu-clause>\n"}, "sec-%typedarray%.prototype.keys": {"num": "22.2.3.16", "title": "#sec-%typedarray%.prototype.keys %TypedArray%.prototype.keys ( )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.keys\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.keys\">#sec-%typedarray%.prototype.keys</span> %TypedArray%.prototype.keys ( )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Return <emu-xref aoid=\"CreateArrayIterator\"><a href=\"#sec-createarrayiterator\">CreateArrayIterator</a></emu-xref>(<var>O</var>, <emu-const>key</emu-const>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-synchronizes-with": {"num": "27.6.5", "title": "#sec-synchronizes-with synchronizes-with", "html": "<emu-clause id=\"sec-synchronizes-with\" aoid=\"synchronizes-with\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-synchronizes-with\">#sec-synchronizes-with</span> synchronizes-with</h1>\n      <p>For a <emu-xref href=\"#sec-candidate-executions\"><a href=\"#sec-candidate-executions\">candidate execution</a></emu-xref> <var>execution</var>, <var>execution</var>.[[SynchronizesWith]] is the least <emu-xref href=\"#sec-set-and-relation-specification-type\"><a href=\"#sec-set-and-relation-specification-type\">Relation</a></emu-xref> on events that satisfies the following.</p>\n      <ul>\n        <li>\n          For each pair (<var>R</var>, <var>W</var>) in <var>execution</var>.[[ReadsFrom]], (<var>W</var>, <var>R</var>) is in <var>execution</var>.[[SynchronizesWith]] if <var>R</var>.[[Order]] is <emu-const>SeqCst</emu-const>, <var>W</var>.[[Order]] is <emu-const>SeqCst</emu-const>, and <var>R</var> and <var>W</var> have equal ranges.\n        \n        </li>\n        <li>\n          For each element <var>eventsRecord</var> of <var>execution</var>.[[EventsRecords]], the following is true.\n          \n          <ul>\n            <li>For each pair (<var>S</var>, <var>Sw</var>) in <var>eventsRecord</var>.[[AgentSynchronizesWith]], (<var>S</var>, <var>Sw</var>) is in <var>execution</var>.[[SynchronizesWith]].</li>\n          </ul>\n        </li>\n        <li>For each pair (<var>E</var>, <var>D</var>) in <var>execution</var>.[[HostSynchronizesWith]], (<var>E</var>, <var>D</var>) is in <var>execution</var>.[[SynchronizesWith]].</li>\n      </ul>\n\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>Owing to convention, write events synchronizes-with read events, instead of read events synchronizes-with write events.</p>\n      </div></emu-note>\n\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p><emu-const>Init</emu-const> events do not participate in synchronizes-with, and are instead constrained directly by <emu-xref aoid=\"happens-before\"><a href=\"#sec-happens-before\">happens-before</a></emu-xref>.</p>\n      </div></emu-note>\n\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>Not all <emu-const>SeqCst</emu-const> events related by <emu-xref aoid=\"reads-from\"><a href=\"#sec-reads-from\">reads-from</a></emu-xref> are related by synchronizes-with. Only events that also have equal ranges are related by synchronizes-with.</p>\n      </div></emu-note>\n\n      <emu-note><span class=\"note\">Note 4</span><div class=\"note-contents\">\n        <p>For <emu-xref href=\"#sec-data-blocks\"><a href=\"#sec-data-blocks\">Shared Data Block</a></emu-xref> events <var>R</var> and <var>W</var> such that <var>W</var> synchronizes-with <var>R</var>, <var>R</var> may <emu-xref aoid=\"reads-from\"><a href=\"#sec-reads-from\">reads-from</a></emu-xref> other writes than <var>W</var>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-string.prototype.padend": {"num": "21.1.3.14", "title": "#sec-string.prototype.padend String.prototype.padEnd ( maxLength [ , fillString ] )", "html": "<emu-clause id=\"sec-string.prototype.padend\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.padend\">#sec-string.prototype.padend</span> String.prototype.padEnd ( <var>maxLength</var> [ , <var>fillString</var> ] )</h1>\n        <p>When the <code>padEnd</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Return ?&#160;<emu-xref aoid=\"StringPad\"><a href=\"#sec-stringpad\">StringPad</a></emu-xref>(<var>O</var>, <var>maxLength</var>, <var>fillString</var>, <emu-const>end</emu-const>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-serializejsonobject": {"num": "24.5.2.4", "title": "#sec-serializejsonobject Runtime Semantics: SerializeJSONObject ( value )", "html": "<emu-clause id=\"sec-serializejsonobject\" aoid=\"SerializeJSONObject\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-serializejsonobject\">#sec-serializejsonobject</span> Runtime Semantics: SerializeJSONObject ( <var>value</var> )</h1>\n        <p>The abstract operation SerializeJSONObject with argument <var>value</var> serializes an object. It has access to the <var>stack</var>, <var>indent</var>, <var>gap</var>, and <var>PropertyList</var> values of the current invocation of the <code>stringify</code> method.</p>\n        <emu-alg><ol><li>If <var>stack</var> contains <var>value</var>, throw a <emu-val>TypeError</emu-val> exception because the structure is cyclical.</li><li>Append <var>value</var> to <var>stack</var>.</li><li>Let <var>stepback</var> be <var>indent</var>.</li><li>Set <var>indent</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>indent</var> and <var>gap</var>.</li><li>If <var>PropertyList</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>K</var> be <var>PropertyList</var>.</li></ol></li><li>Else,<ol><li>Let <var>K</var> be ?&#160;<emu-xref aoid=\"EnumerableOwnPropertyNames\"><a href=\"#sec-enumerableownpropertynames\">EnumerableOwnPropertyNames</a></emu-xref>(<var>value</var>, <emu-const>key</emu-const>).</li></ol></li><li>Let <var>partial</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>P</var> of <var>K</var>, do<ol><li>Let <var>strP</var> be ?&#160;<emu-xref aoid=\"SerializeJSONProperty\"><a href=\"#sec-serializejsonproperty\">SerializeJSONProperty</a></emu-xref>(<var>P</var>, <var>value</var>).</li><li>If <var>strP</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>member</var> be <emu-xref aoid=\"QuoteJSONString\"><a href=\"#sec-quotejsonstring\">QuoteJSONString</a></emu-xref>(<var>P</var>).</li><li>Set <var>member</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>member</var> and <code>\":\"</code>.</li><li>If <var>gap</var> is not the empty String, then<ol><li>Set <var>member</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>member</var> and the code unit 0x0020 (SPACE).</li></ol></li><li>Set <var>member</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>member</var> and <var>strP</var>.</li><li>Append <var>member</var> to <var>partial</var>.</li></ol></li></ol></li><li>If <var>partial</var> is empty, then<ol><li>Let <var>final</var> be <code>\"{}\"</code>.</li></ol></li><li>Else,<ol><li>If <var>gap</var> is the empty String, then<ol><li>Let <var>properties</var> be the String value formed by concatenating all the element Strings of <var>partial</var> with each adjacent pair of Strings separated with the code unit 0x002C (COMMA). A comma is not inserted either before the first String or after the last String.</li><li>Let <var>final</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <code>\"{\"</code>, <var>properties</var>, and <code>\"}\"</code>.</li></ol></li><li>Else,<ol><li>Let <var>separator</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the code unit 0x002C (COMMA), the code unit 0x000A (LINE FEED), and <var>indent</var>.</li><li>Let <var>properties</var> be the String value formed by concatenating all the element Strings of <var>partial</var> with each adjacent pair of Strings separated with <var>separator</var>. The <var>separator</var> String is not inserted either before the first String or after the last String.</li><li>Let <var>final</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <code>\"{\"</code>, the code unit 0x000A (LINE FEED), <var>indent</var>, <var>properties</var>, the code unit 0x000A (LINE FEED), <var>stepback</var>, and <code>\"}\"</code>.</li></ol></li></ol></li><li>Remove the last element of <var>stack</var>.</li><li>Set <var>indent</var> to <var>stepback</var>.</li><li>Return <var>final</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-cyclic-module-records": {"num": "15.2.1.16", "title": "#sec-cyclic-module-records Cyclic Module Records", "html": "<emu-clause id=\"sec-cyclic-module-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-cyclic-module-records\">#sec-cyclic-module-records</span> Cyclic Module Records</h1>\n        <p>A  <dfn id=\"cyclic-module-record\">Cyclic Module Record</dfn> is used to represent information about a module that can participate in dependency cycles with other modules that are subclasses of the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> type. Module Records that are not subclasses of the <emu-xref href=\"#cyclic-module-record\"><a href=\"#cyclic-module-record\">Cyclic Module Record</a></emu-xref> type must not participate in dependency cycles with Source Text Module Records.</p>\n        <p>In addition to the fields defined in  <emu-xref href=\"#table-36\"><a href=\"#table-36\" class=\"excluded-xref\" excluded-id=\"table-36\">#table-36</a></emu-xref> Cyclic Module Records have the additional fields listed in  <emu-xref href=\"#table-cyclic-module-fields\"><a href=\"#table-cyclic-module-fields\" class=\"excluded-xref\" excluded-id=\"table-cyclic-module-fields\">#table-cyclic-module-fields</a></emu-xref></p>\n        <emu-table id=\"table-cyclic-module-fields\" caption=\"Additional Fields of Cyclic Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-cyclic-module-fields\">#table-cyclic-module-fields</span>: Additional Fields of Cyclic Module Records</figcaption>\n          <table>\n            <tbody>\n              <tr>\n                <th>\n                  Field Name\n                \n                </th>\n                <th>\n                  Value Type\n                \n                </th>\n                <th>\n                  Meaning\n                \n                </th>\n              </tr>\n              <tr>\n                <td>\n                  [[Status]]\n                \n                </td>\n                <td>\n                  <emu-const>unlinked</emu-const> | <emu-const>linking</emu-const> | <emu-const>linked</emu-const> | <emu-const>evaluating</emu-const> | <emu-const>evaluated</emu-const>\n                \n                </td>\n                <td>\n                  Initially <emu-const>unlinked</emu-const>. Transitions to <emu-const>linking</emu-const>, <emu-const>linked</emu-const>, <emu-const>evaluating</emu-const>, <emu-const>evaluated</emu-const> (in that order) as the module progresses throughout its lifecycle.\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[EvaluationError]]\n                \n                </td>\n                <td>\n                  An <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> | <emu-val>undefined</emu-val>\n                \n                </td>\n                <td>\n                  A completion of type <emu-const>throw</emu-const> representing the exception that occurred during evaluation.  <emu-val>undefined</emu-val> if no exception occurred or if [[Status]] is not <emu-const>evaluated</emu-const>.\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[DFSIndex]]\n                \n                </td>\n                <td>\n                  <emu-xref href=\"#integer\"><a href=\"#integer\">Integer</a></emu-xref> | <emu-val>undefined</emu-val>\n                \n                </td>\n                <td>\n                  Auxiliary field used during Link and Evaluate only.\n                  If [[Status]] is <emu-const>linking</emu-const> or <emu-const>evaluating</emu-const>, this nonnegative number records the point at which the module was first visited during the ongoing depth-first traversal of the dependency graph.\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[DFSAncestorIndex]]\n                \n                </td>\n                <td>\n                  <emu-xref href=\"#integer\"><a href=\"#integer\">Integer</a></emu-xref> | <emu-val>undefined</emu-val>\n                \n                </td>\n                <td>\n                  Auxiliary field used during Link and Evaluate only. If [[Status]] is <emu-const>linking</emu-const> or <emu-const>evaluating</emu-const>, this is either the module's own [[DFSIndex]] or that of an \"earlier\" module in the same strongly connected component.\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  [[RequestedModules]]\n                \n                </td>\n                <td>\n                  <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of String\n                \n                </td>\n                <td>\n                  A <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of all the <emu-nt><a href=\"#prod-ModuleSpecifier\">ModuleSpecifier</a></emu-nt> strings used by the module represented by this record to request the importation of a module. The <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> is source code occurrence ordered.\n                \n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n        <p>In addition to the methods defined in  <emu-xref href=\"#table-37\"><a href=\"#table-37\" class=\"excluded-xref\" excluded-id=\"table-37\">#table-37</a></emu-xref> Cyclic Module Records have the additional methods listed in  <emu-xref href=\"#table-cyclic-module-methods\"><a href=\"#table-cyclic-module-methods\" class=\"excluded-xref\" excluded-id=\"table-cyclic-module-methods\">#table-cyclic-module-methods</a></emu-xref></p>\n        <emu-table id=\"table-cyclic-module-methods\" caption=\"Additional Abstract Methods of Cyclic Module Records\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-cyclic-module-methods\">#table-cyclic-module-methods</span>: Additional Abstract Methods of Cyclic Module Records</figcaption>\n          <table>\n            <tbody>\n              <tr>\n                <th>\n                  Method\n                \n                </th>\n                <th>\n                  Purpose\n                \n                </th>\n              </tr>\n              <tr>\n                <td>\n                  <emu-xref aoid=\"InitializeEnvironment\"><a href=\"#sec-source-text-module-record-initialize-environment\">InitializeEnvironment</a></emu-xref>()\n                \n                </td>\n                <td>\n                  Initialize the <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> of the module, including resolving all imported bindings, and create the module's <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <emu-xref aoid=\"ExecuteModule\"><a href=\"#sec-source-text-module-record-execute-module\">ExecuteModule</a></emu-xref>()\n                \n                </td>\n                <td>\n                  Evaluate the module's code within its <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref>.\n                \n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n\n        <div id=\"excluded-sec-moduledeclarationlinking\"><h1><span class=\"secnum\">15.2.1.16.1</span>#sec-moduledeclarationlinking Link ( ) Concrete Method</h1>...</div><div id=\"excluded-sec-moduleevaluation\"><h1><span class=\"secnum\">15.2.1.16.2</span>#sec-moduleevaluation Evaluate ( ) Concrete Method</h1>...</div><div id=\"excluded-sec-example-cyclic-module-record-graphs\"><h1><span class=\"secnum\">15.2.1.16.3</span>#sec-example-cyclic-module-record-graphs Example Cyclic Module Record Graphs</h1>...</div></emu-clause>\n\n      "}, "sec-dataview.prototype.setuint8": {"num": "24.3.4.22", "title": "#sec-dataview.prototype.setuint8 DataView.prototype.setUint8 ( byteOffset, value )", "html": "<emu-clause id=\"sec-dataview.prototype.setuint8\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.setuint8\">#sec-dataview.prototype.setuint8</span> DataView.prototype.setUint8 ( <var>byteOffset</var>, <var>value</var> )</h1>\n        <p>When the <code>setUint8</code> method is called with arguments <var>byteOffset</var> and <var>value</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"SetViewValue\"><a href=\"#sec-setviewvalue\">SetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <emu-val>true</emu-val>, <emu-const>Uint8</emu-const>, <var>value</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-string.prototype.padstart": {"num": "21.1.3.15", "title": "#sec-string.prototype.padstart String.prototype.padStart ( maxLength [ , fillString ] )", "html": "<emu-clause id=\"sec-string.prototype.padstart\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.padstart\">#sec-string.prototype.padstart</span> String.prototype.padStart ( <var>maxLength</var> [ , <var>fillString</var> ] )</h1>\n        <p>When the <code>padStart</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Return ?&#160;<emu-xref aoid=\"StringPad\"><a href=\"#sec-stringpad\">StringPad</a></emu-xref>(<var>O</var>, <var>maxLength</var>, <var>fillString</var>, <emu-const>start</emu-const>).\n        </li></ol></emu-alg>\n\n        <div id=\"excluded-sec-stringpad\"><h1><span class=\"secnum\">21.1.3.15.1</span>#sec-stringpad Runtime Semantics: StringPad ( O, maxLength, fillString, placement )</h1>...</div></emu-clause>\n\n      "}, "sec-atomics.store": {"num": "24.4.9", "title": "#sec-atomics.store Atomics.store ( typedArray, index, value )", "html": "<emu-clause id=\"sec-atomics.store\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.store\">#sec-atomics.store</span> Atomics.store ( <var>typedArray</var>, <var>index</var>, <var>value</var> )</h1>\n      <p>The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateSharedIntegerTypedArray\"><a href=\"#sec-validatesharedintegertypedarray\">ValidateSharedIntegerTypedArray</a></emu-xref>(<var>typedArray</var>).</li><li>Let <var>i</var> be ?&#160;<emu-xref aoid=\"ValidateAtomicAccess\"><a href=\"#sec-validateatomicaccess\">ValidateAtomicAccess</a></emu-xref>(<var>typedArray</var>, <var>index</var>).</li><li>Let <var>arrayTypeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>If <var>arrayTypeName</var> is <code>\"BigUint64Array\"</code> or <code>\"BigInt64Array\"</code>, let <var>v</var> be ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-tobigint\">ToBigInt</a></emu-xref>(<var>value</var>).</li><li>Otherwise, let <var>v</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>value</var>).</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>elementType</var> be the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>offset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>Let <var>indexedPosition</var> be (<var>i</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>buffer</var>, <var>indexedPosition</var>, <var>elementType</var>, <var>v</var>, <emu-val>true</emu-val>, <emu-const>SeqCst</emu-const>).</li><li>Return <var>v</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-dataview.prototype.getbigint64": {"num": "24.3.4.5", "title": "#sec-dataview.prototype.getbigint64 DataView.prototype.getBigInt64 ( byteOffset [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.getbigint64\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.getbigint64\">#sec-dataview.prototype.getbigint64</span> DataView.prototype.getBigInt64 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>getBigInt64</code> method is called with argument <var>byteOffset</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>undefined</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"GetViewValue\"><a href=\"#sec-getviewvalue\">GetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <emu-const>BigInt64</emu-const>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-object.values": {"num": "19.1.2.22", "title": "#sec-object.values Object.values ( O )", "html": "<emu-clause id=\"sec-object.values\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.values\">#sec-object.values</span> Object.values ( <var>O</var> )</h1>\n        <p>When the <code>values</code> function is called with argument <var>O</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>obj</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>O</var>).</li><li>Let <var>nameList</var> be ?&#160;<emu-xref aoid=\"EnumerableOwnPropertyNames\"><a href=\"#sec-enumerableownpropertynames\">EnumerableOwnPropertyNames</a></emu-xref>(<var>obj</var>, <emu-const>value</emu-const>).</li><li>Return <emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(<var>nameList</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-dataview.prototype.getfloat64": {"num": "24.3.4.8", "title": "#sec-dataview.prototype.getfloat64 DataView.prototype.getFloat64 ( byteOffset [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.getfloat64\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.getfloat64\">#sec-dataview.prototype.getfloat64</span> DataView.prototype.getFloat64 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>getFloat64</code> method is called with argument <var>byteOffset</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"GetViewValue\"><a href=\"#sec-getviewvalue\">GetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <emu-const>Float64</emu-const>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-map.prototype.entries": {"num": "23.1.3.4", "title": "#sec-map.prototype.entries Map.prototype.entries ( )", "html": "<emu-clause id=\"sec-map.prototype.entries\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-map.prototype.entries\">#sec-map.prototype.entries</span> Map.prototype.entries ( )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>M</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"CreateMapIterator\"><a href=\"#sec-createmapiterator\">CreateMapIterator</a></emu-xref>(<var>M</var>, <emu-const>key+value</emu-const>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-atomics.compareexchange": {"num": "24.4.4", "title": "#sec-atomics.compareexchange Atomics.compareExchange ( typedArray, index, expectedValue, replacementValue )", "html": "<emu-clause id=\"sec-atomics.compareexchange\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.compareexchange\">#sec-atomics.compareexchange</span> Atomics.compareExchange ( <var>typedArray</var>, <var>index</var>, <var>expectedValue</var>, <var>replacementValue</var> )</h1>\n      <p>The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateSharedIntegerTypedArray\"><a href=\"#sec-validatesharedintegertypedarray\">ValidateSharedIntegerTypedArray</a></emu-xref>(<var>typedArray</var>).</li><li>Let <var>i</var> be ?&#160;<emu-xref aoid=\"ValidateAtomicAccess\"><a href=\"#sec-validateatomicaccess\">ValidateAtomicAccess</a></emu-xref>(<var>typedArray</var>, <var>index</var>).</li><li>Let <var>arrayTypeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>If <var>typedArray</var>.[[ContentType]] is <emu-const>BigInt</emu-const>, then<ol><li>Let <var>expected</var> be ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-tobigint\">ToBigInt</a></emu-xref>(<var>expectedValue</var>).</li><li>Let <var>replacement</var> be ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-tobigint\">ToBigInt</a></emu-xref>(<var>replacementValue</var>).</li></ol></li><li>Else,<ol><li>Let <var>expected</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>expectedValue</var>).</li><li>Let <var>replacement</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>replacementValue</var>).</li></ol></li><li>Let <var>elementType</var> be the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>isLittleEndian</var> be the value of the [[LittleEndian]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>expectedBytes</var> be <emu-xref aoid=\"NumericToRawBytes\"><a href=\"#sec-numerictorawbytes\">NumericToRawBytes</a></emu-xref>(<var>elementType</var>, <var>expected</var>, <var>isLittleEndian</var>).</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>offset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>Let <var>indexedPosition</var> be (<var>i</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Let <code>compareExchange</code> denote a semantic function of two <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values arguments that returns the second argument if the first argument is element-wise equal to <var>expectedBytes</var>.</li><li>Return <emu-xref aoid=\"GetModifySetValueInBuffer\"><a href=\"#sec-getmodifysetvalueinbuffer\">GetModifySetValueInBuffer</a></emu-xref>(<var>buffer</var>, <var>indexedPosition</var>, <var>elementType</var>, <var>replacement</var>, <code>compareExchange</code>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-setintegritylevel": {"num": "7.3.14", "title": "#sec-setintegritylevel SetIntegrityLevel ( O, level )", "html": "<emu-clause id=\"sec-setintegritylevel\" aoid=\"SetIntegrityLevel\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-setintegritylevel\">#sec-setintegritylevel</span> SetIntegrityLevel ( <var>O</var>, <var>level</var> )</h1>\n      <p>The abstract operation SetIntegrityLevel is used to fix the set of own properties of an object. This abstract operation performs the following steps:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>level</var> is either <emu-const>sealed</emu-const> or <emu-const>frozen</emu-const>.</li><li>Let <var>status</var> be ? <var>O</var>.[[PreventExtensions]]().</li><li>If <var>status</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>keys</var> be ? <var>O</var>.[[OwnPropertyKeys]]().</li><li>If <var>level</var> is <emu-const>sealed</emu-const>, then<ol><li>For each element <var>k</var> of <var>keys</var>, do<ol><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>k</var>, PropertyDescriptor { [[Configurable]]: <emu-val>false</emu-val> }).</li></ol></li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>level</var> is <emu-const>frozen</emu-const>.</li><li>For each element <var>k</var> of <var>keys</var>, do<ol><li>Let <var>currentDesc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>k</var>).</li><li>If <var>currentDesc</var> is not <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid=\"IsAccessorDescriptor\"><a href=\"#sec-isaccessordescriptor\">IsAccessorDescriptor</a></emu-xref>(<var>currentDesc</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>desc</var> be the PropertyDescriptor { [[Configurable]]: <emu-val>false</emu-val> }.</li></ol></li><li>Else,<ol><li>Let <var>desc</var> be the PropertyDescriptor { [[Configurable]]: <emu-val>false</emu-val>, [[Writable]]: <emu-val>false</emu-val> }.</li></ol></li><li>Perform ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>k</var>, <var>desc</var>).</li></ol></li></ol></li></ol></li><li>Return <emu-val>true</emu-val>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-performpromisethen": {"num": "25.6.5.4.1", "title": "#sec-performpromisethen PerformPromiseThen ( promise, onFulfilled, onRejected [ , resultCapability ] )", "html": "<emu-clause id=\"sec-performpromisethen\" aoid=\"PerformPromiseThen\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-performpromisethen\">#sec-performpromisethen</span> PerformPromiseThen ( <var>promise</var>, <var>onFulfilled</var>, <var>onRejected</var> [ , <var>resultCapability</var> ] )</h1>\n          <p>The abstract operation PerformPromiseThen performs the &#8220;then&#8221; operation on <var>promise</var> using <var>onFulfilled</var> and <var>onRejected</var> as its settlement actions. If <var>resultCapability</var> is passed, the result is stored by updating <var>resultCapability</var>'s promise. (If it is not passed, then PerformPromiseThen is being called by a specification-internal operation where the result does not matter.)</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsPromise\"><a href=\"#sec-ispromise\">IsPromise</a></emu-xref>(<var>promise</var>) is <emu-val>true</emu-val>.</li><li>If <var>resultCapability</var> is present, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>resultCapability</var> is a PromiseCapability <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>.</li></ol></li><li>Else,<ol><li>Set <var>resultCapability</var> to <emu-val>undefined</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>onFulfilled</var>) is <emu-val>false</emu-val>, then<ol><li>Set <var>onFulfilled</var> to <emu-val>undefined</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>onRejected</var>) is <emu-val>false</emu-val>, then<ol><li>Set <var>onRejected</var> to <emu-val>undefined</emu-val>.</li></ol></li><li>Let <var>fulfillReaction</var> be the PromiseReaction { [[Capability]]: <var>resultCapability</var>, [[Type]]: <emu-const>Fulfill</emu-const>, [[Handler]]: <var>onFulfilled</var> }.</li><li>Let <var>rejectReaction</var> be the PromiseReaction { [[Capability]]: <var>resultCapability</var>, [[Type]]: <emu-const>Reject</emu-const>, [[Handler]]: <var>onRejected</var> }.</li><li>If <var>promise</var>.[[PromiseState]] is <emu-const>pending</emu-const>, then<ol><li>Append <var>fulfillReaction</var> as the last element of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>promise</var>.[[PromiseFulfillReactions]].</li><li>Append <var>rejectReaction</var> as the last element of the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> that is <var>promise</var>.[[PromiseRejectReactions]].</li></ol></li><li>Else if <var>promise</var>.[[PromiseState]] is <emu-const>fulfilled</emu-const>, then<ol><li>Let <var>value</var> be <var>promise</var>.[[PromiseResult]].</li><li>Perform <emu-xref aoid=\"EnqueueJob\"><a href=\"#sec-enqueuejob\">EnqueueJob</a></emu-xref>(<code>\"PromiseJobs\"</code>, <emu-xref aoid=\"PromiseReactionJob\"><a href=\"#sec-promisereactionjob\">PromiseReactionJob</a></emu-xref>, &#171; <var>fulfillReaction</var>, <var>value</var> &#187;).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: The value of <var>promise</var>.[[PromiseState]] is <emu-const>rejected</emu-const>.</li><li>Let <var>reason</var> be <var>promise</var>.[[PromiseResult]].</li><li>If <var>promise</var>.[[PromiseIsHandled]] is <emu-val>false</emu-val>, perform <emu-xref aoid=\"HostPromiseRejectionTracker\"><a href=\"#sec-host-promise-rejection-tracker\">HostPromiseRejectionTracker</a></emu-xref>(<var>promise</var>, <code>\"handle\"</code>).</li><li>Perform <emu-xref aoid=\"EnqueueJob\"><a href=\"#sec-enqueuejob\">EnqueueJob</a></emu-xref>(<code>\"PromiseJobs\"</code>, <emu-xref aoid=\"PromiseReactionJob\"><a href=\"#sec-promisereactionjob\">PromiseReactionJob</a></emu-xref>, &#171; <var>rejectReaction</var>, <var>reason</var> &#187;).</li></ol></li><li>Set <var>promise</var>.[[PromiseIsHandled]] to <emu-val>true</emu-val>.</li><li>If <var>resultCapability</var> is <emu-val>undefined</emu-val>, then<ol><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Else,<ol><li>Return <var>resultCapability</var>.[[Promise]].\n          </li></ol></li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-asyncgeneratorstart": {"num": "25.5.3.2", "title": "#sec-asyncgeneratorstart AsyncGeneratorStart ( generator, generatorBody )", "html": "<emu-clause id=\"sec-asyncgeneratorstart\" aoid=\"AsyncGeneratorStart\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorstart\">#sec-asyncgeneratorstart</span> AsyncGeneratorStart ( <var>generator</var>, <var>generatorBody</var> )</h1>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generator</var> is an AsyncGenerator instance.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generator</var>.[[AsyncGeneratorState]] is <emu-val>undefined</emu-val>.</li><li>Let <var>genContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set the Generator component of <var>genContext</var> to <var>generator</var>.</li><li>Set the code evaluation state of <var>genContext</var> such that when evaluation is resumed for that <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> the following steps will be performed:<ol><li>Let <var>result</var> be the result of evaluating <var>generatorBody</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: If we return here, the async generator either threw an exception or performed either an implicit or explicit return.</li><li>Remove <var>genContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore the <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> that is at the top of the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <emu-const>completed</emu-const>.</li><li>If <var>result</var> is a normal completion, let <var>resultValue</var> be <emu-val>undefined</emu-val>.</li><li>Else,<ol><li>Let <var>resultValue</var> be <var>result</var>.[[Value]].</li><li>If <var>result</var>.[[Type]] is not <emu-const>return</emu-const>, then<ol><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorReject\"><a href=\"#sec-asyncgeneratorreject\">AsyncGeneratorReject</a></emu-xref>(<var>generator</var>, <var>resultValue</var>).</li></ol></li></ol></li><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorResolve\"><a href=\"#sec-asyncgeneratorresolve\">AsyncGeneratorResolve</a></emu-xref>(<var>generator</var>, <var>resultValue</var>, <emu-val>true</emu-val>).</li></ol></li><li>Set <var>generator</var>.[[AsyncGeneratorContext]] to <var>genContext</var>.</li><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <emu-const>suspendedStart</emu-const>.</li><li>Set <var>generator</var>.[[AsyncGeneratorQueue]] to a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Return <emu-val>undefined</emu-val>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-datestring": {"num": "20.4.4.41.2", "title": "#sec-datestring Runtime Semantics: DateString ( tv )", "html": "<emu-clause id=\"sec-datestring\" aoid=\"DateString\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-datestring\">#sec-datestring</span> Runtime Semantics: DateString ( <var>tv</var> )</h1>\n          <p>The following steps are performed:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>tv</var>) is Number.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>tv</var> is not <emu-val>NaN</emu-val>.</li><li>Let <var>weekday</var> be the Name of the entry in <emu-xref href=\"#sec-todatestring-day-names\"><a href=\"#sec-todatestring-day-names\" class=\"excluded-xref\" excluded-id=\"sec-todatestring-day-names\">#sec-todatestring-day-names</a></emu-xref> with the Number <emu-xref aoid=\"WeekDay\"><a href=\"#sec-week-day\">WeekDay</a></emu-xref>(<var>tv</var>).</li><li>Let <var>month</var> be the Name of the entry in <emu-xref href=\"#sec-todatestring-month-names\"><a href=\"#sec-todatestring-month-names\" class=\"excluded-xref\" excluded-id=\"sec-todatestring-month-names\">#sec-todatestring-month-names</a></emu-xref> with the Number <emu-xref aoid=\"MonthFromTime\"><a href=\"#eqn-MonthFromTime\">MonthFromTime</a></emu-xref>(<var>tv</var>).</li><li>Let <var>day</var> be the String representation of <emu-xref aoid=\"DateFromTime\"><a href=\"#sec-date-number\">DateFromTime</a></emu-xref>(<var>tv</var>), formatted as a two-digit decimal number, padded to the left with a zero if necessary.</li><li>Let <var>yv</var> be <emu-xref aoid=\"YearFromTime\"><a href=\"#eqn-YearFromTime\">YearFromTime</a></emu-xref>(<var>tv</var>).</li><li>If <var>yv</var> &#8805; 0, let <var>yearSign</var> be the empty string; otherwise, let <var>yearSign</var> be <code>\"-\"</code>.</li><li>Let <var>year</var> be the String representation of <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>yv</var>), formatted as a decimal number.</li><li>Let <var>paddedYear</var> be !&#160;<emu-xref aoid=\"StringPad\"><a href=\"#sec-stringpad\">StringPad</a></emu-xref>(<var>year</var>, 4, <code>\"0\"</code>, <emu-const>start</emu-const>).</li><li>Return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>weekday</var>, the code unit 0x0020 (SPACE), <var>month</var>, the code unit 0x0020 (SPACE), <var>day</var>, the code unit 0x0020 (SPACE), <var>yearSign</var>, and <var>paddedYear</var>.\n          </li></ol></emu-alg>\n          <emu-table id=\"sec-todatestring-day-names\" caption=\"Names of days of the week\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"sec-todatestring-day-names\">#sec-todatestring-day-names</span>: Names of days of the week</figcaption>\n            <table>\n              <tbody>\n              <tr>\n                <th>\n                  Number\n                \n                </th>\n                <th>\n                  Name\n                \n                </th>\n              </tr>\n              <tr>\n                <td>\n                  0\n                \n                </td>\n                <td>\n                  <code>\"Sun\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  1\n                \n                </td>\n                <td>\n                  <code>\"Mon\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  2\n                \n                </td>\n                <td>\n                  <code>\"Tue\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  3\n                \n                </td>\n                <td>\n                  <code>\"Wed\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  4\n                \n                </td>\n                <td>\n                  <code>\"Thu\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  5\n                \n                </td>\n                <td>\n                  <code>\"Fri\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  6\n                \n                </td>\n                <td>\n                  <code>\"Sat\"</code>\n                \n                </td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n          <emu-table id=\"sec-todatestring-month-names\" caption=\"Names of months of the year\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"sec-todatestring-month-names\">#sec-todatestring-month-names</span>: Names of months of the year</figcaption>\n            <table>\n              <tbody>\n              <tr>\n                <th>\n                  Number\n                \n                </th>\n                <th>\n                  Name\n                \n                </th>\n              </tr>\n              <tr>\n                <td>\n                  0\n                \n                </td>\n                <td>\n                  <code>\"Jan\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  1\n                \n                </td>\n                <td>\n                  <code>\"Feb\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  2\n                \n                </td>\n                <td>\n                  <code>\"Mar\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  3\n                \n                </td>\n                <td>\n                  <code>\"Apr\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  4\n                \n                </td>\n                <td>\n                  <code>\"May\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  5\n                \n                </td>\n                <td>\n                  <code>\"Jun\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  6\n                \n                </td>\n                <td>\n                  <code>\"Jul\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  7\n                \n                </td>\n                <td>\n                  <code>\"Aug\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  8\n                \n                </td>\n                <td>\n                  <code>\"Sep\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  9\n                \n                </td>\n                <td>\n                  <code>\"Oct\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  10\n                \n                </td>\n                <td>\n                  <code>\"Nov\"</code>\n                \n                </td>\n              </tr>\n              <tr>\n                <td>\n                  11\n                \n                </td>\n                <td>\n                  <code>\"Dec\"</code>\n                \n                </td>\n              </tr>\n              </tbody>\n            </table>\n          </figure></emu-table>\n        </emu-clause>\n\n        "}, "sec-ecmascript-function-objects-call-thisargument-argumentslist": {"num": "9.2.1", "title": "#sec-ecmascript-function-objects-call-thisargument-argumentslist [[Call]] ( thisArgument, argumentsList )", "html": "<emu-clause id=\"sec-ecmascript-function-objects-call-thisargument-argumentslist\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-function-objects-call-thisargument-argumentslist\">#sec-ecmascript-function-objects-call-thisargument-argumentslist</span> [[Call]] ( <var>thisArgument</var>, <var>argumentsList</var> )</h1>\n      <p>The [[Call]] internal method for an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> <var>F</var> is called with parameters <var>thisArgument</var> and <var>argumentsList</var>, a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of ECMAScript language values. The following steps are taken:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>F</var> is an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>.</li><li>If <var>F</var>.[[FunctionKind]] is <emu-const>classConstructor</emu-const>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>calleeContext</var> be <emu-xref aoid=\"PrepareForOrdinaryCall\"><a href=\"#sec-prepareforordinarycall\">PrepareForOrdinaryCall</a></emu-xref>(<var>F</var>, <emu-val>undefined</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>calleeContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Perform <emu-xref aoid=\"OrdinaryCallBindThis\"><a href=\"#sec-ordinarycallbindthis\">OrdinaryCallBindThis</a></emu-xref>(<var>F</var>, <var>calleeContext</var>, <var>thisArgument</var>).</li><li>Let <var>result</var> be <emu-xref aoid=\"OrdinaryCallEvaluateBody\"><a href=\"#sec-ordinarycallevaluatebody\">OrdinaryCallEvaluateBody</a></emu-xref>(<var>F</var>, <var>argumentsList</var>).</li><li>Remove <var>calleeContext</var> from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and restore <var>callerContext</var> as the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>If <var>result</var>.[[Type]] is <emu-const>return</emu-const>, return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<var>result</var>.[[Value]]).</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>result</var>).</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>When <var>calleeContext</var> is removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> in step 8 it must not be destroyed if it is suspended and retained for later resumption by an accessible generator object.</p>\n      </div></emu-note>\n\n      <div id=\"excluded-sec-prepareforordinarycall\"><h1><span class=\"secnum\">9.2.1.1</span>#sec-prepareforordinarycall PrepareForOrdinaryCall ( F, newTarget )</h1>...</div><div id=\"excluded-sec-ordinarycallbindthis\"><h1><span class=\"secnum\">9.2.1.2</span>#sec-ordinarycallbindthis OrdinaryCallBindThis ( F, calleeContext, thisArgument )</h1>...</div><div id=\"excluded-sec-ordinarycallevaluatebody\"><h1><span class=\"secnum\">9.2.1.3</span>#sec-ordinarycallevaluatebody OrdinaryCallEvaluateBody ( F, argumentsList )</h1>...</div></emu-clause>\n\n    "}, "sec-object.isfrozen": {"num": "19.1.2.15", "title": "#sec-object.isfrozen Object.isFrozen ( O )", "html": "<emu-clause id=\"sec-object.isfrozen\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.isfrozen\">#sec-object.isfrozen</span> Object.isFrozen ( <var>O</var> )</h1>\n        <p>When the <code>isFrozen</code> function is called with argument <var>O</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object, return <emu-val>true</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"TestIntegrityLevel\"><a href=\"#sec-testintegritylevel\">TestIntegrityLevel</a></emu-xref>(<var>O</var>, <emu-const>frozen</emu-const>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-parsemodule": {"num": "15.2.1.17.1", "title": "#sec-parsemodule ParseModule ( sourceText, realm, hostDefined )", "html": "<emu-clause id=\"sec-parsemodule\" aoid=\"ParseModule\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-parsemodule\">#sec-parsemodule</span> ParseModule ( <var>sourceText</var>, <var>realm</var>, <var>hostDefined</var> )</h1>\n          <p>The abstract operation ParseModule with arguments <var>sourceText</var>, <var>realm</var>, and <var>hostDefined</var> creates a <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> based upon the result of parsing <var>sourceText</var> as a <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt>. ParseModule performs the following steps:</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>sourceText</var> is an ECMAScript source text (see clause <emu-xref href=\"#sec-ecmascript-language-source-code\"><a href=\"#sec-ecmascript-language-source-code\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-source-code\">#sec-ecmascript-language-source-code</a></emu-xref>).</li><li>Parse <var>sourceText</var> using <emu-nt><a href=\"#prod-Module\">Module</a></emu-nt> as the <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> and analyse the parse result for any Early Error conditions. If the parse was successful and no early errors were found, let <var>body</var> be the resulting parse tree. Otherwise, let <var>body</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of one or more <emu-val>SyntaxError</emu-val> objects representing the parsing errors and/or early errors. Parsing and <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> detection may be interweaved in an implementation-dependent manner. If more than one parsing error or <emu-xref href=\"#early-error\"><a href=\"#early-error\">early error</a></emu-xref> is present, the number and ordering of error objects in the list is implementation-dependent, but at least one must be present.</li><li>If <var>body</var> is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of errors, return <var>body</var>.</li><li>Let <var>requestedModules</var> be the ModuleRequests of <var>body</var>.</li><li>Let <var>importEntries</var> be ImportEntries of <var>body</var>.</li><li>Let <var>importedBoundNames</var> be <emu-xref aoid=\"ImportedLocalNames\"><a href=\"#sec-importedlocalnames\">ImportedLocalNames</a></emu-xref>(<var>importEntries</var>).</li><li>Let <var>indirectExportEntries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>localExportEntries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>starExportEntries</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>exportEntries</var> be ExportEntries of <var>body</var>.</li><li>For each <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> <var>ee</var> in <var>exportEntries</var>, do<ol><li>If <var>ee</var>.[[ModuleRequest]] is <emu-val>null</emu-val>, then<ol><li>If <var>ee</var>.[[LocalName]] is not an element of <var>importedBoundNames</var>, then<ol><li>Append <var>ee</var> to <var>localExportEntries</var>.</li></ol></li><li>Else,<ol><li>Let <var>ie</var> be the element of <var>importEntries</var> whose [[LocalName]] is the same as <var>ee</var>.[[LocalName]].</li><li>If <var>ie</var>.[[ImportName]] is <code>\"*\"</code>, then<ol><li>NOTE: This is a re-export of an imported module namespace object.</li><li>Append <var>ee</var> to <var>localExportEntries</var>.</li></ol></li><li>Else,<ol><li>NOTE: This is a re-export of a single name.</li><li>Append the <emu-xref href=\"#exportentry-record\"><a href=\"#exportentry-record\">ExportEntry Record</a></emu-xref> { [[ModuleRequest]]: <var>ie</var>.[[ModuleRequest]], [[ImportName]]: <var>ie</var>.[[ImportName]], [[LocalName]]: <emu-val>null</emu-val>, [[ExportName]]: <var>ee</var>.[[ExportName]] } to <var>indirectExportEntries</var>.</li></ol></li></ol></li></ol></li><li>Else if <var>ee</var>.[[ImportName]] is <code>\"*\"</code> and <var>ee</var>.[[ExportName]] is <emu-val>null</emu-val>, then<ol><li>Append <var>ee</var> to <var>starExportEntries</var>.</li></ol></li><li>Else,<ol><li>Append <var>ee</var> to <var>indirectExportEntries</var>.</li></ol></li></ol></li><li>Return <emu-xref href=\"#sourctextmodule-record\"><a href=\"#sourctextmodule-record\">Source Text Module Record</a></emu-xref> { [[Realm]]: <var>realm</var>, [[Environment]]: <emu-val>undefined</emu-val>, [[Namespace]]: <emu-val>undefined</emu-val>, [[Status]]: <emu-const>unlinked</emu-const>, [[EvaluationError]]: <emu-val>undefined</emu-val>, [[HostDefined]]: <var>hostDefined</var>, [[ECMAScriptCode]]: <var>body</var>, [[Context]]: <emu-const>empty</emu-const>, [[RequestedModules]]: <var>requestedModules</var>, [[ImportEntries]]: <var>importEntries</var>, [[LocalExportEntries]]: <var>localExportEntries</var>, [[IndirectExportEntries]]: <var>indirectExportEntries</var>, [[StarExportEntries]]: <var>starExportEntries</var>, [[DFSIndex]]: <emu-val>undefined</emu-val>, [[DFSAncestorIndex]]: <emu-val>undefined</emu-val> }.\n          </li></ol></emu-alg>\n          <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n            <p>An implementation may parse module source text and analyse it for Early Error conditions prior to the evaluation of ParseModule for that module source text. However, the reporting of any errors must be deferred until the point where this specification actually performs ParseModule upon that source text.</p>\n          </div></emu-note>\n        </emu-clause>\n\n        "}, "sec-dataview.prototype.getuint8": {"num": "24.3.4.12", "title": "#sec-dataview.prototype.getuint8 DataView.prototype.getUint8 ( byteOffset )", "html": "<emu-clause id=\"sec-dataview.prototype.getuint8\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.getuint8\">#sec-dataview.prototype.getuint8</span> DataView.prototype.getUint8 ( <var>byteOffset</var> )</h1>\n        <p>When the <code>getUint8</code> method is called with argument <var>byteOffset</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"GetViewValue\"><a href=\"#sec-getviewvalue\">GetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <emu-val>true</emu-val>, <emu-const>Uint8</emu-const>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-typedarray-typedarray": {"num": "22.2.4.3", "title": "#sec-typedarray-typedarray TypedArray ( typedArray )", "html": "<emu-clause id=\"sec-typedarray-typedarray\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-typedarray-typedarray\">#sec-typedarray-typedarray</span> <var>TypedArray</var> ( <var>typedArray</var> )</h1>\n        <p>This description applies only if the <var>TypedArray</var> function is called with at least one argument and the Type of the first argument is Object and that object has a [[TypedArrayName]] internal slot.</p>\n        <p><var>TypedArray</var> called with argument <var>typedArray</var> performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>typedArray</var>) is Object and <var>typedArray</var> has a [[TypedArrayName]] internal slot.</li><li>If NewTarget is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorName</var> be the String value of the <emu-xref href=\"#constructor\"><a href=\"#constructor\">Constructor</a></emu-xref> Name value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for this <var>TypedArray</var> <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</li><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"AllocateTypedArray\"><a href=\"#sec-allocatetypedarray\">AllocateTypedArray</a></emu-xref>(<var>constructorName</var>, NewTarget, <code>\"%<var>TypedArray</var>.prototype%\"</code>).</li><li>Let <var>srcArray</var> be <var>typedArray</var>.</li><li>Let <var>srcData</var> be <var>srcArray</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>srcData</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>elementType</var> be the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>constructorName</var>.</li><li>Let <var>elementLength</var> be <var>srcArray</var>.[[ArrayLength]].</li><li>Let <var>srcName</var> be the String value of <var>srcArray</var>.[[TypedArrayName]].</li><li>Let <var>srcType</var> be the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>srcName</var>.</li><li>Let <var>srcElementSize</var> be the Element Size value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>srcName</var>.</li><li>Let <var>srcByteOffset</var> be <var>srcArray</var>.[[ByteOffset]].</li><li>Let <var>elementSize</var> be the Element Size value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>constructorName</var>.</li><li>Let <var>byteLength</var> be <var>elementSize</var> &#215; <var>elementLength</var>.</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>srcData</var>) is <emu-val>false</emu-val>, then<ol><li>Let <var>bufferConstructor</var> be ?&#160;<emu-xref aoid=\"SpeciesConstructor\"><a href=\"#sec-speciesconstructor\">SpeciesConstructor</a></emu-xref>(<var>srcData</var>, <emu-xref href=\"#sec-arraybuffer-constructor\"><a href=\"#sec-arraybuffer-constructor\">%ArrayBuffer%</a></emu-xref>).</li></ol></li><li>Else,<ol><li>Let <var>bufferConstructor</var> be <emu-xref href=\"#sec-arraybuffer-constructor\"><a href=\"#sec-arraybuffer-constructor\">%ArrayBuffer%</a></emu-xref>.</li></ol></li><li>If <var>elementType</var> is the same as <var>srcType</var>, then<ol><li>Let <var>data</var> be ?&#160;<emu-xref aoid=\"CloneArrayBuffer\"><a href=\"#sec-clonearraybuffer\">CloneArrayBuffer</a></emu-xref>(<var>srcData</var>, <var>srcByteOffset</var>, <var>byteLength</var>, <var>bufferConstructor</var>).</li></ol></li><li>Else,<ol><li>Let <var>data</var> be ?&#160;<emu-xref aoid=\"AllocateArrayBuffer\"><a href=\"#sec-allocatearraybuffer\">AllocateArrayBuffer</a></emu-xref>(<var>bufferConstructor</var>, <var>byteLength</var>).</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>srcData</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>srcArray</var>.[[ContentType]] is not equal to <var>O</var>.[[ContentType]], throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>srcByteIndex</var> be <var>srcByteOffset</var>.</li><li>Let <var>targetByteIndex</var> be 0.</li><li>Let <var>count</var> be <var>elementLength</var>.</li><li>Repeat, while <var>count</var> &gt; 0<ol><li>Let <var>value</var> be <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref>(<var>srcData</var>, <var>srcByteIndex</var>, <var>srcType</var>, <emu-val>true</emu-val>, <emu-const>Unordered</emu-const>).</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>data</var>, <var>targetByteIndex</var>, <var>elementType</var>, <var>value</var>, <emu-val>true</emu-val>, <emu-const>Unordered</emu-const>).</li><li>Set <var>srcByteIndex</var> to <var>srcByteIndex</var> + <var>srcElementSize</var>.</li><li>Set <var>targetByteIndex</var> to <var>targetByteIndex</var> + <var>elementSize</var>.</li><li>Set <var>count</var> to <var>count</var> - 1.</li></ol></li></ol></li><li>Set <var>O</var>.[[ViewedArrayBuffer]] to <var>data</var>.</li><li>Set <var>O</var>.[[ByteLength]] to <var>byteLength</var>.</li><li>Set <var>O</var>.[[ByteOffset]] to 0.</li><li>Set <var>O</var>.[[ArrayLength]] to <var>elementLength</var>.</li><li>Return <var>O</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-allocatetypedarray": {"num": "22.2.4.2.1", "title": "#sec-allocatetypedarray Runtime Semantics: AllocateTypedArray ( constructorName, newTarget, defaultProto [ , length ] )", "html": "<emu-clause id=\"sec-allocatetypedarray\" aoid=\"AllocateTypedArray\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-allocatetypedarray\">#sec-allocatetypedarray</span> Runtime Semantics: AllocateTypedArray ( <var>constructorName</var>, <var>newTarget</var>, <var>defaultProto</var> [ , <var>length</var> ] )</h1>\n          <p>The abstract operation AllocateTypedArray with arguments <var>constructorName</var>, <var>newTarget</var>, <var>defaultProto</var> and optional argument <var>length</var> is used to validate and create an instance of a TypedArray <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. <var>constructorName</var> is required to be the name of a TypedArray <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> in  <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref>. If the <var>length</var> argument is passed, an ArrayBuffer of that length is also allocated and associated with the new TypedArray instance. AllocateTypedArray provides common semantics that is used by all of the <var>TypedArray</var> overloads. AllocateTypedArray performs the following steps:</p>\n          <emu-alg><ol><li>Let <var>proto</var> be ?&#160;<emu-xref aoid=\"GetPrototypeFromConstructor\"><a href=\"#sec-getprototypefromconstructor\">GetPrototypeFromConstructor</a></emu-xref>(<var>newTarget</var>, <var>defaultProto</var>).</li><li>Let <var>obj</var> be <emu-xref aoid=\"IntegerIndexedObjectCreate\"><a href=\"#sec-integerindexedobjectcreate\">IntegerIndexedObjectCreate</a></emu-xref>(<var>proto</var>, &#171; [[ViewedArrayBuffer]], [[TypedArrayName]], [[ContentType]], [[ByteLength]], [[ByteOffset]], [[ArrayLength]] &#187;).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>obj</var>.[[ViewedArrayBuffer]] is <emu-val>undefined</emu-val>.</li><li>Set <var>obj</var>.[[TypedArrayName]] to <var>constructorName</var>.</li><li>If <var>constructorName</var> is <code>\"BigInt64Array\"</code> or <code>\"BigUint64Array\"</code>, set <var>obj</var>.[[ContentType]] to <emu-const>BigInt</emu-const>.</li><li>Otherwise, set <var>obj</var>.[[ContentType]] to <emu-const>Number</emu-const>.</li><li>If <var>length</var> is not present, then<ol><li>Set <var>obj</var>.[[ByteLength]] to 0.</li><li>Set <var>obj</var>.[[ByteOffset]] to 0.</li><li>Set <var>obj</var>.[[ArrayLength]] to 0.</li></ol></li><li>Else,<ol><li>Perform ?&#160;<emu-xref aoid=\"AllocateTypedArrayBuffer\"><a href=\"#sec-allocatetypedarraybuffer\">AllocateTypedArrayBuffer</a></emu-xref>(<var>obj</var>, <var>length</var>).</li></ol></li><li>Return <var>obj</var>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-function-environment-records-hasthisbinding": {"num": "8.1.1.3.2", "title": "#sec-function-environment-records-hasthisbinding HasThisBinding ( )", "html": "<emu-clause id=\"sec-function-environment-records-hasthisbinding\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-environment-records-hasthisbinding\">#sec-function-environment-records-hasthisbinding</span> HasThisBinding ( )</h1>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref> for which the method was invoked.</li><li>If <var>envRec</var>.[[ThisBindingStatus]] is <emu-const>lexical</emu-const>, return <emu-val>false</emu-val>; otherwise, return <emu-val>true</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-function-environment-records-hassuperbinding": {"num": "8.1.1.3.3", "title": "#sec-function-environment-records-hassuperbinding HasSuperBinding ( )", "html": "<emu-clause id=\"sec-function-environment-records-hassuperbinding\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-environment-records-hassuperbinding\">#sec-function-environment-records-hassuperbinding</span> HasSuperBinding ( )</h1>\n          <emu-alg><ol><li>Let <var>envRec</var> be the <emu-xref href=\"#sec-function-environment-records\"><a href=\"#sec-function-environment-records\">function Environment Record</a></emu-xref> for which the method was invoked.</li><li>If <var>envRec</var>.[[ThisBindingStatus]] is <emu-const>lexical</emu-const>, return <emu-val>false</emu-val>.</li><li>If <var>envRec</var>.[[HomeObject]] has the value <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>; otherwise, return <emu-val>true</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-async-function-instances": {"num": "25.7.4", "title": "#sec-async-function-instances AsyncFunction Instances", "html": "<emu-clause id=\"sec-async-function-instances\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-instances\">#sec-async-function-instances</span> AsyncFunction Instances</h1>\n\n      <p>Every AsyncFunction instance is an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> and has the internal slots listed in  <emu-xref href=\"#table-27\"><a href=\"#table-27\" class=\"excluded-xref\" excluded-id=\"table-27\">#table-27</a></emu-xref>. The value of the [[FunctionKind]] internal slot for all such instances is <emu-const>async</emu-const>. AsyncFunction instances are not constructors and do not have a [[Construct]] internal method. AsyncFunction instances do not have a prototype property as they are not constructable.</p>\n      <p>Each AsyncFunction instance has the following own properties:</p>\n      <div id=\"excluded-sec-async-function-instances-length\"><h1><span class=\"secnum\">25.7.4.1</span>#sec-async-function-instances-length length</h1>...</div><div id=\"excluded-sec-async-function-instances-name\"><h1><span class=\"secnum\">25.7.4.2</span>#sec-async-function-instances-name name</h1>...</div></emu-clause>\n\n    "}, "sec-dataview.prototype.setfloat64": {"num": "24.3.4.18", "title": "#sec-dataview.prototype.setfloat64 DataView.prototype.setFloat64 ( byteOffset, value [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.setfloat64\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.setfloat64\">#sec-dataview.prototype.setfloat64</span> DataView.prototype.setFloat64 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>setFloat64</code> method is called with arguments <var>byteOffset</var> and <var>value</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>false</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"SetViewValue\"><a href=\"#sec-setviewvalue\">SetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <emu-const>Float64</emu-const>, <var>value</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-asyncgeneratorresumenext": {"num": "25.5.3.5", "title": "#sec-asyncgeneratorresumenext AsyncGeneratorResumeNext ( generator )", "html": "<emu-clause id=\"sec-asyncgeneratorresumenext\" aoid=\"AsyncGeneratorResumeNext\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorresumenext\">#sec-asyncgeneratorresumenext</span> AsyncGeneratorResumeNext ( <var>generator</var> )</h1>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generator</var> is an AsyncGenerator instance.</li><li>Let <var>state</var> be <var>generator</var>.[[AsyncGeneratorState]].</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>state</var> is not <emu-const>executing</emu-const>.</li><li>If <var>state</var> is <emu-const>awaiting-return</emu-const>, return <emu-val>undefined</emu-val>.</li><li>Let <var>queue</var> be <var>generator</var>.[[AsyncGeneratorQueue]].</li><li>If <var>queue</var> is an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>, return <emu-val>undefined</emu-val>.</li><li>Let <var>next</var> be the value of the first element of <var>queue</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>next</var> is an AsyncGeneratorRequest record.</li><li>Let <var>completion</var> be <var>next</var>.[[Completion]].</li><li>If <var>completion</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>If <var>state</var> is <emu-const>suspendedStart</emu-const>, then<ol><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <emu-const>completed</emu-const>.</li><li>Set <var>state</var> to <emu-const>completed</emu-const>.</li></ol></li><li>If <var>state</var> is <emu-const>completed</emu-const>, then<ol><li>If <var>completion</var>.[[Type]] is <emu-const>return</emu-const>, then<ol><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <emu-const>awaiting-return</emu-const>.</li><li>Let <var>promise</var> be ?&#160;<emu-xref aoid=\"PromiseResolve\"><a href=\"#sec-promise-resolve\">PromiseResolve</a></emu-xref>(<emu-xref href=\"#sec-promise-constructor\"><a href=\"#sec-promise-constructor\">%Promise%</a></emu-xref>, <var>completion</var>.[[Value]]).</li><li>Let <var>stepsFulfilled</var> be the algorithm steps defined in <emu-xref href=\"#async-generator-resume-next-return-processor-fulfilled\" title=\"\"><a href=\"#async-generator-resume-next-return-processor-fulfilled\">AsyncGeneratorResumeNext Return Processor Fulfilled Functions</a></emu-xref>.</li><li>Let <var>onFulfilled</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>stepsFulfilled</var>, &#171; [[Generator]] &#187;).</li><li>Set <var>onFulfilled</var>.[[Generator]] to <var>generator</var>.</li><li>Let <var>stepsRejected</var> be the algorithm steps defined in <emu-xref href=\"#async-generator-resume-next-return-processor-rejected\" title=\"\"><a href=\"#async-generator-resume-next-return-processor-rejected\">AsyncGeneratorResumeNext Return Processor Rejected Functions</a></emu-xref>.</li><li>Let <var>onRejected</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>stepsRejected</var>, &#171; [[Generator]] &#187;).</li><li>Set <var>onRejected</var>.[[Generator]] to <var>generator</var>.</li><li>Perform !&#160;<emu-xref aoid=\"PerformPromiseThen\"><a href=\"#sec-performpromisethen\">PerformPromiseThen</a></emu-xref>(<var>promise</var>, <var>onFulfilled</var>, <var>onRejected</var>).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>completion</var>.[[Type]] is <emu-const>throw</emu-const>.</li><li>Perform !&#160;<emu-xref aoid=\"AsyncGeneratorReject\"><a href=\"#sec-asyncgeneratorreject\">AsyncGeneratorReject</a></emu-xref>(<var>generator</var>, <var>completion</var>.[[Value]]).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li></ol></li></ol></li><li>Else if <var>state</var> is <emu-const>completed</emu-const>, return !&#160;<emu-xref aoid=\"AsyncGeneratorResolve\"><a href=\"#sec-asyncgeneratorresolve\">AsyncGeneratorResolve</a></emu-xref>(<var>generator</var>, <emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>state</var> is either <emu-const>suspendedStart</emu-const> or <emu-const>suspendedYield</emu-const>.</li><li>Let <var>genContext</var> be <var>generator</var>.[[AsyncGeneratorContext]].</li><li>Let <var>callerContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref aoid=\"Suspend\"><a href=\"#sec-suspend\">Suspend</a></emu-xref> <var>callerContext</var>.</li><li>Set <var>generator</var>.[[AsyncGeneratorState]] to <emu-const>executing</emu-const>.</li><li>Push <var>genContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>genContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>genContext</var> using <var>completion</var> as the result of the operation that suspended it. Let <var>result</var> be the completion record returned by the resumed computation.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>result</var> is never an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we return here, <var>genContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>callerContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-val>undefined</emu-val>.\n        </li></ol></emu-alg>\n\n        <emu-clause id=\"async-generator-resume-next-return-processor-fulfilled\">\n          <h1><span class=\"secnum\">25.5.3.5.1</span> AsyncGeneratorResumeNext Return Processor Fulfilled Functions</h1>\n\n          <p>An <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor fulfilled function is an anonymous built-in function that is used as part of the <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> specification device to unwrap promises passed in to the  <emu-xref href=\"#sec-asyncgenerator-prototype-return\" title=\"\"><a href=\"#sec-asyncgenerator-prototype-return\">AsyncGenerator.prototype.return ( <var>value</var> )</a></emu-xref> method. Each <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor fulfilled function has a [[Generator]] internal slot.</p>\n\n          <p>When an <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor fulfilled function is called with argument <var>value</var>, the following steps are taken:</p>\n\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Set <var>F</var>.[[Generator]].[[AsyncGeneratorState]] to <emu-const>completed</emu-const>.</li><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorResolve\"><a href=\"#sec-asyncgeneratorresolve\">AsyncGeneratorResolve</a></emu-xref>(<var>F</var>.[[Generator]], <var>value</var>, <emu-val>true</emu-val>).\n          </li></ol></emu-alg>\n\n          <p>The <code>\"length\"</code> property of an <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor fulfilled function is 1.</p>\n        </emu-clause>\n\n        <emu-clause id=\"async-generator-resume-next-return-processor-rejected\">\n          <h1><span class=\"secnum\">25.5.3.5.2</span> AsyncGeneratorResumeNext Return Processor Rejected Functions</h1>\n\n          <p>An <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor rejected function is an anonymous built-in function that is used as part of the <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> specification device to unwrap promises passed in to the  <emu-xref href=\"#sec-asyncgenerator-prototype-return\" title=\"\"><a href=\"#sec-asyncgenerator-prototype-return\">AsyncGenerator.prototype.return ( <var>value</var> )</a></emu-xref> method. Each <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor rejected function has a [[Generator]] internal slot.</p>\n\n          <p>When an <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor rejected function is called with argument <var>reason</var>, the following steps are taken:</p>\n\n          <emu-alg><ol><li>Let <var>F</var> be the <emu-xref href=\"#active-function-object\"><a href=\"#active-function-object\">active function object</a></emu-xref>.</li><li>Set <var>F</var>.[[Generator]].[[AsyncGeneratorState]] to <emu-const>completed</emu-const>.</li><li>Return !&#160;<emu-xref aoid=\"AsyncGeneratorReject\"><a href=\"#sec-asyncgeneratorreject\">AsyncGeneratorReject</a></emu-xref>(<var>F</var>.[[Generator]], <var>reason</var>).\n          </li></ol></emu-alg>\n\n          <p>The <code>\"length\"</code> property of an <emu-xref aoid=\"AsyncGeneratorResumeNext\"><a href=\"#sec-asyncgeneratorresumenext\">AsyncGeneratorResumeNext</a></emu-xref> return processor rejected function is 1.</p>\n        </emu-clause>\n      </emu-clause>\n\n      "}, "sec-promisereaction-records": {"num": "25.6.1.2", "title": "#sec-promisereaction-records PromiseReaction Records", "html": "<emu-clause id=\"sec-promisereaction-records\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-promisereaction-records\">#sec-promisereaction-records</span> PromiseReaction Records</h1>\n        <p>The PromiseReaction is a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> value used to store information about how a promise should react when it becomes resolved or rejected with a given value. PromiseReaction records are created by the <emu-xref aoid=\"PerformPromiseThen\"><a href=\"#sec-performpromisethen\">PerformPromiseThen</a></emu-xref> abstract operation, and are used by a <emu-xref aoid=\"PromiseReactionJob\"><a href=\"#sec-promisereactionjob\">PromiseReactionJob</a></emu-xref>.</p>\n        <p>PromiseReaction records have the fields listed in  <emu-xref href=\"#table-58\"><a href=\"#table-58\" class=\"excluded-xref\" excluded-id=\"table-58\">#table-58</a></emu-xref>.</p>\n        <emu-table id=\"table-58\" caption=\"PromiseReaction Record Fields\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-58\">#table-58</span>: PromiseReaction <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> Fields</figcaption>\n          <table>\n            <tbody>\n            <tr>\n              <th>\n                Field Name\n              \n              </th>\n              <th>\n                Value\n              \n              </th>\n              <th>\n                Meaning\n              \n              </th>\n            </tr>\n            <tr>\n              <td>\n                [[Capability]]\n              \n              </td>\n              <td>\n                A PromiseCapability <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref>, or <emu-val>undefined</emu-val>\n              \n              </td>\n              <td>\n                The capabilities of the promise for which this record provides a reaction handler.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Type]]\n              \n              </td>\n              <td>\n                <emu-const>Fulfill</emu-const> | <emu-const>Reject</emu-const>\n              \n              </td>\n              <td>\n                The [[Type]] is used when [[Handler]] is <emu-val>undefined</emu-val> to allow for behaviour specific to the settlement type.\n              \n              </td>\n            </tr>\n            <tr>\n              <td>\n                [[Handler]]\n              \n              </td>\n              <td>\n                A <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> or <emu-val>undefined</emu-val>.\n              \n              </td>\n              <td>\n                The function that should be applied to the incoming value, and whose return value will govern what happens to the derived promise. If [[Handler]] is <emu-val>undefined</emu-val>, a function that depends on the value of [[Type]] will be used instead.\n              \n              </td>\n            </tr>\n            </tbody>\n          </table>\n        </figure></emu-table>\n      </emu-clause>\n\n      "}, "sec-generatorresumeabrupt": {"num": "25.4.3.4", "title": "#sec-generatorresumeabrupt GeneratorResumeAbrupt ( generator, abruptCompletion )", "html": "<emu-clause id=\"sec-generatorresumeabrupt\" aoid=\"GeneratorResumeAbrupt\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorresumeabrupt\">#sec-generatorresumeabrupt</span> GeneratorResumeAbrupt ( <var>generator</var>, <var>abruptCompletion</var> )</h1>\n        <p>The abstract operation GeneratorResumeAbrupt with arguments <var>generator</var> and <var>abruptCompletion</var> performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>state</var> be ?&#160;<emu-xref aoid=\"GeneratorValidate\"><a href=\"#sec-generatorvalidate\">GeneratorValidate</a></emu-xref>(<var>generator</var>).</li><li>If <var>state</var> is <emu-const>suspendedStart</emu-const>, then<ol><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>completed</emu-const>.</li><li>Once a generator enters the <emu-const>completed</emu-const> state it never leaves it and its associated <emu-xref href=\"#sec-execution-contexts\"><a href=\"#sec-execution-contexts\">execution context</a></emu-xref> is never resumed. Any execution state associated with <var>generator</var> can be discarded at this point.</li><li>Set <var>state</var> to <emu-const>completed</emu-const>.</li></ol></li><li>If <var>state</var> is <emu-const>completed</emu-const>, then<ol><li>If <var>abruptCompletion</var>.[[Type]] is <emu-const>return</emu-const>, then<ol><li>Return <emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>abruptCompletion</var>.[[Value]], <emu-val>true</emu-val>).</li></ol></li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>abruptCompletion</var>).</li></ol></li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>state</var> is <emu-const>suspendedYield</emu-const>.</li><li>Let <var>genContext</var> be <var>generator</var>.[[GeneratorContext]].</li><li>Let <var>methodContext</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li><emu-xref aoid=\"Suspend\"><a href=\"#sec-suspend\">Suspend</a></emu-xref> <var>methodContext</var>.</li><li>Set <var>generator</var>.[[GeneratorState]] to <emu-const>executing</emu-const>.</li><li>Push <var>genContext</var> onto the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref>; <var>genContext</var> is now the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Resume the suspended evaluation of <var>genContext</var> using <var>abruptCompletion</var> as the result of the operation that suspended it. Let <var>result</var> be the completion record returned by the resumed computation.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: When we return here, <var>genContext</var> has already been removed from the <emu-xref href=\"#execution-context-stack\"><a href=\"#execution-context-stack\">execution context stack</a></emu-xref> and <var>methodContext</var> is the currently <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>result</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-parseint-string-radix": {"num": "18.2.5", "title": "#sec-parseint-string-radix parseInt ( string, radix )", "html": "<emu-clause id=\"sec-parseint-string-radix\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-parseint-string-radix\">#sec-parseint-string-radix</span> parseInt ( <var>string</var>, <var>radix</var> )</h1>\n      <p>The <code>parseInt</code> function produces an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value dictated by interpretation of the contents of the <var>string</var> argument according to the specified <var>radix</var>. Leading white space in <var>string</var> is ignored. If <var>radix</var> is <emu-val>undefined</emu-val> or 0, it is assumed to be 10 except when the number begins with the code unit pairs <code>0x</code> or <code>0X</code>, in which case a radix of 16 is assumed. If <var>radix</var> is 16, the number may also optionally begin with the code unit pairs <code>0x</code> or <code>0X</code>.</p>\n      <p>The <code>parseInt</code> function is the  <dfn>%parseInt%</dfn> intrinsic object. When the <code>parseInt</code> function is called, the following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>inputString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>string</var>).</li><li>Let <var>S</var> be !&#160;<emu-xref aoid=\"TrimString\"><a href=\"#sec-trimstring\">TrimString</a></emu-xref>(<var>inputString</var>, <emu-const>start</emu-const>).</li><li>Let <var>sign</var> be 1.</li><li>If <var>S</var> is not empty and the first code unit of <var>S</var> is the code unit 0x002D (HYPHEN-MINUS), set <var>sign</var> to -1.</li><li>If <var>S</var> is not empty and the first code unit of <var>S</var> is the code unit 0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS), remove the first code unit from <var>S</var>.</li><li>Let <var>R</var> be ?&#160;<emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>(<var>radix</var>).</li><li>Let <var>stripPrefix</var> be <emu-val>true</emu-val>.</li><li>If <var>R</var> &#8800; 0, then<ol><li>If <var>R</var> &lt; 2 or <var>R</var> &gt; 36, return <emu-val>NaN</emu-val>.</li><li>If <var>R</var> &#8800; 16, set <var>stripPrefix</var> to <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>Set <var>R</var> to 10.</li></ol></li><li>If <var>stripPrefix</var> is <emu-val>true</emu-val>, then<ol><li>If the length of <var>S</var> is at least 2 and the first two code units of <var>S</var> are either <code>\"0x\"</code> or <code>\"0X\"</code>, then<ol><li>Remove the first two code units from <var>S</var>.</li><li>Set <var>R</var> to 16.</li></ol></li></ol></li><li>If <var>S</var> contains a code unit that is not a radix-<var>R</var> digit, let <var>Z</var> be the substring of <var>S</var> consisting of all code units before the first such code unit; otherwise, let <var>Z</var> be <var>S</var>.</li><li>If <var>Z</var> is empty, return <emu-val>NaN</emu-val>.</li><li>Let <var>mathInt</var> be the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> value that is represented by <var>Z</var> in radix-<var>R</var> notation, using the letters <b>A</b>-<b>Z</b> and <b>a</b>-<b>z</b> for digits with values 10 through 35. (However, if <var>R</var> is 10 and <var>Z</var> contains more than 20 significant digits, every significant digit after the 20th may be replaced by a 0 digit, at the option of the implementation; and if <var>R</var> is not 2, 4, 8, 10, 16, or 32, then <var>mathInt</var> may be an implementation-dependent approximation to the <emu-xref href=\"#mathematical%20integer\"><a href=\"#mathematical%20integer\">mathematical integer</a></emu-xref> value that is represented by <var>Z</var> in radix-<var>R</var> notation.)</li><li>If <var>mathInt</var> = 0<sub><emu-xref href=\"#%E2%84%9D\"><a href=\"#%E2%84%9D\">&#8477;</a></emu-xref></sub>, then<ol><li>If <var>sign</var> = -1, return <emu-val>-0</emu-val>.</li><li>Return <emu-val>+0</emu-val>.</li></ol></li><li>Let <var>number</var> be the <emu-xref href=\"#number-value\"><a href=\"#number-value\">Number value</a></emu-xref> for <var>mathInt</var>.</li><li>Return <var>sign</var> &#215; <var>number</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p><code>parseInt</code> may interpret only a leading portion of <var>string</var> as an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value; it ignores any code units that cannot be interpreted as part of the notation of an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>, and no indication is given that any such code units were ignored.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-date.prototype.toutcstring": {"num": "20.4.4.43", "title": "#sec-date.prototype.toutcstring Date.prototype.toUTCString ( )", "html": "<emu-clause id=\"sec-date.prototype.toutcstring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-date.prototype.toutcstring\">#sec-date.prototype.toutcstring</span> Date.prototype.toUTCString ( )</h1>\n        <p>The <code>toUTCString</code> method returns a String value representing the instance in time corresponding to <emu-xref href=\"#this-time-value\"><a href=\"#this-time-value\">this time value</a></emu-xref>. The format of the String is based upon \"HTTP-date\" from RFC 7231, generalized to support the full range of times supported by ECMAScript Date objects. It performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>O</var> be <emu-xref href=\"#this-Date-object\"><a href=\"#this-Date-object\">this Date object</a></emu-xref>.</li><li>Let <var>tv</var> be ?&#160;<emu-xref href=\"#sec-thistimevalue\"><a href=\"#sec-thistimevalue\">thisTimeValue</a></emu-xref>(<var>O</var>).</li><li>If <var>tv</var> is <emu-val>NaN</emu-val>, return <code>\"Invalid Date\"</code>.</li><li>Let <var>weekday</var> be the Name of the entry in <emu-xref href=\"#sec-todatestring-day-names\"><a href=\"#sec-todatestring-day-names\" class=\"excluded-xref\" excluded-id=\"sec-todatestring-day-names\">#sec-todatestring-day-names</a></emu-xref> with the Number <emu-xref aoid=\"WeekDay\"><a href=\"#sec-week-day\">WeekDay</a></emu-xref>(<var>tv</var>).</li><li>Let <var>month</var> be the Name of the entry in <emu-xref href=\"#sec-todatestring-month-names\"><a href=\"#sec-todatestring-month-names\" class=\"excluded-xref\" excluded-id=\"sec-todatestring-month-names\">#sec-todatestring-month-names</a></emu-xref> with the Number <emu-xref aoid=\"MonthFromTime\"><a href=\"#eqn-MonthFromTime\">MonthFromTime</a></emu-xref>(<var>tv</var>).</li><li>Let <var>day</var> be the String representation of <emu-xref aoid=\"DateFromTime\"><a href=\"#sec-date-number\">DateFromTime</a></emu-xref>(<var>tv</var>), formatted as a two-digit decimal number, padded to the left with a zero if necessary.</li><li>Let <var>yv</var> be <emu-xref aoid=\"YearFromTime\"><a href=\"#eqn-YearFromTime\">YearFromTime</a></emu-xref>(<var>tv</var>).</li><li>If <var>yv</var> &#8805; 0, let <var>yearSign</var> be the empty string; otherwise, let <var>yearSign</var> be <code>\"-\"</code>.</li><li>Let <var>year</var> be the String representation of <emu-xref aoid=\"abs\"><a href=\"#eqn-abs\">abs</a></emu-xref>(<var>yv</var>), formatted as a decimal number.</li><li>Let <var>paddedYear</var> be !&#160;<emu-xref aoid=\"StringPad\"><a href=\"#sec-stringpad\">StringPad</a></emu-xref>(<var>year</var>, 4, <code>\"0\"</code>, <emu-const>start</emu-const>).</li><li>Return the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>weekday</var>, <code>\",\"</code>, the code unit 0x0020 (SPACE), <var>day</var>, the code unit 0x0020 (SPACE), <var>month</var>, the code unit 0x0020 (SPACE), <var>yearSign</var>, <var>paddedYear</var>, the code unit 0x0020 (SPACE), and <emu-xref aoid=\"TimeString\"><a href=\"#sec-timestring\">TimeString</a></emu-xref>(<var>tv</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-object.entries": {"num": "19.1.2.5", "title": "#sec-object.entries Object.entries ( O )", "html": "<emu-clause id=\"sec-object.entries\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.entries\">#sec-object.entries</span> Object.entries ( <var>O</var> )</h1>\n        <p>When the <code>entries</code> function is called with argument <var>O</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>obj</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>O</var>).</li><li>Let <var>nameList</var> be ?&#160;<emu-xref aoid=\"EnumerableOwnPropertyNames\"><a href=\"#sec-enumerableownpropertynames\">EnumerableOwnPropertyNames</a></emu-xref>(<var>obj</var>, <emu-const>key+value</emu-const>).</li><li>Return <emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(<var>nameList</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-value-notation": {"num": "5.2.6", "title": "#sec-value-notation Value Notation", "html": "<emu-clause id=\"sec-value-notation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-value-notation\">#sec-value-notation</span> Value Notation</h1>\n      <p>In this specification, ECMAScript language values are displayed in <emu-val>bold</emu-val>. Examples include <emu-val>null</emu-val>, <emu-val>true</emu-val>, or <emu-val>\"hello\"</emu-val>. These are distinguished from longer ECMAScript code sequences such as <code>Function.prototype.apply</code> or <code>let n = 42;</code>.</p>\n      <p>Values which are internal to the specification and not directly observable from ECMAScript code are indicated with a <emu-const>sans-serif</emu-const> typeface. For instance, a <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">Completion Record</a></emu-xref>'s [[Type]] field takes on values like <emu-const>normal</emu-const>, <emu-const>return</emu-const>, or <emu-const>throw</emu-const>.</p>\n    </emu-clause>\n  "}, "sec-generatorvalidate": {"num": "25.4.3.2", "title": "#sec-generatorvalidate GeneratorValidate ( generator )", "html": "<emu-clause id=\"sec-generatorvalidate\" aoid=\"GeneratorValidate\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorvalidate\">#sec-generatorvalidate</span> GeneratorValidate ( <var>generator</var> )</h1>\n        <p>The abstract operation GeneratorValidate with argument <var>generator</var> performs the following steps:</p>\n        <emu-alg><ol><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>generator</var>, [[GeneratorState]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>generator</var> also has a [[GeneratorContext]] internal slot.</li><li>Let <var>state</var> be <var>generator</var>.[[GeneratorState]].</li><li>If <var>state</var> is <emu-const>executing</emu-const>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>state</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-ecmascript-function-objects": {"num": "9.2", "title": "#sec-ecmascript-function-objects ECMAScript Function Objects", "html": "<emu-clause id=\"sec-ecmascript-function-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-function-objects\">#sec-ecmascript-function-objects</span> ECMAScript Function Objects</h1>\n    <p>ECMAScript function objects encapsulate parameterized ECMAScript code closed over a lexical environment and support the dynamic evaluation of that code. An ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is an ordinary object and has the same internal slots and the same internal methods as other ordinary objects. The code of an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> may be either <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> (<emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\" class=\"excluded-xref\" excluded-id=\"sec-strict-mode-code\">#sec-strict-mode-code</a></emu-xref>) or <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>. An ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> whose code is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> is called a  <dfn id=\"strict-function\">strict function</dfn>. One whose code is not <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> is called a  <dfn id=\"non-strict-function\">non-strict function</dfn>.</p>\n    <p>ECMAScript function objects have the additional internal slots listed in  <emu-xref href=\"#table-27\"><a href=\"#table-27\" class=\"excluded-xref\" excluded-id=\"table-27\">#table-27</a></emu-xref>.</p>\n    <emu-table id=\"table-27\" caption=\"Internal Slots of ECMAScript Function Objects\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-27\">#table-27</span>: Internal Slots of ECMAScript Function Objects</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Internal Slot\n          \n          </th>\n          <th>\n            Type\n          \n          </th>\n          <th>\n            Description\n          \n          </th>\n        </tr>\n        <tr>\n          <td>\n            [[Environment]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref>\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> that the function was closed over. Used as the outer environment when evaluating the code of the function.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[FormalParameters]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n          \n          </td>\n          <td>\n            The root parse node of the source text that defines the function's formal parameter list.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[FunctionKind]]\n          \n          </td>\n          <td>\n            <emu-const>normal</emu-const> | <emu-const>classConstructor</emu-const> | <emu-const>generator</emu-const> | <emu-const>async</emu-const> | <emu-const>asyncGenerator</emu-const>\n          \n          </td>\n          <td>\n            Whether the function is a class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>, generator, or async function.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ECMAScriptCode]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n          \n          </td>\n          <td>\n            The root parse node of the source text that defines the function's body.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ConstructorKind]]\n          \n          </td>\n          <td>\n            <emu-const>base</emu-const> | <emu-const>derived</emu-const>\n          \n          </td>\n          <td>\n            Whether or not the function is a derived class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Realm]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> in which the function was created and which provides any intrinsic objects that are accessed when evaluating the function.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ScriptOrModule]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>\n          \n          </td>\n          <td>\n            The script or module in which the function was created.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ThisMode]]\n          \n          </td>\n          <td>\n            <emu-const>lexical</emu-const> | <emu-const>strict</emu-const> | <emu-const>global</emu-const>\n          \n          </td>\n          <td>\n            Defines how <code>this</code> references are interpreted within the formal parameters and code body of the function. <emu-const>lexical</emu-const> means that <code>this</code> refers to the <emu-val>this</emu-val> value of a lexically enclosing function. <emu-const>strict</emu-const> means that the <emu-val>this</emu-val> value is used exactly as provided by an invocation of the function. <emu-const>global</emu-const> means that a <emu-val>this</emu-val> value of <emu-val>undefined</emu-val> is interpreted as a reference to the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Strict]]\n          \n          </td>\n          <td>\n            Boolean\n          \n          </td>\n          <td>\n            <emu-val>true</emu-val> if this is a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref>, <emu-val>false</emu-val> if this is a <emu-xref href=\"#non-strict-function\"><a href=\"#non-strict-function\">non-strict function</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[HomeObject]]\n          \n          </td>\n          <td>\n            Object\n          \n          </td>\n          <td>\n            If the function uses <code>super</code>, this is the object whose [[GetPrototypeOf]] provides the object where <code>super</code> property lookups begin.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[SourceText]]\n          \n          </td>\n          <td>\n            String\n          \n          </td>\n          <td>\n            The  <emu-xref href=\"#sec-source-text\"><a href=\"#sec-source-text\">source text</a></emu-xref> that defines the function.\n          \n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>All ECMAScript function objects have the [[Call]] internal method defined here. ECMAScript functions that are also constructors in addition have the [[Construct]] internal method.</p>\n\n    <div id=\"excluded-sec-ecmascript-function-objects-call-thisargument-argumentslist\"><h1><span class=\"secnum\">9.2.1</span>#sec-ecmascript-function-objects-call-thisargument-argumentslist [[Call]] ( thisArgument, argumentsList )</h1>...</div><div id=\"excluded-sec-ecmascript-function-objects-construct-argumentslist-newtarget\"><h1><span class=\"secnum\">9.2.2</span>#sec-ecmascript-function-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )</h1>...</div><div id=\"excluded-sec-functionallocate\"><h1><span class=\"secnum\">9.2.3</span>#sec-functionallocate FunctionAllocate ( functionPrototype, functionKind )</h1>...</div><div id=\"excluded-sec-functioninitialize\"><h1><span class=\"secnum\">9.2.4</span>#sec-functioninitialize FunctionInitialize ( F, kind, ParameterList, Body, Scope )</h1>...</div><div id=\"excluded-sec-functioncreate\"><h1><span class=\"secnum\">9.2.5</span>#sec-functioncreate FunctionCreate ( kind, ParameterList, Body, Scope [ , prototype ] )</h1>...</div><div id=\"excluded-sec-generatorfunctioncreate\"><h1><span class=\"secnum\">9.2.6</span>#sec-generatorfunctioncreate GeneratorFunctionCreate ( kind, ParameterList, Body, Scope )</h1>...</div><div id=\"excluded-sec-asyncgeneratorfunctioncreate\"><h1><span class=\"secnum\">9.2.7</span>#sec-asyncgeneratorfunctioncreate AsyncGeneratorFunctionCreate ( kind, ParameterList, Body, Scope )</h1>...</div><div id=\"excluded-sec-async-functions-abstract-operations-async-function-create\"><h1><span class=\"secnum\">9.2.8</span>#sec-async-functions-abstract-operations-async-function-create AsyncFunctionCreate ( kind, parameters, body, Scope )</h1>...</div><div id=\"excluded-sec-addrestrictedfunctionproperties\"><h1><span class=\"secnum\">9.2.9</span>#sec-addrestrictedfunctionproperties AddRestrictedFunctionProperties ( F, realm )</h1>...</div><div id=\"excluded-sec-makeconstructor\"><h1><span class=\"secnum\">9.2.10</span>#sec-makeconstructor MakeConstructor ( F [ , writablePrototype [ , prototype ] ] )</h1>...</div><div id=\"excluded-sec-makeclassconstructor\"><h1><span class=\"secnum\">9.2.11</span>#sec-makeclassconstructor MakeClassConstructor ( F )</h1>...</div><div id=\"excluded-sec-makemethod\"><h1><span class=\"secnum\">9.2.12</span>#sec-makemethod MakeMethod ( F, homeObject )</h1>...</div><div id=\"excluded-sec-setfunctionname\"><h1><span class=\"secnum\">9.2.13</span>#sec-setfunctionname SetFunctionName ( F, name [ , prefix ] )</h1>...</div><div id=\"excluded-sec-setfunctionlength\"><h1><span class=\"secnum\">9.2.14</span>#sec-setfunctionlength SetFunctionLength ( F, length )</h1>...</div><div id=\"excluded-sec-functiondeclarationinstantiation\"><h1><span class=\"secnum\">9.2.15</span>#sec-functiondeclarationinstantiation FunctionDeclarationInstantiation ( func, argumentsList )</h1>...</div></emu-clause>\n\n  "}, "sec-dataview.prototype.setint8": {"num": "24.3.4.19", "title": "#sec-dataview.prototype.setint8 DataView.prototype.setInt8 ( byteOffset, value )", "html": "<emu-clause id=\"sec-dataview.prototype.setint8\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.setint8\">#sec-dataview.prototype.setint8</span> DataView.prototype.setInt8 ( <var>byteOffset</var>, <var>value</var> )</h1>\n        <p>When the <code>setInt8</code> method is called with arguments <var>byteOffset</var> and <var>value</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"SetViewValue\"><a href=\"#sec-setviewvalue\">SetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <emu-val>true</emu-val>, <emu-const>Int8</emu-const>, <var>value</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-functioncreate": {"num": "9.2.5", "title": "#sec-functioncreate FunctionCreate ( kind, ParameterList, Body, Scope [ , prototype ] )", "html": "<emu-clause id=\"sec-functioncreate\" aoid=\"FunctionCreate\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-functioncreate\">#sec-functioncreate</span> FunctionCreate ( <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var> [ , <var>prototype</var> ] )</h1>\n      <p>The abstract operation FunctionCreate requires the arguments: <var>kind</var> which is one of (<emu-const>Normal</emu-const>, <emu-const>Method</emu-const>, <emu-const>Arrow</emu-const>), a parameter list <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>ParameterList</var>, a body <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>Body</var>, a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> specified by <var>Scope</var>, and optionally, an object <var>prototype</var>. FunctionCreate performs the following steps:</p>\n      <emu-alg><ol><li>If <var>prototype</var> is not present, then<ol><li>Set <var>prototype</var> to <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>If <var>kind</var> is not <emu-const>Normal</emu-const>, let <var>allocKind</var> be <emu-const>non-<emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref></emu-const>.</li><li>Else, let <var>allocKind</var> be <emu-const>normal</emu-const>.</li><li>Let <var>F</var> be <emu-xref aoid=\"FunctionAllocate\"><a href=\"#sec-functionallocate\">FunctionAllocate</a></emu-xref>(<var>prototype</var>, <var>allocKind</var>).</li><li>Return <emu-xref aoid=\"FunctionInitialize\"><a href=\"#sec-functioninitialize\">FunctionInitialize</a></emu-xref>(<var>F</var>, <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-%typedarray%.prototype.copywithin": {"num": "22.2.3.5", "title": "#sec-%typedarray%.prototype.copywithin %TypedArray%.prototype.copyWithin ( target, start [ , end ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.copywithin\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.copywithin\">#sec-%typedarray%.prototype.copywithin</span> %TypedArray%.prototype.copyWithin ( <var>target</var>, <var>start</var> [ , <var>end</var> ] )</h1>\n        <p>The interpretation and use of the arguments of <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.copyWithin</code> are the same as for <code>Array.prototype.copyWithin</code> as defined in  <emu-xref href=\"#sec-array.prototype.copywithin\"><a href=\"#sec-array.prototype.copywithin\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.copywithin\">#sec-array.prototype.copywithin</a></emu-xref>.</p>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Let <var>len</var> be <var>O</var>.[[ArrayLength]].</li><li>Let <var>relativeTarget</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>target</var>).</li><li>If <var>relativeTarget</var> &lt; 0, let <var>to</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeTarget</var>), 0); else let <var>to</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeTarget</var>, <var>len</var>).</li><li>Let <var>relativeStart</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>start</var>).</li><li>If <var>relativeStart</var> &lt; 0, let <var>from</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeStart</var>), 0); else let <var>from</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeStart</var>, <var>len</var>).</li><li>If <var>end</var> is <emu-val>undefined</emu-val>, let <var>relativeEnd</var> be <var>len</var>; else let <var>relativeEnd</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>end</var>).</li><li>If <var>relativeEnd</var> &lt; 0, let <var>final</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeEnd</var>), 0); else let <var>final</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeEnd</var>, <var>len</var>).</li><li>Let <var>count</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>final</var> - <var>from</var>, <var>len</var> - <var>to</var>).</li><li>If <var>count</var> &gt; 0, then<ol><li>NOTE: The copying must be performed in a manner that preserves the bit-level encoding of the source data.</li><li>Let <var>buffer</var> be <var>O</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>typedArrayName</var> be the String value of <var>O</var>.[[TypedArrayName]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>typedArrayName</var>.</li><li>Let <var>byteOffset</var> be <var>O</var>.[[ByteOffset]].</li><li>Let <var>toByteIndex</var> be <var>to</var> &#215; <var>elementSize</var> + <var>byteOffset</var>.</li><li>Let <var>fromByteIndex</var> be <var>from</var> &#215; <var>elementSize</var> + <var>byteOffset</var>.</li><li>Let <var>countBytes</var> be <var>count</var> &#215; <var>elementSize</var>.</li><li>If <var>fromByteIndex</var> &lt; <var>toByteIndex</var> and <var>toByteIndex</var> &lt; <var>fromByteIndex</var> + <var>countBytes</var>, then<ol><li>Let <var>direction</var> be -1.</li><li>Set <var>fromByteIndex</var> to <var>fromByteIndex</var> + <var>countBytes</var> - 1.</li><li>Set <var>toByteIndex</var> to <var>toByteIndex</var> + <var>countBytes</var> - 1.</li></ol></li><li>Else,<ol><li>Let <var>direction</var> be 1.</li></ol></li><li>Repeat, while <var>countBytes</var> &gt; 0<ol><li>Let <var>value</var> be <emu-xref aoid=\"GetValueFromBuffer\"><a href=\"#sec-getvaluefrombuffer\">GetValueFromBuffer</a></emu-xref>(<var>buffer</var>, <var>fromByteIndex</var>, <emu-const>Uint8</emu-const>, <emu-val>true</emu-val>, <emu-const>Unordered</emu-const>).</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>buffer</var>, <var>toByteIndex</var>, <emu-const>Uint8</emu-const>, <var>value</var>, <emu-val>true</emu-val>, <emu-const>Unordered</emu-const>).</li><li>Set <var>fromByteIndex</var> to <var>fromByteIndex</var> + <var>direction</var>.</li><li>Set <var>toByteIndex</var> to <var>toByteIndex</var> + <var>direction</var>.</li><li>Set <var>countBytes</var> to <var>countBytes</var> - 1.</li></ol></li></ol></li><li>Return <var>O</var>.\n        </li></ol></emu-alg>\n\n        <div id=\"excluded-sec-validatetypedarray\"><h1><span class=\"secnum\">22.2.3.5.1</span>#sec-validatetypedarray Runtime Semantics: ValidateTypedArray ( O )</h1>...</div></emu-clause>\n\n      "}, "sec-setvalueinbuffer": {"num": "24.1.1.12", "title": "#sec-setvalueinbuffer SetValueInBuffer ( arrayBuffer, byteIndex, type, value, isTypedArray, order [ , isLittleEndian ] )", "html": "<emu-clause id=\"sec-setvalueinbuffer\" aoid=\"SetValueInBuffer\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-setvalueinbuffer\">#sec-setvalueinbuffer</span> SetValueInBuffer ( <var>arrayBuffer</var>, <var>byteIndex</var>, <var>type</var>, <var>value</var>, <var>isTypedArray</var>, <var>order</var> [ , <var>isLittleEndian</var> ] )</h1>\n        <p>The abstract operation SetValueInBuffer takes seven parameters, an ArrayBuffer or SharedArrayBuffer <var>arrayBuffer</var>, an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> <var>byteIndex</var>, a TypedArray element type <var>type</var>, a Number or BigInt <var>value</var>, a Boolean <var>isTypedArray</var>, <var>order</var> which is one of (<emu-const>SeqCst</emu-const>, <emu-const>Unordered</emu-const>, <emu-const>Init</emu-const>), and optionally a Boolean <var>isLittleEndian</var>. This operation performs the following steps:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>false</emu-val>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: There are sufficient bytes in <var>arrayBuffer</var> starting at <var>byteIndex</var> to represent a value of <var>type</var>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>byteIndex</var> is an <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> value &#8805; 0.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is BigInt if !&#160;<emu-xref aoid=\"IsBigIntElementType\"><a href=\"#sec-isbigintelementtype\">IsBigIntElementType</a></emu-xref>(<var>type</var>) is <emu-val>true</emu-val>; otherwise, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Number.</li><li>Let <var>block</var> be <var>arrayBuffer</var>.[[ArrayBufferData]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for Element Type <var>type</var>.</li><li>If <var>isLittleEndian</var> is not present, set <var>isLittleEndian</var> to the value of the [[LittleEndian]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>rawBytes</var> be <emu-xref aoid=\"NumericToRawBytes\"><a href=\"#sec-numerictorawbytes\">NumericToRawBytes</a></emu-xref>(<var>type</var>, <var>value</var>, <var>isLittleEndian</var>).</li><li>If <emu-xref aoid=\"IsSharedArrayBuffer\"><a href=\"#sec-issharedarraybuffer\">IsSharedArrayBuffer</a></emu-xref>(<var>arrayBuffer</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>execution</var> be the [[CandidateExecution]] field of the <emu-xref href=\"#surrounding-agent\"><a href=\"#surrounding-agent\">surrounding agent</a></emu-xref>'s <emu-xref href=\"#agent-record\"><a href=\"#agent-record\">Agent Record</a></emu-xref>.</li><li>Let <var>eventList</var> be the [[EventList]] field of the element in <var>execution</var>.[[EventsRecords]] whose [[AgentSignifier]] is <emu-xref aoid=\"AgentSignifier\"><a href=\"#sec-agentsignifier\">AgentSignifier</a></emu-xref>().</li><li>If <var>isTypedArray</var> is <emu-val>true</emu-val> and <emu-xref aoid=\"IsNoTearConfiguration\"><a href=\"#sec-isnotearconfiguration\">IsNoTearConfiguration</a></emu-xref>(<var>type</var>, <var>order</var>) is <emu-val>true</emu-val>, let <var>noTear</var> be <emu-val>true</emu-val>; otherwise let <var>noTear</var> be <emu-val>false</emu-val>.</li><li>Append <emu-xref href=\"#sec-memory-model-fundamentals\"><a href=\"#sec-memory-model-fundamentals\">WriteSharedMemory</a></emu-xref> { [[Order]]: <var>order</var>, [[NoTear]]: <var>noTear</var>, [[Block]]: <var>block</var>, [[ByteIndex]]: <var>byteIndex</var>, [[ElementSize]]: <var>elementSize</var>, [[Payload]]: <var>rawBytes</var> } to <var>eventList</var>.</li></ol></li><li>Else, store the individual bytes of <var>rawBytes</var> into <var>block</var>, in order, starting at <var>block</var>[<var>byteIndex</var>].</li><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-set.prototype.values": {"num": "23.2.3.10", "title": "#sec-set.prototype.values Set.prototype.values ( )", "html": "<emu-clause id=\"sec-set.prototype.values\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-set.prototype.values\">#sec-set.prototype.values</span> Set.prototype.values ( )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>S</var> be the <emu-val>this</emu-val> value.</li><li>Return ?&#160;<emu-xref aoid=\"CreateSetIterator\"><a href=\"#sec-createsetiterator\">CreateSetIterator</a></emu-xref>(<var>S</var>, <emu-const>value</emu-const>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-enumerableownpropertynames": {"num": "7.3.22", "title": "#sec-enumerableownpropertynames EnumerableOwnPropertyNames ( O, kind )", "html": "<emu-clause id=\"sec-enumerableownpropertynames\" aoid=\"EnumerableOwnPropertyNames\" oldids=\"sec-enumerableownproperties\">\n      <span id=\"sec-enumerableownproperties\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-enumerableownpropertynames\">#sec-enumerableownpropertynames</span> EnumerableOwnPropertyNames ( <var>O</var>, <var>kind</var> )</h1>\n      <p>When the abstract operation EnumerableOwnPropertyNames is called with an Object <var>O</var> and <var>kind</var> which is one of (<emu-const>key</emu-const>, <emu-const>value</emu-const>, <emu-const>key+value</emu-const>), the following steps are taken:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Let <var>ownKeys</var> be ? <var>O</var>.[[OwnPropertyKeys]]().</li><li>Let <var>properties</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>key</var> of <var>ownKeys</var> in <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> order, do<ol><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>key</var>) is String, then<ol><li>Let <var>desc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>key</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val> and <var>desc</var>.[[Enumerable]] is <emu-val>true</emu-val>, then<ol><li>If <var>kind</var> is <emu-const>key</emu-const>, append <var>key</var> to <var>properties</var>.</li><li>Else,<ol><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>key</var>).</li><li>If <var>kind</var> is <emu-const>value</emu-const>, append <var>value</var> to <var>properties</var>.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>kind</var> is <emu-const>key+value</emu-const>.</li><li>Let <var>entry</var> be !&#160;<emu-xref aoid=\"CreateArrayFromList\"><a href=\"#sec-createarrayfromlist\">CreateArrayFromList</a></emu-xref>(&#171; <var>key</var>, <var>value</var> &#187;).</li><li>Append <var>entry</var> to <var>properties</var>.</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>Order the elements of <var>properties</var> so they are in the same relative order as would be produced by the Iterator that would be returned if the <emu-xref aoid=\"EnumerateObjectProperties\"><a href=\"#sec-enumerate-object-properties\">EnumerateObjectProperties</a></emu-xref> internal method were invoked with <var>O</var>.</li><li>Return <var>properties</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {"figure-module-graph-simple": "Figure 2", "figure-module-graph-missing": "Figure 3", "figure-module-graph-cycle": "Figure 4", "table-1": "Table 1", "table-2": "Table 3", "table-3": "Table 4", "table-5": "Table 6", "table-15": "Table 16", "table-16": "Table 17", "table-17": "Table 18", "table-27": "Table 29", "table-36": "Table 39", "table-37": "Table 40", "table-cyclic-module-fields": "Table 41", "table-cyclic-module-methods": "Table 42", "table-dynamic-function-sourcetext-prefixes": "Table 49", "sec-todatestring-day-names": "Table 51", "sec-todatestring-month-names": "Table 52", "table-48": "Table 61", "table-49": "Table 62", "table-50": "Table 63", "table-51": "Table 64", "table-56": "Table 74", "table-internal-slots-of-asyncgenerator-instances": "Table 75", "table-58": "Table 78", "table-59": "Table 79", "table-readsharedmemory-fields": "Table 80", "table-writesharedmemory-fields": "Table 81", "table-rmwsharedmemory-fields": "Table 82"}}}