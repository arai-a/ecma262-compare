{"from": {"secList": ["sec-string.prototype.substr", "sec-get-%typedarray%-@@species", "sec-%typedarray%.prototype.tolocalestring", "sec-get-arraybuffer-@@species", "sec-get-regexp-@@species", "sec-%typedarray%.prototype.reduce", "sec-%typedarray%.prototype.sort", "sec-%typedarray%.prototype.findindex", "sec-%typedarray%.prototype.some", "sec-%typedarray%.prototype.reverse", "sec-string.prototype.concat", "sec-get-promise-@@species", "sec-%typedarray%.prototype.foreach", "sec-%typedarray%.prototype.lastindexof", "sec-get-array-@@species", "sec-%typedarray%.prototype.join", "sec-regexp.prototype.compile", "sec-%typedarray%.prototype.find", "sec-%typedarray%.prototype.reduceright", "sec-string.prototype.repeat", "sec-string.prototype.split", "sec-array.prototype.copywithin", "sec-%typedarray%.prototype.includes", "sec-%typedarray%.prototype.indexof", "sec-array.prototype.fill", "sec-%typedarray%.prototype.every"], "secData": {"sec-string.prototype.substr": {"num": "B.2.3.1", "title": "#sec-string.prototype.substr String.prototype.substr ( start, length )", "html": "<emu-annex id=\"sec-string.prototype.substr\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.substr\">#sec-string.prototype.substr</span> String.prototype.substr ( <var>start</var>, <var>length</var> )</h1>\n        <p>The <code>substr</code> method takes two arguments, <var>start</var> and <var>length</var>, and returns a substring of the result of converting the <emu-val>this</emu-val> object to a String, starting from index <var>start</var> and running for <var>length</var> code units (or through the end of the String if <var>length</var> is <emu-val>undefined</emu-val>). If <var>start</var> is negative, it is treated as <emu-eqn class=\"inline\"><var>sourceLength</var> + <var>start</var></emu-eqn> where <var>sourceLength</var> is the length of the String. The result is a String value, not a String object. The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>intStart</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>start</var>).</li><li>If <var>length</var> is <emu-val>undefined</emu-val>, let <var>end</var> be <emu-val>+&#8734;</emu-val>; otherwise let <var>end</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>length</var>).</li><li>Let <var>size</var> be the number of code units in <var>S</var>.</li><li>If <var>intStart</var> &lt; 0, set <var>intStart</var> to <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>size</var> + <var>intStart</var>, 0).</li><li>Let <var>resultLength</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>end</var>, 0), <var>size</var> - <var>intStart</var>).</li><li>If <var>resultLength</var> &#8804; 0, return the empty String.</li><li>Return the String value containing <var>resultLength</var> consecutive code units from <var>S</var> beginning with the code unit at index <var>intStart</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>substr</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-annex>\n\n      "}, "sec-get-%typedarray%-@@species": {"num": "22.2.2.4", "title": "#sec-get-%typedarray%-@@species get %TypedArray% [ @@species ]", "html": "<emu-clause id=\"sec-get-%typedarray%-@@species\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-%typedarray%-@@species\">#sec-get-%typedarray%-@@species</span> get %TypedArray% [ @@species ]</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>[@@species]</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Return the <emu-val>this</emu-val> value.</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"get [Symbol.species]\"</emu-val>.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><emu-xref href=\"#sec-properties-of-the-%typedarrayprototype%-object\"><a href=\"#sec-properties-of-the-%typedarrayprototype%-object\">%TypedArray.prototype%</a></emu-xref> methods normally use their <emu-val>this</emu-val> object's <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create a derived object. However, a subclass <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> may over-ride that default behaviour by redefining its @@species property.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-%typedarray%.prototype.tolocalestring": {"num": "22.2.3.28", "title": "#sec-%typedarray%.prototype.tolocalestring %TypedArray%.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.tolocalestring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.tolocalestring\">#sec-%typedarray%.prototype.tolocalestring</span> %TypedArray%.prototype.toLocaleString ( [ <var>reserved1</var> [ , <var>reserved2</var> ] ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.toLocaleString</code> is a distinct function that implements the same algorithm as <code>Array.prototype.toLocaleString</code> as defined in <emu-xref href=\"#sec-array.prototype.tolocalestring\"><a href=\"#sec-array.prototype.tolocalestring\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.tolocalestring\">#sec-array.prototype.tolocalestring</a></emu-xref> except that the <emu-val>this</emu-val> object's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>If the ECMAScript implementation includes the ECMA-402 Internationalization API this function is based upon the algorithm for <code>Array.prototype.toLocaleString</code> that is in the ECMA-402 specification.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-get-arraybuffer-@@species": {"num": "24.1.4.3", "title": "#sec-get-arraybuffer-@@species get ArrayBuffer [ @@species ]", "html": "<emu-clause id=\"sec-get-arraybuffer-@@species\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-arraybuffer-@@species\">#sec-get-arraybuffer-@@species</span> get ArrayBuffer [ @@species ]</h1>\n        <p><code>ArrayBuffer[@@species]</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Return the <emu-val>this</emu-val> value.</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"get [Symbol.species]\"</emu-val>.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>ArrayBuffer prototype methods normally use their <emu-val>this</emu-val> object's <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create a derived object. However, a subclass <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> may over-ride that default behaviour by redefining its @@species property.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-get-regexp-@@species": {"num": "21.2.4.2", "title": "#sec-get-regexp-@@species get RegExp [ @@species ]", "html": "<emu-clause id=\"sec-get-regexp-@@species\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-regexp-@@species\">#sec-get-regexp-@@species</span> get RegExp [ @@species ]</h1>\n        <p><code>RegExp[@@species]</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Return the <emu-val>this</emu-val> value.</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"get [Symbol.species]\"</emu-val>.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>RegExp prototype methods normally use their <emu-val>this</emu-val> object's <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create a derived object. However, a subclass <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> may over-ride that default behaviour by redefining its @@species property.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-%typedarray%.prototype.reduce": {"num": "22.2.3.20", "title": "#sec-%typedarray%.prototype.reduce %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.reduce\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.reduce\">#sec-%typedarray%.prototype.reduce</span> %TypedArray%.prototype.reduce ( <var>callbackfn</var> [ , <var>initialValue</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.reduce</code> is a distinct function that implements the same algorithm as <code>Array.prototype.reduce</code> as defined in <emu-xref href=\"#sec-array.prototype.reduce\"><a href=\"#sec-array.prototype.reduce\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.reduce\">#sec-array.prototype.reduce</a></emu-xref> except that the <emu-val>this</emu-val> object's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>callbackfn</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.sort": {"num": "22.2.3.26", "title": "#sec-%typedarray%.prototype.sort %TypedArray%.prototype.sort ( comparefn )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.sort\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.sort\">#sec-%typedarray%.prototype.sort</span> %TypedArray%.prototype.sort ( <var>comparefn</var> )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code> is a distinct function that, except as described below, implements the same requirements as those of <code>Array.prototype.sort</code> as defined in <emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>. The implementation of the <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code> specification may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. The only internal methods of the <emu-val>this</emu-val> object that the algorithm may call are [[Get]] and [[Set]].</p>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n        <p>Upon entry, the following steps are performed to initialize evaluation of the <code>sort</code> function. These steps are used instead of the entry steps in <emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>:</p>\n        <emu-alg><ol><li>If <var>comparefn</var> is not <emu-val>undefined</emu-val> and <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>comparefn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>obj</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>obj</var>).</li><li>Let <var>len</var> be <var>obj</var>.[[ArrayLength]].</li></ol></emu-alg>\n        <p>The implementation-defined sort order condition for exotic objects is not applied by <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code>.</p>\n        <p>The following version of <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> is used by <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code>. It performs a numeric comparison rather than the string comparison used in <emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>.</p>\n        <p>The abstract operation TypedArraySortCompare takes arguments <var>x</var> and <var>y</var>. It also has access to the <var>comparefn</var> and <var>buffer</var> values of the current invocation of the <code>sort</code> method. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: Both <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) are Number or both are BigInt.</li><li>If <var>comparefn</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>comparefn</var>, <emu-val>undefined</emu-val>, &#171; <var>x</var>, <var>y</var> &#187;)).</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>v</var> is <emu-val>NaN</emu-val>, return <emu-val>+0</emu-val>.</li><li>Return <var>v</var>.</li></ol></li><li>If <var>x</var> and <var>y</var> are both <emu-val>NaN</emu-val>, return <emu-val>+0</emu-val>.</li><li>If <var>x</var> is <emu-val>NaN</emu-val>, return 1.</li><li>If <var>y</var> is <emu-val>NaN</emu-val>, return -1.</li><li>If <var>x</var> &lt; <var>y</var>, return -1.</li><li>If <var>x</var> &gt; <var>y</var>, return 1.</li><li>If <var>x</var> is <emu-val>-0</emu-val> and <var>y</var> is <emu-val>+0</emu-val>, return -1.</li><li>If <var>x</var> is <emu-val>+0</emu-val> and <var>y</var> is <emu-val>-0</emu-val>, return 1.</li><li>Return <emu-val>+0</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Because <emu-val>NaN</emu-val> always compares greater than any other value, <emu-val>NaN</emu-val> property values always sort to the end of the result when <var>comparefn</var> is not provided.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.findindex": {"num": "22.2.3.11", "title": "#sec-%typedarray%.prototype.findindex %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.findindex\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.findindex\">#sec-%typedarray%.prototype.findindex</span> %TypedArray%.prototype.findIndex ( <var>predicate</var> [ , <var>thisArg</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.findIndex</code> is a distinct function that implements the same algorithm as <code>Array.prototype.findIndex</code> as defined in <emu-xref href=\"#sec-array.prototype.findindex\"><a href=\"#sec-array.prototype.findindex\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.findindex\">#sec-array.prototype.findindex</a></emu-xref> except that the <emu-val>this</emu-val> object's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>predicate</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.some": {"num": "22.2.3.25", "title": "#sec-%typedarray%.prototype.some %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.some\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.some\">#sec-%typedarray%.prototype.some</span> %TypedArray%.prototype.some ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.some</code> is a distinct function that implements the same algorithm as <code>Array.prototype.some</code> as defined in <emu-xref href=\"#sec-array.prototype.some\"><a href=\"#sec-array.prototype.some\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.some\">#sec-array.prototype.some</a></emu-xref> except that the <emu-val>this</emu-val> object's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>callbackfn</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.reverse": {"num": "22.2.3.22", "title": "#sec-%typedarray%.prototype.reverse %TypedArray%.prototype.reverse ( )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.reverse\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.reverse\">#sec-%typedarray%.prototype.reverse</span> %TypedArray%.prototype.reverse ( )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.reverse</code> is a distinct function that implements the same algorithm as <code>Array.prototype.reverse</code> as defined in <emu-xref href=\"#sec-array.prototype.reverse\"><a href=\"#sec-array.prototype.reverse\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.reverse\">#sec-array.prototype.reverse</a></emu-xref> except that the <emu-val>this</emu-val> object's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-string.prototype.concat": {"num": "21.1.3.4", "title": "#sec-string.prototype.concat String.prototype.concat ( ...args )", "html": "<emu-clause id=\"sec-string.prototype.concat\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.concat\">#sec-string.prototype.concat</span> String.prototype.concat ( ...<var>args</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>When the <code>concat</code> method is called it returns the String value consisting of the code units of the <emu-val>this</emu-val> object (converted to a String) followed by the code units of each of the arguments converted to a String. The result is a String value, not a String object.</p>\n        </div></emu-note>\n        <p>When the <code>concat</code> method is called with zero or more arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>args</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the arguments passed to this function.</li><li>Let <var>R</var> be <var>S</var>.</li><li>Repeat, while <var>args</var> is not empty,<ol><li>Remove the first element from <var>args</var> and let <var>next</var> be the value of that element.</li><li>Let <var>nextString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>next</var>).</li><li>Set <var>R</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the previous value of <var>R</var> and <var>nextString</var>.</li></ol></li><li>Return <var>R</var>.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>concat</code> method is 1.</p>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>concat</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-get-promise-@@species": {"num": "25.6.4.7", "title": "#sec-get-promise-@@species get Promise [ @@species ]", "html": "<emu-clause id=\"sec-get-promise-@@species\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-promise-@@species\">#sec-get-promise-@@species</span> get Promise [ @@species ]</h1>\n        <p><code>Promise[@@species]</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Return the <emu-val>this</emu-val> value.</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"get [Symbol.species]\"</emu-val>.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Promise prototype methods normally use their <emu-val>this</emu-val> object's <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create a derived object. However, a subclass <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> may over-ride that default behaviour by redefining its @@species property.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-%typedarray%.prototype.foreach": {"num": "22.2.3.12", "title": "#sec-%typedarray%.prototype.foreach %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.foreach\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.foreach\">#sec-%typedarray%.prototype.foreach</span> %TypedArray%.prototype.forEach ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.forEach</code> is a distinct function that implements the same algorithm as <code>Array.prototype.forEach</code> as defined in <emu-xref href=\"#sec-array.prototype.foreach\"><a href=\"#sec-array.prototype.foreach\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.foreach\">#sec-array.prototype.foreach</a></emu-xref> except that the <emu-val>this</emu-val> object's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>callbackfn</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.lastindexof": {"num": "22.2.3.17", "title": "#sec-%typedarray%.prototype.lastindexof %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.lastindexof\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.lastindexof\">#sec-%typedarray%.prototype.lastindexof</span> %TypedArray%.prototype.lastIndexOf ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.lastIndexOf</code> is a distinct function that implements the same algorithm as <code>Array.prototype.lastIndexOf</code> as defined in <emu-xref href=\"#sec-array.prototype.lastindexof\"><a href=\"#sec-array.prototype.lastindexof\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.lastindexof\">#sec-array.prototype.lastindexof</a></emu-xref> except that the <emu-val>this</emu-val> object's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-get-array-@@species": {"num": "22.1.2.5", "title": "#sec-get-array-@@species get Array [ @@species ]", "html": "<emu-clause id=\"sec-get-array-@@species\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-array-@@species\">#sec-get-array-@@species</span> get Array [ @@species ]</h1>\n        <p><code>Array[@@species]</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Return the <emu-val>this</emu-val> value.</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"get [Symbol.species]\"</emu-val>.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Array prototype methods normally use their <emu-val>this</emu-val> object's <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create a derived object. However, a subclass <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> may over-ride that default behaviour by redefining its @@species property.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-%typedarray%.prototype.join": {"num": "22.2.3.15", "title": "#sec-%typedarray%.prototype.join %TypedArray%.prototype.join ( separator )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.join\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.join\">#sec-%typedarray%.prototype.join</span> %TypedArray%.prototype.join ( <var>separator</var> )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.join</code> is a distinct function that implements the same algorithm as <code>Array.prototype.join</code> as defined in <emu-xref href=\"#sec-array.prototype.join\"><a href=\"#sec-array.prototype.join\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.join\">#sec-array.prototype.join</a></emu-xref> except that the <emu-val>this</emu-val> object's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-regexp.prototype.compile": {"num": "B.2.5.1", "title": "#sec-regexp.prototype.compile RegExp.prototype.compile ( pattern, flags )", "html": "<emu-annex id=\"sec-regexp.prototype.compile\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp.prototype.compile\">#sec-regexp.prototype.compile</span> RegExp.prototype.compile ( <var>pattern</var>, <var>flags</var> )</h1>\n        <p>When the <code>compile</code> method is called with arguments <var>pattern</var> and <var>flags</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object or <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object and <var>O</var> does not have a [[RegExpMatcher]] internal slot, then<ol><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>pattern</var>) is Object and <var>pattern</var> has a [[RegExpMatcher]] internal slot, then<ol><li>If <var>flags</var> is not <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>P</var> be <var>pattern</var>.[[OriginalSource]].</li><li>Let <var>F</var> be <var>pattern</var>.[[OriginalFlags]].</li></ol></li><li>Else,<ol><li>Let <var>P</var> be <var>pattern</var>.</li><li>Let <var>F</var> be <var>flags</var>.</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"RegExpInitialize\"><a href=\"#sec-regexpinitialize\">RegExpInitialize</a></emu-xref>(<var>O</var>, <var>P</var>, <var>F</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>compile</code> method completely reinitializes the <emu-val>this</emu-val> object RegExp with a new pattern and flags. An implementation may interpret use of this method as an assertion that the resulting RegExp object will be used multiple times and hence is a candidate for extra optimization.</p>\n        </div></emu-note>\n      </emu-annex>\n    "}, "sec-%typedarray%.prototype.find": {"num": "22.2.3.10", "title": "#sec-%typedarray%.prototype.find %TypedArray%.prototype.find ( predicate [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.find\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.find\">#sec-%typedarray%.prototype.find</span> %TypedArray%.prototype.find ( <var>predicate</var> [ , <var>thisArg</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.find</code> is a distinct function that implements the same algorithm as <code>Array.prototype.find</code> as defined in <emu-xref href=\"#sec-array.prototype.find\"><a href=\"#sec-array.prototype.find\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.find\">#sec-array.prototype.find</a></emu-xref> except that the <emu-val>this</emu-val> object's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>predicate</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.reduceright": {"num": "22.2.3.21", "title": "#sec-%typedarray%.prototype.reduceright %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.reduceright\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.reduceright\">#sec-%typedarray%.prototype.reduceright</span> %TypedArray%.prototype.reduceRight ( <var>callbackfn</var> [ , <var>initialValue</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.reduceRight</code> is a distinct function that implements the same algorithm as <code>Array.prototype.reduceRight</code> as defined in <emu-xref href=\"#sec-array.prototype.reduceright\"><a href=\"#sec-array.prototype.reduceright\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.reduceright\">#sec-array.prototype.reduceright</a></emu-xref> except that the <emu-val>this</emu-val> object's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>callbackfn</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-string.prototype.repeat": {"num": "21.1.3.16", "title": "#sec-string.prototype.repeat String.prototype.repeat ( count )", "html": "<emu-clause id=\"sec-string.prototype.repeat\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.repeat\">#sec-string.prototype.repeat</span> String.prototype.repeat ( <var>count</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>n</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>count</var>).</li><li>If <var>n</var> &lt; 0, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>n</var> is <emu-val>+&#8734;</emu-val>, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>n</var> is 0, return the empty String.</li><li>Return the String value that is made from <var>n</var> copies of <var>S</var> appended together.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>This method creates the String value consisting of the code units of the <emu-val>this</emu-val> object (converted to String) repeated <var>count</var> times.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>repeat</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-string.prototype.split": {"num": "21.1.3.20", "title": "#sec-string.prototype.split String.prototype.split ( separator, limit )", "html": "<emu-clause id=\"sec-string.prototype.split\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.split\">#sec-string.prototype.split</span> String.prototype.split ( <var>separator</var>, <var>limit</var> )</h1>\n        <p>Returns an Array object into which substrings of the result of converting this object to a String have been stored. The substrings are determined by searching from left to right for occurrences of <var>separator</var>; these occurrences are not part of any substring in the returned array, but serve to divide up the String value. The value of <var>separator</var> may be a String of any length or it may be an object, such as a RegExp, that has a @@split method.</p>\n        <p>When the <code>split</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>separator</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, then<ol><li>Let <var>splitter</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>separator</var>, @@split).</li><li>If <var>splitter</var> is not <emu-val>undefined</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>splitter</var>, <var>separator</var>, &#171; <var>O</var>, <var>limit</var> &#187;).</li></ol></li></ol></li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>lengthA</var> be 0.</li><li>If <var>limit</var> is <emu-val>undefined</emu-val>, let <var>lim</var> be 2<sup>32</sup> - 1; else let <var>lim</var> be ?&#160;<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>limit</var>).</li><li>Let <var>R</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>separator</var>).</li><li>If <var>lim</var> = 0, return <var>A</var>.</li><li>If <var>separator</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"0\"</emu-val>, <var>S</var>).</li><li>Return <var>A</var>.</li></ol></li><li>Let <var>s</var> be the length of <var>S</var>.</li><li>If <var>s</var> = 0, then<ol><li>Let <var>z</var> be <emu-xref aoid=\"SplitMatch\"><a href=\"#sec-splitmatch\">SplitMatch</a></emu-xref>(<var>S</var>, 0, <var>R</var>).</li><li>If <var>z</var> is not <emu-val>false</emu-val>, return <var>A</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"0\"</emu-val>, <var>S</var>).</li><li>Return <var>A</var>.</li></ol></li><li>Let <var>p</var> be 0.</li><li>Let <var>q</var> be <var>p</var>.</li><li>Repeat, while <var>q</var> &#8800; <var>s</var>,<ol><li>Let <var>e</var> be <emu-xref aoid=\"SplitMatch\"><a href=\"#sec-splitmatch\">SplitMatch</a></emu-xref>(<var>S</var>, <var>q</var>, <var>R</var>).</li><li>If <var>e</var> is <emu-val>false</emu-val>, set <var>q</var> to <var>q</var> + 1.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>e</var> is an <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> &#8804; <var>s</var>.</li><li>If <var>e</var> = <var>p</var>, set <var>q</var> to <var>q</var> + 1.</li><li>Else,<ol><li>Let <var>T</var> be the String value equal to the substring of <var>S</var> consisting of the code units at indices <var>p</var> (inclusive) through <var>q</var> (exclusive).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>lengthA</var>), <var>T</var>).</li><li>Set <var>lengthA</var> to <var>lengthA</var> + 1.</li><li>If <var>lengthA</var> = <var>lim</var>, return <var>A</var>.</li><li>Set <var>p</var> to <var>e</var>.</li><li>Set <var>q</var> to <var>p</var>.</li></ol></li></ol></li></ol></li><li>Let <var>T</var> be the String value equal to the substring of <var>S</var> consisting of the code units at indices <var>p</var> (inclusive) through <var>s</var> (exclusive).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>lengthA</var>), <var>T</var>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The value of <var>separator</var> may be an empty String. In this case, <var>separator</var> does not match the empty substring at the beginning or end of the input String, nor does it match the empty substring at the end of the previous separator match. If <var>separator</var> is the empty String, the String is split up into individual code unit elements; the length of the result array equals the length of the String, and each substring contains one code unit.</p>\n          <p>If the <emu-val>this</emu-val> object is (or converts to) the empty String, the result depends on whether <var>separator</var> can match the empty String. If it can, the result array contains no elements. Otherwise, the result array contains one element, which is the empty String.</p>\n          <p>If <var>separator</var> is <emu-val>undefined</emu-val>, then the result array contains just one String, which is the <emu-val>this</emu-val> value (converted to a String). If <var>limit</var> is not <emu-val>undefined</emu-val>, then the output array is truncated so that it contains no more than <var>limit</var> elements.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>split</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-splitmatch\"><h1><span class=\"secnum\">21.1.3.20.1</span>#sec-splitmatch Runtime Semantics: SplitMatch ( S, q, R )</h1>...</div></emu-clause>\n\n      "}, "sec-array.prototype.copywithin": {"num": "22.1.3.3", "title": "#sec-array.prototype.copywithin Array.prototype.copyWithin ( target, start [ , end ] )", "html": "<emu-clause id=\"sec-array.prototype.copywithin\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.copywithin\">#sec-array.prototype.copywithin</span> Array.prototype.copyWithin ( <var>target</var>, <var>start</var> [ , <var>end</var> ] )</h1>\n        <p>The <code>copyWithin</code> method takes up to three arguments <var>target</var>, <var>start</var> and <var>end</var>.</p>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The <var>end</var> argument is optional with the length of the <emu-val>this</emu-val> object as its default value. If <var>target</var> is negative, it is treated as <emu-eqn class=\"inline\"><var>length</var> + <var>target</var></emu-eqn> where <var>length</var> is the length of the array. If <var>start</var> is negative, it is treated as <emu-eqn class=\"inline\"><var>length</var> + <var>start</var></emu-eqn>. If <var>end</var> is negative, it is treated as <emu-eqn class=\"inline\"><var>length</var> + <var>end</var></emu-eqn>.</p>\n        </div></emu-note>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>Let <var>relativeTarget</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>target</var>).</li><li>If <var>relativeTarget</var> &lt; 0, let <var>to</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeTarget</var>), 0); else let <var>to</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeTarget</var>, <var>len</var>).</li><li>Let <var>relativeStart</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>start</var>).</li><li>If <var>relativeStart</var> &lt; 0, let <var>from</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeStart</var>), 0); else let <var>from</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeStart</var>, <var>len</var>).</li><li>If <var>end</var> is <emu-val>undefined</emu-val>, let <var>relativeEnd</var> be <var>len</var>; else let <var>relativeEnd</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>end</var>).</li><li>If <var>relativeEnd</var> &lt; 0, let <var>final</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeEnd</var>), 0); else let <var>final</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeEnd</var>, <var>len</var>).</li><li>Let <var>count</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>final</var> - <var>from</var>, <var>len</var> - <var>to</var>).</li><li>If <var>from</var> &lt; <var>to</var> and <var>to</var> &lt; <var>from</var> + <var>count</var>, then<ol><li>Let <var>direction</var> be -1.</li><li>Set <var>from</var> to <var>from</var> + <var>count</var> - 1.</li><li>Set <var>to</var> to <var>to</var> + <var>count</var> - 1.</li></ol></li><li>Else,<ol><li>Let <var>direction</var> be 1.</li></ol></li><li>Repeat, while <var>count</var> &gt; 0,<ol><li>Let <var>fromKey</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>from</var>).</li><li>Let <var>toKey</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>to</var>).</li><li>Let <var>fromPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>fromKey</var>).</li><li>If <var>fromPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fromVal</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>fromKey</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>toKey</var>, <var>fromVal</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fromPresent</var> is <emu-val>false</emu-val>.</li><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>toKey</var>).</li></ol></li><li>Set <var>from</var> to <var>from</var> + <var>direction</var>.</li><li>Set <var>to</var> to <var>to</var> + <var>direction</var>.</li><li>Set <var>count</var> to <var>count</var> - 1.</li></ol></li><li>Return <var>O</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>copyWithin</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.includes": {"num": "22.2.3.13", "title": "#sec-%typedarray%.prototype.includes %TypedArray%.prototype.includes ( searchElement [ , fromIndex ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.includes\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.includes\">#sec-%typedarray%.prototype.includes</span> %TypedArray%.prototype.includes ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.includes</code> is a distinct function that implements the same algorithm as <code>Array.prototype.includes</code> as defined in <emu-xref href=\"#sec-array.prototype.includes\"><a href=\"#sec-array.prototype.includes\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.includes\">#sec-array.prototype.includes</a></emu-xref> except that the <emu-val>this</emu-val> object's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.indexof": {"num": "22.2.3.14", "title": "#sec-%typedarray%.prototype.indexof %TypedArray%.prototype.indexOf ( searchElement [ , fromIndex ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.indexof\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.indexof\">#sec-%typedarray%.prototype.indexof</span> %TypedArray%.prototype.indexOf ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.indexOf</code> is a distinct function that implements the same algorithm as <code>Array.prototype.indexOf</code> as defined in <emu-xref href=\"#sec-array.prototype.indexof\"><a href=\"#sec-array.prototype.indexof\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.indexof\">#sec-array.prototype.indexof</a></emu-xref> except that the <emu-val>this</emu-val> object's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-array.prototype.fill": {"num": "22.1.3.6", "title": "#sec-array.prototype.fill Array.prototype.fill ( value [ , start [ , end ] ] )", "html": "<emu-clause id=\"sec-array.prototype.fill\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.fill\">#sec-array.prototype.fill</span> Array.prototype.fill ( <var>value</var> [ , <var>start</var> [ , <var>end</var> ] ] )</h1>\n        <p>The <code>fill</code> method takes up to three arguments <var>value</var>, <var>start</var> and <var>end</var>.</p>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The <var>start</var> and <var>end</var> arguments are optional with default values of 0 and the length of the <emu-val>this</emu-val> object. If <var>start</var> is negative, it is treated as <emu-eqn class=\"inline\"><var>length</var> + <var>start</var></emu-eqn> where <var>length</var> is the length of the array. If <var>end</var> is negative, it is treated as <emu-eqn class=\"inline\"><var>length</var> + <var>end</var></emu-eqn>.</p>\n        </div></emu-note>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>Let <var>relativeStart</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>start</var>).</li><li>If <var>relativeStart</var> &lt; 0, let <var>k</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeStart</var>), 0); else let <var>k</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeStart</var>, <var>len</var>).</li><li>If <var>end</var> is <emu-val>undefined</emu-val>, let <var>relativeEnd</var> be <var>len</var>; else let <var>relativeEnd</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>end</var>).</li><li>If <var>relativeEnd</var> &lt; 0, let <var>final</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeEnd</var>), 0); else let <var>final</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeEnd</var>, <var>len</var>).</li><li>Repeat, while <var>k</var> &lt; <var>final</var>,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>Pk</var>, <var>value</var>, <emu-val>true</emu-val>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <var>O</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>fill</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.every": {"num": "22.2.3.7", "title": "#sec-%typedarray%.prototype.every %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.every\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.every\">#sec-%typedarray%.prototype.every</span> %TypedArray%.prototype.every ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.every</code> is a distinct function that implements the same algorithm as <code>Array.prototype.every</code> as defined in <emu-xref href=\"#sec-array.prototype.every\"><a href=\"#sec-array.prototype.every\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.every\">#sec-array.prototype.every</a></emu-xref> except that the <emu-val>this</emu-val> object's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>-indexed properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>callbackfn</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-string.prototype.substr", "sec-get-%typedarray%-@@species", "sec-%typedarray%.prototype.tolocalestring", "sec-get-arraybuffer-@@species", "sec-get-regexp-@@species", "sec-%typedarray%.prototype.reduce", "sec-%typedarray%.prototype.sort", "sec-%typedarray%.prototype.findindex", "sec-%typedarray%.prototype.some", "sec-%typedarray%.prototype.reverse", "sec-string.prototype.concat", "sec-get-promise-@@species", "sec-%typedarray%.prototype.foreach", "sec-%typedarray%.prototype.lastindexof", "sec-get-array-@@species", "sec-%typedarray%.prototype.join", "sec-regexp.prototype.compile", "sec-%typedarray%.prototype.find", "sec-%typedarray%.prototype.reduceright", "sec-string.prototype.repeat", "sec-string.prototype.split", "sec-array.prototype.copywithin", "sec-%typedarray%.prototype.includes", "sec-%typedarray%.prototype.indexof", "sec-array.prototype.fill", "sec-%typedarray%.prototype.every"], "secData": {"sec-string.prototype.substr": {"num": "B.2.3.1", "title": "#sec-string.prototype.substr String.prototype.substr ( start, length )", "html": "<emu-annex id=\"sec-string.prototype.substr\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.substr\">#sec-string.prototype.substr</span> String.prototype.substr ( <var>start</var>, <var>length</var> )</h1>\n        <p>The <code>substr</code> method takes two arguments, <var>start</var> and <var>length</var>, and returns a substring of the result of converting the <emu-val>this</emu-val> value to a String, starting from index <var>start</var> and running for <var>length</var> code units (or through the end of the String if <var>length</var> is <emu-val>undefined</emu-val>). If <var>start</var> is negative, it is treated as <emu-eqn class=\"inline\"><var>sourceLength</var> + <var>start</var></emu-eqn> where <var>sourceLength</var> is the length of the String. The result is a String value, not a String object. The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>intStart</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>start</var>).</li><li>If <var>length</var> is <emu-val>undefined</emu-val>, let <var>end</var> be <emu-val>+&#8734;</emu-val>; otherwise let <var>end</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>length</var>).</li><li>Let <var>size</var> be the number of code units in <var>S</var>.</li><li>If <var>intStart</var> &lt; 0, set <var>intStart</var> to <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>size</var> + <var>intStart</var>, 0).</li><li>Let <var>resultLength</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>end</var>, 0), <var>size</var> - <var>intStart</var>).</li><li>If <var>resultLength</var> &#8804; 0, return the empty String.</li><li>Return the String value containing <var>resultLength</var> consecutive code units from <var>S</var> beginning with the code unit at index <var>intStart</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>substr</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-annex>\n\n      "}, "sec-get-%typedarray%-@@species": {"num": "22.2.2.4", "title": "#sec-get-%typedarray%-@@species get %TypedArray% [ @@species ]", "html": "<emu-clause id=\"sec-get-%typedarray%-@@species\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-%typedarray%-@@species\">#sec-get-%typedarray%-@@species</span> get %TypedArray% [ @@species ]</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>[@@species]</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Return the <emu-val>this</emu-val> value.</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"get [Symbol.species]\"</emu-val>.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p><emu-xref href=\"#sec-properties-of-the-%typedarrayprototype%-object\"><a href=\"#sec-properties-of-the-%typedarrayprototype%-object\">%TypedArray.prototype%</a></emu-xref> methods normally use their <emu-val>this</emu-val> value's <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create a derived object. However, a subclass <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> may over-ride that default behaviour by redefining its @@species property.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-%typedarray%.prototype.tolocalestring": {"num": "22.2.3.28", "title": "#sec-%typedarray%.prototype.tolocalestring %TypedArray%.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.tolocalestring\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.tolocalestring\">#sec-%typedarray%.prototype.tolocalestring</span> %TypedArray%.prototype.toLocaleString ( [ <var>reserved1</var> [ , <var>reserved2</var> ] ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.toLocaleString</code> is a distinct function that implements the same algorithm as <code>Array.prototype.toLocaleString</code> as defined in <emu-xref href=\"#sec-array.prototype.tolocalestring\"><a href=\"#sec-array.prototype.tolocalestring\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.tolocalestring\">#sec-array.prototype.tolocalestring</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>If the ECMAScript implementation includes the ECMA-402 Internationalization API this function is based upon the algorithm for <code>Array.prototype.toLocaleString</code> that is in the ECMA-402 specification.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-get-arraybuffer-@@species": {"num": "24.1.4.3", "title": "#sec-get-arraybuffer-@@species get ArrayBuffer [ @@species ]", "html": "<emu-clause id=\"sec-get-arraybuffer-@@species\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-arraybuffer-@@species\">#sec-get-arraybuffer-@@species</span> get ArrayBuffer [ @@species ]</h1>\n        <p><code>ArrayBuffer[@@species]</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Return the <emu-val>this</emu-val> value.</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"get [Symbol.species]\"</emu-val>.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>ArrayBuffer prototype methods normally use their <emu-val>this</emu-val> value's <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create a derived object. However, a subclass <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> may over-ride that default behaviour by redefining its @@species property.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-get-regexp-@@species": {"num": "21.2.4.2", "title": "#sec-get-regexp-@@species get RegExp [ @@species ]", "html": "<emu-clause id=\"sec-get-regexp-@@species\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-regexp-@@species\">#sec-get-regexp-@@species</span> get RegExp [ @@species ]</h1>\n        <p><code>RegExp[@@species]</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Return the <emu-val>this</emu-val> value.</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"get [Symbol.species]\"</emu-val>.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>RegExp prototype methods normally use their <emu-val>this</emu-val> value's <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create a derived object. However, a subclass <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> may over-ride that default behaviour by redefining its @@species property.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-%typedarray%.prototype.reduce": {"num": "22.2.3.20", "title": "#sec-%typedarray%.prototype.reduce %TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.reduce\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.reduce\">#sec-%typedarray%.prototype.reduce</span> %TypedArray%.prototype.reduce ( <var>callbackfn</var> [ , <var>initialValue</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.reduce</code> is a distinct function that implements the same algorithm as <code>Array.prototype.reduce</code> as defined in <emu-xref href=\"#sec-array.prototype.reduce\"><a href=\"#sec-array.prototype.reduce\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.reduce\">#sec-array.prototype.reduce</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>callbackfn</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.sort": {"num": "22.2.3.26", "title": "#sec-%typedarray%.prototype.sort %TypedArray%.prototype.sort ( comparefn )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.sort\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.sort\">#sec-%typedarray%.prototype.sort</span> %TypedArray%.prototype.sort ( <var>comparefn</var> )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code> is a distinct function that, except as described below, implements the same requirements as those of <code>Array.prototype.sort</code> as defined in <emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>. The implementation of the <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code> specification may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. The only internal methods of the <emu-val>this</emu-val> value that the algorithm may call are [[Get]] and [[Set]].</p>\n        <p>This function is not generic. The <emu-val>this</emu-val> value must be an object with a [[TypedArrayName]] internal slot.</p>\n        <p>Upon entry, the following steps are performed to initialize evaluation of the <code>sort</code> function. These steps are used instead of the entry steps in <emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>:</p>\n        <emu-alg><ol><li>If <var>comparefn</var> is not <emu-val>undefined</emu-val> and <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>comparefn</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>obj</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>obj</var>).</li><li>Let <var>len</var> be <var>obj</var>.[[ArrayLength]].</li></ol></emu-alg>\n        <p>The implementation-defined sort order condition for exotic objects is not applied by <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code>.</p>\n        <p>The following version of <emu-xref aoid=\"SortCompare\"><a href=\"#sec-sortcompare\">SortCompare</a></emu-xref> is used by <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.sort</code>. It performs a numeric comparison rather than the string comparison used in <emu-xref href=\"#sec-array.prototype.sort\"><a href=\"#sec-array.prototype.sort\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.sort\">#sec-array.prototype.sort</a></emu-xref>.</p>\n        <p>The abstract operation TypedArraySortCompare takes arguments <var>x</var> and <var>y</var>. It also has access to the <var>comparefn</var> and <var>buffer</var> values of the current invocation of the <code>sort</code> method. It performs the following steps when called:</p>\n        <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: Both <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>x</var>) and <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>y</var>) are Number or both are BigInt.</li><li>If <var>comparefn</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>v</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(? <emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>comparefn</var>, <emu-val>undefined</emu-val>, &#171; <var>x</var>, <var>y</var> &#187;)).</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>v</var> is <emu-val>NaN</emu-val>, return <emu-val>+0</emu-val>.</li><li>Return <var>v</var>.</li></ol></li><li>If <var>x</var> and <var>y</var> are both <emu-val>NaN</emu-val>, return <emu-val>+0</emu-val>.</li><li>If <var>x</var> is <emu-val>NaN</emu-val>, return 1.</li><li>If <var>y</var> is <emu-val>NaN</emu-val>, return -1.</li><li>If <var>x</var> &lt; <var>y</var>, return -1.</li><li>If <var>x</var> &gt; <var>y</var>, return 1.</li><li>If <var>x</var> is <emu-val>-0</emu-val> and <var>y</var> is <emu-val>+0</emu-val>, return -1.</li><li>If <var>x</var> is <emu-val>+0</emu-val> and <var>y</var> is <emu-val>-0</emu-val>, return 1.</li><li>Return <emu-val>+0</emu-val>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Because <emu-val>NaN</emu-val> always compares greater than any other value, <emu-val>NaN</emu-val> property values always sort to the end of the result when <var>comparefn</var> is not provided.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.findindex": {"num": "22.2.3.11", "title": "#sec-%typedarray%.prototype.findindex %TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.findindex\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.findindex\">#sec-%typedarray%.prototype.findindex</span> %TypedArray%.prototype.findIndex ( <var>predicate</var> [ , <var>thisArg</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.findIndex</code> is a distinct function that implements the same algorithm as <code>Array.prototype.findIndex</code> as defined in <emu-xref href=\"#sec-array.prototype.findindex\"><a href=\"#sec-array.prototype.findindex\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.findindex\">#sec-array.prototype.findindex</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>predicate</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.some": {"num": "22.2.3.25", "title": "#sec-%typedarray%.prototype.some %TypedArray%.prototype.some ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.some\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.some\">#sec-%typedarray%.prototype.some</span> %TypedArray%.prototype.some ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.some</code> is a distinct function that implements the same algorithm as <code>Array.prototype.some</code> as defined in <emu-xref href=\"#sec-array.prototype.some\"><a href=\"#sec-array.prototype.some\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.some\">#sec-array.prototype.some</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>callbackfn</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.reverse": {"num": "22.2.3.22", "title": "#sec-%typedarray%.prototype.reverse %TypedArray%.prototype.reverse ( )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.reverse\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.reverse\">#sec-%typedarray%.prototype.reverse</span> %TypedArray%.prototype.reverse ( )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.reverse</code> is a distinct function that implements the same algorithm as <code>Array.prototype.reverse</code> as defined in <emu-xref href=\"#sec-array.prototype.reverse\"><a href=\"#sec-array.prototype.reverse\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.reverse\">#sec-array.prototype.reverse</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-string.prototype.concat": {"num": "21.1.3.4", "title": "#sec-string.prototype.concat String.prototype.concat ( ...args )", "html": "<emu-clause id=\"sec-string.prototype.concat\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.concat\">#sec-string.prototype.concat</span> String.prototype.concat ( ...<var>args</var> )</h1>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>When the <code>concat</code> method is called it returns the String value consisting of the code units of the <emu-val>this</emu-val> value (converted to a String) followed by the code units of each of the arguments converted to a String. The result is a String value, not a String object.</p>\n        </div></emu-note>\n        <p>When the <code>concat</code> method is called with zero or more arguments, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>args</var> be a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> whose elements are the arguments passed to this function.</li><li>Let <var>R</var> be <var>S</var>.</li><li>Repeat, while <var>args</var> is not empty,<ol><li>Remove the first element from <var>args</var> and let <var>next</var> be the value of that element.</li><li>Let <var>nextString</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>next</var>).</li><li>Set <var>R</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the previous value of <var>R</var> and <var>nextString</var>.</li></ol></li><li>Return <var>R</var>.</li></ol></emu-alg>\n        <p>The <emu-val>\"length\"</emu-val> property of the <code>concat</code> method is 1.</p>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>concat</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-get-promise-@@species": {"num": "25.6.4.7", "title": "#sec-get-promise-@@species get Promise [ @@species ]", "html": "<emu-clause id=\"sec-get-promise-@@species\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-promise-@@species\">#sec-get-promise-@@species</span> get Promise [ @@species ]</h1>\n        <p><code>Promise[@@species]</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Return the <emu-val>this</emu-val> value.</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"get [Symbol.species]\"</emu-val>.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Promise prototype methods normally use their <emu-val>this</emu-val> value's <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create a derived object. However, a subclass <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> may over-ride that default behaviour by redefining its @@species property.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-%typedarray%.prototype.foreach": {"num": "22.2.3.12", "title": "#sec-%typedarray%.prototype.foreach %TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.foreach\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.foreach\">#sec-%typedarray%.prototype.foreach</span> %TypedArray%.prototype.forEach ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.forEach</code> is a distinct function that implements the same algorithm as <code>Array.prototype.forEach</code> as defined in <emu-xref href=\"#sec-array.prototype.foreach\"><a href=\"#sec-array.prototype.foreach\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.foreach\">#sec-array.prototype.foreach</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>callbackfn</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.lastindexof": {"num": "22.2.3.17", "title": "#sec-%typedarray%.prototype.lastindexof %TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.lastindexof\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.lastindexof\">#sec-%typedarray%.prototype.lastindexof</span> %TypedArray%.prototype.lastIndexOf ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.lastIndexOf</code> is a distinct function that implements the same algorithm as <code>Array.prototype.lastIndexOf</code> as defined in <emu-xref href=\"#sec-array.prototype.lastindexof\"><a href=\"#sec-array.prototype.lastindexof\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.lastindexof\">#sec-array.prototype.lastindexof</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-get-array-@@species": {"num": "22.1.2.5", "title": "#sec-get-array-@@species get Array [ @@species ]", "html": "<emu-clause id=\"sec-get-array-@@species\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-get-array-@@species\">#sec-get-array-@@species</span> get Array [ @@species ]</h1>\n        <p><code>Array[@@species]</code> is an <emu-xref href=\"#sec-object-type\"><a href=\"#sec-object-type\">accessor property</a></emu-xref> whose set accessor function is <emu-val>undefined</emu-val>. Its get accessor function performs the following steps:</p>\n        <emu-alg><ol><li>Return the <emu-val>this</emu-val> value.</li></ol></emu-alg>\n        <p>The value of the <emu-val>\"name\"</emu-val> property of this function is <emu-val>\"get [Symbol.species]\"</emu-val>.</p>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>Array prototype methods normally use their <emu-val>this</emu-val> value's <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> to create a derived object. However, a subclass <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> may over-ride that default behaviour by redefining its @@species property.</p>\n        </div></emu-note>\n      </emu-clause>\n    "}, "sec-%typedarray%.prototype.join": {"num": "22.2.3.15", "title": "#sec-%typedarray%.prototype.join %TypedArray%.prototype.join ( separator )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.join\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.join\">#sec-%typedarray%.prototype.join</span> %TypedArray%.prototype.join ( <var>separator</var> )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.join</code> is a distinct function that implements the same algorithm as <code>Array.prototype.join</code> as defined in <emu-xref href=\"#sec-array.prototype.join\"><a href=\"#sec-array.prototype.join\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.join\">#sec-array.prototype.join</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-regexp.prototype.compile": {"num": "B.2.5.1", "title": "#sec-regexp.prototype.compile RegExp.prototype.compile ( pattern, flags )", "html": "<emu-annex id=\"sec-regexp.prototype.compile\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-regexp.prototype.compile\">#sec-regexp.prototype.compile</span> RegExp.prototype.compile ( <var>pattern</var>, <var>flags</var> )</h1>\n        <p>When the <code>compile</code> method is called with arguments <var>pattern</var> and <var>flags</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is not Object or <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object and <var>O</var> does not have a [[RegExpMatcher]] internal slot, then<ol><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>pattern</var>) is Object and <var>pattern</var> has a [[RegExpMatcher]] internal slot, then<ol><li>If <var>flags</var> is not <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>P</var> be <var>pattern</var>.[[OriginalSource]].</li><li>Let <var>F</var> be <var>pattern</var>.[[OriginalFlags]].</li></ol></li><li>Else,<ol><li>Let <var>P</var> be <var>pattern</var>.</li><li>Let <var>F</var> be <var>flags</var>.</li></ol></li><li>Return ?&#160;<emu-xref aoid=\"RegExpInitialize\"><a href=\"#sec-regexpinitialize\">RegExpInitialize</a></emu-xref>(<var>O</var>, <var>P</var>, <var>F</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          <p>The <code>compile</code> method completely reinitializes the <emu-val>this</emu-val> value RegExp with a new pattern and flags. An implementation may interpret use of this method as an assertion that the resulting RegExp object will be used multiple times and hence is a candidate for extra optimization.</p>\n        </div></emu-note>\n      </emu-annex>\n    "}, "sec-%typedarray%.prototype.find": {"num": "22.2.3.10", "title": "#sec-%typedarray%.prototype.find %TypedArray%.prototype.find ( predicate [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.find\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.find\">#sec-%typedarray%.prototype.find</span> %TypedArray%.prototype.find ( <var>predicate</var> [ , <var>thisArg</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.find</code> is a distinct function that implements the same algorithm as <code>Array.prototype.find</code> as defined in <emu-xref href=\"#sec-array.prototype.find\"><a href=\"#sec-array.prototype.find\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.find\">#sec-array.prototype.find</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>predicate</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.reduceright": {"num": "22.2.3.21", "title": "#sec-%typedarray%.prototype.reduceright %TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.reduceright\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.reduceright\">#sec-%typedarray%.prototype.reduceright</span> %TypedArray%.prototype.reduceRight ( <var>callbackfn</var> [ , <var>initialValue</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.reduceRight</code> is a distinct function that implements the same algorithm as <code>Array.prototype.reduceRight</code> as defined in <emu-xref href=\"#sec-array.prototype.reduceright\"><a href=\"#sec-array.prototype.reduceright\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.reduceright\">#sec-array.prototype.reduceright</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>callbackfn</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-string.prototype.repeat": {"num": "21.1.3.16", "title": "#sec-string.prototype.repeat String.prototype.repeat ( count )", "html": "<emu-clause id=\"sec-string.prototype.repeat\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.repeat\">#sec-string.prototype.repeat</span> String.prototype.repeat ( <var>count</var> )</h1>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>n</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>count</var>).</li><li>If <var>n</var> &lt; 0, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>n</var> is <emu-val>+&#8734;</emu-val>, throw a <emu-val>RangeError</emu-val> exception.</li><li>If <var>n</var> is 0, return the empty String.</li><li>Return the String value that is made from <var>n</var> copies of <var>S</var> appended together.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>This method creates the String value consisting of the code units of the <emu-val>this</emu-val> value (converted to String) repeated <var>count</var> times.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>repeat</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-string.prototype.split": {"num": "21.1.3.20", "title": "#sec-string.prototype.split String.prototype.split ( separator, limit )", "html": "<emu-clause id=\"sec-string.prototype.split\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-string.prototype.split\">#sec-string.prototype.split</span> String.prototype.split ( <var>separator</var>, <var>limit</var> )</h1>\n        <p>Returns an Array object into which substrings of the result of converting this object to a String have been stored. The substrings are determined by searching from left to right for occurrences of <var>separator</var>; these occurrences are not part of any substring in the returned array, but serve to divide up the String value. The value of <var>separator</var> may be a String of any length or it may be an object, such as a RegExp, that has a @@split method.</p>\n        <p>When the <code>split</code> method is called, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>If <var>separator</var> is neither <emu-val>undefined</emu-val> nor <emu-val>null</emu-val>, then<ol><li>Let <var>splitter</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>separator</var>, @@split).</li><li>If <var>splitter</var> is not <emu-val>undefined</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>splitter</var>, <var>separator</var>, &#171; <var>O</var>, <var>limit</var> &#187;).</li></ol></li></ol></li><li>Let <var>S</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>O</var>).</li><li>Let <var>A</var> be !&#160;<emu-xref aoid=\"ArrayCreate\"><a href=\"#sec-arraycreate\">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>lengthA</var> be 0.</li><li>If <var>limit</var> is <emu-val>undefined</emu-val>, let <var>lim</var> be 2<sup>32</sup> - 1; else let <var>lim</var> be ?&#160;<emu-xref aoid=\"ToUint32\"><a href=\"#sec-touint32\">ToUint32</a></emu-xref>(<var>limit</var>).</li><li>Let <var>R</var> be ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>separator</var>).</li><li>If <var>lim</var> = 0, return <var>A</var>.</li><li>If <var>separator</var> is <emu-val>undefined</emu-val>, then<ol><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"0\"</emu-val>, <var>S</var>).</li><li>Return <var>A</var>.</li></ol></li><li>Let <var>s</var> be the length of <var>S</var>.</li><li>If <var>s</var> = 0, then<ol><li>Let <var>z</var> be <emu-xref aoid=\"SplitMatch\"><a href=\"#sec-splitmatch\">SplitMatch</a></emu-xref>(<var>S</var>, 0, <var>R</var>).</li><li>If <var>z</var> is not <emu-val>false</emu-val>, return <var>A</var>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, <emu-val>\"0\"</emu-val>, <var>S</var>).</li><li>Return <var>A</var>.</li></ol></li><li>Let <var>p</var> be 0.</li><li>Let <var>q</var> be <var>p</var>.</li><li>Repeat, while <var>q</var> &#8800; <var>s</var>,<ol><li>Let <var>e</var> be <emu-xref aoid=\"SplitMatch\"><a href=\"#sec-splitmatch\">SplitMatch</a></emu-xref>(<var>S</var>, <var>q</var>, <var>R</var>).</li><li>If <var>e</var> is <emu-val>false</emu-val>, set <var>q</var> to <var>q</var> + 1.</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>e</var> is an <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer index</a></emu-xref> &#8804; <var>s</var>.</li><li>If <var>e</var> = <var>p</var>, set <var>q</var> to <var>q</var> + 1.</li><li>Else,<ol><li>Let <var>T</var> be the String value equal to the substring of <var>S</var> consisting of the code units at indices <var>p</var> (inclusive) through <var>q</var> (exclusive).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>lengthA</var>), <var>T</var>).</li><li>Set <var>lengthA</var> to <var>lengthA</var> + 1.</li><li>If <var>lengthA</var> = <var>lim</var>, return <var>A</var>.</li><li>Set <var>p</var> to <var>e</var>.</li><li>Set <var>q</var> to <var>p</var>.</li></ol></li></ol></li></ol></li><li>Let <var>T</var> be the String value equal to the substring of <var>S</var> consisting of the code units at indices <var>p</var> (inclusive) through <var>s</var> (exclusive).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>A</var>, !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>lengthA</var>), <var>T</var>).</li><li>Return <var>A</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The value of <var>separator</var> may be an empty String. In this case, <var>separator</var> does not match the empty substring at the beginning or end of the input String, nor does it match the empty substring at the end of the previous separator match. If <var>separator</var> is the empty String, the String is split up into individual code unit elements; the length of the result array equals the length of the String, and each substring contains one code unit.</p>\n          <p>If the <emu-val>this</emu-val> value is (or converts to) the empty String, the result depends on whether <var>separator</var> can match the empty String. If it can, the result array contains no elements. Otherwise, the result array contains one element, which is the empty String.</p>\n          <p>If <var>separator</var> is <emu-val>undefined</emu-val>, then the result array contains just one String, which is the <emu-val>this</emu-val> value (converted to a String). If <var>limit</var> is not <emu-val>undefined</emu-val>, then the output array is truncated so that it contains no more than <var>limit</var> elements.</p>\n        </div></emu-note>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>split</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n\n        <div id=\"excluded-sec-splitmatch\"><h1><span class=\"secnum\">21.1.3.20.1</span>#sec-splitmatch Runtime Semantics: SplitMatch ( S, q, R )</h1>...</div></emu-clause>\n\n      "}, "sec-array.prototype.copywithin": {"num": "22.1.3.3", "title": "#sec-array.prototype.copywithin Array.prototype.copyWithin ( target, start [ , end ] )", "html": "<emu-clause id=\"sec-array.prototype.copywithin\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.copywithin\">#sec-array.prototype.copywithin</span> Array.prototype.copyWithin ( <var>target</var>, <var>start</var> [ , <var>end</var> ] )</h1>\n        <p>The <code>copyWithin</code> method takes up to three arguments <var>target</var>, <var>start</var> and <var>end</var>.</p>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The <var>end</var> argument is optional with the length of the <emu-val>this</emu-val> value as its default value. If <var>target</var> is negative, it is treated as <emu-eqn class=\"inline\"><var>length</var> + <var>target</var></emu-eqn> where <var>length</var> is the length of the array. If <var>start</var> is negative, it is treated as <emu-eqn class=\"inline\"><var>length</var> + <var>start</var></emu-eqn>. If <var>end</var> is negative, it is treated as <emu-eqn class=\"inline\"><var>length</var> + <var>end</var></emu-eqn>.</p>\n        </div></emu-note>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>Let <var>relativeTarget</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>target</var>).</li><li>If <var>relativeTarget</var> &lt; 0, let <var>to</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeTarget</var>), 0); else let <var>to</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeTarget</var>, <var>len</var>).</li><li>Let <var>relativeStart</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>start</var>).</li><li>If <var>relativeStart</var> &lt; 0, let <var>from</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeStart</var>), 0); else let <var>from</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeStart</var>, <var>len</var>).</li><li>If <var>end</var> is <emu-val>undefined</emu-val>, let <var>relativeEnd</var> be <var>len</var>; else let <var>relativeEnd</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>end</var>).</li><li>If <var>relativeEnd</var> &lt; 0, let <var>final</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeEnd</var>), 0); else let <var>final</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeEnd</var>, <var>len</var>).</li><li>Let <var>count</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>final</var> - <var>from</var>, <var>len</var> - <var>to</var>).</li><li>If <var>from</var> &lt; <var>to</var> and <var>to</var> &lt; <var>from</var> + <var>count</var>, then<ol><li>Let <var>direction</var> be -1.</li><li>Set <var>from</var> to <var>from</var> + <var>count</var> - 1.</li><li>Set <var>to</var> to <var>to</var> + <var>count</var> - 1.</li></ol></li><li>Else,<ol><li>Let <var>direction</var> be 1.</li></ol></li><li>Repeat, while <var>count</var> &gt; 0,<ol><li>Let <var>fromKey</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>from</var>).</li><li>Let <var>toKey</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>to</var>).</li><li>Let <var>fromPresent</var> be ?&#160;<emu-xref aoid=\"HasProperty\"><a href=\"#sec-hasproperty\">HasProperty</a></emu-xref>(<var>O</var>, <var>fromKey</var>).</li><li>If <var>fromPresent</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>fromVal</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>O</var>, <var>fromKey</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>toKey</var>, <var>fromVal</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>fromPresent</var> is <emu-val>false</emu-val>.</li><li>Perform ?&#160;<emu-xref aoid=\"DeletePropertyOrThrow\"><a href=\"#sec-deletepropertyorthrow\">DeletePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>toKey</var>).</li></ol></li><li>Set <var>from</var> to <var>from</var> + <var>direction</var>.</li><li>Set <var>to</var> to <var>to</var> + <var>direction</var>.</li><li>Set <var>count</var> to <var>count</var> - 1.</li></ol></li><li>Return <var>O</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>copyWithin</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.includes": {"num": "22.2.3.13", "title": "#sec-%typedarray%.prototype.includes %TypedArray%.prototype.includes ( searchElement [ , fromIndex ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.includes\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.includes\">#sec-%typedarray%.prototype.includes</span> %TypedArray%.prototype.includes ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.includes</code> is a distinct function that implements the same algorithm as <code>Array.prototype.includes</code> as defined in <emu-xref href=\"#sec-array.prototype.includes\"><a href=\"#sec-array.prototype.includes\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.includes\">#sec-array.prototype.includes</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.indexof": {"num": "22.2.3.14", "title": "#sec-%typedarray%.prototype.indexof %TypedArray%.prototype.indexOf ( searchElement [ , fromIndex ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.indexof\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.indexof\">#sec-%typedarray%.prototype.indexof</span> %TypedArray%.prototype.indexOf ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.indexOf</code> is a distinct function that implements the same algorithm as <code>Array.prototype.indexOf</code> as defined in <emu-xref href=\"#sec-array.prototype.indexof\"><a href=\"#sec-array.prototype.indexof\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.indexof\">#sec-array.prototype.indexof</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer-index\"><a href=\"#integer-index\">integer-indexed</a></emu-xref> properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}, "sec-array.prototype.fill": {"num": "22.1.3.6", "title": "#sec-array.prototype.fill Array.prototype.fill ( value [ , start [ , end ] ] )", "html": "<emu-clause id=\"sec-array.prototype.fill\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-array.prototype.fill\">#sec-array.prototype.fill</span> Array.prototype.fill ( <var>value</var> [ , <var>start</var> [ , <var>end</var> ] ] )</h1>\n        <p>The <code>fill</code> method takes up to three arguments <var>value</var>, <var>start</var> and <var>end</var>.</p>\n        <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n          <p>The <var>start</var> and <var>end</var> arguments are optional with default values of 0 and the length of the <emu-val>this</emu-val> value. If <var>start</var> is negative, it is treated as <emu-eqn class=\"inline\"><var>length</var> + <var>start</var></emu-eqn> where <var>length</var> is the length of the array. If <var>end</var> is negative, it is treated as <emu-eqn class=\"inline\"><var>length</var> + <var>end</var></emu-eqn>.</p>\n        </div></emu-note>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<emu-val>this</emu-val> value).</li><li>Let <var>len</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>O</var>).</li><li>Let <var>relativeStart</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>start</var>).</li><li>If <var>relativeStart</var> &lt; 0, let <var>k</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeStart</var>), 0); else let <var>k</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeStart</var>, <var>len</var>).</li><li>If <var>end</var> is <emu-val>undefined</emu-val>, let <var>relativeEnd</var> be <var>len</var>; else let <var>relativeEnd</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>end</var>).</li><li>If <var>relativeEnd</var> &lt; 0, let <var>final</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeEnd</var>), 0); else let <var>final</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeEnd</var>, <var>len</var>).</li><li>Repeat, while <var>k</var> &lt; <var>final</var>,<ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Perform ?&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>Pk</var>, <var>value</var>, <emu-val>true</emu-val>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <var>O</var>.</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n          <p>The <code>fill</code> function is intentionally generic; it does not require that its <emu-val>this</emu-val> value be an Array object. Therefore it can be transferred to other kinds of objects for use as a method.</p>\n        </div></emu-note>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.every": {"num": "22.2.3.7", "title": "#sec-%typedarray%.prototype.every %TypedArray%.prototype.every ( callbackfn [ , thisArg ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.every\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.every\">#sec-%typedarray%.prototype.every</span> %TypedArray%.prototype.every ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</h1>\n        <p><emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.every</code> is a distinct function that implements the same algorithm as <code>Array.prototype.every</code> as defined in <emu-xref href=\"#sec-array.prototype.every\"><a href=\"#sec-array.prototype.every\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.every\">#sec-array.prototype.every</a></emu-xref> except that the <emu-val>this</emu-val> value's [[ArrayLength]] internal slot is accessed in place of performing a [[Get]] of <emu-val>\"length\"</emu-val>. The implementation of the algorithm may be optimized with the knowledge that the <emu-val>this</emu-val> value is an object that has a fixed length and whose <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref>-indexed properties are not sparse. However, such optimization must not introduce any observable changes in the specified behaviour of the algorithm and must take into account the possibility that calls to <var>callbackfn</var> may cause the <emu-val>this</emu-val> value to become detached.</p>\n        <p>This function is not generic. <emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref> is applied to the <emu-val>this</emu-val> value prior to evaluating the algorithm. If its result is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref> that exception is thrown instead of evaluating the algorithm.</p>\n      </emu-clause>\n\n      "}}, "figData": {}}}