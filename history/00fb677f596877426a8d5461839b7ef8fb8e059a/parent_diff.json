{"from": {"secList": ["sec-addrestrictedfunctionproperties", "sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "sec-async-function-definitions-PropertyDefinitionEvaluation", "sec-async-arrow-function-definitions-runtime-semantics-evaluation", "sec-asyncgeneratorfunctioncreate", "sec-generatorfunctioncreate", "sec-async-function-definitions-runtime-semantics-evaluation", "sec-method-definitions-runtime-semantics-propertydefinitionevaluation", "sec-generator-function-definitions-runtime-semantics-evaluation", "sec-async-function-definitions-InstantiateFunctionObject", "sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "sec-arrow-function-definitions-runtime-semantics-evaluation", "sec-asyncgenerator-definitions-instantiatefunctionobject", "sec-asyncgenerator-definitions-evaluation", "sec-async-functions-abstract-operations-async-function-create", "sec-ordinaryfunctioncreate", "sec-function-definitions-runtime-semantics-evaluation", "sec-runtime-semantics-definemethod", "sec-function-definitions-runtime-semantics-instantiatefunctionobject", "sec-ecmascript-function-objects", "sec-functioncreate", "sec-asyncgenerator-definitions-propertydefinitionevaluation"], "secData": {"sec-addrestrictedfunctionproperties": {"num": "9.2.8", "title": "#sec-addrestrictedfunctionproperties AddRestrictedFunctionProperties ( F, realm )", "html": "<emu-clause id=\"sec-addrestrictedfunctionproperties\" aoid=\"AddRestrictedFunctionProperties\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-addrestrictedfunctionproperties\">#sec-addrestrictedfunctionproperties</span> AddRestrictedFunctionProperties ( <var>F</var>, <var>realm</var> )</h1>\n      <p>The abstract operation AddRestrictedFunctionProperties is called with a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> <var>F</var> and <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> <var>realm</var> as its argument. It performs the following steps:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>realm</var>.[[Intrinsics]].[[<emu-xref href=\"#sec-%throwtypeerror%\"><a href=\"#sec-%throwtypeerror%\">%ThrowTypeError%</a></emu-xref>]] exists and has been initialized.</li><li>Let <var>thrower</var> be <var>realm</var>.[[Intrinsics]].[[<emu-xref href=\"#sec-%throwtypeerror%\"><a href=\"#sec-%throwtypeerror%\">%ThrowTypeError%</a></emu-xref>]].</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"caller\"</emu-val>, PropertyDescriptor { [[Get]]: <var>thrower</var>, [[Set]]: <var>thrower</var>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }).</li><li>Return !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"arguments\"</emu-val>, PropertyDescriptor { [[Get]]: <var>thrower</var>, [[Set]]: <var>thrower</var>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }).\n      </li></ol></emu-alg>\n\n      <div id=\"excluded-sec-%throwtypeerror%\"><h1><span class=\"secnum\">9.2.8.1</span>#sec-%throwtypeerror% %ThrowTypeError% ( )</h1>...</div></emu-clause>\n\n    "}, "sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject": {"num": "14.4.11", "title": "#sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject Runtime Semantics: InstantiateFunctionObject", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject\">#sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject</span> Runtime Semantics: InstantiateFunctionObject</h1>\n      <p>With parameter <var>scope</var>.</p>\n      <emu-see-also-para op=\"InstantiateFunctionObject\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"GeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7dbc99b6\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>F</var> be <emu-xref aoid=\"GeneratorFunctionCreate\"><a href=\"#sec-generatorfunctioncreate\">GeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <var>scope</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%Generator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0d271960\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>F</var> be <emu-xref aoid=\"GeneratorFunctionCreate\"><a href=\"#sec-generatorfunctioncreate\">GeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <var>scope</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%Generator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"default\"</emu-val>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An anonymous <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt> can only occur as part of an <code>export default</code> declaration, and its function code is therefore always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-async-function-definitions-PropertyDefinitionEvaluation": {"num": "14.7.12", "title": "#sec-async-function-definitions-PropertyDefinitionEvaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-async-function-definitions-PropertyDefinitionEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-PropertyDefinitionEvaluation\">#sec-async-function-definitions-PropertyDefinitionEvaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"759e5682\"><emu-t>async</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncFunctionCreate\"><a href=\"#sec-async-functions-abstract-operations-async-function-create\">AsyncFunctionCreate</a></emu-xref>(<emu-const>Method</emu-const>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <var>scope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt>.</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>closure</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-async-arrow-function-definitions-runtime-semantics-evaluation": {"num": "14.8.17", "title": "#sec-async-arrow-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-async-arrow-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-arrow-function-definitions-runtime-semantics-evaluation\">#sec-async-arrow-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"AsyncArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7505c63a\"><emu-t>async</emu-t><emu-nt><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a></emu-nt><emu-t>=&gt;</emu-t><emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>parameters</var> be <emu-nt><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncFunctionCreate\"><a href=\"#sec-async-functions-abstract-operations-async-function-create\">AsyncFunctionCreate</a></emu-xref>(<emu-const>Arrow</emu-const>, <var>parameters</var>, <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, <var>scope</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"694c2ff0\"><emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt><emu-t>=&gt;</emu-t><emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>head</var> be CoveredAsyncArrowHead of <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</li><li>Let <var>parameters</var> be the <emu-nt><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a></emu-nt> of <var>head</var>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncFunctionCreate\"><a href=\"#sec-async-functions-abstract-operations-async-function-create\">AsyncFunctionCreate</a></emu-xref>(<emu-const>Arrow</emu-const>, <var>parameters</var>, <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, <var>scope</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-asyncgeneratorfunctioncreate": {"num": "9.2.6", "title": "#sec-asyncgeneratorfunctioncreate AsyncGeneratorFunctionCreate ( kind, ParameterList, Body, Scope )", "html": "<emu-clause id=\"sec-asyncgeneratorfunctioncreate\" aoid=\"AsyncGeneratorFunctionCreate\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgeneratorfunctioncreate\">#sec-asyncgeneratorfunctioncreate</span> AsyncGeneratorFunctionCreate ( <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var> )</h1>\n      <p>The abstract operation AsyncGeneratorFunctionCreate requires the arguments: <var>kind</var> which is one of (<emu-const>Normal</emu-const>, <emu-const>Method</emu-const>), a parameter list <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>ParameterList</var>, a body <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>Body</var>, a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> specified by <var>Scope</var>. AsyncGeneratorFunctionCreate performs the following steps:</p>\n      <emu-alg><ol><li>Let <var>functionPrototype</var> be <emu-xref href=\"#sec-asyncgeneratorfunction-prototype\"><a href=\"#sec-asyncgeneratorfunction-prototype\">%AsyncGenerator%</a></emu-xref>.</li><li>Return !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<var>functionPrototype</var>, <var>ParameterList</var>, <var>Body</var>, <var>kind</var>, <var>Scope</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-generatorfunctioncreate": {"num": "9.2.5", "title": "#sec-generatorfunctioncreate GeneratorFunctionCreate ( kind, ParameterList, Body, Scope )", "html": "<emu-clause id=\"sec-generatorfunctioncreate\" aoid=\"GeneratorFunctionCreate\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generatorfunctioncreate\">#sec-generatorfunctioncreate</span> GeneratorFunctionCreate ( <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var> )</h1>\n      <p>The abstract operation GeneratorFunctionCreate requires the arguments: <var>kind</var> which is one of (<emu-const>Normal</emu-const>, <emu-const>Method</emu-const>), a parameter list <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>ParameterList</var>, a body <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>Body</var>, a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> specified by <var>Scope</var>. GeneratorFunctionCreate performs the following steps:</p>\n      <emu-alg><ol><li>Let <var>functionPrototype</var> be <emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%Generator%</a></emu-xref>.</li><li>Return !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<var>functionPrototype</var>, <var>ParameterList</var>, <var>Body</var>, <var>kind</var>, <var>Scope</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-async-function-definitions-runtime-semantics-evaluation": {"num": "14.7.14", "title": "#sec-async-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-async-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-runtime-semantics-evaluation\">#sec-async-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e2632ddf\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a076671\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a076671\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncFunctionCreate\"><a href=\"#sec-async-functions-abstract-operations-async-function-create\">AsyncFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <var>scope</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e2632ddf\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>funcEnv</var> be !&#160;<emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>envRec</var> be <var>funcEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform ! <var>envRec</var>.CreateImmutableBinding(<var>name</var>).</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncFunctionCreate\"><a href=\"#sec-async-functions-abstract-operations-async-function-create\">AsyncFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <var>funcEnv</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform ! <var>envRec</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AwaitExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ef22da1b\"><emu-t>await</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Return ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-method-definitions-runtime-semantics-propertydefinitionevaluation": {"num": "14.3.8", "title": "#sec-method-definitions-runtime-semantics-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-method-definitions-runtime-semantics-propertydefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-method-definitions-runtime-semantics-propertydefinitionevaluation\">#sec-method-definitions-runtime-semantics-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n      <emu-see-also-para op=\"PropertyDefinitionEvaluation\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"cb8e53e9\"><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>methodDef</var> be ? DefineMethod of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> with argument <var>object</var>.</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>methodDef</var>.[[Closure]], <var>methodDef</var>.[[Key]]).</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>methodDef</var>.[[Closure]], [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>methodDef</var>.[[Key]], <var>desc</var>).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f1487956\"><emu-t>get</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>formalParameterList</var> be an instance of the production <emu-grammar><emu-production name=\"FormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production></emu-grammar>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<emu-const>Method</emu-const>, <var>formalParameterList</var>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>, <emu-val>\"get\"</emu-val>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Get]]: <var>closure</var>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4402354c\"><emu-t>set</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>closure</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<emu-const>Method</emu-const>, <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>, <emu-val>\"set\"</emu-val>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Set]]: <var>closure</var>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-generator-function-definitions-runtime-semantics-evaluation": {"num": "14.4.14", "title": "#sec-generator-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-evaluation\">#sec-generator-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0d271960\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"GeneratorFunctionCreate\"><a href=\"#sec-generatorfunctioncreate\">GeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <var>scope</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%Generator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7dbc99b6\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>envRec</var> be <var>funcEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform <var>envRec</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>closure</var> be <emu-xref aoid=\"GeneratorFunctionCreate\"><a href=\"#sec-generatorfunctioncreate\">GeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <var>funcEnv</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%Generator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform <var>envRec</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> to allow the generator code to call itself recursively. However, unlike in a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>generatorKind</var> be !&#160;<emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>().</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then return ?&#160;<emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Otherwise, return ?&#160;<emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>false</emu-val>)).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e741ede8\"><emu-t>yield</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>generatorKind</var> be !&#160;<emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>().</li><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then return ?&#160;<emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(<var>value</var>).</li><li>Otherwise, return ?&#160;<emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>value</var>, <emu-val>false</emu-val>)).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"47a33813\"><emu-t>yield</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>generatorKind</var> be !&#160;<emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>().</li><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>value</var>, <var>generatorKind</var>).</li><li>Let <var>iterator</var> be <var>iteratorRecord</var>.[[Iterator]].</li><li>Let <var>received</var> be <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Repeat,<ol><li>If <var>received</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Let <var>innerResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>iteratorRecord</var>.[[NextMethod]], <var>iteratorRecord</var>.[[Iterator]], &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>innerResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>Else if <var>received</var>.[[Type]] is <emu-const>throw</emu-const>, then<ol><li>Let <var>throw</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>iterator</var>, <emu-val>\"throw\"</emu-val>).</li><li>If <var>throw</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>innerResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>throw</var>, <var>iterator</var>, &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>innerResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerResult</var>).</li><li>NOTE: Exceptions from the inner iterator <code>throw</code> method are propagated. Normal completions from an inner <code>throw</code> method are processed similarly to an inner <code>next</code>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>Else,<ol><li>NOTE: If <var>iterator</var> does not have a <code>throw</code> method, this throw is going to terminate the <code>yield*</code> loop. But first we need to give <var>iterator</var> a chance to clean up.</li><li>Let <var>closeCompletion</var> be <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>normal</emu-const>, [[Value]]: <emu-const>empty</emu-const>, [[Target]]: <emu-const>empty</emu-const> }.</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, perform ?&#160;<emu-xref aoid=\"AsyncIteratorClose\"><a href=\"#sec-asynciteratorclose\">AsyncIteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>closeCompletion</var>).</li><li>Else, perform ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>closeCompletion</var>).</li><li>NOTE: The next step throws a <emu-val>TypeError</emu-val> to indicate that there was a <code>yield*</code> protocol violation: <var>iterator</var> does not have a <code>throw</code> method.</li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>received</var>.[[Type]] is <emu-const>return</emu-const>.</li><li>Let <var>return</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>iterator</var>, <emu-val>\"return\"</emu-val>).</li><li>If <var>return</var> is <emu-val>undefined</emu-val>, then<ol><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var>.[[Value]] to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>received</var>.[[Value]]).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>received</var>).</li></ol></li><li>Let <var>innerReturnResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>return</var>, <var>iterator</var>, &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>innerReturnResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerReturnResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerReturnResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerReturnResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerReturnResult</var>).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>value</var>, [[Target]]: <emu-const>empty</emu-const> }.</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerReturnResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerReturnResult</var>).\n      </li></ol></li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-async-function-definitions-InstantiateFunctionObject": {"num": "14.7.10", "title": "#sec-async-function-definitions-InstantiateFunctionObject Runtime Semantics: InstantiateFunctionObject", "html": "<emu-clause id=\"sec-async-function-definitions-InstantiateFunctionObject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-InstantiateFunctionObject\">#sec-async-function-definitions-InstantiateFunctionObject</span> Runtime Semantics: InstantiateFunctionObject</h1>\n      <p>With parameter <var>scope</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e2632ddf\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"AsyncFunctionCreate\"><a href=\"#sec-async-functions-abstract-operations-async-function-create\">AsyncFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <var>scope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a076671\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"AsyncFunctionCreate\"><a href=\"#sec-async-functions-abstract-operations-async-function-create\">AsyncFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <var>scope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"default\"</emu-val>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation": {"num": "14.4.12", "title": "#sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation\">#sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n      <emu-see-also-para op=\"PropertyDefinitionEvaluation\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"GeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c5c757ac\"><emu-t>*</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>closure</var> be <emu-xref aoid=\"GeneratorFunctionCreate\"><a href=\"#sec-generatorfunctioncreate\">GeneratorFunctionCreate</a></emu-xref>(<emu-const>Method</emu-const>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%Generator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt>.</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>closure</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-arrow-function-definitions-runtime-semantics-evaluation": {"num": "14.2.17", "title": "#sec-arrow-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-arrow-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arrow-function-definitions-runtime-semantics-evaluation\">#sec-arrow-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"ArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2a7a3456\"><emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt><emu-t>=&gt;</emu-t><emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>parameters</var> be CoveredFormalsList of <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<emu-const>Arrow</emu-const>, <var>parameters</var>, <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt>, <var>scope</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> does not define local bindings for <code>arguments</code>, <code>super</code>, <code>this</code>, or <code>new.target</code>. Any reference to <code>arguments</code>, <code>super</code>, <code>this</code>, or <code>new.target</code> within an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> must resolve to a binding in a lexically enclosing environment. Typically this will be the Function Environment of an immediately enclosing function. Even though an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> may contain references to <code>super</code>, the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> created in step 4 is not made into a method by performing <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>. An <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> that references <code>super</code> is always contained within a non-<emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> and the necessary state to implement <code>super</code> is accessible via the <var>scope</var> that is captured by the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> of the <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-asyncgenerator-definitions-instantiatefunctionobject": {"num": "14.5.11", "title": "#sec-asyncgenerator-definitions-instantiatefunctionobject Runtime Semantics: InstantiateFunctionObject", "html": "<emu-clause id=\"sec-asyncgenerator-definitions-instantiatefunctionobject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-definitions-instantiatefunctionobject\">#sec-asyncgenerator-definitions-instantiatefunctionobject</span> Runtime Semantics: InstantiateFunctionObject</h1>\n      <p>With parameter <var>scope</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncGeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"13d2cc33\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"AsyncGeneratorFunctionCreate\"><a href=\"#sec-asyncgeneratorfunctioncreate\">AsyncGeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <var>scope</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%AsyncGenerator.prototype%).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncGeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c51514e0\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>F</var> be <emu-xref aoid=\"AsyncGeneratorFunctionCreate\"><a href=\"#sec-asyncgeneratorfunctioncreate\">AsyncGeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <var>scope</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%AsyncGenerator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"default\"</emu-val>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An anonymous <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt> can only occur as part of an <code>export default</code> declaration.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-asyncgenerator-definitions-evaluation": {"num": "14.5.14", "title": "#sec-asyncgenerator-definitions-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-asyncgenerator-definitions-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-definitions-evaluation\">#sec-asyncgenerator-definitions-evaluation</span> Runtime Semantics: Evaluation</h1>\n\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c51514e0\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncGeneratorFunctionCreate\"><a href=\"#sec-asyncgeneratorfunctioncreate\">AsyncGeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <var>scope</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%AsyncGenerator.prototype%).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"13d2cc33\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be !&#160;<emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>envRec</var> be <var>funcEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform ! <var>envRec</var>.CreateImmutableBinding(<var>name</var>).</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncGeneratorFunctionCreate\"><a href=\"#sec-asyncgeneratorfunctioncreate\">AsyncGeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <var>funcEnv</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%AsyncGenerator.prototype%).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform ! <var>envRec</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> to allow the generator code to call itself recursively. However, unlike in an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-async-functions-abstract-operations-async-function-create": {"num": "9.2.7", "title": "#sec-async-functions-abstract-operations-async-function-create AsyncFunctionCreate ( kind, parameters, body, Scope )", "html": "<emu-clause id=\"sec-async-functions-abstract-operations-async-function-create\" aoid=\"AsyncFunctionCreate\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-functions-abstract-operations-async-function-create\">#sec-async-functions-abstract-operations-async-function-create</span> AsyncFunctionCreate ( <var>kind</var>, <var>parameters</var>, <var>body</var>, <var>Scope</var> )</h1>\n      <p>The abstract operation AsyncFunctionCreate requires the arguments: <var>kind</var> which is one of (<emu-const>Normal</emu-const>, <emu-const>Method</emu-const>, <emu-const>Arrow</emu-const>), a parameter list <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>parameters</var>, a body <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>body</var>, a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> specified by <var>Scope</var>. AsyncFunctionCreate performs the following steps:</p>\n      <emu-alg><ol><li>Let <var>functionPrototype</var> be %AsyncFunction.prototype%.</li><li>Return !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<var>functionPrototype</var>, <var>parameters</var>, <var>body</var>, <var>kind</var>, <var>Scope</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-ordinaryfunctioncreate": {"num": "9.2.3", "title": "#sec-ordinaryfunctioncreate OrdinaryFunctionCreate ( functionPrototype, ParameterList, Body, kind, Scope )", "html": "<emu-clause id=\"sec-ordinaryfunctioncreate\" aoid=\"OrdinaryFunctionCreate\" oldids=\"sec-functionallocate,sec-functioninitialize\">\n      <span id=\"sec-functioninitialize\"></span><span id=\"sec-functionallocate\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinaryfunctioncreate\">#sec-ordinaryfunctioncreate</span> OrdinaryFunctionCreate ( <var>functionPrototype</var>, <var>ParameterList</var>, <var>Body</var>, <var>kind</var>, <var>Scope</var> )</h1>\n      <p>The abstract operation OrdinaryFunctionCreate requires the arguments: an object <var>functionPrototype</var>, a parameter list <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>ParameterList</var>, a body <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>Body</var>, <var>kind</var> which is one of (<emu-const>Normal</emu-const>, <emu-const>Method</emu-const>, <emu-const>Arrow</emu-const>), and a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> specified by <var>Scope</var>. OrdinaryFunctionCreate performs the following steps:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>functionPrototype</var>) is Object.</li><li>Let <var>F</var> be a newly created ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> with the internal slots listed in <emu-xref href=\"#table-27\"><a href=\"#table-27\" class=\"excluded-xref\" excluded-id=\"table-27\">#table-27</a></emu-xref>.</li><li>Set <var>F</var>'s essential internal methods to the default ordinary object definitions specified in <emu-xref href=\"#sec-ordinary-object-internal-methods-and-internal-slots\"><a href=\"#sec-ordinary-object-internal-methods-and-internal-slots\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-object-internal-methods-and-internal-slots\">#sec-ordinary-object-internal-methods-and-internal-slots</a></emu-xref>.</li><li>Set <var>F</var>.[[Call]] to the definition specified in <emu-xref href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\"><a href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects-call-thisargument-argumentslist\">#sec-ecmascript-function-objects-call-thisargument-argumentslist</a></emu-xref>.</li><li>Set <var>F</var>.[[Prototype]] to <var>functionPrototype</var>.</li><li>Set <var>F</var>.[[Extensible]] to <emu-val>true</emu-val>.</li><li>Set <var>F</var>.[[FormalParameters]] to <var>ParameterList</var>.</li><li>Set <var>F</var>.[[ECMAScriptCode]] to <var>Body</var>.</li><li>If the source text matching <var>Body</var> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>Strict</var> be <emu-val>true</emu-val>; else let <var>Strict</var> be <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Strict]] to <var>Strict</var>.</li><li>If <var>kind</var> is <emu-const>Arrow</emu-const>, set <var>F</var>.[[ThisMode]] to <emu-const>lexical</emu-const>.</li><li>Else if <var>Strict</var> is <emu-val>true</emu-val>, set <var>F</var>.[[ThisMode]] to <emu-const>strict</emu-const>.</li><li>Else, set <var>F</var>.[[ThisMode]] to <emu-const>global</emu-const>.</li><li>Set <var>F</var>.[[IsClassConstructor]] to <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Environment]] to <var>Scope</var>.</li><li>Set <var>F</var>.[[ScriptOrModule]] to <emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>().</li><li>Set <var>F</var>.[[Realm]] to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Let <var>len</var> be the ExpectedArgumentCount of <var>ParameterList</var>.</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionLength\"><a href=\"#sec-setfunctionlength\">SetFunctionLength</a></emu-xref>(<var>F</var>, <var>len</var>).</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-function-definitions-runtime-semantics-evaluation": {"num": "14.1.22", "title": "#sec-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions-runtime-semantics-evaluation\">#sec-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81739a57\"><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>An alternative semantics is provided in  <emu-xref href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\"><a href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\" class=\"excluded-xref\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b26bacea\"><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b26bacea\"><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>closure</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81739a57\"><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>envRec</var> be <var>funcEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform <var>envRec</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>closure</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <var>funcEnv</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>closure</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</li><li>Perform <var>envRec</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> to allow the function to call itself recursively. However, unlike in a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>A <emu-val>\"prototype\"</emu-val> property is automatically created for every function defined using a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> or <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, to allow for the possibility that the function will be used as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-runtime-semantics-definemethod": {"num": "14.3.7", "title": "#sec-runtime-semantics-definemethod Runtime Semantics: DefineMethod", "html": "<emu-clause id=\"sec-runtime-semantics-definemethod\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-definemethod\">#sec-runtime-semantics-definemethod</span> Runtime Semantics: DefineMethod</h1>\n      <p>With parameter <var>object</var> and optional parameter <var>functionPrototype</var>.</p>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"cb8e53e9\"><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>If <var>functionPrototype</var> is present as a parameter, then<ol><li>Let <var>kind</var> be <emu-const>Normal</emu-const>.</li><li>Let <var>prototype</var> be <var>functionPrototype</var>.</li></ol></li><li>Else,<ol><li>Let <var>kind</var> be <emu-const>Method</emu-const>.</li><li>Let <var>prototype</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Let <var>closure</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<var>kind</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <var>scope</var>, <var>prototype</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]]: <var>propKey</var>, [[Closure]]: <var>closure</var> }.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-function-definitions-runtime-semantics-instantiatefunctionobject": {"num": "14.1.20", "title": "#sec-function-definitions-runtime-semantics-instantiatefunctionobject Runtime Semantics: InstantiateFunctionObject", "html": "<emu-clause id=\"sec-function-definitions-runtime-semantics-instantiatefunctionobject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions-runtime-semantics-instantiatefunctionobject\">#sec-function-definitions-runtime-semantics-instantiatefunctionobject</span> Runtime Semantics: InstantiateFunctionObject</h1>\n      <p>With parameter <var>scope</var>.</p>\n      <emu-see-also-para op=\"InstantiateFunctionObject\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81739a57\"><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>F</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b26bacea\"><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>F</var> be <emu-xref aoid=\"FunctionCreate\"><a href=\"#sec-functioncreate\">FunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"default\"</emu-val>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An anonymous <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> can only occur as part of an <code>export default</code> declaration, and its function code is therefore always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-ecmascript-function-objects": {"num": "9.2", "title": "#sec-ecmascript-function-objects ECMAScript Function Objects", "html": "<emu-clause id=\"sec-ecmascript-function-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-function-objects\">#sec-ecmascript-function-objects</span> ECMAScript Function Objects</h1>\n    <p>ECMAScript function objects encapsulate parameterized ECMAScript code closed over a lexical environment and support the dynamic evaluation of that code. An ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is an ordinary object and has the same internal slots and the same internal methods as other ordinary objects. The code of an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> may be either <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> (<emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\" class=\"excluded-xref\" excluded-id=\"sec-strict-mode-code\">#sec-strict-mode-code</a></emu-xref>) or <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>. An ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> whose code is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> is called a  <dfn id=\"strict-function\">strict function</dfn>. One whose code is not <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> is called a  <dfn id=\"non-strict-function\">non-strict function</dfn>.</p>\n    <p>ECMAScript function objects have the additional internal slots listed in  <emu-xref href=\"#table-27\"><a href=\"#table-27\" class=\"excluded-xref\" excluded-id=\"table-27\">#table-27</a></emu-xref>.</p>\n    <emu-table id=\"table-27\" caption=\"Internal Slots of ECMAScript Function Objects\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-27\">#table-27</span>: Internal Slots of ECMAScript Function Objects</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Internal Slot\n          \n          </th>\n          <th>\n            Type\n          \n          </th>\n          <th>\n            Description\n          \n          </th>\n        </tr>\n        <tr>\n          <td>\n            [[Environment]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref>\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> that the function was closed over. Used as the outer environment when evaluating the code of the function.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[FormalParameters]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n          \n          </td>\n          <td>\n            The root parse node of the source text that defines the function's formal parameter list.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ECMAScriptCode]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n          \n          </td>\n          <td>\n            The root parse node of the source text that defines the function's body.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ConstructorKind]]\n          \n          </td>\n          <td>\n            <emu-const>base</emu-const> | <emu-const>derived</emu-const>\n          \n          </td>\n          <td>\n            Whether or not the function is a derived class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Realm]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> in which the function was created and which provides any intrinsic objects that are accessed when evaluating the function.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ScriptOrModule]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>\n          \n          </td>\n          <td>\n            The script or module in which the function was created.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ThisMode]]\n          \n          </td>\n          <td>\n            <emu-const>lexical</emu-const> | <emu-const>strict</emu-const> | <emu-const>global</emu-const>\n          \n          </td>\n          <td>\n            Defines how <code>this</code> references are interpreted within the formal parameters and code body of the function. <emu-const>lexical</emu-const> means that <code>this</code> refers to the <emu-val>this</emu-val> value of a lexically enclosing function. <emu-const>strict</emu-const> means that the <emu-val>this</emu-val> value is used exactly as provided by an invocation of the function. <emu-const>global</emu-const> means that a <emu-val>this</emu-val> value of <emu-val>undefined</emu-val> is interpreted as a reference to the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Strict]]\n          \n          </td>\n          <td>\n            Boolean\n          \n          </td>\n          <td>\n            <emu-val>true</emu-val> if this is a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref>, <emu-val>false</emu-val> if this is a <emu-xref href=\"#non-strict-function\"><a href=\"#non-strict-function\">non-strict function</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[HomeObject]]\n          \n          </td>\n          <td>\n            Object\n          \n          </td>\n          <td>\n            If the function uses <code>super</code>, this is the object whose [[GetPrototypeOf]] provides the object where <code>super</code> property lookups begin.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[SourceText]]\n          \n          </td>\n          <td>\n            String\n          \n          </td>\n          <td>\n            The  <emu-xref href=\"#sec-source-text\"><a href=\"#sec-source-text\">source text</a></emu-xref> that defines the function.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[IsClassConstructor]]\n          \n          </td>\n          <td>\n            Boolean\n          \n          </td>\n          <td>\n            Indicates whether the function is a class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. (If <emu-val>true</emu-val>, invoking the function's [[Call]] will immediately throw a <emu-val>TypeError</emu-val> exception.)\n          \n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>All ECMAScript function objects have the [[Call]] internal method defined here. ECMAScript functions that are also constructors in addition have the [[Construct]] internal method.</p>\n\n    <div id=\"excluded-sec-ecmascript-function-objects-call-thisargument-argumentslist\"><h1><span class=\"secnum\">9.2.1</span>#sec-ecmascript-function-objects-call-thisargument-argumentslist [[Call]] ( thisArgument, argumentsList )</h1>...</div><div id=\"excluded-sec-ecmascript-function-objects-construct-argumentslist-newtarget\"><h1><span class=\"secnum\">9.2.2</span>#sec-ecmascript-function-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )</h1>...</div><div id=\"excluded-sec-ordinaryfunctioncreate\"><h1><span class=\"secnum\">9.2.3</span>#sec-ordinaryfunctioncreate OrdinaryFunctionCreate ( functionPrototype, ParameterList, Body, kind, Scope )</h1>...</div><div id=\"excluded-sec-functioncreate\"><h1><span class=\"secnum\">9.2.4</span>#sec-functioncreate FunctionCreate ( kind, ParameterList, Body, Scope [ , prototype ] )</h1>...</div><div id=\"excluded-sec-generatorfunctioncreate\"><h1><span class=\"secnum\">9.2.5</span>#sec-generatorfunctioncreate GeneratorFunctionCreate ( kind, ParameterList, Body, Scope )</h1>...</div><div id=\"excluded-sec-asyncgeneratorfunctioncreate\"><h1><span class=\"secnum\">9.2.6</span>#sec-asyncgeneratorfunctioncreate AsyncGeneratorFunctionCreate ( kind, ParameterList, Body, Scope )</h1>...</div><div id=\"excluded-sec-async-functions-abstract-operations-async-function-create\"><h1><span class=\"secnum\">9.2.7</span>#sec-async-functions-abstract-operations-async-function-create AsyncFunctionCreate ( kind, parameters, body, Scope )</h1>...</div><div id=\"excluded-sec-addrestrictedfunctionproperties\"><h1><span class=\"secnum\">9.2.8</span>#sec-addrestrictedfunctionproperties AddRestrictedFunctionProperties ( F, realm )</h1>...</div><div id=\"excluded-sec-makeconstructor\"><h1><span class=\"secnum\">9.2.9</span>#sec-makeconstructor MakeConstructor ( F [ , writablePrototype [ , prototype ] ] )</h1>...</div><div id=\"excluded-sec-makeclassconstructor\"><h1><span class=\"secnum\">9.2.10</span>#sec-makeclassconstructor MakeClassConstructor ( F )</h1>...</div><div id=\"excluded-sec-makemethod\"><h1><span class=\"secnum\">9.2.11</span>#sec-makemethod MakeMethod ( F, homeObject )</h1>...</div><div id=\"excluded-sec-setfunctionname\"><h1><span class=\"secnum\">9.2.12</span>#sec-setfunctionname SetFunctionName ( F, name [ , prefix ] )</h1>...</div><div id=\"excluded-sec-setfunctionlength\"><h1><span class=\"secnum\">9.2.13</span>#sec-setfunctionlength SetFunctionLength ( F, length )</h1>...</div><div id=\"excluded-sec-functiondeclarationinstantiation\"><h1><span class=\"secnum\">9.2.14</span>#sec-functiondeclarationinstantiation FunctionDeclarationInstantiation ( func, argumentsList )</h1>...</div></emu-clause>\n\n  "}, "sec-functioncreate": {"num": "9.2.4", "title": "#sec-functioncreate FunctionCreate ( kind, ParameterList, Body, Scope [ , prototype ] )", "html": "<emu-clause id=\"sec-functioncreate\" aoid=\"FunctionCreate\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-functioncreate\">#sec-functioncreate</span> FunctionCreate ( <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var> [ , <var>prototype</var> ] )</h1>\n      <p>The abstract operation FunctionCreate requires the arguments: <var>kind</var> which is one of (<emu-const>Normal</emu-const>, <emu-const>Method</emu-const>, <emu-const>Arrow</emu-const>), a parameter list <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>ParameterList</var>, a body <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>Body</var>, a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> specified by <var>Scope</var>, and optionally, an object <var>prototype</var>. FunctionCreate performs the following steps:</p>\n      <emu-alg><ol><li>If <var>prototype</var> is not present, then<ol><li>Set <var>prototype</var> to <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Return !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<var>prototype</var>, <var>ParameterList</var>, <var>Body</var>, <var>kind</var>, <var>Scope</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-asyncgenerator-definitions-propertydefinitionevaluation": {"num": "14.5.12", "title": "#sec-asyncgenerator-definitions-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-asyncgenerator-definitions-propertydefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-definitions-propertydefinitionevaluation\">#sec-asyncgenerator-definitions-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameter <var>object</var> and <var>enumerable</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncGeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"be384400\"><emu-t>async</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"AsyncGeneratorFunctionCreate\"><a href=\"#sec-asyncgeneratorfunctioncreate\">AsyncGeneratorFunctionCreate</a></emu-xref>(<emu-const>Method</emu-const>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <var>scope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%AsyncGenerator.prototype%).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt>.</li><li>Let <var>desc</var> be PropertyDescriptor { [[Value]]: <var>closure</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {"table-2": "Table 3", "table-27": "Table 29"}}, "to": {"secList": ["sec-addrestrictedfunctionproperties", "sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject", "sec-async-function-definitions-PropertyDefinitionEvaluation", "sec-async-arrow-function-definitions-runtime-semantics-evaluation", "sec-async-function-definitions-runtime-semantics-evaluation", "sec-method-definitions-runtime-semantics-propertydefinitionevaluation", "sec-generator-function-definitions-runtime-semantics-evaluation", "sec-async-function-definitions-InstantiateFunctionObject", "sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation", "sec-arrow-function-definitions-runtime-semantics-evaluation", "sec-asyncgenerator-definitions-instantiatefunctionobject", "sec-asyncgenerator-definitions-evaluation", "sec-ordinaryfunctioncreate", "sec-function-definitions-runtime-semantics-evaluation", "sec-runtime-semantics-definemethod", "sec-function-definitions-runtime-semantics-instantiatefunctionobject", "sec-ecmascript-function-objects", "sec-asyncgenerator-definitions-propertydefinitionevaluation"], "secData": {"sec-addrestrictedfunctionproperties": {"num": "9.2.4", "title": "#sec-addrestrictedfunctionproperties AddRestrictedFunctionProperties ( F, realm )", "html": "<emu-clause id=\"sec-addrestrictedfunctionproperties\" aoid=\"AddRestrictedFunctionProperties\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-addrestrictedfunctionproperties\">#sec-addrestrictedfunctionproperties</span> AddRestrictedFunctionProperties ( <var>F</var>, <var>realm</var> )</h1>\n      <p>The abstract operation AddRestrictedFunctionProperties is called with a <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> <var>F</var> and <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref> <var>realm</var> as its argument. It performs the following steps:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>realm</var>.[[Intrinsics]].[[<emu-xref href=\"#sec-%throwtypeerror%\"><a href=\"#sec-%throwtypeerror%\">%ThrowTypeError%</a></emu-xref>]] exists and has been initialized.</li><li>Let <var>thrower</var> be <var>realm</var>.[[Intrinsics]].[[<emu-xref href=\"#sec-%throwtypeerror%\"><a href=\"#sec-%throwtypeerror%\">%ThrowTypeError%</a></emu-xref>]].</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"caller\"</emu-val>, PropertyDescriptor { [[Get]]: <var>thrower</var>, [[Set]]: <var>thrower</var>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }).</li><li>Return !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"arguments\"</emu-val>, PropertyDescriptor { [[Get]]: <var>thrower</var>, [[Set]]: <var>thrower</var>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }).\n      </li></ol></emu-alg>\n\n      <div id=\"excluded-sec-%throwtypeerror%\"><h1><span class=\"secnum\">9.2.4.1</span>#sec-%throwtypeerror% %ThrowTypeError% ( )</h1>...</div></emu-clause>\n\n    "}, "sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject": {"num": "14.4.11", "title": "#sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject Runtime Semantics: InstantiateFunctionObject", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject\">#sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject</span> Runtime Semantics: InstantiateFunctionObject</h1>\n      <p>With parameter <var>scope</var>.</p>\n      <emu-see-also-para op=\"InstantiateFunctionObject\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"GeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7dbc99b6\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>F</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%Generator%</a></emu-xref>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>Normal</emu-const>, <var>scope</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%Generator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0d271960\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>F</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%Generator%</a></emu-xref>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>Normal</emu-const>, <var>scope</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%Generator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"default\"</emu-val>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An anonymous <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt> can only occur as part of an <code>export default</code> declaration, and its function code is therefore always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-async-function-definitions-PropertyDefinitionEvaluation": {"num": "14.7.12", "title": "#sec-async-function-definitions-PropertyDefinitionEvaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-async-function-definitions-PropertyDefinitionEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-PropertyDefinitionEvaluation\">#sec-async-function-definitions-PropertyDefinitionEvaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"759e5682\"><emu-t>async</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(%AsyncFunction.prototype%, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>Method</emu-const>, <var>scope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncMethod\">AsyncMethod</a></emu-nt>.</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>closure</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-async-arrow-function-definitions-runtime-semantics-evaluation": {"num": "14.8.17", "title": "#sec-async-arrow-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-async-arrow-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-arrow-function-definitions-runtime-semantics-evaluation\">#sec-async-arrow-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"AsyncArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7505c63a\"><emu-t>async</emu-t><emu-nt><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a></emu-nt><emu-t>=&gt;</emu-t><emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>parameters</var> be <emu-nt><a href=\"#prod-AsyncArrowBindingIdentifier\">AsyncArrowBindingIdentifier</a></emu-nt>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(%AsyncFunction.prototype%, <var>parameters</var>, <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, <emu-const>Arrow</emu-const>, <var>scope</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"694c2ff0\"><emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt><emu-t>=&gt;</emu-t><emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>head</var> be CoveredAsyncArrowHead of <emu-nt><a href=\"#prod-CoverCallExpressionAndAsyncArrowHead\">CoverCallExpressionAndAsyncArrowHead</a></emu-nt>.</li><li>Let <var>parameters</var> be the <emu-nt><a href=\"#prod-ArrowFormalParameters\">ArrowFormalParameters</a></emu-nt> of <var>head</var>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(%AsyncFunction.prototype%, <var>parameters</var>, <emu-nt><a href=\"#prod-AsyncConciseBody\">AsyncConciseBody</a></emu-nt>, <emu-const>Arrow</emu-const>, <var>scope</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncArrowFunction\">AsyncArrowFunction</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-async-function-definitions-runtime-semantics-evaluation": {"num": "14.7.14", "title": "#sec-async-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-async-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-runtime-semantics-evaluation\">#sec-async-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e2632ddf\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a076671\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a076671\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(%AsyncFunction.prototype%, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>Normal</emu-const>, <var>scope</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncFunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e2632ddf\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>funcEnv</var> be !&#160;<emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>envRec</var> be <var>funcEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform ! <var>envRec</var>.CreateImmutableBinding(<var>name</var>).</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(%AsyncFunction.prototype%, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>Normal</emu-const>, <var>funcEnv</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform ! <var>envRec</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionExpression\">AsyncFunctionExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AwaitExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AwaitExpression\">AwaitExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"ef22da1b\"><emu-t>await</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Return ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>value</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-method-definitions-runtime-semantics-propertydefinitionevaluation": {"num": "14.3.8", "title": "#sec-method-definitions-runtime-semantics-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-method-definitions-runtime-semantics-propertydefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-method-definitions-runtime-semantics-propertydefinitionevaluation\">#sec-method-definitions-runtime-semantics-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n      <emu-see-also-para op=\"PropertyDefinitionEvaluation\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"cb8e53e9\"><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>methodDef</var> be ? DefineMethod of <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt> with argument <var>object</var>.</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>methodDef</var>.[[Closure]], <var>methodDef</var>.[[Key]]).</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>methodDef</var>.[[Closure]], [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>methodDef</var>.[[Key]], <var>desc</var>).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"f1487956\"><emu-t>get</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>formalParameterList</var> be an instance of the production <emu-grammar><emu-production name=\"FormalParameters\" collapsed=\"\" class=\" inline\">\n    <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production></emu-grammar>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>formalParameterList</var>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>Method</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>, <emu-val>\"get\"</emu-val>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Get]]: <var>closure</var>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"4402354c\"><emu-t>set</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <emu-nt><a href=\"#prod-PropertySetParameterList\">PropertySetParameterList</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>Method</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>, <emu-val>\"set\"</emu-val>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Set]]: <var>closure</var>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-generator-function-definitions-runtime-semantics-evaluation": {"num": "14.4.14", "title": "#sec-generator-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-evaluation\">#sec-generator-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0d271960\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%Generator%</a></emu-xref>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>Normal</emu-const>, <var>scope</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%Generator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"GeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"7dbc99b6\"><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>envRec</var> be <var>funcEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform <var>envRec</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%Generator%</a></emu-xref>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>Normal</emu-const>, <var>funcEnv</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%Generator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform <var>envRec</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> to allow the generator code to call itself recursively. However, unlike in a <emu-nt><a href=\"#prod-GeneratorDeclaration\">GeneratorDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-GeneratorExpression\">GeneratorExpression</a></emu-nt>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>generatorKind</var> be !&#160;<emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>().</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then return ?&#160;<emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Otherwise, return ?&#160;<emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>false</emu-val>)).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e741ede8\"><emu-t>yield</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>generatorKind</var> be !&#160;<emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>().</li><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then return ?&#160;<emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(<var>value</var>).</li><li>Otherwise, return ?&#160;<emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<emu-xref aoid=\"CreateIterResultObject\"><a href=\"#sec-createiterresultobject\">CreateIterResultObject</a></emu-xref>(<var>value</var>, <emu-val>false</emu-val>)).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"YieldExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-YieldExpression\">YieldExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"47a33813\"><emu-t>yield</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>generatorKind</var> be !&#160;<emu-xref aoid=\"GetGeneratorKind\"><a href=\"#sec-getgeneratorkind\">GetGeneratorKind</a></emu-xref>().</li><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt>.</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Let <var>iteratorRecord</var> be ?&#160;<emu-xref aoid=\"GetIterator\"><a href=\"#sec-getiterator\">GetIterator</a></emu-xref>(<var>value</var>, <var>generatorKind</var>).</li><li>Let <var>iterator</var> be <var>iteratorRecord</var>.[[Iterator]].</li><li>Let <var>received</var> be <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Repeat,<ol><li>If <var>received</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Let <var>innerResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>iteratorRecord</var>.[[NextMethod]], <var>iteratorRecord</var>.[[Iterator]], &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>innerResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>Else if <var>received</var>.[[Type]] is <emu-const>throw</emu-const>, then<ol><li>Let <var>throw</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>iterator</var>, <emu-val>\"throw\"</emu-val>).</li><li>If <var>throw</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>innerResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>throw</var>, <var>iterator</var>, &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>innerResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerResult</var>).</li><li>NOTE: Exceptions from the inner iterator <code>throw</code> method are propagated. Normal completions from an inner <code>throw</code> method are processed similarly to an inner <code>next</code>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Return ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>Else,<ol><li>NOTE: If <var>iterator</var> does not have a <code>throw</code> method, this throw is going to terminate the <code>yield*</code> loop. But first we need to give <var>iterator</var> a chance to clean up.</li><li>Let <var>closeCompletion</var> be <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>normal</emu-const>, [[Value]]: <emu-const>empty</emu-const>, [[Target]]: <emu-const>empty</emu-const> }.</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, perform ?&#160;<emu-xref aoid=\"AsyncIteratorClose\"><a href=\"#sec-asynciteratorclose\">AsyncIteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>closeCompletion</var>).</li><li>Else, perform ?&#160;<emu-xref aoid=\"IteratorClose\"><a href=\"#sec-iteratorclose\">IteratorClose</a></emu-xref>(<var>iteratorRecord</var>, <var>closeCompletion</var>).</li><li>NOTE: The next step throws a <emu-val>TypeError</emu-val> to indicate that there was a <code>yield*</code> protocol violation: <var>iterator</var> does not have a <code>throw</code> method.</li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></li></ol></li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>received</var>.[[Type]] is <emu-const>return</emu-const>.</li><li>Let <var>return</var> be ?&#160;<emu-xref aoid=\"GetMethod\"><a href=\"#sec-getmethod\">GetMethod</a></emu-xref>(<var>iterator</var>, <emu-val>\"return\"</emu-val>).</li><li>If <var>return</var> is <emu-val>undefined</emu-val>, then<ol><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var>.[[Value]] to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>received</var>.[[Value]]).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>received</var>).</li></ol></li><li>Let <var>innerReturnResult</var> be ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>return</var>, <var>iterator</var>, &#171; <var>received</var>.[[Value]] &#187;).</li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>innerReturnResult</var> to ?&#160;<emu-xref aoid=\"Await\"><a href=\"#await\">Await</a></emu-xref>(<var>innerReturnResult</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>innerReturnResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ?&#160;<emu-xref aoid=\"IteratorComplete\"><a href=\"#sec-iteratorcomplete\">IteratorComplete</a></emu-xref>(<var>innerReturnResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerReturnResult</var>).</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref> { [[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>value</var>, [[Target]]: <emu-const>empty</emu-const> }.</li></ol></li><li>If <var>generatorKind</var> is <emu-const>async</emu-const>, then set <var>received</var> to <emu-xref aoid=\"AsyncGeneratorYield\"><a href=\"#sec-asyncgeneratoryield\">AsyncGeneratorYield</a></emu-xref>(? <emu-xref aoid=\"IteratorValue\"><a href=\"#sec-iteratorvalue\">IteratorValue</a></emu-xref>(<var>innerReturnResult</var>)).</li><li>Else, set <var>received</var> to <emu-xref aoid=\"GeneratorYield\"><a href=\"#sec-generatoryield\">GeneratorYield</a></emu-xref>(<var>innerReturnResult</var>).\n      </li></ol></li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-async-function-definitions-InstantiateFunctionObject": {"num": "14.7.10", "title": "#sec-async-function-definitions-InstantiateFunctionObject Runtime Semantics: InstantiateFunctionObject", "html": "<emu-clause id=\"sec-async-function-definitions-InstantiateFunctionObject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-async-function-definitions-InstantiateFunctionObject\">#sec-async-function-definitions-InstantiateFunctionObject</span> Runtime Semantics: InstantiateFunctionObject</h1>\n      <p>With parameter <var>scope</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e2632ddf\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(%AsyncFunction.prototype%, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>Normal</emu-const>, <var>scope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"AsyncFunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"6a076671\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(%AsyncFunction.prototype%, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncFunctionBody\">AsyncFunctionBody</a></emu-nt>, <emu-const>Normal</emu-const>, <var>scope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"default\"</emu-val>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncFunctionDeclaration\">AsyncFunctionDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation": {"num": "14.4.12", "title": "#sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation\">#sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameters <var>object</var> and <var>enumerable</var>.</p>\n      <emu-see-also-para op=\"PropertyDefinitionEvaluation\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"GeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c5c757ac\"><emu-t>*</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-generatorfunction-prototype-object\"><a href=\"#sec-properties-of-the-generatorfunction-prototype-object\">%Generator%</a></emu-xref>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-GeneratorBody\">GeneratorBody</a></emu-nt>, <emu-const>Method</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%Generator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-GeneratorMethod\">GeneratorMethod</a></emu-nt>.</li><li>Let <var>desc</var> be the PropertyDescriptor { [[Value]]: <var>closure</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-arrow-function-definitions-runtime-semantics-evaluation": {"num": "14.2.17", "title": "#sec-arrow-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-arrow-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-arrow-function-definitions-runtime-semantics-evaluation\">#sec-arrow-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"ArrowFunction\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"2a7a3456\"><emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt><emu-t>=&gt;</emu-t><emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>parameters</var> be CoveredFormalsList of <emu-nt><a href=\"#prod-ArrowParameters\">ArrowParameters</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <var>parameters</var>, <emu-nt><a href=\"#prod-ConciseBody\">ConciseBody</a></emu-nt>, <emu-const>Arrow</emu-const>, <var>scope</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> does not define local bindings for <code>arguments</code>, <code>super</code>, <code>this</code>, or <code>new.target</code>. Any reference to <code>arguments</code>, <code>super</code>, <code>this</code>, or <code>new.target</code> within an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> must resolve to a binding in a lexically enclosing environment. Typically this will be the Function Environment of an immediately enclosing function. Even though an <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> may contain references to <code>super</code>, the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> created in step 4 is not made into a method by performing <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>. An <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> that references <code>super</code> is always contained within a non-<emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt> and the necessary state to implement <code>super</code> is accessible via the <var>scope</var> that is captured by the <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> of the <emu-nt><a href=\"#prod-ArrowFunction\">ArrowFunction</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-asyncgenerator-definitions-instantiatefunctionobject": {"num": "14.5.11", "title": "#sec-asyncgenerator-definitions-instantiatefunctionobject Runtime Semantics: InstantiateFunctionObject", "html": "<emu-clause id=\"sec-asyncgenerator-definitions-instantiatefunctionobject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-definitions-instantiatefunctionobject\">#sec-asyncgenerator-definitions-instantiatefunctionobject</span> Runtime Semantics: InstantiateFunctionObject</h1>\n      <p>With parameter <var>scope</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncGeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"13d2cc33\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-asyncgeneratorfunction-prototype\"><a href=\"#sec-asyncgeneratorfunction-prototype\">%AsyncGenerator%</a></emu-xref>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>Normal</emu-const>, <var>scope</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%AsyncGenerator.prototype%).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncGeneratorDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c51514e0\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>F</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-asyncgeneratorfunction-prototype\"><a href=\"#sec-asyncgeneratorfunction-prototype\">%AsyncGenerator%</a></emu-xref>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>Normal</emu-const>, <var>scope</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%AsyncGenerator.prototype%).</li><li>Perform <emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"default\"</emu-val>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An anonymous <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt> can only occur as part of an <code>export default</code> declaration.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-asyncgenerator-definitions-evaluation": {"num": "14.5.14", "title": "#sec-asyncgenerator-definitions-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-asyncgenerator-definitions-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-definitions-evaluation\">#sec-asyncgenerator-definitions-evaluation</span> Runtime Semantics: Evaluation</h1>\n\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"c51514e0\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-asyncgeneratorfunction-prototype\"><a href=\"#sec-asyncgeneratorfunction-prototype\">%AsyncGenerator%</a></emu-xref>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>Normal</emu-const>, <var>scope</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%AsyncGenerator.prototype%).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n\n      <emu-grammar><emu-production name=\"AsyncGeneratorExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"13d2cc33\"><emu-t>async</emu-t><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be !&#160;<emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>envRec</var> be <var>funcEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform ! <var>envRec</var>.CreateImmutableBinding(<var>name</var>).</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-asyncgeneratorfunction-prototype\"><a href=\"#sec-asyncgeneratorfunction-prototype\">%AsyncGenerator%</a></emu-xref>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>Normal</emu-const>, <var>funcEnv</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%AsyncGenerator.prototype%).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform ! <var>envRec</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt> to allow the generator code to call itself recursively. However, unlike in an <emu-nt><a href=\"#prod-AsyncGeneratorDeclaration\">AsyncGeneratorDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in an <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-AsyncGeneratorExpression\">AsyncGeneratorExpression</a></emu-nt>.</p>\n      </div></emu-note>\n    </emu-clause>\n  "}, "sec-ordinaryfunctioncreate": {"num": "9.2.3", "title": "#sec-ordinaryfunctioncreate OrdinaryFunctionCreate ( functionPrototype, ParameterList, Body, kind, Scope )", "html": "<emu-clause id=\"sec-ordinaryfunctioncreate\" aoid=\"OrdinaryFunctionCreate\" oldids=\"sec-functionallocate,sec-functioninitialize,sec-functioncreate,sec-generatorfunctioncreate,sec-asyncgeneratorfunctioncreate,sec-async-functions-abstract-operations-async-function-create\">\n      <span id=\"sec-async-functions-abstract-operations-async-function-create\"></span><span id=\"sec-asyncgeneratorfunctioncreate\"></span><span id=\"sec-generatorfunctioncreate\"></span><span id=\"sec-functioncreate\"></span><span id=\"sec-functioninitialize\"></span><span id=\"sec-functionallocate\"></span><h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ordinaryfunctioncreate\">#sec-ordinaryfunctioncreate</span> OrdinaryFunctionCreate ( <var>functionPrototype</var>, <var>ParameterList</var>, <var>Body</var>, <var>kind</var>, <var>Scope</var> )</h1>\n      <p>The abstract operation OrdinaryFunctionCreate requires the arguments: an object <var>functionPrototype</var>, a parameter list <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>ParameterList</var>, a body <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref> specified by <var>Body</var>, <var>kind</var> which is one of (<emu-const>Normal</emu-const>, <emu-const>Method</emu-const>, <emu-const>Arrow</emu-const>), and a <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> specified by <var>Scope</var>. OrdinaryFunctionCreate performs the following steps:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>functionPrototype</var>) is Object.</li><li>Let <var>F</var> be a newly created ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> with the internal slots listed in <emu-xref href=\"#table-27\"><a href=\"#table-27\" class=\"excluded-xref\" excluded-id=\"table-27\">#table-27</a></emu-xref>.</li><li>Set <var>F</var>'s essential internal methods to the default ordinary object definitions specified in <emu-xref href=\"#sec-ordinary-object-internal-methods-and-internal-slots\"><a href=\"#sec-ordinary-object-internal-methods-and-internal-slots\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-object-internal-methods-and-internal-slots\">#sec-ordinary-object-internal-methods-and-internal-slots</a></emu-xref>.</li><li>Set <var>F</var>.[[Call]] to the definition specified in <emu-xref href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\"><a href=\"#sec-ecmascript-function-objects-call-thisargument-argumentslist\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects-call-thisargument-argumentslist\">#sec-ecmascript-function-objects-call-thisargument-argumentslist</a></emu-xref>.</li><li>Set <var>F</var>.[[Prototype]] to <var>functionPrototype</var>.</li><li>Set <var>F</var>.[[Extensible]] to <emu-val>true</emu-val>.</li><li>Set <var>F</var>.[[FormalParameters]] to <var>ParameterList</var>.</li><li>Set <var>F</var>.[[ECMAScriptCode]] to <var>Body</var>.</li><li>If the source text matching <var>Body</var> is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>, let <var>Strict</var> be <emu-val>true</emu-val>; else let <var>Strict</var> be <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Strict]] to <var>Strict</var>.</li><li>If <var>kind</var> is <emu-const>Arrow</emu-const>, set <var>F</var>.[[ThisMode]] to <emu-const>lexical</emu-const>.</li><li>Else if <var>Strict</var> is <emu-val>true</emu-val>, set <var>F</var>.[[ThisMode]] to <emu-const>strict</emu-const>.</li><li>Else, set <var>F</var>.[[ThisMode]] to <emu-const>global</emu-const>.</li><li>Set <var>F</var>.[[IsClassConstructor]] to <emu-val>false</emu-val>.</li><li>Set <var>F</var>.[[Environment]] to <var>Scope</var>.</li><li>Set <var>F</var>.[[ScriptOrModule]] to <emu-xref aoid=\"GetActiveScriptOrModule\"><a href=\"#sec-getactivescriptormodule\">GetActiveScriptOrModule</a></emu-xref>().</li><li>Set <var>F</var>.[[Realm]] to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li>Let <var>len</var> be the ExpectedArgumentCount of <var>ParameterList</var>.</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionLength\"><a href=\"#sec-setfunctionlength\">SetFunctionLength</a></emu-xref>(<var>F</var>, <var>len</var>).</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-function-definitions-runtime-semantics-evaluation": {"num": "14.1.22", "title": "#sec-function-definitions-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-function-definitions-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions-runtime-semantics-evaluation\">#sec-function-definitions-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81739a57\"><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 1</span><div class=\"note-contents\">\n        <p>An alternative semantics is provided in  <emu-xref href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\"><a href=\"#sec-block-level-function-declarations-web-legacy-compatibility-semantics\" class=\"excluded-xref\" excluded-id=\"sec-block-level-function-declarations-web-legacy-compatibility-semantics\">#sec-block-level-function-declarations-web-legacy-compatibility-semantics</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b26bacea\"><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b26bacea\"><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>Normal</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>closure</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81739a57\"><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>envRec</var> be <var>funcEnv</var>'s <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Perform <var>envRec</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>Normal</emu-const>, <var>funcEnv</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>closure</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</li><li>Perform <var>envRec</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Return <var>closure</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note 2</span><div class=\"note-contents\">\n        <p>The <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>'s <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt> to allow the function to call itself recursively. However, unlike in a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>, the <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt> in a <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>.</p>\n      </div></emu-note>\n      <emu-note><span class=\"note\">Note 3</span><div class=\"note-contents\">\n        <p>A <emu-val>\"prototype\"</emu-val> property is automatically created for every function defined using a <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> or <emu-nt><a href=\"#prod-FunctionExpression\">FunctionExpression</a></emu-nt>, to allow for the possibility that the function will be used as a <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"FunctionStatementList\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionStatementList\">FunctionStatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"37b9c04c\"><emu-gann>[empty]</emu-gann></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Return <emu-xref aoid=\"NormalCompletion\"><a href=\"#sec-normalcompletion\">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-runtime-semantics-definemethod": {"num": "14.3.7", "title": "#sec-runtime-semantics-definemethod Runtime Semantics: DefineMethod", "html": "<emu-clause id=\"sec-runtime-semantics-definemethod\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-definemethod\">#sec-runtime-semantics-definemethod</span> Runtime Semantics: DefineMethod</h1>\n      <p>With parameter <var>object</var> and optional parameter <var>functionPrototype</var>.</p>\n      <emu-grammar><emu-production name=\"MethodDefinition\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"cb8e53e9\"><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>If <var>functionPrototype</var> is present as a parameter, then<ol><li>Let <var>kind</var> be <emu-const>Normal</emu-const>.</li><li>Let <var>prototype</var> be <var>functionPrototype</var>.</li></ol></li><li>Else,<ol><li>Let <var>kind</var> be <emu-const>Method</emu-const>.</li><li>Let <var>prototype</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Let <var>closure</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<var>prototype</var>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <var>kind</var>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-MethodDefinition\">MethodDefinition</a></emu-nt>.</li><li>Return the <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">Record</a></emu-xref> { [[Key]]: <var>propKey</var>, [[Closure]]: <var>closure</var> }.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-function-definitions-runtime-semantics-instantiatefunctionobject": {"num": "14.1.20", "title": "#sec-function-definitions-runtime-semantics-instantiatefunctionobject Runtime Semantics: InstantiateFunctionObject", "html": "<emu-clause id=\"sec-function-definitions-runtime-semantics-instantiatefunctionobject\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-function-definitions-runtime-semantics-instantiatefunctionobject\">#sec-function-definitions-runtime-semantics-instantiatefunctionobject</span> Runtime Semantics: InstantiateFunctionObject</h1>\n      <p>With parameter <var>scope</var>.</p>\n      <emu-see-also-para op=\"InstantiateFunctionObject\"></emu-see-also-para>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"81739a57\"><emu-t>function</emu-t><emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>name</var> be StringValue of <emu-nt><a href=\"#prod-BindingIdentifier\">BindingIdentifier</a></emu-nt>.</li><li>Let <var>F</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>Normal</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-grammar><emu-production name=\"FunctionDeclaration\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b26bacea\"><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>F</var> be <emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>, <emu-nt><a href=\"#prod-FormalParameters\">FormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-FunctionBody\">FunctionBody</a></emu-nt>, <emu-const>Normal</emu-const>, <var>scope</var>).</li><li>Perform <emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>Perform <emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <emu-val>\"default\"</emu-val>).</li><li>Set <var>F</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt>.</li><li>Return <var>F</var>.\n      </li></ol></emu-alg>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>An anonymous <emu-nt><a href=\"#prod-FunctionDeclaration\">FunctionDeclaration</a></emu-nt> can only occur as part of an <code>export default</code> declaration, and its function code is therefore always <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref>.</p>\n      </div></emu-note>\n    </emu-clause>\n\n    "}, "sec-ecmascript-function-objects": {"num": "9.2", "title": "#sec-ecmascript-function-objects ECMAScript Function Objects", "html": "<emu-clause id=\"sec-ecmascript-function-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-ecmascript-function-objects\">#sec-ecmascript-function-objects</span> ECMAScript Function Objects</h1>\n    <p>ECMAScript function objects encapsulate parameterized ECMAScript code closed over a lexical environment and support the dynamic evaluation of that code. An ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is an ordinary object and has the same internal slots and the same internal methods as other ordinary objects. The code of an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> may be either <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> (<emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\" class=\"excluded-xref\" excluded-id=\"sec-strict-mode-code\">#sec-strict-mode-code</a></emu-xref>) or <emu-xref href=\"#non-strict-code\"><a href=\"#non-strict-code\">non-strict code</a></emu-xref>. An ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> whose code is <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> is called a  <dfn id=\"strict-function\">strict function</dfn>. One whose code is not <emu-xref href=\"#sec-strict-mode-code\"><a href=\"#sec-strict-mode-code\">strict mode code</a></emu-xref> is called a  <dfn id=\"non-strict-function\">non-strict function</dfn>.</p>\n    <p>ECMAScript function objects have the additional internal slots listed in  <emu-xref href=\"#table-27\"><a href=\"#table-27\" class=\"excluded-xref\" excluded-id=\"table-27\">#table-27</a></emu-xref>.</p>\n    <emu-table id=\"table-27\" caption=\"Internal Slots of ECMAScript Function Objects\"><figure><figcaption><span class=\"excluded-caption-num\" excluded-id=\"table-27\">#table-27</span>: Internal Slots of ECMAScript Function Objects</figcaption>\n      <table>\n        <tbody>\n        <tr>\n          <th>\n            Internal Slot\n          \n          </th>\n          <th>\n            Type\n          \n          </th>\n          <th>\n            Description\n          \n          </th>\n        </tr>\n        <tr>\n          <td>\n            [[Environment]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref>\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#sec-lexical-environments\"><a href=\"#sec-lexical-environments\">Lexical Environment</a></emu-xref> that the function was closed over. Used as the outer environment when evaluating the code of the function.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[FormalParameters]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n          \n          </td>\n          <td>\n            The root parse node of the source text that defines the function's formal parameter list.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ECMAScriptCode]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#sec-syntactic-grammar\"><a href=\"#sec-syntactic-grammar\">Parse Node</a></emu-xref>\n          \n          </td>\n          <td>\n            The root parse node of the source text that defines the function's body.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ConstructorKind]]\n          \n          </td>\n          <td>\n            <emu-const>base</emu-const> | <emu-const>derived</emu-const>\n          \n          </td>\n          <td>\n            Whether or not the function is a derived class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Realm]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>\n          \n          </td>\n          <td>\n            The <emu-xref href=\"#realm\"><a href=\"#realm\">realm</a></emu-xref> in which the function was created and which provides any intrinsic objects that are accessed when evaluating the function.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ScriptOrModule]]\n          \n          </td>\n          <td>\n            <emu-xref href=\"#script-record\"><a href=\"#script-record\">Script Record</a></emu-xref> or <emu-xref href=\"#sec-abstract-module-records\"><a href=\"#sec-abstract-module-records\">Module Record</a></emu-xref>\n          \n          </td>\n          <td>\n            The script or module in which the function was created.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[ThisMode]]\n          \n          </td>\n          <td>\n            <emu-const>lexical</emu-const> | <emu-const>strict</emu-const> | <emu-const>global</emu-const>\n          \n          </td>\n          <td>\n            Defines how <code>this</code> references are interpreted within the formal parameters and code body of the function. <emu-const>lexical</emu-const> means that <code>this</code> refers to the <emu-val>this</emu-val> value of a lexically enclosing function. <emu-const>strict</emu-const> means that the <emu-val>this</emu-val> value is used exactly as provided by an invocation of the function. <emu-const>global</emu-const> means that a <emu-val>this</emu-val> value of <emu-val>undefined</emu-val> is interpreted as a reference to the <emu-xref href=\"#sec-global-object\"><a href=\"#sec-global-object\">global object</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[Strict]]\n          \n          </td>\n          <td>\n            Boolean\n          \n          </td>\n          <td>\n            <emu-val>true</emu-val> if this is a <emu-xref href=\"#strict-function\"><a href=\"#strict-function\">strict function</a></emu-xref>, <emu-val>false</emu-val> if this is a <emu-xref href=\"#non-strict-function\"><a href=\"#non-strict-function\">non-strict function</a></emu-xref>.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[HomeObject]]\n          \n          </td>\n          <td>\n            Object\n          \n          </td>\n          <td>\n            If the function uses <code>super</code>, this is the object whose [[GetPrototypeOf]] provides the object where <code>super</code> property lookups begin.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[SourceText]]\n          \n          </td>\n          <td>\n            String\n          \n          </td>\n          <td>\n            The  <emu-xref href=\"#sec-source-text\"><a href=\"#sec-source-text\">source text</a></emu-xref> that defines the function.\n          \n          </td>\n        </tr>\n        <tr>\n          <td>\n            [[IsClassConstructor]]\n          \n          </td>\n          <td>\n            Boolean\n          \n          </td>\n          <td>\n            Indicates whether the function is a class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>. (If <emu-val>true</emu-val>, invoking the function's [[Call]] will immediately throw a <emu-val>TypeError</emu-val> exception.)\n          \n          </td>\n        </tr>\n        </tbody>\n      </table>\n    </figure></emu-table>\n    <p>All ECMAScript function objects have the [[Call]] internal method defined here. ECMAScript functions that are also constructors in addition have the [[Construct]] internal method.</p>\n\n    <div id=\"excluded-sec-ecmascript-function-objects-call-thisargument-argumentslist\"><h1><span class=\"secnum\">9.2.1</span>#sec-ecmascript-function-objects-call-thisargument-argumentslist [[Call]] ( thisArgument, argumentsList )</h1>...</div><div id=\"excluded-sec-ecmascript-function-objects-construct-argumentslist-newtarget\"><h1><span class=\"secnum\">9.2.2</span>#sec-ecmascript-function-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )</h1>...</div><div id=\"excluded-sec-ordinaryfunctioncreate\"><h1><span class=\"secnum\">9.2.3</span>#sec-ordinaryfunctioncreate OrdinaryFunctionCreate ( functionPrototype, ParameterList, Body, kind, Scope )</h1>...</div><div id=\"excluded-sec-addrestrictedfunctionproperties\"><h1><span class=\"secnum\">9.2.4</span>#sec-addrestrictedfunctionproperties AddRestrictedFunctionProperties ( F, realm )</h1>...</div><div id=\"excluded-sec-makeconstructor\"><h1><span class=\"secnum\">9.2.5</span>#sec-makeconstructor MakeConstructor ( F [ , writablePrototype [ , prototype ] ] )</h1>...</div><div id=\"excluded-sec-makeclassconstructor\"><h1><span class=\"secnum\">9.2.6</span>#sec-makeclassconstructor MakeClassConstructor ( F )</h1>...</div><div id=\"excluded-sec-makemethod\"><h1><span class=\"secnum\">9.2.7</span>#sec-makemethod MakeMethod ( F, homeObject )</h1>...</div><div id=\"excluded-sec-setfunctionname\"><h1><span class=\"secnum\">9.2.8</span>#sec-setfunctionname SetFunctionName ( F, name [ , prefix ] )</h1>...</div><div id=\"excluded-sec-setfunctionlength\"><h1><span class=\"secnum\">9.2.9</span>#sec-setfunctionlength SetFunctionLength ( F, length )</h1>...</div><div id=\"excluded-sec-functiondeclarationinstantiation\"><h1><span class=\"secnum\">9.2.10</span>#sec-functiondeclarationinstantiation FunctionDeclarationInstantiation ( func, argumentsList )</h1>...</div></emu-clause>\n\n  "}, "sec-asyncgenerator-definitions-propertydefinitionevaluation": {"num": "14.5.12", "title": "#sec-asyncgenerator-definitions-propertydefinitionevaluation Runtime Semantics: PropertyDefinitionEvaluation", "html": "<emu-clause id=\"sec-asyncgenerator-definitions-propertydefinitionevaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-asyncgenerator-definitions-propertydefinitionevaluation\">#sec-asyncgenerator-definitions-propertydefinitionevaluation</span> Runtime Semantics: PropertyDefinitionEvaluation</h1>\n      <p>With parameter <var>object</var> and <var>enumerable</var>.</p>\n      <emu-grammar><emu-production name=\"AsyncGeneratorMethod\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"be384400\"><emu-t>async</emu-t><emu-t>*</emu-t><emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href=\"#prod-PropertyName\">PropertyName</a></emu-nt>.</li><li><emu-xref aoid=\"ReturnIfAbrupt\"><a href=\"#sec-returnifabrupt\">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>scope</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>closure</var> be !&#160;<emu-xref aoid=\"OrdinaryFunctionCreate\"><a href=\"#sec-ordinaryfunctioncreate\">OrdinaryFunctionCreate</a></emu-xref>(<emu-xref href=\"#sec-asyncgeneratorfunction-prototype\"><a href=\"#sec-asyncgeneratorfunction-prototype\">%AsyncGenerator%</a></emu-xref>, <emu-nt><a href=\"#prod-UniqueFormalParameters\">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href=\"#prod-AsyncGeneratorBody\">AsyncGeneratorBody</a></emu-nt>, <emu-const>Method</emu-const>, <var>scope</var>).</li><li>Perform !&#160;<emu-xref aoid=\"MakeMethod\"><a href=\"#sec-makemethod\">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Let <var>prototype</var> be !&#160;<emu-xref aoid=\"ObjectCreate\"><a href=\"#sec-objectcreate\">ObjectCreate</a></emu-xref>(%AsyncGenerator.prototype%).</li><li>Perform !&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <emu-val>\"prototype\"</emu-val>, PropertyDescriptor { [[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Set <var>closure</var>.[[SourceText]] to the source text matched by <emu-nt><a href=\"#prod-AsyncGeneratorMethod\">AsyncGeneratorMethod</a></emu-nt>.</li><li>Let <var>desc</var> be PropertyDescriptor { [[Value]]: <var>closure</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val> }.</li><li>Return ?&#160;<emu-xref aoid=\"DefinePropertyOrThrow\"><a href=\"#sec-definepropertyorthrow\">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}}, "figData": {"table-2": "Table 3", "table-27": "Table 29"}}}