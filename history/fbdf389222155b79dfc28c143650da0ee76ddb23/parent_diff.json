{"from": {"secList": ["sec-create-data-property-on-object-functions", "sec-runtime-semantics-classdefinitionevaluation", "sec-createbuiltinfunction", "sec-built-in-function-objects", "sec-object.fromentries"], "secData": {"sec-create-data-property-on-object-functions": {"num": "20.1.2.7.1", "title": "#sec-create-data-property-on-object-functions CreateDataPropertyOnObject Functions", "html": "<emu-clause id=\"sec-create-data-property-on-object-functions\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-create-data-property-on-object-functions\">#sec-create-data-property-on-object-functions</span> CreateDataPropertyOnObject Functions</h1>\n          <p>A CreateDataPropertyOnObject function is an anonymous built-in function. When a CreateDataPropertyOnObject function is called with arguments <var>key</var> and <var>value</var>, the following steps are taken:</p>\n          <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>O</var>) is Object.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>O</var> is an extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref>.</li><li>Let <var>propertyKey</var> be ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>key</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>O</var>, <var>propertyKey</var>, <var>value</var>).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></emu-alg>\n        </emu-clause>\n      "}, "sec-runtime-semantics-classdefinitionevaluation": {"num": "15.7.12", "title": "#sec-runtime-semantics-classdefinitionevaluation Runtime Semantics: ClassDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-classdefinitionevaluation\" type=\"sdo\" aoid=\"ClassDefinitionEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-classdefinitionevaluation\">#sec-runtime-semantics-classdefinitionevaluation</span> Runtime Semantics: ClassDefinitionEvaluation</h1>\n      <p>With parameters <var>classBinding</var> and <var>className</var>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>For ease of specification, private methods and accessors are included alongside private fields in the [[PrivateElements]] slot of class instances. However, any given object has either all or none of the private methods and accessors defined by a given class. This feature has been designed so that implementations may choose to implement private methods and accessors using a strategy which does not require tracking each method or accessor individually.</p>\n        <p>For example, an implementation could directly associate instance private methods with their corresponding <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> and track, for each object, which class constructors have run with that object as their <code>this</code> value. Looking up an instance private method on an object then consists of checking that the class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> which defines the method has been used to initialize the object, then returning the method associated with the <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>.</p>\n        <p>This differs from private fields: because field initializers can throw during class instantiation, an individual object may have some proper subset of the private fields of a given class, and so private fields must in general be tracked individually.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ClassTail\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uopqpdqx\" id=\"prod-AcPtObVs\">\n        <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>env</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>classScope</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>env</var>).</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScope</var>.CreateImmutableBinding(<var>classBinding</var>, <emu-val>true</emu-val>).</li></ol></li><li>Let <var>outerPrivateEnvironment</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>classPrivateEnvironment</var> be <emu-xref aoid=\"NewPrivateEnvironment\"><a href=\"#sec-newprivateenvironment\">NewPrivateEnvironment</a></emu-xref>(<var>outerPrivateEnvironment</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, then<ol><li>For each String <var>dn</var> of the <emu-xref aoid=\"PrivateBoundIdentifiers\"><a href=\"#sec-static-semantics-privateboundidentifiers\">PrivateBoundIdentifiers</a></emu-xref> of <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>, do<ol><li>If <var>classPrivateEnvironment</var>.[[Names]] contains a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> whose [[Description]] is <var>dn</var>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This is only possible for getter/setter pairs.</li></ol></li><li>Else,<ol><li>Let <var>name</var> be a new <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> whose [[Description]] value is <var>dn</var>.</li><li>Append <var>name</var> to <var>classPrivateEnvironment</var>.[[Names]].</li></ol></li></ol></li></ol></li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, then<ol><li>Let <var>protoParent</var> be <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else,<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>NOTE: The <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment is <var>outerPrivateEnvironment</var> when evaluating <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt>.</li><li>Let <var>superclassRef</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>Let <var>superclass</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>superclassRef</var>).</li><li>If <var>superclass</var> is <emu-val>null</emu-val>, then<ol><li>Let <var>protoParent</var> be <emu-val>null</emu-val>.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else if <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>superclass</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Else,<ol><li>Let <var>protoParent</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>superclass</var>, <emu-val>\"prototype\"</emu-val>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>protoParent</var>) is neither Object nor Null, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorParent</var> be <var>superclass</var>.</li></ol></li></ol></li><li>Let <var>proto</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>protoParent</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>constructor</var> be <emu-const>empty</emu-const>.</li><li>Else, let <var>constructor</var> be <emu-xref aoid=\"ConstructorMethod\"><a href=\"#sec-static-semantics-constructormethod\">ConstructorMethod</a></emu-xref> of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>classPrivateEnvironment</var>.</li><li>If <var>constructor</var> is <emu-const>empty</emu-const>, then<ol><li>Let <var>steps</var> be the algorithm steps defined in <emu-xref href=\"#sec-default-constructor-functions\" title=\"\"><a href=\"#sec-default-constructor-functions\">Default Constructor Functions</a></emu-xref>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>steps</var>, 0, <var>className</var>, &#171; [[ConstructorKind]], [[SourceText]] &#187;, <emu-const>empty</emu-const>, <var>constructorParent</var>).</li></ol></li><li>Else,<ol><li>Let <var>constructorInfo</var> be ! <emu-xref aoid=\"DefineMethod\"><a href=\"#sec-runtime-semantics-definemethod\">DefineMethod</a></emu-xref> of <var>constructor</var> with arguments <var>proto</var> and <var>constructorParent</var>.</li><li>Let <var>F</var> be <var>constructorInfo</var>.[[Closure]].</li><li>Perform !&#160;<emu-xref aoid=\"MakeClassConstructor\"><a href=\"#sec-makeclassconstructor\">MakeClassConstructor</a></emu-xref>(<var>F</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>className</var>).</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>, <emu-val>false</emu-val>, <var>proto</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, set <var>F</var>.[[ConstructorKind]] to <emu-const>derived</emu-const>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateMethodProperty\"><a href=\"#sec-createmethodproperty\">CreateMethodProperty</a></emu-xref>(<var>proto</var>, <emu-val>\"constructor\"</emu-val>, <var>F</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>elements</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Else, let <var>elements</var> be <emu-xref aoid=\"NonConstructorElements\"><a href=\"#sec-static-semantics-nonconstructorelements\">NonConstructorElements</a></emu-xref> of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>Let <var>instancePrivateMethods</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>staticPrivateMethods</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>instanceFields</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>staticFields</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <var>e</var> of <var>elements</var>, do<ol><li>If <emu-xref aoid=\"IsStatic\"><a href=\"#sec-static-semantics-isstatic\">IsStatic</a></emu-xref> of <var>e</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>field</var> be <emu-xref aoid=\"ClassElementEvaluation\"><a href=\"#sec-static-semantics-classelementevaluation\">ClassElementEvaluation</a></emu-xref> of <var>e</var> with arguments <var>proto</var> and <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>field</var> be <emu-xref aoid=\"ClassElementEvaluation\"><a href=\"#sec-static-semantics-classelementevaluation\">ClassElementEvaluation</a></emu-xref> of <var>e</var> with arguments <var>F</var> and <emu-val>false</emu-val>.</li></ol></li><li>If <var>field</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>outerPrivateEnvironment</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>field</var>).</li></ol></li><li>Set <var>field</var> to <var>field</var>.[[Value]].</li><li>If <var>field</var> is a <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>field</var>.[[Kind]] is either <emu-const>method</emu-const> or <emu-const>accessor</emu-const>.</li><li>If <emu-xref aoid=\"IsStatic\"><a href=\"#sec-static-semantics-isstatic\">IsStatic</a></emu-xref> of <var>e</var> is <emu-val>false</emu-val>, let <var>container</var> be <var>instancePrivateMethods</var>.</li><li>Else, let <var>container</var> be <var>staticPrivateMethods</var>.</li><li>If <var>container</var> contains a <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> whose [[Key]] is <var>field</var>.[[Key]], then<ol><li>Let <var>existing</var> be that <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>field</var>.[[Kind]] and <var>existing</var>.[[Kind]] are both <emu-const>accessor</emu-const>.</li><li>If <var>field</var>.[[Get]] is <emu-val>undefined</emu-val>, then<ol><li>Let <var>combined</var> be <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>field</var>.[[Key]], [[Kind]]: <emu-const>accessor</emu-const>, [[Get]]: <var>existing</var>.[[Get]], [[Set]]: <var>field</var>.[[Set]] }.</li></ol></li><li>Else,<ol><li>Let <var>combined</var> be <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>field</var>.[[Key]], [[Kind]]: <emu-const>accessor</emu-const>, [[Get]]: <var>field</var>.[[Get]], [[Set]]: <var>existing</var>.[[Set]] }.</li></ol></li><li>Replace <var>existing</var> in <var>container</var> with <var>combined</var>.</li></ol></li><li>Else,<ol><li>Append <var>field</var> to <var>container</var>.</li></ol></li></ol></li><li>Else if <var>field</var> is a <emu-xref href=\"#sec-classfielddefinition-record-specification-type\"><a href=\"#sec-classfielddefinition-record-specification-type\">ClassFieldDefinition Record</a></emu-xref>, then<ol><li>If <emu-xref aoid=\"IsStatic\"><a href=\"#sec-static-semantics-isstatic\">IsStatic</a></emu-xref> of <var>e</var> is <emu-val>false</emu-val>, append <var>field</var> to <var>instanceFields</var>.</li><li>Else, append <var>field</var> to <var>staticFields</var>.</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScope</var>.InitializeBinding(<var>classBinding</var>, <var>F</var>).</li></ol></li><li>Set <var>F</var>.[[PrivateMethods]] to <var>instancePrivateMethods</var>.</li><li>Set <var>F</var>.[[Fields]] to <var>instanceFields</var>.</li><li>For each <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> <var>method</var> of <var>staticPrivateMethods</var>, do<ol><li>Perform !&#160;<emu-xref aoid=\"PrivateMethodOrAccessorAdd\"><a href=\"#sec-privatemethodoraccessoradd\">PrivateMethodOrAccessorAdd</a></emu-xref>(<var>method</var>, <var>F</var>).</li></ol></li><li>For each element <var>fieldRecord</var> of <var>staticFields</var>, do<ol><li>Let <var>result</var> be <emu-xref aoid=\"DefineField\"><a href=\"#sec-definefield\">DefineField</a></emu-xref>(<var>F</var>, <var>fieldRecord</var>).</li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>outerPrivateEnvironment</var>.</li><li>Return <var>result</var>.</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>outerPrivateEnvironment</var>.</li><li>Return <var>F</var>.</li></ol></emu-alg>\n\n      <div id=\"excluded-sec-default-constructor-functions\"><h1><span class=\"secnum\">15.7.12.1</span>#sec-default-constructor-functions Default Constructor Functions</h1>...</div></emu-clause>\n\n    "}, "sec-createbuiltinfunction": {"num": "10.3.3", "title": "#sec-createbuiltinfunction CreateBuiltinFunction ( steps, length, name, internalSlotsList [ , realm [ , prototype [ , prefix ] ] ] )", "html": "<emu-clause id=\"sec-createbuiltinfunction\" aoid=\"CreateBuiltinFunction\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createbuiltinfunction\">#sec-createbuiltinfunction</span> CreateBuiltinFunction ( <var>steps</var>, <var>length</var>, <var>name</var>, <var>internalSlotsList</var> [ , <var>realm</var> [ , <var>prototype</var> [ , <var>prefix</var> ] ] ] )</h1>\n      <p>The abstract operation CreateBuiltinFunction takes arguments <var>steps</var>, <var>length</var>, <var>name</var>, and <var>internalSlotsList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of names of internal slots) and optional arguments <var>realm</var>, <var>prototype</var>, and <var>prefix</var>. <var>internalSlotsList</var> contains the names of additional internal slots that must be defined as part of the object. This operation creates a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>steps</var> is either a set of algorithm steps or other definition of a function's behaviour provided in this specification.</li><li>If <var>realm</var> is not present or <var>realm</var> is <emu-const>empty</emu-const>, set <var>realm</var> to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>realm</var> is a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>.</li><li>If <var>prototype</var> is not present, set <var>prototype</var> to <var>realm</var>.[[Intrinsics]].[[<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>]].</li><li>Let <var>func</var> be a new built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> that when called performs the action described by <var>steps</var>. The new <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has internal slots whose names are the elements of <var>internalSlotsList</var>, and an [[InitialName]] internal slot.</li><li>Set <var>func</var>.[[Realm]] to <var>realm</var>.</li><li>Set <var>func</var>.[[Prototype]] to <var>prototype</var>.</li><li>Set <var>func</var>.[[Extensible]] to <emu-val>true</emu-val>.</li><li>Set <var>func</var>.[[InitialName]] to <emu-val>null</emu-val>.</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionLength\"><a href=\"#sec-setfunctionlength\">SetFunctionLength</a></emu-xref>(<var>func</var>, <var>length</var>).</li><li>If <var>prefix</var> is not present, then<ol><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>func</var>, <var>name</var>).</li></ol></li><li>Else,<ol><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>func</var>, <var>name</var>, <var>prefix</var>).</li></ol></li><li>Return <var>func</var>.</li></ol></emu-alg>\n      <p>Each built-in function defined in this specification is created by calling the CreateBuiltinFunction abstract operation.</p>\n    </emu-clause>\n  "}, "sec-built-in-function-objects": {"num": "10.3", "title": "#sec-built-in-function-objects Built-in Function Objects", "html": "<emu-clause id=\"sec-built-in-function-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-built-in-function-objects\">#sec-built-in-function-objects</span> Built-in Function Objects</h1>\n    <p>The built-in function objects defined in this specification may be implemented as either ECMAScript function objects (<emu-xref href=\"#sec-ecmascript-function-objects\"><a href=\"#sec-ecmascript-function-objects\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects\">#sec-ecmascript-function-objects</a></emu-xref>) whose behaviour is provided using ECMAScript code or as implementation provided function exotic objects whose behaviour is provided in some other manner. In either case, the effect of calling such functions must conform to their specifications. An implementation may also provide additional built-in function objects that are not defined in this specification.</p>\n    <p>If a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is implemented as an <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> it must have the <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> behaviour specified in <emu-xref href=\"#sec-ordinary-object-internal-methods-and-internal-slots\"><a href=\"#sec-ordinary-object-internal-methods-and-internal-slots\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-object-internal-methods-and-internal-slots\">#sec-ordinary-object-internal-methods-and-internal-slots</a></emu-xref>. All such function exotic objects also have [[Prototype]], [[Extensible]], and [[Realm]] internal slots.</p>\n    <p>Unless otherwise specified every built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has the <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref> object as the initial value of its [[Prototype]] internal slot.</p>\n    <p>The behaviour specified for each built-in function via algorithm steps or other means is the specification of the function body behaviour for both [[Call]] and [[Construct]] invocations of the function. However, [[Construct]] invocation is not supported by all built-in functions. For each built-in function, when invoked with [[Call]], the [[Call]] <var>thisArgument</var> provides the <emu-val>this</emu-val> value, the [[Call]] <var>argumentsList</var> provides the named parameters, and the NewTarget value is <emu-val>undefined</emu-val>. When invoked with [[Construct]], the <emu-val>this</emu-val> value is uninitialized, the [[Construct]] <var>argumentsList</var> provides the named parameters, and the [[Construct]] <var>newTarget</var> parameter provides the NewTarget value. If the built-in function is implemented as an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> then this specified behaviour must be implemented by the ECMAScript code that is the body of the function. Built-in functions that are ECMAScript function objects must be strict functions. If a built-in <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> has any [[Call]] behaviour other than throwing a <emu-val>TypeError</emu-val> exception, an ECMAScript implementation of the function must be done in a manner that does not cause the function's [[IsClassConstructor]] internal slot to have the value <emu-val>true</emu-val>.</p>\n    <p>Built-in function objects that are not identified as constructors do not implement the [[Construct]] internal method unless otherwise specified in the description of a particular function. When a built-in <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is called as part of a <code>new</code> expression the <var>argumentsList</var> parameter of the invoked [[Construct]] internal method provides the values for the built-in <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>'s named parameters.</p>\n    <p>Built-in functions that are not constructors do not have a <emu-val>\"prototype\"</emu-val> property unless otherwise specified in the description of a particular function.</p>\n    <p>Built-in functions have an [[InitialName]] internal slot.</p>\n    <p>If a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is not implemented as an ECMAScript function it must provide [[Call]] and [[Construct]] internal methods that conform to the following definitions:</p>\n\n    <div id=\"excluded-sec-built-in-function-objects-call-thisargument-argumentslist\"><h1><span class=\"secnum\">10.3.1</span>#sec-built-in-function-objects-call-thisargument-argumentslist [[Call]] ( thisArgument, argumentsList )</h1>...</div><div id=\"excluded-sec-built-in-function-objects-construct-argumentslist-newtarget\"><h1><span class=\"secnum\">10.3.2</span>#sec-built-in-function-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )</h1>...</div><div id=\"excluded-sec-createbuiltinfunction\"><h1><span class=\"secnum\">10.3.3</span>#sec-createbuiltinfunction CreateBuiltinFunction ( steps, length, name, internalSlotsList [ , realm [ , prototype [ , prefix ] ] ] )</h1>...</div></emu-clause>\n\n  "}, "sec-object.fromentries": {"num": "20.1.2.7", "title": "#sec-object.fromentries Object.fromEntries ( iterable )", "html": "<emu-clause id=\"sec-object.fromentries\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.fromentries\">#sec-object.fromentries</span> Object.fromEntries ( <var>iterable</var> )</h1>\n        <p>When the <code>fromEntries</code> method is called with argument <var>iterable</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Perform ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<var>iterable</var>).</li><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>obj</var> is an extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties.</li><li>Let <var>stepsDefine</var> be the algorithm steps defined in <emu-xref href=\"#sec-create-data-property-on-object-functions\" title=\"\"><a href=\"#sec-create-data-property-on-object-functions\">CreateDataPropertyOnObject Functions</a></emu-xref>.</li><li>Let <var>lengthDefine</var> be the number of non-optional parameters of the function definition in <emu-xref href=\"#sec-create-data-property-on-object-functions\" title=\"\"><a href=\"#sec-create-data-property-on-object-functions\">CreateDataPropertyOnObject Functions</a></emu-xref>.</li><li>Let <var>adder</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>stepsDefine</var>, <var>lengthDefine</var>, <emu-val>\"\"</emu-val>, &#171; &#187;).</li><li>Return ?&#160;<emu-xref aoid=\"AddEntriesFromIterable\"><a href=\"#sec-add-entries-from-iterable\">AddEntriesFromIterable</a></emu-xref>(<var>obj</var>, <var>iterable</var>, <var>adder</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          The function created for <var>adder</var> is never directly accessible to ECMAScript code.\n        </div></emu-note>\n\n        <div id=\"excluded-sec-create-data-property-on-object-functions\"><h1><span class=\"secnum\">20.1.2.7.1</span>#sec-create-data-property-on-object-functions CreateDataPropertyOnObject Functions</h1>...</div></emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-runtime-semantics-classdefinitionevaluation", "sec-createbuiltinfunction", "sec-built-in-function-objects", "sec-object.fromentries"], "secData": {"sec-runtime-semantics-classdefinitionevaluation": {"num": "15.7.12", "title": "#sec-runtime-semantics-classdefinitionevaluation Runtime Semantics: ClassDefinitionEvaluation", "html": "<emu-clause id=\"sec-runtime-semantics-classdefinitionevaluation\" type=\"sdo\" aoid=\"ClassDefinitionEvaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-runtime-semantics-classdefinitionevaluation\">#sec-runtime-semantics-classdefinitionevaluation</span> Runtime Semantics: ClassDefinitionEvaluation</h1>\n      <p>With parameters <var>classBinding</var> and <var>className</var>.</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>For ease of specification, private methods and accessors are included alongside private fields in the [[PrivateElements]] slot of class instances. However, any given object has either all or none of the private methods and accessors defined by a given class. This feature has been designed so that implementations may choose to implement private methods and accessors using a strategy which does not require tracking each method or accessor individually.</p>\n        <p>For example, an implementation could directly associate instance private methods with their corresponding <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> and track, for each object, which class constructors have run with that object as their <code>this</code> value. Looking up an instance private method on an object then consists of checking that the class <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> which defines the method has been used to initialize the object, then returning the method associated with the <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref>.</p>\n        <p>This differs from private fields: because field initializers can throw during class instantiation, an individual object may have some proper subset of the private fields of a given class, and so private fields must in general be tracked individually.</p>\n      </div></emu-note>\n      <emu-grammar><emu-production name=\"ClassTail\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-ClassTail\">ClassTail</a></emu-nt> <emu-geq>:</emu-geq> <emu-rhs a=\"uopqpdqx\" id=\"prod-AcPtObVs\">\n        <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>{</emu-t>\n        <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>\n        <emu-t>}</emu-t>\n    </emu-rhs>\n</emu-production>\n</emu-grammar>\n      <emu-alg><ol><li>Let <var>env</var> be the LexicalEnvironment of the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>.</li><li>Let <var>classScope</var> be <emu-xref aoid=\"NewDeclarativeEnvironment\"><a href=\"#sec-newdeclarativeenvironment\">NewDeclarativeEnvironment</a></emu-xref>(<var>env</var>).</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScope</var>.CreateImmutableBinding(<var>classBinding</var>, <emu-val>true</emu-val>).</li></ol></li><li>Let <var>outerPrivateEnvironment</var> be the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment.</li><li>Let <var>classPrivateEnvironment</var> be <emu-xref aoid=\"NewPrivateEnvironment\"><a href=\"#sec-newprivateenvironment\">NewPrivateEnvironment</a></emu-xref>(<var>outerPrivateEnvironment</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, then<ol><li>For each String <var>dn</var> of the <emu-xref aoid=\"PrivateBoundIdentifiers\"><a href=\"#sec-static-semantics-privateboundidentifiers\">PrivateBoundIdentifiers</a></emu-xref> of <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt>, do<ol><li>If <var>classPrivateEnvironment</var>.[[Names]] contains a <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> whose [[Description]] is <var>dn</var>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: This is only possible for getter/setter pairs.</li></ol></li><li>Else,<ol><li>Let <var>name</var> be a new <emu-xref href=\"#sec-private-names\"><a href=\"#sec-private-names\">Private Name</a></emu-xref> whose [[Description]] value is <var>dn</var>.</li><li>Append <var>name</var> to <var>classPrivateEnvironment</var>.[[Names]].</li></ol></li></ol></li></ol></li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, then<ol><li>Let <var>protoParent</var> be <emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else,<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>NOTE: The <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment is <var>outerPrivateEnvironment</var> when evaluating <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt>.</li><li>Let <var>superclassRef</var> be the result of evaluating <emu-nt><a href=\"#prod-ClassHeritage\">ClassHeritage</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>Let <var>superclass</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>superclassRef</var>).</li><li>If <var>superclass</var> is <emu-val>null</emu-val>, then<ol><li>Let <var>protoParent</var> be <emu-val>null</emu-val>.</li><li>Let <var>constructorParent</var> be <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>.</li></ol></li><li>Else if <emu-xref aoid=\"IsConstructor\"><a href=\"#sec-isconstructor\">IsConstructor</a></emu-xref>(<var>superclass</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Else,<ol><li>Let <var>protoParent</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>superclass</var>, <emu-val>\"prototype\"</emu-val>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>protoParent</var>) is neither Object nor Null, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorParent</var> be <var>superclass</var>.</li></ol></li></ol></li><li>Let <var>proto</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<var>protoParent</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>constructor</var> be <emu-const>empty</emu-const>.</li><li>Else, let <var>constructor</var> be <emu-xref aoid=\"ConstructorMethod\"><a href=\"#sec-static-semantics-constructormethod\">ConstructorMethod</a></emu-xref> of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>classPrivateEnvironment</var>.</li><li>If <var>constructor</var> is <emu-const>empty</emu-const>, then<ol><li>Let <var>steps</var> be the algorithm steps defined in <emu-xref href=\"#sec-default-constructor-functions\" title=\"\"><a href=\"#sec-default-constructor-functions\">Default Constructor Functions</a></emu-xref>.</li><li>Let <var>F</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>steps</var>, 0, <var>className</var>, &#171; [[ConstructorKind]], [[SourceText]] &#187;, <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>, <var>constructorParent</var>).</li></ol></li><li>Else,<ol><li>Let <var>constructorInfo</var> be ! <emu-xref aoid=\"DefineMethod\"><a href=\"#sec-runtime-semantics-definemethod\">DefineMethod</a></emu-xref> of <var>constructor</var> with arguments <var>proto</var> and <var>constructorParent</var>.</li><li>Let <var>F</var> be <var>constructorInfo</var>.[[Closure]].</li><li>Perform !&#160;<emu-xref aoid=\"MakeClassConstructor\"><a href=\"#sec-makeclassconstructor\">MakeClassConstructor</a></emu-xref>(<var>F</var>).</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>F</var>, <var>className</var>).</li></ol></li><li>Perform !&#160;<emu-xref aoid=\"MakeConstructor\"><a href=\"#sec-makeconstructor\">MakeConstructor</a></emu-xref>(<var>F</var>, <emu-val>false</emu-val>, <var>proto</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassHeritage\">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present, set <var>F</var>.[[ConstructorKind]] to <emu-const>derived</emu-const>.</li><li>Perform !&#160;<emu-xref aoid=\"CreateMethodProperty\"><a href=\"#sec-createmethodproperty\">CreateMethodProperty</a></emu-xref>(<var>proto</var>, <emu-val>\"constructor\"</emu-val>, <var>F</var>).</li><li>If <emu-nt optional=\"\"><a href=\"#prod-ClassBody\">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>elements</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Else, let <var>elements</var> be <emu-xref aoid=\"NonConstructorElements\"><a href=\"#sec-static-semantics-nonconstructorelements\">NonConstructorElements</a></emu-xref> of <emu-nt><a href=\"#prod-ClassBody\">ClassBody</a></emu-nt>.</li><li>Let <var>instancePrivateMethods</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>staticPrivateMethods</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>instanceFields</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>Let <var>staticFields</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each <emu-nt><a href=\"#prod-ClassElement\">ClassElement</a></emu-nt> <var>e</var> of <var>elements</var>, do<ol><li>If <emu-xref aoid=\"IsStatic\"><a href=\"#sec-static-semantics-isstatic\">IsStatic</a></emu-xref> of <var>e</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>field</var> be <emu-xref aoid=\"ClassElementEvaluation\"><a href=\"#sec-static-semantics-classelementevaluation\">ClassElementEvaluation</a></emu-xref> of <var>e</var> with arguments <var>proto</var> and <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>field</var> be <emu-xref aoid=\"ClassElementEvaluation\"><a href=\"#sec-static-semantics-classelementevaluation\">ClassElementEvaluation</a></emu-xref> of <var>e</var> with arguments <var>F</var> and <emu-val>false</emu-val>.</li></ol></li><li>If <var>field</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>outerPrivateEnvironment</var>.</li><li>Return <emu-xref aoid=\"Completion\"><a href=\"#sec-completion-record-specification-type\">Completion</a></emu-xref>(<var>field</var>).</li></ol></li><li>Set <var>field</var> to <var>field</var>.[[Value]].</li><li>If <var>field</var> is a <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>field</var>.[[Kind]] is either <emu-const>method</emu-const> or <emu-const>accessor</emu-const>.</li><li>If <emu-xref aoid=\"IsStatic\"><a href=\"#sec-static-semantics-isstatic\">IsStatic</a></emu-xref> of <var>e</var> is <emu-val>false</emu-val>, let <var>container</var> be <var>instancePrivateMethods</var>.</li><li>Else, let <var>container</var> be <var>staticPrivateMethods</var>.</li><li>If <var>container</var> contains a <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> whose [[Key]] is <var>field</var>.[[Key]], then<ol><li>Let <var>existing</var> be that <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>field</var>.[[Kind]] and <var>existing</var>.[[Kind]] are both <emu-const>accessor</emu-const>.</li><li>If <var>field</var>.[[Get]] is <emu-val>undefined</emu-val>, then<ol><li>Let <var>combined</var> be <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>field</var>.[[Key]], [[Kind]]: <emu-const>accessor</emu-const>, [[Get]]: <var>existing</var>.[[Get]], [[Set]]: <var>field</var>.[[Set]] }.</li></ol></li><li>Else,<ol><li>Let <var>combined</var> be <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> { [[Key]]: <var>field</var>.[[Key]], [[Kind]]: <emu-const>accessor</emu-const>, [[Get]]: <var>field</var>.[[Get]], [[Set]]: <var>existing</var>.[[Set]] }.</li></ol></li><li>Replace <var>existing</var> in <var>container</var> with <var>combined</var>.</li></ol></li><li>Else,<ol><li>Append <var>field</var> to <var>container</var>.</li></ol></li></ol></li><li>Else if <var>field</var> is a <emu-xref href=\"#sec-classfielddefinition-record-specification-type\"><a href=\"#sec-classfielddefinition-record-specification-type\">ClassFieldDefinition Record</a></emu-xref>, then<ol><li>If <emu-xref aoid=\"IsStatic\"><a href=\"#sec-static-semantics-isstatic\">IsStatic</a></emu-xref> of <var>e</var> is <emu-val>false</emu-val>, append <var>field</var> to <var>instanceFields</var>.</li><li>Else, append <var>field</var> to <var>staticFields</var>.</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s LexicalEnvironment to <var>env</var>.</li><li>If <var>classBinding</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScope</var>.InitializeBinding(<var>classBinding</var>, <var>F</var>).</li></ol></li><li>Set <var>F</var>.[[PrivateMethods]] to <var>instancePrivateMethods</var>.</li><li>Set <var>F</var>.[[Fields]] to <var>instanceFields</var>.</li><li>For each <emu-xref href=\"#sec-privateelement-specification-type\"><a href=\"#sec-privateelement-specification-type\">PrivateElement</a></emu-xref> <var>method</var> of <var>staticPrivateMethods</var>, do<ol><li>Perform !&#160;<emu-xref aoid=\"PrivateMethodOrAccessorAdd\"><a href=\"#sec-privatemethodoraccessoradd\">PrivateMethodOrAccessorAdd</a></emu-xref>(<var>method</var>, <var>F</var>).</li></ol></li><li>For each element <var>fieldRecord</var> of <var>staticFields</var>, do<ol><li>Let <var>result</var> be <emu-xref aoid=\"DefineField\"><a href=\"#sec-definefield\">DefineField</a></emu-xref>(<var>F</var>, <var>fieldRecord</var>).</li><li>If <var>result</var> is an <emu-xref href=\"#sec-completion-record-specification-type\"><a href=\"#sec-completion-record-specification-type\">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>outerPrivateEnvironment</var>.</li><li>Return <var>result</var>.</li></ol></li></ol></li><li>Set the <emu-xref href=\"#running-execution-context\"><a href=\"#running-execution-context\">running execution context</a></emu-xref>'s PrivateEnvironment to <var>outerPrivateEnvironment</var>.</li><li>Return <var>F</var>.</li></ol></emu-alg>\n\n      <div id=\"excluded-sec-default-constructor-functions\"><h1><span class=\"secnum\">15.7.12.1</span>#sec-default-constructor-functions Default Constructor Functions</h1>...</div></emu-clause>\n\n    "}, "sec-createbuiltinfunction": {"num": "10.3.3", "title": "#sec-createbuiltinfunction CreateBuiltinFunction ( behaviour, length, name, internalSlotsList [ , realm [ , prototype [ , prefix ] ] ] )", "html": "<emu-clause id=\"sec-createbuiltinfunction\" aoid=\"CreateBuiltinFunction\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-createbuiltinfunction\">#sec-createbuiltinfunction</span> CreateBuiltinFunction ( <var>behaviour</var>, <var>length</var>, <var>name</var>, <var>internalSlotsList</var> [ , <var>realm</var> [ , <var>prototype</var> [ , <var>prefix</var> ] ] ] )</h1>\n      <p>The abstract operation CreateBuiltinFunction takes arguments <var>behaviour</var>, <var>length</var> (a non-negative <emu-xref href=\"#integer\"><a href=\"#integer\">integer</a></emu-xref> or +&#8734;), <var>name</var> (a property key), and <var>internalSlotsList</var> (a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of names of internal slots) and optional arguments <var>realm</var> (a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>), <var>prototype</var> (an Object or <emu-val>null</emu-val>), and <var>prefix</var> (a String). <var>internalSlotsList</var> contains the names of additional internal slots that must be defined as part of the object. This operation creates a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref>. It performs the following steps when called:</p>\n      <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>behaviour</var> is either an <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref>, a set of algorithm steps, or some other definition of a function's behaviour provided in this specification.</li><li>If <var>realm</var> is not present, set <var>realm</var> to <emu-xref href=\"#current-realm\"><a href=\"#current-realm\">the current Realm Record</a></emu-xref>.</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>realm</var> is a <emu-xref href=\"#realm-record\"><a href=\"#realm-record\">Realm Record</a></emu-xref>.</li><li>If <var>prototype</var> is not present, set <var>prototype</var> to <var>realm</var>.[[Intrinsics]].[[<emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref>]].</li><li>Let <var>func</var> be a new built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> that, when called, performs the action described by <var>behaviour</var> using the provided arguments as the values of the corresponding parameters specified by <var>behaviour</var>. The new <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has internal slots whose names are the elements of <var>internalSlotsList</var>, and an [[InitialName]] internal slot.</li><li>Set <var>func</var>.[[Realm]] to <var>realm</var>.</li><li>Set <var>func</var>.[[Prototype]] to <var>prototype</var>.</li><li>Set <var>func</var>.[[Extensible]] to <emu-val>true</emu-val>.</li><li>Set <var>func</var>.[[InitialName]] to <emu-val>null</emu-val>.</li><li>Perform !&#160;<emu-xref aoid=\"SetFunctionLength\"><a href=\"#sec-setfunctionlength\">SetFunctionLength</a></emu-xref>(<var>func</var>, <var>length</var>).</li><li>If <var>prefix</var> is not present, then<ol><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>func</var>, <var>name</var>).</li></ol></li><li>Else,<ol><li>Perform !&#160;<emu-xref aoid=\"SetFunctionName\"><a href=\"#sec-setfunctionname\">SetFunctionName</a></emu-xref>(<var>func</var>, <var>name</var>, <var>prefix</var>).</li></ol></li><li>Return <var>func</var>.</li></ol></emu-alg>\n      <p>Each built-in function defined in this specification is created by calling the CreateBuiltinFunction abstract operation.</p>\n    </emu-clause>\n  "}, "sec-built-in-function-objects": {"num": "10.3", "title": "#sec-built-in-function-objects Built-in Function Objects", "html": "<emu-clause id=\"sec-built-in-function-objects\">\n    <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-built-in-function-objects\">#sec-built-in-function-objects</span> Built-in Function Objects</h1>\n    <p>The built-in function objects defined in this specification may be implemented as either ECMAScript function objects (<emu-xref href=\"#sec-ecmascript-function-objects\"><a href=\"#sec-ecmascript-function-objects\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-function-objects\">#sec-ecmascript-function-objects</a></emu-xref>) whose behaviour is provided using ECMAScript code or as implementation provided function exotic objects whose behaviour is provided in some other manner. In either case, the effect of calling such functions must conform to their specifications. An implementation may also provide additional built-in function objects that are not defined in this specification.</p>\n    <p>If a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is implemented as an <emu-xref href=\"#exotic-object\"><a href=\"#exotic-object\">exotic object</a></emu-xref> it must have the <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> behaviour specified in <emu-xref href=\"#sec-ordinary-object-internal-methods-and-internal-slots\"><a href=\"#sec-ordinary-object-internal-methods-and-internal-slots\" class=\"excluded-xref\" excluded-id=\"sec-ordinary-object-internal-methods-and-internal-slots\">#sec-ordinary-object-internal-methods-and-internal-slots</a></emu-xref>. All such function exotic objects also have [[Prototype]], [[Extensible]], and [[Realm]] internal slots.</p>\n    <p>Unless otherwise specified every built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> has the <emu-xref href=\"#sec-properties-of-the-function-prototype-object\"><a href=\"#sec-properties-of-the-function-prototype-object\">%Function.prototype%</a></emu-xref> object as the initial value of its [[Prototype]] internal slot.</p>\n    <p>The behaviour specified for each built-in function via algorithm steps or other means is the specification of the function body behaviour for both [[Call]] and [[Construct]] invocations of the function. However, [[Construct]] invocation is not supported by all built-in functions. For each built-in function, when invoked with [[Call]], the [[Call]] <var>thisArgument</var> provides the <emu-val>this</emu-val> value, the [[Call]] <var>argumentsList</var> provides the named parameters, and the NewTarget value is <emu-val>undefined</emu-val>. When invoked with [[Construct]], the <emu-val>this</emu-val> value is uninitialized, the [[Construct]] <var>argumentsList</var> provides the named parameters, and the [[Construct]] <var>newTarget</var> parameter provides the NewTarget value. If the built-in function is implemented as an ECMAScript <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> then this specified behaviour must be implemented by the ECMAScript code that is the body of the function. Built-in functions that are ECMAScript function objects must be strict functions. If a built-in <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> has any [[Call]] behaviour other than throwing a <emu-val>TypeError</emu-val> exception, an ECMAScript implementation of the function must be done in a manner that does not cause the function's [[IsClassConstructor]] internal slot to have the value <emu-val>true</emu-val>.</p>\n    <p>Built-in function objects that are not identified as constructors do not implement the [[Construct]] internal method unless otherwise specified in the description of a particular function. When a built-in <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref> is called as part of a <code>new</code> expression the <var>argumentsList</var> parameter of the invoked [[Construct]] internal method provides the values for the built-in <emu-xref href=\"#constructor\"><a href=\"#constructor\">constructor</a></emu-xref>'s named parameters.</p>\n    <p>Built-in functions that are not constructors do not have a <emu-val>\"prototype\"</emu-val> property unless otherwise specified in the description of a particular function.</p>\n    <p>Built-in functions have an [[InitialName]] internal slot.</p>\n    <p>If a built-in <emu-xref href=\"#function-object\"><a href=\"#function-object\">function object</a></emu-xref> is not implemented as an ECMAScript function it must provide [[Call]] and [[Construct]] internal methods that conform to the following definitions:</p>\n\n    <div id=\"excluded-sec-built-in-function-objects-call-thisargument-argumentslist\"><h1><span class=\"secnum\">10.3.1</span>#sec-built-in-function-objects-call-thisargument-argumentslist [[Call]] ( thisArgument, argumentsList )</h1>...</div><div id=\"excluded-sec-built-in-function-objects-construct-argumentslist-newtarget\"><h1><span class=\"secnum\">10.3.2</span>#sec-built-in-function-objects-construct-argumentslist-newtarget [[Construct]] ( argumentsList, newTarget )</h1>...</div><div id=\"excluded-sec-createbuiltinfunction\"><h1><span class=\"secnum\">10.3.3</span>#sec-createbuiltinfunction CreateBuiltinFunction ( behaviour, length, name, internalSlotsList [ , realm [ , prototype [ , prefix ] ] ] )</h1>...</div></emu-clause>\n\n  "}, "sec-object.fromentries": {"num": "20.1.2.7", "title": "#sec-object.fromentries Object.fromEntries ( iterable )", "html": "<emu-clause id=\"sec-object.fromentries\" oldids=\"sec-create-data-property-on-object-functions\"><span id=\"sec-create-data-property-on-object-functions\"></span>\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-object.fromentries\">#sec-object.fromentries</span> Object.fromEntries ( <var>iterable</var> )</h1>\n        <p>When the <code>fromEntries</code> method is called with argument <var>iterable</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Perform ?&#160;<emu-xref aoid=\"RequireObjectCoercible\"><a href=\"#sec-requireobjectcoercible\">RequireObjectCoercible</a></emu-xref>(<var>iterable</var>).</li><li>Let <var>obj</var> be !&#160;<emu-xref aoid=\"OrdinaryObjectCreate\"><a href=\"#sec-ordinaryobjectcreate\">OrdinaryObjectCreate</a></emu-xref>(<emu-xref href=\"#sec-properties-of-the-object-prototype-object\"><a href=\"#sec-properties-of-the-object-prototype-object\">%Object.prototype%</a></emu-xref>).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>obj</var> is an extensible <emu-xref href=\"#ordinary-object\"><a href=\"#ordinary-object\">ordinary object</a></emu-xref> with no own properties.</li><li>Let <var>closure</var> be a new <emu-xref href=\"#sec-abstract-closure\"><a href=\"#sec-abstract-closure\">Abstract Closure</a></emu-xref> with parameters (<var>key</var>, <var>value</var>) that captures <var>obj</var> and performs the following steps when called:<ol><li>Let <var>propertyKey</var> be ?&#160;<emu-xref aoid=\"ToPropertyKey\"><a href=\"#sec-topropertykey\">ToPropertyKey</a></emu-xref>(<var>key</var>).</li><li>Perform !&#160;<emu-xref aoid=\"CreateDataPropertyOrThrow\"><a href=\"#sec-createdatapropertyorthrow\">CreateDataPropertyOrThrow</a></emu-xref>(<var>obj</var>, <var>propertyKey</var>, <var>value</var>).</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Let <var>adder</var> be !&#160;<emu-xref aoid=\"CreateBuiltinFunction\"><a href=\"#sec-createbuiltinfunction\">CreateBuiltinFunction</a></emu-xref>(<var>closure</var>, 2, <emu-val>\"\"</emu-val>, &#171; &#187;).</li><li>Return ?&#160;<emu-xref aoid=\"AddEntriesFromIterable\"><a href=\"#sec-add-entries-from-iterable\">AddEntriesFromIterable</a></emu-xref>(<var>obj</var>, <var>iterable</var>, <var>adder</var>).</li></ol></emu-alg>\n        <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n          The function created for <var>adder</var> is never directly accessible to ECMAScript code.\n        </div></emu-note>\n      </emu-clause>\n\n      "}}, "figData": {}}}