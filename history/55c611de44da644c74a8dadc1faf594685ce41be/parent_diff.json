{"from": {"secList": ["sec-bigint.asintn", "sec-atomicreadmodifywrite", "sec-%typedarray%.prototype.fill", "sec-%typedarray%.prototype.set-array-offset", "sec-dataview.prototype.getbiguint64", "sec-dataview.prototype.setbigint64", "sec-atomics.wait", "sec-bigint.asuintn", "sec-multiplicative-operators-runtime-semantics-evaluation", "sec-dataview.prototype.setbiguint64", "sec-math.pow", "sec-prefix-decrement-operator-runtime-semantics-evaluation", "sec-atomics.store", "sec-dataview.prototype.getbigint64", "sec-binary-bitwise-operators-runtime-semantics-evaluation", "sec-atomics.notify", "sec-bigintbitwiseop"], "secData": {"sec-bigint.asintn": {"num": "20.2.2.1", "title": "#sec-bigint.asintn BigInt.asIntN ( bits, bigint )", "html": "<emu-clause id=\"sec-bigint.asintn\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bigint.asintn\">#sec-bigint.asintn</span> BigInt.asIntN ( <var>bits</var>, <var>bigint</var> )</h1>\n        <p>When the <code>BigInt.asIntN</code> is called with two arguments <var>bits</var> and <var>bigint</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>bits</var> be ?&#160;<emu-xref aoid=\"ToIndex\"><a href=\"#sec-toindex\">ToIndex</a></emu-xref>(<var>bits</var>).</li><li>Let <var>bigint</var> be ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-to-bigint\">ToBigInt</a></emu-xref>(<var>bigint</var>).</li><li>Let <var>mod</var> be the BigInt value that represents <var>bigint</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2<sup><var>bits</var></sup>.</li><li>If <var>mod</var> &#8805; 2<sup><var>bits</var> - 1</sup>, return <var>mod</var> - 2<sup><var>bits</var></sup>; otherwise, return <var>mod</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-atomicreadmodifywrite": {"num": "24.4.1.11", "title": "#sec-atomicreadmodifywrite AtomicReadModifyWrite ( typedArray, index, value, op )", "html": "<emu-clause id=\"sec-atomicreadmodifywrite\" aoid=\"AtomicReadModifyWrite\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomicreadmodifywrite\">#sec-atomicreadmodifywrite</span> AtomicReadModifyWrite ( <var>typedArray</var>, <var>index</var>, <var>value</var>, <var>op</var> )</h1>\n        <p>The abstract operation AtomicReadModifyWrite takes four arguments, <var>typedArray</var>, <var>index</var>, <var>value</var>, and a pure combining operation <var>op</var>. The pure combining operation <var>op</var> takes two <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values arguments and returns a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values. The operation atomically loads a value, combines it with another value, and stores the result of the combination. It returns the loaded value. It performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateSharedIntegerTypedArray\"><a href=\"#sec-validatesharedintegertypedarray\">ValidateSharedIntegerTypedArray</a></emu-xref>(<var>typedArray</var>).</li><li>Let <var>i</var> be ?&#160;<emu-xref aoid=\"ValidateAtomicAccess\"><a href=\"#sec-validateatomicaccess\">ValidateAtomicAccess</a></emu-xref>(<var>typedArray</var>, <var>index</var>).</li><li>Let <var>arrayTypeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>If <var>typedArray</var>.[[ContentType]] is <code>\"BigInt\"</code>, let <var>v</var> be ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-to-bigint\">ToBigInt</a></emu-xref>(<var>v</var>).</li><li>Otherwise, let <var>v</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>value</var>).</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>elementType</var> be the String value of the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>offset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>Let <var>indexedPosition</var> be (<var>i</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Return <emu-xref aoid=\"GetModifySetValueInBuffer\"><a href=\"#sec-getmodifysetvalueinbuffer\">GetModifySetValueInBuffer</a></emu-xref>(<var>buffer</var>, <var>indexedPosition</var>, <var>elementType</var>, <var>v</var>, <var>op</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.fill": {"num": "22.2.3.8", "title": "#sec-%typedarray%.prototype.fill %TypedArray%.prototype.fill ( value [ , start [ , end ] ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.fill\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.fill\">#sec-%typedarray%.prototype.fill</span> %TypedArray%.prototype.fill ( <var>value</var> [ , <var>start</var> [ , <var>end</var> ] ] )</h1>\n        <p>The interpretation and use of the arguments of <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.fill</code> are the same as for <code>Array.prototype.fill</code> as defined in  <emu-xref href=\"#sec-array.prototype.fill\"><a href=\"#sec-array.prototype.fill\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.fill\">#sec-array.prototype.fill</a></emu-xref>.</p>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Let <var>len</var> be <var>O</var>.[[ArrayLength]].</li><li>If <var>O</var>.[[ContentType]] is <code>\"BigInt\"</code>, let <var>value</var> be ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-to-bigint\">ToBigInt</a></emu-xref>(<var>value</var>).</li><li>Otherwise, let <var>value</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>value</var>).</li><li>Let <var>relativeStart</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>start</var>).</li><li>If <var>relativeStart</var> &lt; 0, let <var>k</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeStart</var>), 0); else let <var>k</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeStart</var>, <var>len</var>).</li><li>If <var>end</var> is <emu-val>undefined</emu-val>, let <var>relativeEnd</var> be <var>len</var>; else let <var>relativeEnd</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>end</var>).</li><li>If <var>relativeEnd</var> &lt; 0, let <var>final</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeEnd</var>), 0); else let <var>final</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeEnd</var>, <var>len</var>).</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>O</var>.[[ViewedArrayBuffer]]) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Repeat, while <var>k</var> &lt; <var>final</var><ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Perform !&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>Pk</var>, <var>value</var>, <emu-val>true</emu-val>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <var>O</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.set-array-offset": {"num": "22.2.3.23.1", "title": "#sec-%typedarray%.prototype.set-array-offset %TypedArray%.prototype.set ( array [ , offset ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.set-array-offset\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.set-array-offset\">#sec-%typedarray%.prototype.set-array-offset</span> %TypedArray%.prototype.set ( <var>array</var> [ , <var>offset</var> ] )</h1>\n          <p>Sets multiple values in this <var>TypedArray</var>, reading the values from the object <var>array</var>. The optional <var>offset</var> value indicates the first element index in this <var>TypedArray</var> where values are written. If omitted, it is assumed to be 0.</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>array</var> is any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> other than an Object with a [[TypedArrayName]] internal slot. If it is such an Object, the definition in <emu-xref href=\"#sec-%typedarray%.prototype.set-typedarray-offset\"><a href=\"#sec-%typedarray%.prototype.set-typedarray-offset\" class=\"excluded-xref\" excluded-id=\"sec-%typedarray%.prototype.set-typedarray-offset\">#sec-%typedarray%.prototype.set-typedarray-offset</a></emu-xref> applies.</li><li>Let <var>target</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>target</var>, [[TypedArrayName]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>target</var> has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>targetOffset</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>offset</var>).</li><li>If <var>targetOffset</var> &lt; 0, throw a <emu-val>RangeError</emu-val> exception.</li><li>Let <var>targetBuffer</var> be <var>target</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>targetBuffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>targetLength</var> be <var>target</var>.[[ArrayLength]].</li><li>Let <var>targetName</var> be the String value of <var>target</var>.[[TypedArrayName]].</li><li>Let <var>targetElementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>targetName</var>.</li><li>Let <var>targetType</var> be the String value of the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>targetName</var>.</li><li>Let <var>targetByteOffset</var> be <var>target</var>.[[ByteOffset]].</li><li>Let <var>src</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>array</var>).</li><li>Let <var>srcLength</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>src</var>).</li><li>If <var>srcLength</var> + <var>targetOffset</var> &gt; <var>targetLength</var>, throw a <emu-val>RangeError</emu-val> exception.</li><li>Let <var>targetByteIndex</var> be <var>targetOffset</var> &#215; <var>targetElementSize</var> + <var>targetByteOffset</var>.</li><li>Let <var>k</var> be 0.</li><li>Let <var>limit</var> be <var>targetByteIndex</var> + <var>targetElementSize</var> &#215; <var>srcLength</var>.</li><li>Repeat, while <var>targetByteIndex</var> &lt; <var>limit</var><ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>src</var>, <var>Pk</var>).</li><li>If <var>target</var>.[[ContentType]] is <code>\"BigInt\"</code>, let <var>value</var> be ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-to-bigint\">ToBigInt</a></emu-xref>(<var>value</var>).</li><li>Otherwise, let <var>value</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>value</var>).</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>targetBuffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>targetBuffer</var>, <var>targetByteIndex</var>, <var>targetType</var>, <var>value</var>, <emu-val>true</emu-val>, <code>\"Unordered\"</code>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li><li>Set <var>targetByteIndex</var> to <var>targetByteIndex</var> + <var>targetElementSize</var>.</li></ol></li><li>Return <emu-val>undefined</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-dataview.prototype.getbiguint64": {"num": "24.3.4.6", "title": "#sec-dataview.prototype.getbiguint64 DataView.prototype.getBigUint64 ( byteOffset [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.getbiguint64\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.getbiguint64\">#sec-dataview.prototype.getbiguint64</span> DataView.prototype.getBigUint64 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>getBigUint64</code> method is called with argument <var>byteOffset</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, let <var>littleEndian</var> be <emu-val>undefined</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"GetViewValue\"><a href=\"#sec-getviewvalue\">GetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <code>\"BigUint64\"</code>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-dataview.prototype.setbigint64": {"num": "24.3.4.15", "title": "#sec-dataview.prototype.setbigint64 DataView.prototype.setBigInt64 ( byteOffset, value [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.setbigint64\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.setbigint64\">#sec-dataview.prototype.setbigint64</span> DataView.prototype.setBigInt64 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>setBigInt64</code> method is called with arguments <var>byteOffset</var> and <var>value</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, let <var>littleEndian</var> be <emu-val>undefined</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"SetViewValue\"><a href=\"#sec-setviewvalue\">SetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <code>\"BigInt64\"</code>, <var>value</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-atomics.wait": {"num": "24.4.11", "title": "#sec-atomics.wait Atomics.wait ( typedArray, index, value, timeout )", "html": "<emu-clause id=\"sec-atomics.wait\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.wait\">#sec-atomics.wait</span> Atomics.wait ( <var>typedArray</var>, <var>index</var>, <var>value</var>, <var>timeout</var> )</h1>\n      <p><code>Atomics.wait</code> puts the calling <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> in a wait queue and puts it to sleep until it is notified or the sleep times out. The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateSharedIntegerTypedArray\"><a href=\"#sec-validatesharedintegertypedarray\">ValidateSharedIntegerTypedArray</a></emu-xref>(<var>typedArray</var>, <emu-val>true</emu-val>).</li><li>Let <var>i</var> be ?&#160;<emu-xref aoid=\"ValidateAtomicAccess\"><a href=\"#sec-validateatomicaccess\">ValidateAtomicAccess</a></emu-xref>(<var>typedArray</var>, <var>index</var>).</li><li>If <var>typedArray</var>.[[TypedArrayName]] is <code>\"BigInt64Array\"</code>, let <var>v</var> be ?&#160;<emu-xref aoid=\"ToBigInt64\"><a href=\"#sec-to-big-int64\">ToBigInt64</a></emu-xref>(<var>value</var>).</li><li>Otherwise, let <var>v</var> be ?&#160;<emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>(<var>value</var>).</li><li>Let <var>q</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>timeout</var>).</li><li>If <var>q</var> is <emu-val>NaN</emu-val>, let <var>t</var> be <emu-val>+&#8734;</emu-val>; else let <var>t</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>q</var>, 0).</li><li>Let <var>B</var> be <emu-xref aoid=\"AgentCanSuspend\"><a href=\"#sec-agentcansuspend\">AgentCanSuspend</a></emu-xref>().</li><li>If <var>B</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>block</var> be <var>buffer</var>.[[ArrayBufferData]].</li><li>Let <var>offset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>indexedPosition</var> be (<var>i</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Let <var>WL</var> be <emu-xref aoid=\"GetWaiterList\"><a href=\"#sec-getwaiterlist\">GetWaiterList</a></emu-xref>(<var>block</var>, <var>indexedPosition</var>).</li><li>Perform <emu-xref aoid=\"EnterCriticalSection\"><a href=\"#sec-entercriticalsection\">EnterCriticalSection</a></emu-xref>(<var>WL</var>).</li><li>Let <var>w</var> be !&#160;<emu-xref aoid=\"AtomicLoad\"><a href=\"#sec-atomicload\">AtomicLoad</a></emu-xref>(<var>typedArray</var>, <var>i</var>).</li><li>If <var>v</var> is not equal to <var>w</var>, then<ol><li>Perform <emu-xref aoid=\"LeaveCriticalSection\"><a href=\"#sec-leavecriticalsection\">LeaveCriticalSection</a></emu-xref>(<var>WL</var>).</li><li>Return the String <code>\"not-equal\"</code>.</li></ol></li><li>Let <var>W</var> be <emu-xref aoid=\"AgentSignifier\"><a href=\"#sec-agentsignifier\">AgentSignifier</a></emu-xref>().</li><li>Perform <emu-xref aoid=\"AddWaiter\"><a href=\"#sec-addwaiter\">AddWaiter</a></emu-xref>(<var>WL</var>, <var>W</var>).</li><li>Let <var>notified</var> be <emu-xref aoid=\"Suspend\"><a href=\"#sec-suspend\">Suspend</a></emu-xref>(<var>WL</var>, <var>W</var>, <var>t</var>).</li><li>If <var>notified</var> is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>W</var> is not on the list of waiters in <var>WL</var>.</li></ol></li><li>Else,<ol><li>Perform <emu-xref aoid=\"RemoveWaiter\"><a href=\"#sec-removewaiter\">RemoveWaiter</a></emu-xref>(<var>WL</var>, <var>W</var>).</li></ol></li><li>Perform <emu-xref aoid=\"LeaveCriticalSection\"><a href=\"#sec-leavecriticalsection\">LeaveCriticalSection</a></emu-xref>(<var>WL</var>).</li><li>If <var>notified</var> is <emu-val>true</emu-val>, return the String <code>\"ok\"</code>.</li><li>Return the String <code>\"timed-out\"</code>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-bigint.asuintn": {"num": "20.2.2.2", "title": "#sec-bigint.asuintn BigInt.asUintN ( bits, bigint )", "html": "<emu-clause id=\"sec-bigint.asuintn\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bigint.asuintn\">#sec-bigint.asuintn</span> BigInt.asUintN ( <var>bits</var>, <var>bigint</var> )</h1>\n        <p>When the <code>BigInt.asUintN</code> function is called with two arguments <var>bits</var> and <var>bigint</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>bits</var> be ?&#160;<emu-xref aoid=\"ToIndex\"><a href=\"#sec-toindex\">ToIndex</a></emu-xref>(<var>bits</var>).</li><li>Let <var>bigint</var> be ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-to-bigint\">ToBigInt</a></emu-xref>(<var>bigint</var>).</li><li>Return the BigInt value that represents <var>bigint</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2<sup><var>bits</var></sup>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-multiplicative-operators-runtime-semantics-evaluation": {"num": "12.7.3", "title": "#sec-multiplicative-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-multiplicative-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-multiplicative-operators-runtime-semantics-evaluation\">#sec-multiplicative-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"MultiplicativeExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"fb9fe2a0\"><emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt><emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt><emu-nt><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>left</var> be the result of evaluating <emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt>.</li><li>Let <var>leftValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>left</var>).</li><li>Let <var>right</var> be the result of evaluating <emu-nt><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a></emu-nt>.</li><li>Let <var>rightValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>right</var>).</li><li>Let <var>lnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>leftValue</var>).</li><li>Let <var>rnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>rightValue</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rnum</var>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>T</var> be <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>).</li><li>If <emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt> is <code>*</code>, return <var>T</var>::multiply(<var>lnum</var>, <var>rnum</var>).</li><li>If <emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt> is <code>/</code>, return <var>T</var>::divide(<var>lnum</var>, <var>rnum</var>).</li><li>Otherwise, <emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt> is <code>%</code>; return <var>T</var>::remainder(<var>lnum</var>, <var>rnum</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-dataview.prototype.setbiguint64": {"num": "24.3.4.16", "title": "#sec-dataview.prototype.setbiguint64 DataView.prototype.setBigUint64 ( byteOffset, value [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.setbiguint64\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.setbiguint64\">#sec-dataview.prototype.setbiguint64</span> DataView.prototype.setBigUint64 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>setBigUint64</code> method is called with arguments <var>byteOffset</var> and <var>value</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, let <var>littleEndian</var> be <emu-val>undefined</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"SetViewValue\"><a href=\"#sec-setviewvalue\">SetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <code>\"BigUint64\"</code>, <var>value</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-math.pow": {"num": "20.3.2.26", "title": "#sec-math.pow Math.pow ( base, exponent )", "html": "<emu-clause id=\"sec-math.pow\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.pow\">#sec-math.pow</span> Math.pow ( <var>base</var>, <var>exponent</var> )</h1>\n        <emu-alg><ol><li>Let <var>base</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>base</var>).</li><li>Let <var>exponent</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>exponent</var>).</li><li>Return ! Number::exponentiate(<var>base</var>, <var>exponent</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-prefix-decrement-operator-runtime-semantics-evaluation": {"num": "12.4.7.1", "title": "#sec-prefix-decrement-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-prefix-decrement-operator-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-prefix-decrement-operator-runtime-semantics-evaluation\">#sec-prefix-decrement-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"UpdateExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"3a745559\"><emu-t>--</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>expr</var> be the result of evaluating <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>.</li><li>Let <var>oldValue</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(? <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>expr</var>)).</li><li>Let <var>newValue</var> be ?&#160;<emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldvalue</var>)::subtract(<var>oldValue</var>, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>)::unit).</li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>expr</var>, <var>newValue</var>).</li><li>Return <var>newValue</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-atomics.store": {"num": "24.4.9", "title": "#sec-atomics.store Atomics.store ( typedArray, index, value )", "html": "<emu-clause id=\"sec-atomics.store\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.store\">#sec-atomics.store</span> Atomics.store ( <var>typedArray</var>, <var>index</var>, <var>value</var> )</h1>\n      <p>The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateSharedIntegerTypedArray\"><a href=\"#sec-validatesharedintegertypedarray\">ValidateSharedIntegerTypedArray</a></emu-xref>(<var>typedArray</var>).</li><li>Let <var>i</var> be ?&#160;<emu-xref aoid=\"ValidateAtomicAccess\"><a href=\"#sec-validateatomicaccess\">ValidateAtomicAccess</a></emu-xref>(<var>typedArray</var>, <var>index</var>).</li><li>If <var>arrayTypeName</var> is <code>\"BigUint64Array\"</code> or <code>\"BigInt64Array\"</code>, let <var>v</var> be ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-to-bigint\">ToBigInt</a></emu-xref>(<var>value</var>).</li><li>Otherwise, let <var>v</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>value</var>).</li><li>Let <var>arrayTypeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>elementType</var> be the String value of the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>offset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>Let <var>indexedPosition</var> be (<var>i</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>buffer</var>, <var>indexedPosition</var>, <var>elementType</var>, <var>v</var>, <emu-val>true</emu-val>, <code>\"SeqCst\"</code>).</li><li>Return <var>v</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-dataview.prototype.getbigint64": {"num": "24.3.4.5", "title": "#sec-dataview.prototype.getbigint64 DataView.prototype.getBigInt64 ( byteOffset [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.getbigint64\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.getbigint64\">#sec-dataview.prototype.getbigint64</span> DataView.prototype.getBigInt64 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>getBigInt64</code> method is called with argument <var>byteOffset</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, let <var>littleEndian</var> be <emu-val>undefined</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"GetViewValue\"><a href=\"#sec-getviewvalue\">GetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <code>\"BigInt64\"</code>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-binary-bitwise-operators-runtime-semantics-evaluation": {"num": "12.12.3", "title": "#sec-binary-bitwise-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-binary-bitwise-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-binary-bitwise-operators-runtime-semantics-evaluation\">#sec-binary-bitwise-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <p>The production  <emu-grammar type=\"example\"><emu-production name=\"A\" collapsed=\"\" id=\"prod-A\" class=\" inline\">\n    <emu-nt><a href=\"#prod-A\">A</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"262863af\"><emu-nt><a href=\"#prod-A\">A</a></emu-nt><emu-t placeholder=\"\">@</emu-t><emu-nt>B</emu-nt></emu-rhs>\n</emu-production></emu-grammar>, where @ is one of the bitwise operators in the productions above, is evaluated as follows:</p>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <var>A</var>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <var>B</var>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>lnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>lval</var>).</li><li>Let <var>rnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>rval</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rnum</var>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>T</var> be <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>).</li><li>If @ is <code>&amp;</code>, return <var>T</var>::bitwiseAND(<var>lnum</var>, <var>rnum</var>).</li><li>If @ is <code>|</code>, return <var>T</var>::bitwiseOR(<var>lnum</var>, <var>rnum</var>).</li><li>Otherwise, @ is <code>^</code>; return <var>T</var>::bitwiseXOR(<var>lnum</var>, <var>rnum</var>).\n      </li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-atomics.notify": {"num": "24.4.12", "title": "#sec-atomics.notify Atomics.notify ( typedArray, index, count )", "html": "<emu-clause id=\"sec-atomics.notify\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.notify\">#sec-atomics.notify</span> Atomics.notify ( <var>typedArray</var>, <var>index</var>, <var>count</var> )</h1>\n      <p><code>Atomics.notify</code> notifies some agents that are sleeping in the wait queue.  The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateSharedIntegerTypedArray\"><a href=\"#sec-validatesharedintegertypedarray\">ValidateSharedIntegerTypedArray</a></emu-xref>(<var>typedArray</var>, <emu-val>true</emu-val>).</li><li>Let <var>i</var> be ?&#160;<emu-xref aoid=\"ValidateAtomicAccess\"><a href=\"#sec-validateatomicaccess\">ValidateAtomicAccess</a></emu-xref>(<var>typedArray</var>, <var>index</var>).</li><li>If <var>count</var> is <emu-val>undefined</emu-val>, let <var>c</var> be <emu-val>+&#8734;</emu-val>.</li><li>Else,<ol><li>Let <var>intCount</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>count</var>).</li><li>Let <var>c</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>intCount</var>, 0).</li></ol></li><li>Let <var>block</var> be <var>buffer</var>.[[ArrayBufferData]].</li><li>Let <var>offset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>indexedPosition</var> be (<var>i</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Let <var>WL</var> be <emu-xref aoid=\"GetWaiterList\"><a href=\"#sec-getwaiterlist\">GetWaiterList</a></emu-xref>(<var>block</var>, <var>indexedPosition</var>).</li><li>Let <var>n</var> be 0.</li><li>Perform <emu-xref aoid=\"EnterCriticalSection\"><a href=\"#sec-entercriticalsection\">EnterCriticalSection</a></emu-xref>(<var>WL</var>).</li><li>Let <var>S</var> be <emu-xref aoid=\"RemoveWaiters\"><a href=\"#sec-removewaiters\">RemoveWaiters</a></emu-xref>(<var>WL</var>, <var>c</var>).</li><li>Repeat, while <var>S</var> is not an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>,<ol><li>Let <var>W</var> be the first <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> in <var>S</var>.</li><li>Remove <var>W</var> from the front of <var>S</var>.</li><li>Perform <emu-xref aoid=\"NotifyWaiter\"><a href=\"#sec-notifywaiter\">NotifyWaiter</a></emu-xref>(<var>WL</var>, <var>W</var>).</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li><li>Perform <emu-xref aoid=\"LeaveCriticalSection\"><a href=\"#sec-leavecriticalsection\">LeaveCriticalSection</a></emu-xref>(<var>WL</var>).</li><li>Return <var>n</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-bigintbitwiseop": {"num": "6.1.6.2.19", "title": "#sec-bigintbitwiseop BigIntBitwiseOp ( op, x, y )", "html": "<emu-clause id=\"sec-bigintbitwiseop\" aoid=\"BigIntBitwiseOp\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bigintbitwiseop\">#sec-bigintbitwiseop</span> BigIntBitwiseOp ( <var>op</var>, <var>x</var>, <var>y</var> )</h1>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>op</var> is <code>\"&amp;\"</code>, <code>\"|\"</code>, or <code>\"^\"</code>.</li><li>Let <var>result</var> be <emu-val>0n</emu-val>.</li><li>Let <var>shift</var> be 0.</li><li>Repeat, until (<var>x</var> = 0 or <var>x</var> = -1) and (<var>y</var> = 0 or <var>y</var> = -1),<ol><li>Let <var>xDigit</var> be <var>x</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2.</li><li>Let <var>yDigit</var> be <var>y</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2.</li><li>If <var>op</var> is <code>\"&amp;\"</code>, let <var>result</var> be <var>result</var> + 2<sup><var>shift</var></sup> &#215; <emu-xref aoid=\"BinaryAnd\"><a href=\"#sec-binaryand\">BinaryAnd</a></emu-xref>(<var>xDigit</var>, <var>yDigit</var>).</li><li>Else if <var>op</var> is <code>\"|\"</code>, let <var>result</var> be <var>result</var> + 2<sup><var>shift</var></sup> &#215; <emu-xref aoid=\"BinaryOr\"><a href=\"#sec-binaryor\">BinaryOr</a></emu-xref>(<var>xDigit</var>, <var>yDigit</var>).</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>op</var> is <code>\"^\"</code>.</li><li>Let <var>result</var> be <var>result</var> + 2<sup><var>shift</var></sup> &#215; <emu-xref aoid=\"BinaryXor\"><a href=\"#sec-binaryxor\">BinaryXor</a></emu-xref>(<var>xDigit</var>, <var>yDigit</var>).</li></ol></li><li>Let <var>shift</var> be <var>shift</var> + 1.</li><li>Let <var>x</var> be (<var>x</var> - <var>xDigit</var>) / 2.</li><li>Let <var>y</var> be (<var>y</var> - <var>yDigit</var>) / 2.</li></ol></li><li>If <var>op</var> is <code>\"&amp;\"</code>, let <var>tmp</var> be <emu-xref aoid=\"BinaryAnd\"><a href=\"#sec-binaryand\">BinaryAnd</a></emu-xref>(<var>x</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2, <var>y</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2).</li><li>Else if <var>op</var> is <code>\"|\"</code>, let <var>tmp</var> be <emu-xref aoid=\"BinaryOr\"><a href=\"#sec-binaryor\">BinaryOr</a></emu-xref>(<var>x</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2, <var>y</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2).</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>op</var> is <code>\"^\"</code>.</li><li>Let <var>tmp</var> be <emu-xref aoid=\"BinaryXor\"><a href=\"#sec-binaryxor\">BinaryXor</a></emu-xref>(<var>x</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2, <var>y</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2).</li></ol></li><li>If <var>tmp</var> &#8800; 0, then<ol><li>Let <var>result</var> be <var>result</var> - 2<sup><var>shift</var></sup>. NOTE: This extends the sign.</li></ol></li><li>Return <var>result</var>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}}, "figData": {"table-49": "Table 62"}}, "to": {"secList": ["sec-bigint.asintn", "sec-atomicreadmodifywrite", "sec-%typedarray%.prototype.fill", "sec-%typedarray%.prototype.set-array-offset", "sec-dataview.prototype.getbiguint64", "sec-dataview.prototype.setbigint64", "sec-atomics.wait", "sec-bigint.asuintn", "sec-multiplicative-operators-runtime-semantics-evaluation", "sec-dataview.prototype.setbiguint64", "sec-math.pow", "sec-prefix-decrement-operator-runtime-semantics-evaluation", "sec-atomics.store", "sec-dataview.prototype.getbigint64", "sec-binary-bitwise-operators-runtime-semantics-evaluation", "sec-atomics.notify", "sec-bigintbitwiseop"], "secData": {"sec-bigint.asintn": {"num": "20.2.2.1", "title": "#sec-bigint.asintn BigInt.asIntN ( bits, bigint )", "html": "<emu-clause id=\"sec-bigint.asintn\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bigint.asintn\">#sec-bigint.asintn</span> BigInt.asIntN ( <var>bits</var>, <var>bigint</var> )</h1>\n        <p>When the <code>BigInt.asIntN</code> is called with two arguments <var>bits</var> and <var>bigint</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Set <var>bits</var> to ?&#160;<emu-xref aoid=\"ToIndex\"><a href=\"#sec-toindex\">ToIndex</a></emu-xref>(<var>bits</var>).</li><li>Set <var>bigint</var> to ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-to-bigint\">ToBigInt</a></emu-xref>(<var>bigint</var>).</li><li>Let <var>mod</var> be the BigInt value that represents <var>bigint</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2<sup><var>bits</var></sup>.</li><li>If <var>mod</var> &#8805; 2<sup><var>bits</var> - 1</sup>, return <var>mod</var> - 2<sup><var>bits</var></sup>; otherwise, return <var>mod</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-atomicreadmodifywrite": {"num": "24.4.1.11", "title": "#sec-atomicreadmodifywrite AtomicReadModifyWrite ( typedArray, index, value, op )", "html": "<emu-clause id=\"sec-atomicreadmodifywrite\" aoid=\"AtomicReadModifyWrite\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomicreadmodifywrite\">#sec-atomicreadmodifywrite</span> AtomicReadModifyWrite ( <var>typedArray</var>, <var>index</var>, <var>value</var>, <var>op</var> )</h1>\n        <p>The abstract operation AtomicReadModifyWrite takes four arguments, <var>typedArray</var>, <var>index</var>, <var>value</var>, and a pure combining operation <var>op</var>. The pure combining operation <var>op</var> takes two <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values arguments and returns a <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref> of byte values. The operation atomically loads a value, combines it with another value, and stores the result of the combination. It returns the loaded value. It performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateSharedIntegerTypedArray\"><a href=\"#sec-validatesharedintegertypedarray\">ValidateSharedIntegerTypedArray</a></emu-xref>(<var>typedArray</var>).</li><li>Let <var>i</var> be ?&#160;<emu-xref aoid=\"ValidateAtomicAccess\"><a href=\"#sec-validateatomicaccess\">ValidateAtomicAccess</a></emu-xref>(<var>typedArray</var>, <var>index</var>).</li><li>Let <var>arrayTypeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>If <var>typedArray</var>.[[ContentType]] is <code>\"BigInt\"</code>, let <var>v</var> be ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-to-bigint\">ToBigInt</a></emu-xref>(<var>value</var>).</li><li>Otherwise, let <var>v</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>value</var>).</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>elementType</var> be the String value of the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>offset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>Let <var>indexedPosition</var> be (<var>i</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Return <emu-xref aoid=\"GetModifySetValueInBuffer\"><a href=\"#sec-getmodifysetvalueinbuffer\">GetModifySetValueInBuffer</a></emu-xref>(<var>buffer</var>, <var>indexedPosition</var>, <var>elementType</var>, <var>v</var>, <var>op</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.fill": {"num": "22.2.3.8", "title": "#sec-%typedarray%.prototype.fill %TypedArray%.prototype.fill ( value [ , start [ , end ] ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.fill\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.fill\">#sec-%typedarray%.prototype.fill</span> %TypedArray%.prototype.fill ( <var>value</var> [ , <var>start</var> [ , <var>end</var> ] ] )</h1>\n        <p>The interpretation and use of the arguments of <emu-xref href=\"#sec-%typedarray%-intrinsic-object\"><a href=\"#sec-%typedarray%-intrinsic-object\">%TypedArray%</a></emu-xref><code>.prototype.fill</code> are the same as for <code>Array.prototype.fill</code> as defined in  <emu-xref href=\"#sec-array.prototype.fill\"><a href=\"#sec-array.prototype.fill\" class=\"excluded-xref\" excluded-id=\"sec-array.prototype.fill\">#sec-array.prototype.fill</a></emu-xref>.</p>\n        <p>The following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"ValidateTypedArray\"><a href=\"#sec-validatetypedarray\">ValidateTypedArray</a></emu-xref>(<var>O</var>).</li><li>Let <var>len</var> be <var>O</var>.[[ArrayLength]].</li><li>If <var>O</var>.[[ContentType]] is <code>\"BigInt\"</code>, set <var>value</var> to ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-to-bigint\">ToBigInt</a></emu-xref>(<var>value</var>).</li><li>Otherwise, set <var>value</var> to ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>value</var>).</li><li>Let <var>relativeStart</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>start</var>).</li><li>If <var>relativeStart</var> &lt; 0, let <var>k</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeStart</var>), 0); else let <var>k</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeStart</var>, <var>len</var>).</li><li>If <var>end</var> is <emu-val>undefined</emu-val>, let <var>relativeEnd</var> be <var>len</var>; else let <var>relativeEnd</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>end</var>).</li><li>If <var>relativeEnd</var> &lt; 0, let <var>final</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>((<var>len</var> + <var>relativeEnd</var>), 0); else let <var>final</var> be <emu-xref aoid=\"min\"><a href=\"#eqn-min\">min</a></emu-xref>(<var>relativeEnd</var>, <var>len</var>).</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>O</var>.[[ViewedArrayBuffer]]) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Repeat, while <var>k</var> &lt; <var>final</var><ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Perform !&#160;<emu-xref aoid=\"Set\"><a href=\"#sec-set-o-p-v-throw\">Set</a></emu-xref>(<var>O</var>, <var>Pk</var>, <var>value</var>, <emu-val>true</emu-val>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li></ol></li><li>Return <var>O</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-%typedarray%.prototype.set-array-offset": {"num": "22.2.3.23.1", "title": "#sec-%typedarray%.prototype.set-array-offset %TypedArray%.prototype.set ( array [ , offset ] )", "html": "<emu-clause id=\"sec-%typedarray%.prototype.set-array-offset\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-%typedarray%.prototype.set-array-offset\">#sec-%typedarray%.prototype.set-array-offset</span> %TypedArray%.prototype.set ( <var>array</var> [ , <var>offset</var> ] )</h1>\n          <p>Sets multiple values in this <var>TypedArray</var>, reading the values from the object <var>array</var>. The optional <var>offset</var> value indicates the first element index in this <var>TypedArray</var> where values are written. If omitted, it is assumed to be 0.</p>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>array</var> is any <emu-xref href=\"#sec-ecmascript-language-types\"><a href=\"#sec-ecmascript-language-types\">ECMAScript language value</a></emu-xref> other than an Object with a [[TypedArrayName]] internal slot. If it is such an Object, the definition in <emu-xref href=\"#sec-%typedarray%.prototype.set-typedarray-offset\"><a href=\"#sec-%typedarray%.prototype.set-typedarray-offset\" class=\"excluded-xref\" excluded-id=\"sec-%typedarray%.prototype.set-typedarray-offset\">#sec-%typedarray%.prototype.set-typedarray-offset</a></emu-xref> applies.</li><li>Let <var>target</var> be the <emu-val>this</emu-val> value.</li><li>Perform ?&#160;<emu-xref aoid=\"RequireInternalSlot\"><a href=\"#sec-requireinternalslot\">RequireInternalSlot</a></emu-xref>(<var>target</var>, [[TypedArrayName]]).</li><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>target</var> has a [[ViewedArrayBuffer]] internal slot.</li><li>Let <var>targetOffset</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>offset</var>).</li><li>If <var>targetOffset</var> &lt; 0, throw a <emu-val>RangeError</emu-val> exception.</li><li>Let <var>targetBuffer</var> be <var>target</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>targetBuffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>targetLength</var> be <var>target</var>.[[ArrayLength]].</li><li>Let <var>targetName</var> be the String value of <var>target</var>.[[TypedArrayName]].</li><li>Let <var>targetElementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>targetName</var>.</li><li>Let <var>targetType</var> be the String value of the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>targetName</var>.</li><li>Let <var>targetByteOffset</var> be <var>target</var>.[[ByteOffset]].</li><li>Let <var>src</var> be ?&#160;<emu-xref aoid=\"ToObject\"><a href=\"#sec-toobject\">ToObject</a></emu-xref>(<var>array</var>).</li><li>Let <var>srcLength</var> be ?&#160;<emu-xref aoid=\"LengthOfArrayLike\"><a href=\"#sec-lengthofarraylike\">LengthOfArrayLike</a></emu-xref>(<var>src</var>).</li><li>If <var>srcLength</var> + <var>targetOffset</var> &gt; <var>targetLength</var>, throw a <emu-val>RangeError</emu-val> exception.</li><li>Let <var>targetByteIndex</var> be <var>targetOffset</var> &#215; <var>targetElementSize</var> + <var>targetByteOffset</var>.</li><li>Let <var>k</var> be 0.</li><li>Let <var>limit</var> be <var>targetByteIndex</var> + <var>targetElementSize</var> &#215; <var>srcLength</var>.</li><li>Repeat, while <var>targetByteIndex</var> &lt; <var>limit</var><ol><li>Let <var>Pk</var> be !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>k</var>).</li><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>src</var>, <var>Pk</var>).</li><li>If <var>target</var>.[[ContentType]] is <code>\"BigInt\"</code>, set <var>value</var> to ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-to-bigint\">ToBigInt</a></emu-xref>(<var>value</var>).</li><li>Otherwise, set <var>value</var> to ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>value</var>).</li><li>If <emu-xref aoid=\"IsDetachedBuffer\"><a href=\"#sec-isdetachedbuffer\">IsDetachedBuffer</a></emu-xref>(<var>targetBuffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>targetBuffer</var>, <var>targetByteIndex</var>, <var>targetType</var>, <var>value</var>, <emu-val>true</emu-val>, <code>\"Unordered\"</code>).</li><li>Set <var>k</var> to <var>k</var> + 1.</li><li>Set <var>targetByteIndex</var> to <var>targetByteIndex</var> + <var>targetElementSize</var>.</li></ol></li><li>Return <emu-val>undefined</emu-val>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}, "sec-dataview.prototype.getbiguint64": {"num": "24.3.4.6", "title": "#sec-dataview.prototype.getbiguint64 DataView.prototype.getBigUint64 ( byteOffset [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.getbiguint64\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.getbiguint64\">#sec-dataview.prototype.getbiguint64</span> DataView.prototype.getBigUint64 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>getBigUint64</code> method is called with argument <var>byteOffset</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>undefined</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"GetViewValue\"><a href=\"#sec-getviewvalue\">GetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <code>\"BigUint64\"</code>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-dataview.prototype.setbigint64": {"num": "24.3.4.15", "title": "#sec-dataview.prototype.setbigint64 DataView.prototype.setBigInt64 ( byteOffset, value [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.setbigint64\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.setbigint64\">#sec-dataview.prototype.setbigint64</span> DataView.prototype.setBigInt64 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>setBigInt64</code> method is called with arguments <var>byteOffset</var> and <var>value</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>undefined</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"SetViewValue\"><a href=\"#sec-setviewvalue\">SetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <code>\"BigInt64\"</code>, <var>value</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-atomics.wait": {"num": "24.4.11", "title": "#sec-atomics.wait Atomics.wait ( typedArray, index, value, timeout )", "html": "<emu-clause id=\"sec-atomics.wait\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.wait\">#sec-atomics.wait</span> Atomics.wait ( <var>typedArray</var>, <var>index</var>, <var>value</var>, <var>timeout</var> )</h1>\n      <p><code>Atomics.wait</code> puts the calling <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> in a wait queue and puts it to sleep until it is notified or the sleep times out. The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateSharedIntegerTypedArray\"><a href=\"#sec-validatesharedintegertypedarray\">ValidateSharedIntegerTypedArray</a></emu-xref>(<var>typedArray</var>, <emu-val>true</emu-val>).</li><li>Let <var>i</var> be ?&#160;<emu-xref aoid=\"ValidateAtomicAccess\"><a href=\"#sec-validateatomicaccess\">ValidateAtomicAccess</a></emu-xref>(<var>typedArray</var>, <var>index</var>).</li><li>Let <var>arrayTypeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>If <var>arrayTypeName</var> is <code>\"BigInt64Array\"</code>, let <var>v</var> be ?&#160;<emu-xref aoid=\"ToBigInt64\"><a href=\"#sec-to-big-int64\">ToBigInt64</a></emu-xref>(<var>value</var>).</li><li>Otherwise, let <var>v</var> be ?&#160;<emu-xref aoid=\"ToInt32\"><a href=\"#sec-toint32\">ToInt32</a></emu-xref>(<var>value</var>).</li><li>Let <var>q</var> be ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>timeout</var>).</li><li>If <var>q</var> is <emu-val>NaN</emu-val>, let <var>t</var> be <emu-val>+&#8734;</emu-val>; else let <var>t</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>q</var>, 0).</li><li>Let <var>B</var> be <emu-xref aoid=\"AgentCanSuspend\"><a href=\"#sec-agentcansuspend\">AgentCanSuspend</a></emu-xref>().</li><li>If <var>B</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>block</var> be <var>buffer</var>.[[ArrayBufferData]].</li><li>Let <var>offset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>indexedPosition</var> be (<var>i</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Let <var>WL</var> be <emu-xref aoid=\"GetWaiterList\"><a href=\"#sec-getwaiterlist\">GetWaiterList</a></emu-xref>(<var>block</var>, <var>indexedPosition</var>).</li><li>Perform <emu-xref aoid=\"EnterCriticalSection\"><a href=\"#sec-entercriticalsection\">EnterCriticalSection</a></emu-xref>(<var>WL</var>).</li><li>Let <var>w</var> be !&#160;<emu-xref aoid=\"AtomicLoad\"><a href=\"#sec-atomicload\">AtomicLoad</a></emu-xref>(<var>typedArray</var>, <var>i</var>).</li><li>If <var>v</var> is not equal to <var>w</var>, then<ol><li>Perform <emu-xref aoid=\"LeaveCriticalSection\"><a href=\"#sec-leavecriticalsection\">LeaveCriticalSection</a></emu-xref>(<var>WL</var>).</li><li>Return the String <code>\"not-equal\"</code>.</li></ol></li><li>Let <var>W</var> be <emu-xref aoid=\"AgentSignifier\"><a href=\"#sec-agentsignifier\">AgentSignifier</a></emu-xref>().</li><li>Perform <emu-xref aoid=\"AddWaiter\"><a href=\"#sec-addwaiter\">AddWaiter</a></emu-xref>(<var>WL</var>, <var>W</var>).</li><li>Let <var>notified</var> be <emu-xref aoid=\"Suspend\"><a href=\"#sec-suspend\">Suspend</a></emu-xref>(<var>WL</var>, <var>W</var>, <var>t</var>).</li><li>If <var>notified</var> is <emu-val>true</emu-val>, then<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>W</var> is not on the list of waiters in <var>WL</var>.</li></ol></li><li>Else,<ol><li>Perform <emu-xref aoid=\"RemoveWaiter\"><a href=\"#sec-removewaiter\">RemoveWaiter</a></emu-xref>(<var>WL</var>, <var>W</var>).</li></ol></li><li>Perform <emu-xref aoid=\"LeaveCriticalSection\"><a href=\"#sec-leavecriticalsection\">LeaveCriticalSection</a></emu-xref>(<var>WL</var>).</li><li>If <var>notified</var> is <emu-val>true</emu-val>, return the String <code>\"ok\"</code>.</li><li>Return the String <code>\"timed-out\"</code>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-bigint.asuintn": {"num": "20.2.2.2", "title": "#sec-bigint.asuintn BigInt.asUintN ( bits, bigint )", "html": "<emu-clause id=\"sec-bigint.asuintn\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bigint.asuintn\">#sec-bigint.asuintn</span> BigInt.asUintN ( <var>bits</var>, <var>bigint</var> )</h1>\n        <p>When the <code>BigInt.asUintN</code> function is called with two arguments <var>bits</var> and <var>bigint</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Set <var>bits</var> to ?&#160;<emu-xref aoid=\"ToIndex\"><a href=\"#sec-toindex\">ToIndex</a></emu-xref>(<var>bits</var>).</li><li>Set <var>bigint</var> to ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-to-bigint\">ToBigInt</a></emu-xref>(<var>bigint</var>).</li><li>Return the BigInt value that represents <var>bigint</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2<sup><var>bits</var></sup>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-multiplicative-operators-runtime-semantics-evaluation": {"num": "12.7.3", "title": "#sec-multiplicative-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-multiplicative-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-multiplicative-operators-runtime-semantics-evaluation\">#sec-multiplicative-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <emu-grammar><emu-production name=\"MultiplicativeExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"fb9fe2a0\"><emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt><emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt><emu-nt><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n      <emu-alg><ol><li>Let <var>left</var> be the result of evaluating <emu-nt><a href=\"#prod-MultiplicativeExpression\">MultiplicativeExpression</a></emu-nt>.</li><li>Let <var>leftValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>left</var>).</li><li>Let <var>right</var> be the result of evaluating <emu-nt><a href=\"#prod-ExponentiationExpression\">ExponentiationExpression</a></emu-nt>.</li><li>Let <var>rightValue</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>right</var>).</li><li>Let <var>lnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>leftValue</var>).</li><li>Let <var>rnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>rightValue</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rnum</var>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>T</var> be <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>).</li><li>If <emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt> is <code>*</code>, return <var>T</var>::multiply(<var>lnum</var>, <var>rnum</var>).</li><li>If <emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt> is <code>/</code>, return <var>T</var>::divide(<var>lnum</var>, <var>rnum</var>).</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <emu-nt><a href=\"#prod-MultiplicativeOperator\">MultiplicativeOperator</a></emu-nt> is <code>%</code>.</li><li>Return <var>T</var>::remainder(<var>lnum</var>, <var>rnum</var>).\n      </li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-dataview.prototype.setbiguint64": {"num": "24.3.4.16", "title": "#sec-dataview.prototype.setbiguint64 DataView.prototype.setBigUint64 ( byteOffset, value [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.setbiguint64\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.setbiguint64\">#sec-dataview.prototype.setbiguint64</span> DataView.prototype.setBigUint64 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>setBigUint64</code> method is called with arguments <var>byteOffset</var> and <var>value</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>undefined</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"SetViewValue\"><a href=\"#sec-setviewvalue\">SetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <code>\"BigUint64\"</code>, <var>value</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-math.pow": {"num": "20.3.2.26", "title": "#sec-math.pow Math.pow ( base, exponent )", "html": "<emu-clause id=\"sec-math.pow\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-math.pow\">#sec-math.pow</span> Math.pow ( <var>base</var>, <var>exponent</var> )</h1>\n        <emu-alg><ol><li>Set <var>base</var> to ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>base</var>).</li><li>Set <var>exponent</var> to ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>exponent</var>).</li><li>Return ! Number::exponentiate(<var>base</var>, <var>exponent</var>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-prefix-decrement-operator-runtime-semantics-evaluation": {"num": "12.4.7.1", "title": "#sec-prefix-decrement-operator-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-prefix-decrement-operator-runtime-semantics-evaluation\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-prefix-decrement-operator-runtime-semantics-evaluation\">#sec-prefix-decrement-operator-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n        <emu-grammar><emu-production name=\"UpdateExpression\" collapsed=\"\">\n    <emu-nt><a href=\"#prod-UpdateExpression\">UpdateExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"3a745559\"><emu-t>--</emu-t><emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <emu-alg><ol><li>Let <var>expr</var> be the result of evaluating <emu-nt><a href=\"#prod-UnaryExpression\">UnaryExpression</a></emu-nt>.</li><li>Let <var>oldValue</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(? <emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>expr</var>)).</li><li>Let <var>newValue</var> be !&#160;<emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldvalue</var>)::subtract(<var>oldValue</var>, <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>oldValue</var>)::unit).</li><li>Perform ?&#160;<emu-xref aoid=\"PutValue\"><a href=\"#sec-putvalue\">PutValue</a></emu-xref>(<var>expr</var>, <var>newValue</var>).</li><li>Return <var>newValue</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n    "}, "sec-atomics.store": {"num": "24.4.9", "title": "#sec-atomics.store Atomics.store ( typedArray, index, value )", "html": "<emu-clause id=\"sec-atomics.store\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.store\">#sec-atomics.store</span> Atomics.store ( <var>typedArray</var>, <var>index</var>, <var>value</var> )</h1>\n      <p>The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateSharedIntegerTypedArray\"><a href=\"#sec-validatesharedintegertypedarray\">ValidateSharedIntegerTypedArray</a></emu-xref>(<var>typedArray</var>).</li><li>Let <var>i</var> be ?&#160;<emu-xref aoid=\"ValidateAtomicAccess\"><a href=\"#sec-validateatomicaccess\">ValidateAtomicAccess</a></emu-xref>(<var>typedArray</var>, <var>index</var>).</li><li>Let <var>arrayTypeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>If <var>arrayTypeName</var> is <code>\"BigUint64Array\"</code> or <code>\"BigInt64Array\"</code>, let <var>v</var> be ?&#160;<emu-xref aoid=\"ToBigInt\"><a href=\"#sec-to-bigint\">ToBigInt</a></emu-xref>(<var>value</var>).</li><li>Otherwise, let <var>v</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>value</var>).</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>elementType</var> be the String value of the Element Type value in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>offset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>Let <var>indexedPosition</var> be (<var>i</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Perform <emu-xref aoid=\"SetValueInBuffer\"><a href=\"#sec-setvalueinbuffer\">SetValueInBuffer</a></emu-xref>(<var>buffer</var>, <var>indexedPosition</var>, <var>elementType</var>, <var>v</var>, <emu-val>true</emu-val>, <code>\"SeqCst\"</code>).</li><li>Return <var>v</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-dataview.prototype.getbigint64": {"num": "24.3.4.5", "title": "#sec-dataview.prototype.getbigint64 DataView.prototype.getBigInt64 ( byteOffset [ , littleEndian ] )", "html": "<emu-clause id=\"sec-dataview.prototype.getbigint64\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-dataview.prototype.getbigint64\">#sec-dataview.prototype.getbigint64</span> DataView.prototype.getBigInt64 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )</h1>\n        <p>When the <code>getBigInt64</code> method is called with argument <var>byteOffset</var> and optional argument <var>littleEndian</var>, the following steps are taken:</p>\n        <emu-alg><ol><li>Let <var>v</var> be the <emu-val>this</emu-val> value.</li><li>If <var>littleEndian</var> is not present, set <var>littleEndian</var> to <emu-val>undefined</emu-val>.</li><li>Return ?&#160;<emu-xref aoid=\"GetViewValue\"><a href=\"#sec-getviewvalue\">GetViewValue</a></emu-xref>(<var>v</var>, <var>byteOffset</var>, <var>littleEndian</var>, <code>\"BigInt64\"</code>).\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-binary-bitwise-operators-runtime-semantics-evaluation": {"num": "12.12.3", "title": "#sec-binary-bitwise-operators-runtime-semantics-evaluation Runtime Semantics: Evaluation", "html": "<emu-clause id=\"sec-binary-bitwise-operators-runtime-semantics-evaluation\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-binary-bitwise-operators-runtime-semantics-evaluation\">#sec-binary-bitwise-operators-runtime-semantics-evaluation</span> Runtime Semantics: Evaluation</h1>\n      <p>The production  <emu-grammar type=\"example\"><emu-production name=\"A\" collapsed=\"\" id=\"prod-A\" class=\" inline\">\n    <emu-nt><a href=\"#prod-A\">A</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"262863af\"><emu-nt><a href=\"#prod-A\">A</a></emu-nt><emu-t placeholder=\"\">@</emu-t><emu-nt>B</emu-nt></emu-rhs>\n</emu-production></emu-grammar>, where @ is one of the bitwise operators in the productions above, is evaluated as follows:</p>\n      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <var>A</var>.</li><li>Let <var>lval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <var>B</var>.</li><li>Let <var>rval</var> be ?&#160;<emu-xref aoid=\"GetValue\"><a href=\"#sec-getvalue\">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>lnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>lval</var>).</li><li>Let <var>rnum</var> be ?&#160;<emu-xref aoid=\"ToNumeric\"><a href=\"#sec-tonumeric\">ToNumeric</a></emu-xref>(<var>rval</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>) is different from <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>rnum</var>), throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>T</var> be <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>lnum</var>).</li><li>If @ is <code>&amp;</code>, return <var>T</var>::bitwiseAND(<var>lnum</var>, <var>rnum</var>).</li><li>If @ is <code>|</code>, return <var>T</var>::bitwiseOR(<var>lnum</var>, <var>rnum</var>).</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: @ is <code>^</code>.</li><li>Return <var>T</var>::bitwiseXOR(<var>lnum</var>, <var>rnum</var>).\n      </li></ol></li></ol></emu-alg>\n    </emu-clause>\n  "}, "sec-atomics.notify": {"num": "24.4.12", "title": "#sec-atomics.notify Atomics.notify ( typedArray, index, count )", "html": "<emu-clause id=\"sec-atomics.notify\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-atomics.notify\">#sec-atomics.notify</span> Atomics.notify ( <var>typedArray</var>, <var>index</var>, <var>count</var> )</h1>\n      <p><code>Atomics.notify</code> notifies some agents that are sleeping in the wait queue.  The following steps are taken:</p>\n      <emu-alg><ol><li>Let <var>buffer</var> be ?&#160;<emu-xref aoid=\"ValidateSharedIntegerTypedArray\"><a href=\"#sec-validatesharedintegertypedarray\">ValidateSharedIntegerTypedArray</a></emu-xref>(<var>typedArray</var>, <emu-val>true</emu-val>).</li><li>Let <var>i</var> be ?&#160;<emu-xref aoid=\"ValidateAtomicAccess\"><a href=\"#sec-validateatomicaccess\">ValidateAtomicAccess</a></emu-xref>(<var>typedArray</var>, <var>index</var>).</li><li>If <var>count</var> is <emu-val>undefined</emu-val>, let <var>c</var> be <emu-val>+&#8734;</emu-val>.</li><li>Else,<ol><li>Let <var>intCount</var> be ?&#160;<emu-xref aoid=\"ToInteger\"><a href=\"#sec-tointeger\">ToInteger</a></emu-xref>(<var>count</var>).</li><li>Let <var>c</var> be <emu-xref aoid=\"max\"><a href=\"#eqn-max\">max</a></emu-xref>(<var>intCount</var>, 0).</li></ol></li><li>Let <var>block</var> be <var>buffer</var>.[[ArrayBufferData]].</li><li>Let <var>offset</var> be <var>typedArray</var>.[[ByteOffset]].</li><li>Let <var>arrayTypeName</var> be <var>typedArray</var>.[[TypedArrayName]].</li><li>Let <var>elementSize</var> be the Element Size value specified in <emu-xref href=\"#table-49\"><a href=\"#table-49\" class=\"excluded-xref\" excluded-id=\"table-49\">#table-49</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>indexedPosition</var> be (<var>i</var> &#215; <var>elementSize</var>) + <var>offset</var>.</li><li>Let <var>WL</var> be <emu-xref aoid=\"GetWaiterList\"><a href=\"#sec-getwaiterlist\">GetWaiterList</a></emu-xref>(<var>block</var>, <var>indexedPosition</var>).</li><li>Let <var>n</var> be 0.</li><li>Perform <emu-xref aoid=\"EnterCriticalSection\"><a href=\"#sec-entercriticalsection\">EnterCriticalSection</a></emu-xref>(<var>WL</var>).</li><li>Let <var>S</var> be <emu-xref aoid=\"RemoveWaiters\"><a href=\"#sec-removewaiters\">RemoveWaiters</a></emu-xref>(<var>WL</var>, <var>c</var>).</li><li>Repeat, while <var>S</var> is not an empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>,<ol><li>Let <var>W</var> be the first <emu-xref href=\"#agent\"><a href=\"#agent\">agent</a></emu-xref> in <var>S</var>.</li><li>Remove <var>W</var> from the front of <var>S</var>.</li><li>Perform <emu-xref aoid=\"NotifyWaiter\"><a href=\"#sec-notifywaiter\">NotifyWaiter</a></emu-xref>(<var>WL</var>, <var>W</var>).</li><li>Set <var>n</var> to <var>n</var> + 1.</li></ol></li><li>Perform <emu-xref aoid=\"LeaveCriticalSection\"><a href=\"#sec-leavecriticalsection\">LeaveCriticalSection</a></emu-xref>(<var>WL</var>).</li><li>Return <var>n</var>.\n      </li></ol></emu-alg>\n    </emu-clause>\n\n    "}, "sec-bigintbitwiseop": {"num": "6.1.6.2.19", "title": "#sec-bigintbitwiseop BigIntBitwiseOp ( op, x, y )", "html": "<emu-clause id=\"sec-bigintbitwiseop\" aoid=\"BigIntBitwiseOp\">\n          <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-bigintbitwiseop\">#sec-bigintbitwiseop</span> BigIntBitwiseOp ( <var>op</var>, <var>x</var>, <var>y</var> )</h1>\n          <emu-alg><ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>op</var> is <code>\"&amp;\"</code>, <code>\"|\"</code>, or <code>\"^\"</code>.</li><li>Let <var>result</var> be <emu-val>0n</emu-val>.</li><li>Let <var>shift</var> be 0.</li><li>Repeat, until (<var>x</var> = 0 or <var>x</var> = -1) and (<var>y</var> = 0 or <var>y</var> = -1),<ol><li>Let <var>xDigit</var> be <var>x</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2.</li><li>Let <var>yDigit</var> be <var>y</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2.</li><li>If <var>op</var> is <code>\"&amp;\"</code>, set <var>result</var> to <var>result</var> + 2<sup><var>shift</var></sup> &#215; <emu-xref aoid=\"BinaryAnd\"><a href=\"#sec-binaryand\">BinaryAnd</a></emu-xref>(<var>xDigit</var>, <var>yDigit</var>).</li><li>Else if <var>op</var> is <code>\"|\"</code>, set <var>result</var> to <var>result</var> + 2<sup><var>shift</var></sup> &#215; <emu-xref aoid=\"BinaryOr\"><a href=\"#sec-binaryor\">BinaryOr</a></emu-xref>(<var>xDigit</var>, <var>yDigit</var>).</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>op</var> is <code>\"^\"</code>.</li><li>Set <var>result</var> to <var>result</var> + 2<sup><var>shift</var></sup> &#215; <emu-xref aoid=\"BinaryXor\"><a href=\"#sec-binaryxor\">BinaryXor</a></emu-xref>(<var>xDigit</var>, <var>yDigit</var>).</li></ol></li><li>Set <var>shift</var> to <var>shift</var> + 1.</li><li>Set <var>x</var> to (<var>x</var> - <var>xDigit</var>) / 2.</li><li>Set <var>y</var> to (<var>y</var> - <var>yDigit</var>) / 2.</li></ol></li><li>If <var>op</var> is <code>\"&amp;\"</code>, let <var>tmp</var> be <emu-xref aoid=\"BinaryAnd\"><a href=\"#sec-binaryand\">BinaryAnd</a></emu-xref>(<var>x</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2, <var>y</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2).</li><li>Else if <var>op</var> is <code>\"|\"</code>, let <var>tmp</var> be <emu-xref aoid=\"BinaryOr\"><a href=\"#sec-binaryor\">BinaryOr</a></emu-xref>(<var>x</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2, <var>y</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2).</li><li>Else,<ol><li><emu-xref href=\"#assert\"><a href=\"#assert\">Assert</a></emu-xref>: <var>op</var> is <code>\"^\"</code>.</li><li>Let <var>tmp</var> be <emu-xref aoid=\"BinaryXor\"><a href=\"#sec-binaryxor\">BinaryXor</a></emu-xref>(<var>x</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2, <var>y</var> <emu-xref aoid=\"modulo\"><a href=\"#eqn-modulo\">modulo</a></emu-xref> 2).</li></ol></li><li>If <var>tmp</var> &#8800; 0, then<ol><li>Set <var>result</var> to <var>result</var> - 2<sup><var>shift</var></sup>. NOTE: This extends the sign.</li></ol></li><li>Return <var>result</var>.\n          </li></ol></emu-alg>\n        </emu-clause>\n\n        "}}, "figData": {"table-49": "Table 62"}}}