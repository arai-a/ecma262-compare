{"from": {"secList": ["sec-serializejsonobject", "sec-serializejsonproperty"], "secData": {"sec-serializejsonobject": {"num": "24.5.2.4", "title": "#sec-serializejsonobject Runtime Semantics: SerializeJSONObject ( state, value )", "html": "<emu-clause id=\"sec-serializejsonobject\" aoid=\"SerializeJSONObject\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-serializejsonobject\">#sec-serializejsonobject</span> Runtime Semantics: SerializeJSONObject ( <var>state</var>, <var>value</var> )</h1>\n        <p>The abstract operation SerializeJSONObject with arguments <var>state</var> and <var>value</var> serializes an object. It performs the following steps:</p>\n        <emu-alg><ol><li>If <var>state</var>.[[Stack]] contains <var>value</var>, throw a <emu-val>TypeError</emu-val> exception because the structure is cyclical.</li><li>Append <var>value</var> to <var>state</var>.[[Stack]].</li><li>Let <var>stepback</var> be <var>state</var>.[[Indent]].</li><li>Set <var>state</var>.[[Indent]] to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>state</var>.[[Indent]] and <var>state</var>.[[Gap]].</li><li>If <var>state</var>.[[PropertyList]] is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>K</var> be <var>state</var>.[[PropertyList]].</li></ol></li><li>Else,<ol><li>Let <var>K</var> be ?&#160;<emu-xref aoid=\"EnumerableOwnPropertyNames\"><a href=\"#sec-enumerableownpropertynames\">EnumerableOwnPropertyNames</a></emu-xref>(<var>value</var>, <emu-const>key</emu-const>).</li></ol></li><li>Let <var>partial</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>P</var> of <var>K</var>, do<ol><li>Let <var>strP</var> be ?&#160;<emu-xref aoid=\"SerializeJSONProperty\"><a href=\"#sec-serializejsonproperty\">SerializeJSONProperty</a></emu-xref>(<var>state</var>, <var>P</var>, <var>value</var>).</li><li>If <var>strP</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>member</var> be <emu-xref aoid=\"QuoteJSONString\"><a href=\"#sec-quotejsonstring\">QuoteJSONString</a></emu-xref>(<var>P</var>).</li><li>Set <var>member</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>member</var> and <emu-val>\":\"</emu-val>.</li><li>If state_.[[Gap]] is not the empty String, then<ol><li>Set <var>member</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>member</var> and the code unit 0x0020 (SPACE).</li></ol></li><li>Set <var>member</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>member</var> and <var>strP</var>.</li><li>Append <var>member</var> to <var>partial</var>.</li></ol></li></ol></li><li>If <var>partial</var> is empty, then<ol><li>Let <var>final</var> be <emu-val>\"{}\"</emu-val>.</li></ol></li><li>Else,<ol><li>If state_.[[Gap]] is the empty String, then<ol><li>Let <var>properties</var> be the String value formed by concatenating all the element Strings of <var>partial</var> with each adjacent pair of Strings separated with the code unit 0x002C (COMMA). A comma is not inserted either before the first String or after the last String.</li><li>Let <var>final</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <emu-val>\"{\"</emu-val>, <var>properties</var>, and <emu-val>\"}\"</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>separator</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the code unit 0x002C (COMMA), the code unit 0x000A (LINE FEED), and <var>state</var>.[[Indent]].</li><li>Let <var>properties</var> be the String value formed by concatenating all the element Strings of <var>partial</var> with each adjacent pair of Strings separated with <var>separator</var>. The <var>separator</var> String is not inserted either before the first String or after the last String.</li><li>Let <var>final</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <emu-val>\"{\"</emu-val>, the code unit 0x000A (LINE FEED), <var>state</var>.[[Indent]], <var>properties</var>, the code unit 0x000A (LINE FEED), <var>stepback</var>, and <emu-val>\"}\"</emu-val>.</li></ol></li></ol></li><li>Remove the last element of <var>state</var>.[[Stack]].</li><li>Set <var>state</var>.[[Indent]] to <var>stepback</var>.</li><li>Return <var>final</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-serializejsonproperty": {"num": "24.5.2.1", "title": "#sec-serializejsonproperty Runtime Semantics: SerializeJSONProperty ( state, key, holder )", "html": "<emu-clause id=\"sec-serializejsonproperty\" aoid=\"SerializeJSONProperty\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-serializejsonproperty\">#sec-serializejsonproperty</span> Runtime Semantics: SerializeJSONProperty ( <var>state</var>, <var>key</var>, <var>holder</var> )</h1>\n        <p>The abstract operation SerializeJSONProperty with arguments <var>state</var>, <var>key</var>, and <var>holder</var> performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>holder</var>, <var>key</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Object or BigInt, then<ol><li>Let <var>toJSON</var> be ?&#160;<emu-xref aoid=\"GetV\"><a href=\"#sec-getv\">GetV</a></emu-xref>(<var>value</var>, <emu-val>\"toJSON\"</emu-val>).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>toJSON</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>value</var> to ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>toJSON</var>, <var>value</var>, &#171; <var>key</var> &#187;).</li></ol></li></ol></li><li>If <var>state</var>.[[ReplacerFunction]] is not <emu-val>undefined</emu-val>, then<ol><li>Set <var>value</var> to ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(state.[[ReplacerFunction]], <var>holder</var>, &#171; <var>key</var>, <var>value</var> &#187;).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Object, then<ol><li>If <var>value</var> has a [[NumberData]] internal slot, then<ol><li>Set <var>value</var> to ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>value</var>).</li></ol></li><li>Else if <var>value</var> has a [[StringData]] internal slot, then<ol><li>Set <var>value</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>value</var>).</li></ol></li><li>Else if <var>value</var> has a [[BooleanData]] internal slot, then<ol><li>Set <var>value</var> to <var>value</var>.[[BooleanData]].</li></ol></li><li>Else if <var>value</var> has a [[BigIntData]] internal slot, then<ol><li>Set <var>value</var> to <var>value</var>.[[BigIntData]].</li></ol></li></ol></li><li>If <var>value</var> is <emu-val>null</emu-val>, return <emu-val>\"null\"</emu-val>.</li><li>If <var>value</var> is <emu-val>true</emu-val>, return <emu-val>\"true\"</emu-val>.</li><li>If <var>value</var> is <emu-val>false</emu-val>, return <emu-val>\"false\"</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is String, return <emu-xref aoid=\"QuoteJSONString\"><a href=\"#sec-quotejsonstring\">QuoteJSONString</a></emu-xref>(<var>value</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Number, then<ol><li>If <var>value</var> is finite, return !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>value</var>).</li><li>Return <emu-val>\"null\"</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is BigInt, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Object and <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>value</var>) is <emu-val>false</emu-val>, then<ol><li>Let <var>isArray</var> be ?&#160;<emu-xref aoid=\"IsArray\"><a href=\"#sec-isarray\">IsArray</a></emu-xref>(<var>value</var>).</li><li>If <var>isArray</var> is <emu-val>true</emu-val>, return ?&#160;<emu-xref aoid=\"SerializeJSONArray\"><a href=\"#sec-serializejsonarray\">SerializeJSONArray</a></emu-xref>(<var>state</var>, <var>value</var>).</li><li>Return ?&#160;<emu-xref aoid=\"SerializeJSONObject\"><a href=\"#sec-serializejsonobject\">SerializeJSONObject</a></emu-xref>(<var>state</var>, <var>value</var>).</li></ol></li><li>Return <emu-val>undefined</emu-val>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {}}, "to": {"secList": ["sec-serializejsonobject", "sec-serializejsonproperty"], "secData": {"sec-serializejsonobject": {"num": "24.5.2.4", "title": "#sec-serializejsonobject Runtime Semantics: SerializeJSONObject ( state, value )", "html": "<emu-clause id=\"sec-serializejsonobject\" aoid=\"SerializeJSONObject\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-serializejsonobject\">#sec-serializejsonobject</span> Runtime Semantics: SerializeJSONObject ( <var>state</var>, <var>value</var> )</h1>\n        <p>The abstract operation SerializeJSONObject with arguments <var>state</var> and <var>value</var> serializes an object. It performs the following steps:</p>\n        <emu-alg><ol><li>If <var>state</var>.[[Stack]] contains <var>value</var>, throw a <emu-val>TypeError</emu-val> exception because the structure is cyclical.</li><li>Append <var>value</var> to <var>state</var>.[[Stack]].</li><li>Let <var>stepback</var> be <var>state</var>.[[Indent]].</li><li>Set <var>state</var>.[[Indent]] to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>state</var>.[[Indent]] and <var>state</var>.[[Gap]].</li><li>If <var>state</var>.[[PropertyList]] is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>K</var> be <var>state</var>.[[PropertyList]].</li></ol></li><li>Else,<ol><li>Let <var>K</var> be ?&#160;<emu-xref aoid=\"EnumerableOwnPropertyNames\"><a href=\"#sec-enumerableownpropertynames\">EnumerableOwnPropertyNames</a></emu-xref>(<var>value</var>, <emu-const>key</emu-const>).</li></ol></li><li>Let <var>partial</var> be a new empty <emu-xref href=\"#sec-list-and-record-specification-type\"><a href=\"#sec-list-and-record-specification-type\">List</a></emu-xref>.</li><li>For each element <var>P</var> of <var>K</var>, do<ol><li>Let <var>strP</var> be ?&#160;<emu-xref aoid=\"SerializeJSONProperty\"><a href=\"#sec-serializejsonproperty\">SerializeJSONProperty</a></emu-xref>(<var>state</var>, <var>P</var>, <var>value</var>).</li><li>If <var>strP</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>member</var> be <emu-xref aoid=\"QuoteJSONString\"><a href=\"#sec-quotejsonstring\">QuoteJSONString</a></emu-xref>(<var>P</var>).</li><li>Set <var>member</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>member</var> and <emu-val>\":\"</emu-val>.</li><li>If <var>state</var>.[[Gap]] is not the empty String, then<ol><li>Set <var>member</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>member</var> and the code unit 0x0020 (SPACE).</li></ol></li><li>Set <var>member</var> to the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <var>member</var> and <var>strP</var>.</li><li>Append <var>member</var> to <var>partial</var>.</li></ol></li></ol></li><li>If <var>partial</var> is empty, then<ol><li>Let <var>final</var> be <emu-val>\"{}\"</emu-val>.</li></ol></li><li>Else,<ol><li>If <var>state</var>.[[Gap]] is the empty String, then<ol><li>Let <var>properties</var> be the String value formed by concatenating all the element Strings of <var>partial</var> with each adjacent pair of Strings separated with the code unit 0x002C (COMMA). A comma is not inserted either before the first String or after the last String.</li><li>Let <var>final</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <emu-val>\"{\"</emu-val>, <var>properties</var>, and <emu-val>\"}\"</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>separator</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of the code unit 0x002C (COMMA), the code unit 0x000A (LINE FEED), and <var>state</var>.[[Indent]].</li><li>Let <var>properties</var> be the String value formed by concatenating all the element Strings of <var>partial</var> with each adjacent pair of Strings separated with <var>separator</var>. The <var>separator</var> String is not inserted either before the first String or after the last String.</li><li>Let <var>final</var> be the <emu-xref href=\"#sec-ecmascript-language-types-string-type\"><a href=\"#sec-ecmascript-language-types-string-type\">string-concatenation</a></emu-xref> of <emu-val>\"{\"</emu-val>, the code unit 0x000A (LINE FEED), <var>state</var>.[[Indent]], <var>properties</var>, the code unit 0x000A (LINE FEED), <var>stepback</var>, and <emu-val>\"}\"</emu-val>.</li></ol></li></ol></li><li>Remove the last element of <var>state</var>.[[Stack]].</li><li>Set <var>state</var>.[[Indent]] to <var>stepback</var>.</li><li>Return <var>final</var>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}, "sec-serializejsonproperty": {"num": "24.5.2.1", "title": "#sec-serializejsonproperty Runtime Semantics: SerializeJSONProperty ( state, key, holder )", "html": "<emu-clause id=\"sec-serializejsonproperty\" aoid=\"SerializeJSONProperty\">\n        <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-serializejsonproperty\">#sec-serializejsonproperty</span> Runtime Semantics: SerializeJSONProperty ( <var>state</var>, <var>key</var>, <var>holder</var> )</h1>\n        <p>The abstract operation SerializeJSONProperty with arguments <var>state</var>, <var>key</var>, and <var>holder</var> performs the following steps:</p>\n        <emu-alg><ol><li>Let <var>value</var> be ?&#160;<emu-xref aoid=\"Get\"><a href=\"#sec-get-o-p\">Get</a></emu-xref>(<var>holder</var>, <var>key</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Object or BigInt, then<ol><li>Let <var>toJSON</var> be ?&#160;<emu-xref aoid=\"GetV\"><a href=\"#sec-getv\">GetV</a></emu-xref>(<var>value</var>, <emu-val>\"toJSON\"</emu-val>).</li><li>If <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>toJSON</var>) is <emu-val>true</emu-val>, then<ol><li>Set <var>value</var> to ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>toJSON</var>, <var>value</var>, &#171; <var>key</var> &#187;).</li></ol></li></ol></li><li>If <var>state</var>.[[ReplacerFunction]] is not <emu-val>undefined</emu-val>, then<ol><li>Set <var>value</var> to ?&#160;<emu-xref aoid=\"Call\"><a href=\"#sec-call\">Call</a></emu-xref>(<var>state</var>.[[ReplacerFunction]], <var>holder</var>, &#171; <var>key</var>, <var>value</var> &#187;).</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Object, then<ol><li>If <var>value</var> has a [[NumberData]] internal slot, then<ol><li>Set <var>value</var> to ?&#160;<emu-xref aoid=\"ToNumber\"><a href=\"#sec-tonumber\">ToNumber</a></emu-xref>(<var>value</var>).</li></ol></li><li>Else if <var>value</var> has a [[StringData]] internal slot, then<ol><li>Set <var>value</var> to ?&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>value</var>).</li></ol></li><li>Else if <var>value</var> has a [[BooleanData]] internal slot, then<ol><li>Set <var>value</var> to <var>value</var>.[[BooleanData]].</li></ol></li><li>Else if <var>value</var> has a [[BigIntData]] internal slot, then<ol><li>Set <var>value</var> to <var>value</var>.[[BigIntData]].</li></ol></li></ol></li><li>If <var>value</var> is <emu-val>null</emu-val>, return <emu-val>\"null\"</emu-val>.</li><li>If <var>value</var> is <emu-val>true</emu-val>, return <emu-val>\"true\"</emu-val>.</li><li>If <var>value</var> is <emu-val>false</emu-val>, return <emu-val>\"false\"</emu-val>.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is String, return <emu-xref aoid=\"QuoteJSONString\"><a href=\"#sec-quotejsonstring\">QuoteJSONString</a></emu-xref>(<var>value</var>).</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Number, then<ol><li>If <var>value</var> is finite, return !&#160;<emu-xref aoid=\"ToString\"><a href=\"#sec-tostring\">ToString</a></emu-xref>(<var>value</var>).</li><li>Return <emu-val>\"null\"</emu-val>.</li></ol></li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is BigInt, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid=\"Type\"><a href=\"#sec-ecmascript-data-types-and-values\">Type</a></emu-xref>(<var>value</var>) is Object and <emu-xref aoid=\"IsCallable\"><a href=\"#sec-iscallable\">IsCallable</a></emu-xref>(<var>value</var>) is <emu-val>false</emu-val>, then<ol><li>Let <var>isArray</var> be ?&#160;<emu-xref aoid=\"IsArray\"><a href=\"#sec-isarray\">IsArray</a></emu-xref>(<var>value</var>).</li><li>If <var>isArray</var> is <emu-val>true</emu-val>, return ?&#160;<emu-xref aoid=\"SerializeJSONArray\"><a href=\"#sec-serializejsonarray\">SerializeJSONArray</a></emu-xref>(<var>state</var>, <var>value</var>).</li><li>Return ?&#160;<emu-xref aoid=\"SerializeJSONObject\"><a href=\"#sec-serializejsonobject\">SerializeJSONObject</a></emu-xref>(<var>state</var>, <var>value</var>).</li></ol></li><li>Return <emu-val>undefined</emu-val>.\n        </li></ol></emu-alg>\n      </emu-clause>\n\n      "}}, "figData": {}}}