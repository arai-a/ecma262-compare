{"from": {"secList": ["sec-rules-of-automatic-semicolon-insertion"], "secData": {"sec-rules-of-automatic-semicolon-insertion": {"num": "11.9.1", "title": "#sec-rules-of-automatic-semicolon-insertion Rules of Automatic Semicolon Insertion", "html": "<emu-clause id=\"sec-rules-of-automatic-semicolon-insertion\" namespace=\"asi-rules\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-rules-of-automatic-semicolon-insertion\">#sec-rules-of-automatic-semicolon-insertion</span> Rules of Automatic Semicolon Insertion</h1>\n      <p>In the following rules, &#8220;token&#8221; means the actual recognized lexical token determined using the current lexical <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> as described in clause  <emu-xref href=\"#sec-ecmascript-language-lexical-grammar\"><a href=\"#sec-ecmascript-language-lexical-grammar\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-lexical-grammar\">#sec-ecmascript-language-lexical-grammar</a></emu-xref>.</p>\n      <p>There are three basic rules of semicolon insertion:</p>\n      <ol>\n        <li>\n          <p>When, as the source text is parsed from left to right, a token (called the  <em>offending token</em>) is encountered that is not allowed by any production of the grammar, then a semicolon is automatically inserted before the offending token if one or more of the following conditions is true:</p>\n          <ul>\n            <li>\n              The offending token is separated from the previous token by at least one <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt>.\n            \n            </li>\n            <li>\n              The offending token is <code>}</code>.\n            \n            </li>\n            <li>\n              The previous token is <code>)</code> and the inserted semicolon would then be parsed as the terminating semicolon of a do-while statement (<emu-xref href=\"#sec-do-while-statement\"><a href=\"#sec-do-while-statement\" class=\"excluded-xref\" excluded-id=\"sec-do-while-statement\">#sec-do-while-statement</a></emu-xref>).\n            \n            </li>\n          </ul>\n        </li>\n        <li>\n          When, as the source text is parsed from left to right, the end of the input stream of tokens is encountered and the parser is unable to parse the input token stream as a single instance of the goal nonterminal, then a semicolon is automatically inserted at the end of the input stream.\n        \n        </li>\n        <li>\n          When, as the source text is parsed from left to right, a token is encountered that is allowed by some production of the grammar, but the production is a  <em>restricted production</em> and the token would be the first token for a terminal or nonterminal immediately following the annotation &#8220;[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]&#8221; within the restricted production (and therefore such a token is called a restricted token), and the restricted token is separated from the previous token by at least one <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt>, then a semicolon is automatically inserted before the restricted token.\n        \n        </li>\n      </ol>\n      <p>However, there is an additional overriding condition on the preceding rules: a semicolon is never inserted automatically if the semicolon would then be parsed as an empty statement or if that semicolon would become one of the two semicolons in the header of a <code>for</code> statement (see  <emu-xref href=\"#sec-for-statement\"><a href=\"#sec-for-statement\" class=\"excluded-xref\" excluded-id=\"sec-for-statement\">#sec-for-statement</a></emu-xref>).</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The following are the only restricted productions in the grammar:</p>\n        <emu-grammar><emu-production name=\"UpdateExpression\" params=\"Yield, Await\" id=\"prod-asi-rules-UpdateExpression\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-asi-rules-UpdateExpression\">UpdateExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"1063e6f2\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>++</emu-t></emu-rhs>\n    <emu-rhs a=\"c40a0c36\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>--</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"ContinueStatement\" params=\"Yield, Await\" id=\"prod-asi-rules-ContinueStatement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-asi-rules-ContinueStatement\">ContinueStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e903cf81\"><emu-t>continue</emu-t><emu-t>;</emu-t></emu-rhs>\n    <emu-rhs a=\"14858b1f\"><emu-t>continue</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"BreakStatement\" params=\"Yield, Await\" id=\"prod-asi-rules-BreakStatement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-asi-rules-BreakStatement\">BreakStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b65229e7\"><emu-t>break</emu-t><emu-t>;</emu-t></emu-rhs>\n    <emu-rhs a=\"9c83b42f\"><emu-t>break</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"ReturnStatement\" params=\"Yield, Await\" id=\"prod-asi-rules-ReturnStatement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-asi-rules-ReturnStatement\">ReturnStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0b293381\"><emu-t>return</emu-t><emu-t>;</emu-t></emu-rhs>\n    <emu-rhs a=\"b7205f0d\"><emu-t>return</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"ThrowStatement\" params=\"Yield, Await\" id=\"prod-asi-rules-ThrowStatement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-asi-rules-ThrowStatement\">ThrowStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"abf0986c\"><emu-t>throw</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"ArrowFunction\" params=\"In, Yield, Await\" id=\"prod-asi-rules-ArrowFunction\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-asi-rules-ArrowFunction\">ArrowFunction</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"bdca54b2\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>=&gt;</emu-t><emu-nt params=\"?In\"><a href=\"#prod-ConciseBody\">ConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"YieldExpression\" params=\"In, Await\" id=\"prod-asi-rules-YieldExpression\">\n    <emu-nt params=\"In, Await\"><a href=\"#prod-asi-rules-YieldExpression\">YieldExpression</a><emu-mods><emu-params>[In, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"68b64d66\"><emu-t>yield</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-nt params=\"?In, +Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, +Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"9ab6e2ea\"><emu-t>yield</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>*</emu-t><emu-nt params=\"?In, +Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, +Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <p>The practical effect of these restricted productions is as follows:</p>\n        <ul>\n          <li>\n            When a <code>++</code> or <code>--</code> token is encountered where the parser would treat it as a postfix operator, and at least one <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> occurred between the preceding token and the <code>++</code> or <code>--</code> token, then a semicolon is automatically inserted before the <code>++</code> or <code>--</code> token.\n          \n          </li>\n          <li>\n            When a <code>continue</code>, <code>break</code>, <code>return</code>, <code>throw</code>, or <code>yield</code> token is encountered and a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> is encountered before the next token, a semicolon is automatically inserted after the <code>continue</code>, <code>break</code>, <code>return</code>, <code>throw</code>, or <code>yield</code> token.\n          \n          </li>\n        </ul>\n        <p>The resulting practical advice to ECMAScript programmers is:</p>\n        <ul>\n          <li>\n            A postfix <code>++</code> or <code>--</code> operator should appear on the same line as its operand.\n          \n          </li>\n          <li>\n            An <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt> in a <code>return</code> or <code>throw</code> statement or an <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> in a <code>yield</code> expression should start on the same line as the <code>return</code>, <code>throw</code>, or <code>yield</code> token.\n          \n          </li>\n          <li>\n            A <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt> in a <code>break</code> or <code>continue</code> statement should be on the same line as the <code>break</code> or <code>continue</code> token.\n          \n          </li>\n        </ul>\n      </div></emu-note>\n    </emu-clause>\n\n    "}}, "figData": {}}, "to": {"secList": ["sec-rules-of-automatic-semicolon-insertion"], "secData": {"sec-rules-of-automatic-semicolon-insertion": {"num": "11.9.1", "title": "#sec-rules-of-automatic-semicolon-insertion Rules of Automatic Semicolon Insertion", "html": "<emu-clause id=\"sec-rules-of-automatic-semicolon-insertion\" namespace=\"asi-rules\">\n      <h1><span class=\"secnum excluded-secnum\" excluded-id=\"sec-rules-of-automatic-semicolon-insertion\">#sec-rules-of-automatic-semicolon-insertion</span> Rules of Automatic Semicolon Insertion</h1>\n      <p>In the following rules, &#8220;token&#8221; means the actual recognized lexical token determined using the current lexical <emu-xref href=\"#sec-context-free-grammars\"><a href=\"#sec-context-free-grammars\">goal symbol</a></emu-xref> as described in clause  <emu-xref href=\"#sec-ecmascript-language-lexical-grammar\"><a href=\"#sec-ecmascript-language-lexical-grammar\" class=\"excluded-xref\" excluded-id=\"sec-ecmascript-language-lexical-grammar\">#sec-ecmascript-language-lexical-grammar</a></emu-xref>.</p>\n      <p>There are three basic rules of semicolon insertion:</p>\n      <ol>\n        <li>\n          <p>When, as the source text is parsed from left to right, a token (called the  <em>offending token</em>) is encountered that is not allowed by any production of the grammar, then a semicolon is automatically inserted before the offending token if one or more of the following conditions is true:</p>\n          <ul>\n            <li>\n              The offending token is separated from the previous token by at least one <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt>.\n            \n            </li>\n            <li>\n              The offending token is <code>}</code>.\n            \n            </li>\n            <li>\n              The previous token is <code>)</code> and the inserted semicolon would then be parsed as the terminating semicolon of a do-while statement (<emu-xref href=\"#sec-do-while-statement\"><a href=\"#sec-do-while-statement\" class=\"excluded-xref\" excluded-id=\"sec-do-while-statement\">#sec-do-while-statement</a></emu-xref>).\n            \n            </li>\n          </ul>\n        </li>\n        <li>\n          When, as the source text is parsed from left to right, the end of the input stream of tokens is encountered and the parser is unable to parse the input token stream as a single instance of the goal nonterminal, then a semicolon is automatically inserted at the end of the input stream.\n        \n        </li>\n        <li>\n          When, as the source text is parsed from left to right, a token is encountered that is allowed by some production of the grammar, but the production is a  <em>restricted production</em> and the token would be the first token for a terminal or nonterminal immediately following the annotation &#8220;[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]&#8221; within the restricted production (and therefore such a token is called a restricted token), and the restricted token is separated from the previous token by at least one <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt>, then a semicolon is automatically inserted before the restricted token.\n        \n        </li>\n      </ol>\n      <p>However, there is an additional overriding condition on the preceding rules: a semicolon is never inserted automatically if the semicolon would then be parsed as an empty statement or if that semicolon would become one of the two semicolons in the header of a <code>for</code> statement (see  <emu-xref href=\"#sec-for-statement\"><a href=\"#sec-for-statement\" class=\"excluded-xref\" excluded-id=\"sec-for-statement\">#sec-for-statement</a></emu-xref>).</p>\n      <emu-note><span class=\"note\">Note</span><div class=\"note-contents\">\n        <p>The following are the only restricted productions in the grammar:</p>\n        <emu-grammar><emu-production name=\"UpdateExpression\" params=\"Yield, Await\" id=\"prod-asi-rules-UpdateExpression\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-asi-rules-UpdateExpression\">UpdateExpression</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"1063e6f2\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>++</emu-t></emu-rhs>\n    <emu-rhs a=\"c40a0c36\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LeftHandSideExpression\">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>--</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"ContinueStatement\" params=\"Yield, Await\" id=\"prod-asi-rules-ContinueStatement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-asi-rules-ContinueStatement\">ContinueStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"e903cf81\"><emu-t>continue</emu-t><emu-t>;</emu-t></emu-rhs>\n    <emu-rhs a=\"14858b1f\"><emu-t>continue</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"BreakStatement\" params=\"Yield, Await\" id=\"prod-asi-rules-BreakStatement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-asi-rules-BreakStatement\">BreakStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"b65229e7\"><emu-t>break</emu-t><emu-t>;</emu-t></emu-rhs>\n    <emu-rhs a=\"9c83b42f\"><emu-t>break</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"ReturnStatement\" params=\"Yield, Await\" id=\"prod-asi-rules-ReturnStatement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-asi-rules-ReturnStatement\">ReturnStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"0b293381\"><emu-t>return</emu-t><emu-t>;</emu-t></emu-rhs>\n    <emu-rhs a=\"b7205f0d\"><emu-t>return</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"ThrowStatement\" params=\"Yield, Await\" id=\"prod-asi-rules-ThrowStatement\">\n    <emu-nt params=\"Yield, Await\"><a href=\"#prod-asi-rules-ThrowStatement\">ThrowStatement</a><emu-mods><emu-params>[Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"abf0986c\"><emu-t>throw</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-nt params=\"+In, ?Yield, ?Await\"><a href=\"#prod-Expression\">Expression</a><emu-mods><emu-params>[+In, ?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-t>;</emu-t></emu-rhs>\n</emu-production>\n<emu-production name=\"ArrowFunction\" params=\"In, Yield, Await\" id=\"prod-asi-rules-ArrowFunction\">\n    <emu-nt params=\"In, Yield, Await\"><a href=\"#prod-asi-rules-ArrowFunction\">ArrowFunction</a><emu-mods><emu-params>[In, Yield, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"bdca54b2\"><emu-nt params=\"?Yield, ?Await\"><a href=\"#prod-ArrowParameters\">ArrowParameters</a><emu-mods><emu-params>[?Yield, ?Await]</emu-params></emu-mods></emu-nt><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>=&gt;</emu-t><emu-nt params=\"?In\"><a href=\"#prod-ConciseBody\">ConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production>\n<emu-production name=\"YieldExpression\" params=\"In, Await\" id=\"prod-asi-rules-YieldExpression\">\n    <emu-nt params=\"In, Await\"><a href=\"#prod-asi-rules-YieldExpression\">YieldExpression</a><emu-mods><emu-params>[In, Await]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a=\"d1df3360\"><emu-t>yield</emu-t></emu-rhs>\n    <emu-rhs a=\"68b64d66\"><emu-t>yield</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-nt params=\"?In, +Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, +Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n    <emu-rhs a=\"9ab6e2ea\"><emu-t>yield</emu-t><emu-gann>[no <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>*</emu-t><emu-nt params=\"?In, +Yield, ?Await\"><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a><emu-mods><emu-params>[?In, +Yield, ?Await]</emu-params></emu-mods></emu-nt></emu-rhs>\n</emu-production></emu-grammar>\n        <p>The practical effect of these restricted productions is as follows:</p>\n        <ul>\n          <li>\n            When a <code>++</code> or <code>--</code> token is encountered where the parser would treat it as a postfix operator, and at least one <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> occurred between the preceding token and the <code>++</code> or <code>--</code> token, then a semicolon is automatically inserted before the <code>++</code> or <code>--</code> token.\n          \n          </li>\n          <li>\n            When a <code>continue</code>, <code>break</code>, <code>return</code>, <code>throw</code>, or <code>yield</code> token is encountered and a <emu-nt><a href=\"#prod-LineTerminator\">LineTerminator</a></emu-nt> is encountered before the next token, a semicolon is automatically inserted after the <code>continue</code>, <code>break</code>, <code>return</code>, <code>throw</code>, or <code>yield</code> token.\n          \n          </li>\n        </ul>\n        <p>The resulting practical advice to ECMAScript programmers is:</p>\n        <ul>\n          <li>\n            A postfix <code>++</code> or <code>--</code> operator should appear on the same line as its operand.\n          \n          </li>\n          <li>\n            An <emu-nt><a href=\"#prod-Expression\">Expression</a></emu-nt> in a <code>return</code> or <code>throw</code> statement or an <emu-nt><a href=\"#prod-AssignmentExpression\">AssignmentExpression</a></emu-nt> in a <code>yield</code> expression should start on the same line as the <code>return</code>, <code>throw</code>, or <code>yield</code> token.\n          \n          </li>\n          <li>\n            A <emu-nt><a href=\"#prod-LabelIdentifier\">LabelIdentifier</a></emu-nt> in a <code>break</code> or <code>continue</code> statement should be on the same line as the <code>break</code> or <code>continue</code> token.\n          \n          </li>\n        </ul>\n      </div></emu-note>\n    </emu-clause>\n\n    "}}, "figData": {}}}