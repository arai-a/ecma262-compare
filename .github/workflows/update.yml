name: Update revisions and PRs

on:
  schedule:
    # Every 30 minutes
    - cron:  '*/30 * * * *'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Setup Python
      uses: actions/setup-python@v1
      with:
        python-version: "3.7"

    # ==== Bootstrap for history update ====

    - name: Get gh-pages hash
      run: |
        curl \
        --url https://api.github.com/repos/${{ github.repository }}/branches/gh-pages \
        --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
        --header 'content-type: application/json' | \
        python -c 'import sys; import json; print("##[set-output name=sha;]{}".format(json.loads(sys.stdin.read())["commit"]["sha"]))'
      id: pages_hash
    - name: Download gh-pages Bootstrap
      run: |
        curl -O https://raw.githubusercontent.com/${{github.repository}}/${{steps.pages_hash.outputs.sha}}/Makefile
        curl -O https://raw.githubusercontent.com/${{github.repository}}/${{steps.pages_hash.outputs.sha}}/build.py
        curl -O https://raw.githubusercontent.com/${{github.repository}}/${{steps.pages_hash.outputs.sha}}/config.json
        curl -O https://raw.githubusercontent.com/${{github.repository}}/${{steps.pages_hash.outputs.sha}}/history/revs.json
        curl -O https://raw.githubusercontent.com/${{github.repository}}/${{steps.pages_hash.outputs.sha}}/history/prs.json
        curl -O https://raw.githubusercontent.com/${{github.repository}}/${{steps.pages_hash.outputs.sha}}/requirements.txt
        mkdir -p history
        mv revs.json history
        mv prs.json history
    - name: Setup virtualenv
      run: make py-venv-bootstrap
    - name: Run gh-pages Bootstrap
      run: make bootstrap
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      id: pages_bootstrap
    - name: Remove gh-pages Bootstrap
      run: |
        rm Makefile
        rm build.py
        rm config.json
        rm -rf history
        rm requirements.txt

    # ==== Bootstrap for posting PR comments ====

    - name: Get pr-comments hash
      run: |
        curl \
        --url https://api.github.com/repos/${{ github.repository }}/branches/pr-comments \
        --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
        --header 'content-type: application/json' | \
        python -c 'import sys; import json; print("##[set-output name=sha;]{}".format(json.loads(sys.stdin.read())["commit"]["sha"]))'
      id: comments_hash
    - name: Download pr-comments Bootstrap
      run: |
        curl -O https://raw.githubusercontent.com/${{github.repository}}/${{steps.comments_hash.outputs.sha}}/Makefile
        curl -O https://raw.githubusercontent.com/${{github.repository}}/${{steps.comments_hash.outputs.sha}}/build.py
        curl -O https://raw.githubusercontent.com/${{github.repository}}/${{steps.comments_hash.outputs.sha}}/config.json
        curl -O https://raw.githubusercontent.com/${{github.repository}}/${{steps.comments_hash.outputs.sha}}/pr-comments.json
    - name: Run pr-comments Bootstrap
      run: make bootstrap
      id: comments_bootstrap
    - name: Remove pr-comments Bootstrap
      run: |
        rm Makefile
        rm build.py
        rm config.json
        rm pr-comments.json

    # ==== Checkout if history or PR comments needs to be updated ====

    - name: Checkout
      if: steps.pages_bootstrap.outputs.update == 'Yes' || steps.comments_bootstrap.outputs.update == 'Yes'
      uses: actions/checkout@v1
      with:
        ref: gh-pages
    - name: Set Git Profile
      if: steps.pages_bootstrap.outputs.update == 'Yes' || steps.comments_bootstrap.outputs.update == 'Yes'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    - name: Setup virtualenv
      if: steps.pages_bootstrap.outputs.update == 'Yes' || steps.comments_bootstrap.outputs.update == 'Yes'
      run: make py-venv

    # ==== Post PR comments for previous update ====

    - name: Checkout pr-comments
      if: steps.comments_bootstrap.outputs.update == 'Yes'
      run: |
        git checkout pr-comments
    - name: Post PR comments
      if: steps.comments_bootstrap.outputs.update == 'Yes'
      run: make post
      env:
        POST_TOKEN: ${{secrets.POST_TOKEN}}
    - name: Commit PR comments JSON
      if: steps.comments_bootstrap.outputs.update == 'Yes'
      run: |
        git add pr-comments.json
        set +e
        git diff --cached --quiet
        echo "##[set-output name=modified;]$?"
        set -e
      id: comments_post
    - name: Commit PR comments JSON
      if: steps.comments_post.outputs.modified == '1'
      run: |
        git commit -m "Post PR comments"
    - name: Push PR comments JSON changes
      if: steps.comments_post.outputs.modified == '1'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: pr-comments
        force: false

    - name: Checkout gh-pages
      if: steps.comments_bootstrap.outputs.update == 'Yes'
      run: |
        git checkout gh-pages

    # ==== Update history ====

    - name: Clone ecma262
      if: steps.pages_bootstrap.outputs.update == 'Yes'
      run: make clone
    - name: Update revisions
      if: steps.pages_bootstrap.outputs.update_revs == 'Yes'
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      run: make update5
    - name: Update PRs
      if: steps.pages_bootstrap.outputs.update_prs == 'Yes'
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      run: make pr5
      id: prs
    - name: Add history
      if: steps.pages_bootstrap.outputs.update == 'Yes'
      run: |
        git add history
        set +e
        git diff --cached --quiet
        echo "##[set-output name=modified;]$?"
        set -e
      id: pages_add
    - name: Commit history
      if: steps.pages_add.outputs.modified == '1'
      run: |
        git commit -m "update history"
    - name: Push history changes
      if: steps.pages_add.outputs.modified == '1'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: gh-pages
        force: false

    # ==== Store PR comments data for the next run ====

    - name: Checkout pr-comments
      if: steps.prs.outputs.updated_pr_list != ''
      run: |
        git checkout pr-comments
    - name: Store PR comments data
      if: steps.prs.outputs.updated_pr_list != ''
      run: make store
      env:
        UPDATED_PR_LIST: ${{ steps.prs.outputs.updated_pr_list }}
        POST_TOKEN: ${{secrets.POST_TOKEN}}
    - name: Add PR comments JSON
      if: steps.prs.outputs.updated_pr_list != ''
      run: |
        git add pr-comments.json
        set +e
        git diff --cached --quiet
        echo "##[set-output name=modified;]$?"
        set -e
      id: comments_add
    - name: Commit PR comments JSON
      if: steps.comments_add.outputs.modified == '1'
      run: |
        git commit -m "Store PR comments"
    - name: Push PR comments JSON changes
      if: steps.comments_add.outputs.modified == '1'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: pr-comments
        force: false
